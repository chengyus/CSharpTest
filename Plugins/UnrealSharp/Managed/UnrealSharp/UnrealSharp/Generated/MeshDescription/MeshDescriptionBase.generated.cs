// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MeshDescription;

[UClass]
public partial class MeshDescriptionBase : UnrealSharp.CoreUObject.Object
{
    
    static MeshDescriptionBase()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MeshDescriptionBase");
        
        
        SetVertexPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVertexPosition");
        SetVertexPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVertexPosition_NativeFunction);
        SetVertexPosition_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVertexPosition_NativeFunction, "VertexID");
        SetVertexPosition_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVertexPosition_NativeFunction, "Position");
        SetPolygonVertexInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPolygonVertexInstances");
        SetPolygonVertexInstances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPolygonVertexInstances_NativeFunction);
        SetPolygonVertexInstances_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPolygonVertexInstances_NativeFunction, "PolygonID");
        SetPolygonVertexInstances_VertexInstanceIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPolygonVertexInstances_NativeFunction, "VertexInstanceIDs");
        SetPolygonVertexInstances_VertexInstanceIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetPolygonVertexInstances_NativeFunction, "VertexInstanceIDs");
        SetPolygonPolygonGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPolygonPolygonGroup");
        SetPolygonPolygonGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPolygonPolygonGroup_NativeFunction);
        SetPolygonPolygonGroup_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPolygonPolygonGroup_NativeFunction, "PolygonID");
        SetPolygonPolygonGroup_PolygonGroupID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPolygonPolygonGroup_NativeFunction, "PolygonGroupID");
        ReversePolygonFacing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReversePolygonFacing");
        ReversePolygonFacing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReversePolygonFacing_NativeFunction);
        ReversePolygonFacing_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReversePolygonFacing_NativeFunction, "PolygonID");
        ReserveNewVertices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReserveNewVertices");
        ReserveNewVertices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReserveNewVertices_NativeFunction);
        ReserveNewVertices_NumberOfNewVertices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReserveNewVertices_NativeFunction, "NumberOfNewVertices");
        ReserveNewVertexInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReserveNewVertexInstances");
        ReserveNewVertexInstances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReserveNewVertexInstances_NativeFunction);
        ReserveNewVertexInstances_NumberOfNewVertexInstances_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReserveNewVertexInstances_NativeFunction, "NumberOfNewVertexInstances");
        ReserveNewTriangles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReserveNewTriangles");
        ReserveNewTriangles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReserveNewTriangles_NativeFunction);
        ReserveNewTriangles_NumberOfNewTriangles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReserveNewTriangles_NativeFunction, "NumberOfNewTriangles");
        ReserveNewPolygons_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReserveNewPolygons");
        ReserveNewPolygons_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReserveNewPolygons_NativeFunction);
        ReserveNewPolygons_NumberOfNewPolygons_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReserveNewPolygons_NativeFunction, "NumberOfNewPolygons");
        ReserveNewPolygonGroups_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReserveNewPolygonGroups");
        ReserveNewPolygonGroups_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReserveNewPolygonGroups_NativeFunction);
        ReserveNewPolygonGroups_NumberOfNewPolygonGroups_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReserveNewPolygonGroups_NativeFunction, "NumberOfNewPolygonGroups");
        ReserveNewEdges_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReserveNewEdges");
        ReserveNewEdges_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReserveNewEdges_NativeFunction);
        ReserveNewEdges_NumberOfNewEdges_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReserveNewEdges_NativeFunction, "NumberOfNewEdges");
        IsVertexValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsVertexValid");
        IsVertexValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsVertexValid_NativeFunction);
        IsVertexValid_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVertexValid_NativeFunction, "VertexID");
        IsVertexValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVertexValid_NativeFunction, "ReturnValue");
        IsVertexOrphaned_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsVertexOrphaned");
        IsVertexOrphaned_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsVertexOrphaned_NativeFunction);
        IsVertexOrphaned_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVertexOrphaned_NativeFunction, "VertexID");
        IsVertexOrphaned_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVertexOrphaned_NativeFunction, "ReturnValue");
        IsVertexInstanceValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsVertexInstanceValid");
        IsVertexInstanceValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsVertexInstanceValid_NativeFunction);
        IsVertexInstanceValid_VertexInstanceID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVertexInstanceValid_NativeFunction, "VertexInstanceID");
        IsVertexInstanceValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVertexInstanceValid_NativeFunction, "ReturnValue");
        IsTriangleValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsTriangleValid");
        IsTriangleValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsTriangleValid_NativeFunction);
        IsTriangleValid_TriangleID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsTriangleValid_NativeFunction, "TriangleID");
        IsTriangleValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsTriangleValid_NativeFunction, "ReturnValue");
        IsTrianglePartOfNgon_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsTrianglePartOfNgon");
        IsTrianglePartOfNgon_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsTrianglePartOfNgon_NativeFunction);
        IsTrianglePartOfNgon_TriangleID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsTrianglePartOfNgon_NativeFunction, "TriangleID");
        IsTrianglePartOfNgon_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsTrianglePartOfNgon_NativeFunction, "ReturnValue");
        IsPolygonValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPolygonValid");
        IsPolygonValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPolygonValid_NativeFunction);
        IsPolygonValid_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPolygonValid_NativeFunction, "PolygonID");
        IsPolygonValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPolygonValid_NativeFunction, "ReturnValue");
        IsPolygonGroupValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPolygonGroupValid");
        IsPolygonGroupValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPolygonGroupValid_NativeFunction);
        IsPolygonGroupValid_PolygonGroupID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPolygonGroupValid_NativeFunction, "PolygonGroupID");
        IsPolygonGroupValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPolygonGroupValid_NativeFunction, "ReturnValue");
        IsEmpty_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsEmpty");
        IsEmpty_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsEmpty_NativeFunction);
        IsEmpty_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEmpty_NativeFunction, "ReturnValue");
        IsEdgeValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsEdgeValid");
        IsEdgeValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsEdgeValid_NativeFunction);
        IsEdgeValid_EdgeID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEdgeValid_NativeFunction, "EdgeID");
        IsEdgeValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEdgeValid_NativeFunction, "ReturnValue");
        IsEdgeInternalToPolygon_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsEdgeInternalToPolygon");
        IsEdgeInternalToPolygon_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsEdgeInternalToPolygon_NativeFunction);
        IsEdgeInternalToPolygon_EdgeID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEdgeInternalToPolygon_NativeFunction, "EdgeID");
        IsEdgeInternalToPolygon_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEdgeInternalToPolygon_NativeFunction, "PolygonID");
        IsEdgeInternalToPolygon_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEdgeInternalToPolygon_NativeFunction, "ReturnValue");
        IsEdgeInternal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsEdgeInternal");
        IsEdgeInternal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsEdgeInternal_NativeFunction);
        IsEdgeInternal_EdgeID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEdgeInternal_NativeFunction, "EdgeID");
        IsEdgeInternal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEdgeInternal_NativeFunction, "ReturnValue");
        GetVertexVertexInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexVertexInstances");
        GetVertexVertexInstances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexVertexInstances_NativeFunction);
        GetVertexVertexInstances_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexVertexInstances_NativeFunction, "VertexID");
        GetVertexVertexInstances_OutVertexInstanceIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexVertexInstances_NativeFunction, "OutVertexInstanceIDs");
        GetVertexVertexInstances_OutVertexInstanceIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetVertexVertexInstances_NativeFunction, "OutVertexInstanceIDs");
        GetVertexPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexPosition");
        GetVertexPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexPosition_NativeFunction);
        GetVertexPosition_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexPosition_NativeFunction, "VertexID");
        GetVertexPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexPosition_NativeFunction, "ReturnValue");
        GetVertexPairEdge_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexPairEdge");
        GetVertexPairEdge_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexPairEdge_NativeFunction);
        GetVertexPairEdge_VertexID0_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexPairEdge_NativeFunction, "VertexID0");
        GetVertexPairEdge_VertexID1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexPairEdge_NativeFunction, "VertexID1");
        GetVertexPairEdge_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexPairEdge_NativeFunction, "ReturnValue");
        GetVertexInstanceVertex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexInstanceVertex");
        GetVertexInstanceVertex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexInstanceVertex_NativeFunction);
        GetVertexInstanceVertex_VertexInstanceID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstanceVertex_NativeFunction, "VertexInstanceID");
        GetVertexInstanceVertex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstanceVertex_NativeFunction, "ReturnValue");
        GetVertexInstancePairEdge_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexInstancePairEdge");
        GetVertexInstancePairEdge_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexInstancePairEdge_NativeFunction);
        GetVertexInstancePairEdge_VertexInstanceID0_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstancePairEdge_NativeFunction, "VertexInstanceID0");
        GetVertexInstancePairEdge_VertexInstanceID1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstancePairEdge_NativeFunction, "VertexInstanceID1");
        GetVertexInstancePairEdge_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstancePairEdge_NativeFunction, "ReturnValue");
        GetVertexInstanceForTriangleVertex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexInstanceForTriangleVertex");
        GetVertexInstanceForTriangleVertex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexInstanceForTriangleVertex_NativeFunction);
        GetVertexInstanceForTriangleVertex_TriangleID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstanceForTriangleVertex_NativeFunction, "TriangleID");
        GetVertexInstanceForTriangleVertex_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstanceForTriangleVertex_NativeFunction, "VertexID");
        GetVertexInstanceForTriangleVertex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstanceForTriangleVertex_NativeFunction, "ReturnValue");
        GetVertexInstanceForPolygonVertex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexInstanceForPolygonVertex");
        GetVertexInstanceForPolygonVertex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexInstanceForPolygonVertex_NativeFunction);
        GetVertexInstanceForPolygonVertex_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstanceForPolygonVertex_NativeFunction, "PolygonID");
        GetVertexInstanceForPolygonVertex_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstanceForPolygonVertex_NativeFunction, "VertexID");
        GetVertexInstanceForPolygonVertex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstanceForPolygonVertex_NativeFunction, "ReturnValue");
        GetVertexInstanceCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexInstanceCount");
        GetVertexInstanceCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexInstanceCount_NativeFunction);
        GetVertexInstanceCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstanceCount_NativeFunction, "ReturnValue");
        GetVertexInstanceConnectedTriangles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexInstanceConnectedTriangles");
        GetVertexInstanceConnectedTriangles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexInstanceConnectedTriangles_NativeFunction);
        GetVertexInstanceConnectedTriangles_VertexInstanceID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstanceConnectedTriangles_NativeFunction, "VertexInstanceID");
        GetVertexInstanceConnectedTriangles_OutConnectedTriangleIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstanceConnectedTriangles_NativeFunction, "OutConnectedTriangleIDs");
        GetVertexInstanceConnectedTriangles_OutConnectedTriangleIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetVertexInstanceConnectedTriangles_NativeFunction, "OutConnectedTriangleIDs");
        GetVertexInstanceConnectedPolygons_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexInstanceConnectedPolygons");
        GetVertexInstanceConnectedPolygons_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexInstanceConnectedPolygons_NativeFunction);
        GetVertexInstanceConnectedPolygons_VertexInstanceID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstanceConnectedPolygons_NativeFunction, "VertexInstanceID");
        GetVertexInstanceConnectedPolygons_OutConnectedPolygonIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexInstanceConnectedPolygons_NativeFunction, "OutConnectedPolygonIDs");
        GetVertexInstanceConnectedPolygons_OutConnectedPolygonIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetVertexInstanceConnectedPolygons_NativeFunction, "OutConnectedPolygonIDs");
        GetVertexCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexCount");
        GetVertexCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexCount_NativeFunction);
        GetVertexCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexCount_NativeFunction, "ReturnValue");
        GetVertexConnectedTriangles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexConnectedTriangles");
        GetVertexConnectedTriangles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexConnectedTriangles_NativeFunction);
        GetVertexConnectedTriangles_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexConnectedTriangles_NativeFunction, "VertexID");
        GetVertexConnectedTriangles_OutConnectedTriangleIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexConnectedTriangles_NativeFunction, "OutConnectedTriangleIDs");
        GetVertexConnectedTriangles_OutConnectedTriangleIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetVertexConnectedTriangles_NativeFunction, "OutConnectedTriangleIDs");
        GetVertexConnectedPolygons_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexConnectedPolygons");
        GetVertexConnectedPolygons_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexConnectedPolygons_NativeFunction);
        GetVertexConnectedPolygons_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexConnectedPolygons_NativeFunction, "VertexID");
        GetVertexConnectedPolygons_OutConnectedPolygonIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexConnectedPolygons_NativeFunction, "OutConnectedPolygonIDs");
        GetVertexConnectedPolygons_OutConnectedPolygonIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetVertexConnectedPolygons_NativeFunction, "OutConnectedPolygonIDs");
        GetVertexConnectedEdges_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexConnectedEdges");
        GetVertexConnectedEdges_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexConnectedEdges_NativeFunction);
        GetVertexConnectedEdges_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexConnectedEdges_NativeFunction, "VertexID");
        GetVertexConnectedEdges_OutEdgeIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexConnectedEdges_NativeFunction, "OutEdgeIDs");
        GetVertexConnectedEdges_OutEdgeIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetVertexConnectedEdges_NativeFunction, "OutEdgeIDs");
        GetVertexAdjacentVertices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVertexAdjacentVertices");
        GetVertexAdjacentVertices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVertexAdjacentVertices_NativeFunction);
        GetVertexAdjacentVertices_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexAdjacentVertices_NativeFunction, "VertexID");
        GetVertexAdjacentVertices_OutAdjacentVertexIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVertexAdjacentVertices_NativeFunction, "OutAdjacentVertexIDs");
        GetVertexAdjacentVertices_OutAdjacentVertexIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetVertexAdjacentVertices_NativeFunction, "OutAdjacentVertexIDs");
        GetTriangleVertices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTriangleVertices");
        GetTriangleVertices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTriangleVertices_NativeFunction);
        GetTriangleVertices_TriangleID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTriangleVertices_NativeFunction, "TriangleID");
        GetTriangleVertices_OutVertexIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTriangleVertices_NativeFunction, "OutVertexIDs");
        GetTriangleVertices_OutVertexIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetTriangleVertices_NativeFunction, "OutVertexIDs");
        GetTriangleVertexInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTriangleVertexInstances");
        GetTriangleVertexInstances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTriangleVertexInstances_NativeFunction);
        GetTriangleVertexInstances_TriangleID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTriangleVertexInstances_NativeFunction, "TriangleID");
        GetTriangleVertexInstances_OutVertexInstanceIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTriangleVertexInstances_NativeFunction, "OutVertexInstanceIDs");
        GetTriangleVertexInstances_OutVertexInstanceIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetTriangleVertexInstances_NativeFunction, "OutVertexInstanceIDs");
        GetTriangleVertexInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTriangleVertexInstance");
        GetTriangleVertexInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTriangleVertexInstance_NativeFunction);
        GetTriangleVertexInstance_TriangleID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTriangleVertexInstance_NativeFunction, "TriangleID");
        GetTriangleVertexInstance_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTriangleVertexInstance_NativeFunction, "Index");
        GetTriangleVertexInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTriangleVertexInstance_NativeFunction, "ReturnValue");
        GetTrianglePolygonGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTrianglePolygonGroup");
        GetTrianglePolygonGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTrianglePolygonGroup_NativeFunction);
        GetTrianglePolygonGroup_TriangleID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTrianglePolygonGroup_NativeFunction, "TriangleID");
        GetTrianglePolygonGroup_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTrianglePolygonGroup_NativeFunction, "ReturnValue");
        GetTrianglePolygon_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTrianglePolygon");
        GetTrianglePolygon_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTrianglePolygon_NativeFunction);
        GetTrianglePolygon_TriangleID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTrianglePolygon_NativeFunction, "TriangleID");
        GetTrianglePolygon_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTrianglePolygon_NativeFunction, "ReturnValue");
        GetTriangleEdges_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTriangleEdges");
        GetTriangleEdges_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTriangleEdges_NativeFunction);
        GetTriangleEdges_TriangleID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTriangleEdges_NativeFunction, "TriangleID");
        GetTriangleEdges_OutEdgeIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTriangleEdges_NativeFunction, "OutEdgeIDs");
        GetTriangleEdges_OutEdgeIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetTriangleEdges_NativeFunction, "OutEdgeIDs");
        GetTriangleCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTriangleCount");
        GetTriangleCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTriangleCount_NativeFunction);
        GetTriangleCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTriangleCount_NativeFunction, "ReturnValue");
        GetTriangleAdjacentTriangles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTriangleAdjacentTriangles");
        GetTriangleAdjacentTriangles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTriangleAdjacentTriangles_NativeFunction);
        GetTriangleAdjacentTriangles_TriangleID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTriangleAdjacentTriangles_NativeFunction, "TriangleID");
        GetTriangleAdjacentTriangles_OutTriangleIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTriangleAdjacentTriangles_NativeFunction, "OutTriangleIDs");
        GetTriangleAdjacentTriangles_OutTriangleIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetTriangleAdjacentTriangles_NativeFunction, "OutTriangleIDs");
        GetPolygonVertices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPolygonVertices");
        GetPolygonVertices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPolygonVertices_NativeFunction);
        GetPolygonVertices_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonVertices_NativeFunction, "PolygonID");
        GetPolygonVertices_OutVertexIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonVertices_NativeFunction, "OutVertexIDs");
        GetPolygonVertices_OutVertexIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPolygonVertices_NativeFunction, "OutVertexIDs");
        GetPolygonVertexInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPolygonVertexInstances");
        GetPolygonVertexInstances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPolygonVertexInstances_NativeFunction);
        GetPolygonVertexInstances_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonVertexInstances_NativeFunction, "PolygonID");
        GetPolygonVertexInstances_OutVertexInstanceIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonVertexInstances_NativeFunction, "OutVertexInstanceIDs");
        GetPolygonVertexInstances_OutVertexInstanceIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPolygonVertexInstances_NativeFunction, "OutVertexInstanceIDs");
        GetPolygonTriangles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPolygonTriangles");
        GetPolygonTriangles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPolygonTriangles_NativeFunction);
        GetPolygonTriangles_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonTriangles_NativeFunction, "PolygonID");
        GetPolygonTriangles_OutTriangleIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonTriangles_NativeFunction, "OutTriangleIDs");
        GetPolygonTriangles_OutTriangleIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPolygonTriangles_NativeFunction, "OutTriangleIDs");
        GetPolygonPolygonGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPolygonPolygonGroup");
        GetPolygonPolygonGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPolygonPolygonGroup_NativeFunction);
        GetPolygonPolygonGroup_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonPolygonGroup_NativeFunction, "PolygonID");
        GetPolygonPolygonGroup_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonPolygonGroup_NativeFunction, "ReturnValue");
        GetPolygonPerimeterEdges_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPolygonPerimeterEdges");
        GetPolygonPerimeterEdges_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPolygonPerimeterEdges_NativeFunction);
        GetPolygonPerimeterEdges_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonPerimeterEdges_NativeFunction, "PolygonID");
        GetPolygonPerimeterEdges_OutEdgeIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonPerimeterEdges_NativeFunction, "OutEdgeIDs");
        GetPolygonPerimeterEdges_OutEdgeIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPolygonPerimeterEdges_NativeFunction, "OutEdgeIDs");
        GetPolygonInternalEdges_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPolygonInternalEdges");
        GetPolygonInternalEdges_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPolygonInternalEdges_NativeFunction);
        GetPolygonInternalEdges_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonInternalEdges_NativeFunction, "PolygonID");
        GetPolygonInternalEdges_OutEdgeIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonInternalEdges_NativeFunction, "OutEdgeIDs");
        GetPolygonInternalEdges_OutEdgeIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPolygonInternalEdges_NativeFunction, "OutEdgeIDs");
        GetPolygonGroupPolygons_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPolygonGroupPolygons");
        GetPolygonGroupPolygons_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPolygonGroupPolygons_NativeFunction);
        GetPolygonGroupPolygons_PolygonGroupID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonGroupPolygons_NativeFunction, "PolygonGroupID");
        GetPolygonGroupPolygons_OutPolygonIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonGroupPolygons_NativeFunction, "OutPolygonIDs");
        GetPolygonGroupPolygons_OutPolygonIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPolygonGroupPolygons_NativeFunction, "OutPolygonIDs");
        GetPolygonGroupCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPolygonGroupCount");
        GetPolygonGroupCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPolygonGroupCount_NativeFunction);
        GetPolygonGroupCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonGroupCount_NativeFunction, "ReturnValue");
        GetPolygonCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPolygonCount");
        GetPolygonCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPolygonCount_NativeFunction);
        GetPolygonCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonCount_NativeFunction, "ReturnValue");
        GetPolygonAdjacentPolygons_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPolygonAdjacentPolygons");
        GetPolygonAdjacentPolygons_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPolygonAdjacentPolygons_NativeFunction);
        GetPolygonAdjacentPolygons_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonAdjacentPolygons_NativeFunction, "PolygonID");
        GetPolygonAdjacentPolygons_OutPolygonIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPolygonAdjacentPolygons_NativeFunction, "OutPolygonIDs");
        GetPolygonAdjacentPolygons_OutPolygonIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPolygonAdjacentPolygons_NativeFunction, "OutPolygonIDs");
        GetNumVertexVertexInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumVertexVertexInstances");
        GetNumVertexVertexInstances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumVertexVertexInstances_NativeFunction);
        GetNumVertexVertexInstances_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumVertexVertexInstances_NativeFunction, "VertexID");
        GetNumVertexVertexInstances_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumVertexVertexInstances_NativeFunction, "ReturnValue");
        GetNumVertexInstanceConnectedTriangles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumVertexInstanceConnectedTriangles");
        GetNumVertexInstanceConnectedTriangles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumVertexInstanceConnectedTriangles_NativeFunction);
        GetNumVertexInstanceConnectedTriangles_VertexInstanceID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumVertexInstanceConnectedTriangles_NativeFunction, "VertexInstanceID");
        GetNumVertexInstanceConnectedTriangles_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumVertexInstanceConnectedTriangles_NativeFunction, "ReturnValue");
        GetNumVertexInstanceConnectedPolygons_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumVertexInstanceConnectedPolygons");
        GetNumVertexInstanceConnectedPolygons_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumVertexInstanceConnectedPolygons_NativeFunction);
        GetNumVertexInstanceConnectedPolygons_VertexInstanceID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumVertexInstanceConnectedPolygons_NativeFunction, "VertexInstanceID");
        GetNumVertexInstanceConnectedPolygons_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumVertexInstanceConnectedPolygons_NativeFunction, "ReturnValue");
        GetNumVertexConnectedTriangles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumVertexConnectedTriangles");
        GetNumVertexConnectedTriangles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumVertexConnectedTriangles_NativeFunction);
        GetNumVertexConnectedTriangles_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumVertexConnectedTriangles_NativeFunction, "VertexID");
        GetNumVertexConnectedTriangles_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumVertexConnectedTriangles_NativeFunction, "ReturnValue");
        GetNumVertexConnectedPolygons_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumVertexConnectedPolygons");
        GetNumVertexConnectedPolygons_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumVertexConnectedPolygons_NativeFunction);
        GetNumVertexConnectedPolygons_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumVertexConnectedPolygons_NativeFunction, "VertexID");
        GetNumVertexConnectedPolygons_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumVertexConnectedPolygons_NativeFunction, "ReturnValue");
        GetNumVertexConnectedEdges_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumVertexConnectedEdges");
        GetNumVertexConnectedEdges_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumVertexConnectedEdges_NativeFunction);
        GetNumVertexConnectedEdges_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumVertexConnectedEdges_NativeFunction, "VertexID");
        GetNumVertexConnectedEdges_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumVertexConnectedEdges_NativeFunction, "ReturnValue");
        GetNumPolygonVertices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumPolygonVertices");
        GetNumPolygonVertices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumPolygonVertices_NativeFunction);
        GetNumPolygonVertices_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumPolygonVertices_NativeFunction, "PolygonID");
        GetNumPolygonVertices_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumPolygonVertices_NativeFunction, "ReturnValue");
        GetNumPolygonTriangles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumPolygonTriangles");
        GetNumPolygonTriangles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumPolygonTriangles_NativeFunction);
        GetNumPolygonTriangles_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumPolygonTriangles_NativeFunction, "PolygonID");
        GetNumPolygonTriangles_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumPolygonTriangles_NativeFunction, "ReturnValue");
        GetNumPolygonInternalEdges_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumPolygonInternalEdges");
        GetNumPolygonInternalEdges_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumPolygonInternalEdges_NativeFunction);
        GetNumPolygonInternalEdges_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumPolygonInternalEdges_NativeFunction, "PolygonID");
        GetNumPolygonInternalEdges_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumPolygonInternalEdges_NativeFunction, "ReturnValue");
        GetNumPolygonGroupPolygons_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumPolygonGroupPolygons");
        GetNumPolygonGroupPolygons_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumPolygonGroupPolygons_NativeFunction);
        GetNumPolygonGroupPolygons_PolygonGroupID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumPolygonGroupPolygons_NativeFunction, "PolygonGroupID");
        GetNumPolygonGroupPolygons_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumPolygonGroupPolygons_NativeFunction, "ReturnValue");
        GetNumEdgeConnectedTriangles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumEdgeConnectedTriangles");
        GetNumEdgeConnectedTriangles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumEdgeConnectedTriangles_NativeFunction);
        GetNumEdgeConnectedTriangles_EdgeID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumEdgeConnectedTriangles_NativeFunction, "EdgeID");
        GetNumEdgeConnectedTriangles_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumEdgeConnectedTriangles_NativeFunction, "ReturnValue");
        GetNumEdgeConnectedPolygons_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumEdgeConnectedPolygons");
        GetNumEdgeConnectedPolygons_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumEdgeConnectedPolygons_NativeFunction);
        GetNumEdgeConnectedPolygons_EdgeID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumEdgeConnectedPolygons_NativeFunction, "EdgeID");
        GetNumEdgeConnectedPolygons_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumEdgeConnectedPolygons_NativeFunction, "ReturnValue");
        GetEdgeVertices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEdgeVertices");
        GetEdgeVertices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEdgeVertices_NativeFunction);
        GetEdgeVertices_EdgeID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEdgeVertices_NativeFunction, "EdgeID");
        GetEdgeVertices_OutVertexIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEdgeVertices_NativeFunction, "OutVertexIDs");
        GetEdgeVertices_OutVertexIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetEdgeVertices_NativeFunction, "OutVertexIDs");
        GetEdgeVertex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEdgeVertex");
        GetEdgeVertex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEdgeVertex_NativeFunction);
        GetEdgeVertex_EdgeID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEdgeVertex_NativeFunction, "EdgeID");
        GetEdgeVertex_VertexNumber_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEdgeVertex_NativeFunction, "VertexNumber");
        GetEdgeVertex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEdgeVertex_NativeFunction, "ReturnValue");
        GetEdgeCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEdgeCount");
        GetEdgeCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEdgeCount_NativeFunction);
        GetEdgeCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEdgeCount_NativeFunction, "ReturnValue");
        GetEdgeConnectedTriangles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEdgeConnectedTriangles");
        GetEdgeConnectedTriangles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEdgeConnectedTriangles_NativeFunction);
        GetEdgeConnectedTriangles_EdgeID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEdgeConnectedTriangles_NativeFunction, "EdgeID");
        GetEdgeConnectedTriangles_OutConnectedTriangleIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEdgeConnectedTriangles_NativeFunction, "OutConnectedTriangleIDs");
        GetEdgeConnectedTriangles_OutConnectedTriangleIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetEdgeConnectedTriangles_NativeFunction, "OutConnectedTriangleIDs");
        GetEdgeConnectedPolygons_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEdgeConnectedPolygons");
        GetEdgeConnectedPolygons_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEdgeConnectedPolygons_NativeFunction);
        GetEdgeConnectedPolygons_EdgeID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEdgeConnectedPolygons_NativeFunction, "EdgeID");
        GetEdgeConnectedPolygons_OutConnectedPolygonIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEdgeConnectedPolygons_NativeFunction, "OutConnectedPolygonIDs");
        GetEdgeConnectedPolygons_OutConnectedPolygonIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetEdgeConnectedPolygons_NativeFunction, "OutConnectedPolygonIDs");
        Empty_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Empty");
        DeleteVertexInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteVertexInstance");
        DeleteVertexInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteVertexInstance_NativeFunction);
        DeleteVertexInstance_VertexInstanceID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteVertexInstance_NativeFunction, "VertexInstanceID");
        DeleteVertexInstance_OrphanedVertices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteVertexInstance_NativeFunction, "OrphanedVertices");
        DeleteVertexInstance_OrphanedVertices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DeleteVertexInstance_NativeFunction, "OrphanedVertices");
        DeleteVertex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteVertex");
        DeleteVertex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteVertex_NativeFunction);
        DeleteVertex_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteVertex_NativeFunction, "VertexID");
        DeleteTriangle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteTriangle");
        DeleteTriangle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteTriangle_NativeFunction);
        DeleteTriangle_TriangleID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteTriangle_NativeFunction, "TriangleID");
        DeleteTriangle_OrphanedEdges_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteTriangle_NativeFunction, "OrphanedEdges");
        DeleteTriangle_OrphanedEdges_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DeleteTriangle_NativeFunction, "OrphanedEdges");
        DeleteTriangle_OrphanedVertexInstances_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteTriangle_NativeFunction, "OrphanedVertexInstances");
        DeleteTriangle_OrphanedVertexInstances_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DeleteTriangle_NativeFunction, "OrphanedVertexInstances");
        DeleteTriangle_OrphanedPolygonGroupsPtr_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteTriangle_NativeFunction, "OrphanedPolygonGroupsPtr");
        DeleteTriangle_OrphanedPolygonGroupsPtr_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DeleteTriangle_NativeFunction, "OrphanedPolygonGroupsPtr");
        DeletePolygonGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeletePolygonGroup");
        DeletePolygonGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeletePolygonGroup_NativeFunction);
        DeletePolygonGroup_PolygonGroupID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeletePolygonGroup_NativeFunction, "PolygonGroupID");
        DeletePolygon_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeletePolygon");
        DeletePolygon_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeletePolygon_NativeFunction);
        DeletePolygon_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeletePolygon_NativeFunction, "PolygonID");
        DeletePolygon_OrphanedEdges_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeletePolygon_NativeFunction, "OrphanedEdges");
        DeletePolygon_OrphanedEdges_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DeletePolygon_NativeFunction, "OrphanedEdges");
        DeletePolygon_OrphanedVertexInstances_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeletePolygon_NativeFunction, "OrphanedVertexInstances");
        DeletePolygon_OrphanedVertexInstances_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DeletePolygon_NativeFunction, "OrphanedVertexInstances");
        DeletePolygon_OrphanedPolygonGroups_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeletePolygon_NativeFunction, "OrphanedPolygonGroups");
        DeletePolygon_OrphanedPolygonGroups_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DeletePolygon_NativeFunction, "OrphanedPolygonGroups");
        DeleteEdge_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteEdge");
        DeleteEdge_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteEdge_NativeFunction);
        DeleteEdge_EdgeID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteEdge_NativeFunction, "EdgeID");
        DeleteEdge_OrphanedVertices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteEdge_NativeFunction, "OrphanedVertices");
        DeleteEdge_OrphanedVertices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DeleteEdge_NativeFunction, "OrphanedVertices");
        CreateVertexWithID_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateVertexWithID");
        CreateVertexWithID_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateVertexWithID_NativeFunction);
        CreateVertexWithID_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateVertexWithID_NativeFunction, "VertexID");
        CreateVertexInstanceWithID_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateVertexInstanceWithID");
        CreateVertexInstanceWithID_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateVertexInstanceWithID_NativeFunction);
        CreateVertexInstanceWithID_VertexInstanceID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateVertexInstanceWithID_NativeFunction, "VertexInstanceID");
        CreateVertexInstanceWithID_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateVertexInstanceWithID_NativeFunction, "VertexID");
        CreateVertexInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateVertexInstance");
        CreateVertexInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateVertexInstance_NativeFunction);
        CreateVertexInstance_VertexID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateVertexInstance_NativeFunction, "VertexID");
        CreateVertexInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateVertexInstance_NativeFunction, "ReturnValue");
        CreateVertex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateVertex");
        CreateVertex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateVertex_NativeFunction);
        CreateVertex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateVertex_NativeFunction, "ReturnValue");
        CreateTriangleWithID_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateTriangleWithID");
        CreateTriangleWithID_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateTriangleWithID_NativeFunction);
        CreateTriangleWithID_TriangleID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateTriangleWithID_NativeFunction, "TriangleID");
        CreateTriangleWithID_PolygonGroupID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateTriangleWithID_NativeFunction, "PolygonGroupID");
        CreateTriangleWithID_VertexInstanceIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateTriangleWithID_NativeFunction, "VertexInstanceIDs");
        CreateTriangleWithID_VertexInstanceIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateTriangleWithID_NativeFunction, "VertexInstanceIDs");
        CreateTriangleWithID_NewEdgeIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateTriangleWithID_NativeFunction, "NewEdgeIDs");
        CreateTriangleWithID_NewEdgeIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateTriangleWithID_NativeFunction, "NewEdgeIDs");
        CreateTriangle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateTriangle");
        CreateTriangle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateTriangle_NativeFunction);
        CreateTriangle_PolygonGroupID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateTriangle_NativeFunction, "PolygonGroupID");
        CreateTriangle_VertexInstanceIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateTriangle_NativeFunction, "VertexInstanceIDs");
        CreateTriangle_VertexInstanceIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateTriangle_NativeFunction, "VertexInstanceIDs");
        CreateTriangle_NewEdgeIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateTriangle_NativeFunction, "NewEdgeIDs");
        CreateTriangle_NewEdgeIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateTriangle_NativeFunction, "NewEdgeIDs");
        CreateTriangle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateTriangle_NativeFunction, "ReturnValue");
        CreatePolygonWithID_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreatePolygonWithID");
        CreatePolygonWithID_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreatePolygonWithID_NativeFunction);
        CreatePolygonWithID_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePolygonWithID_NativeFunction, "PolygonID");
        CreatePolygonWithID_PolygonGroupID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePolygonWithID_NativeFunction, "PolygonGroupID");
        CreatePolygonWithID_VertexInstanceIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePolygonWithID_NativeFunction, "VertexInstanceIDs");
        CreatePolygonWithID_VertexInstanceIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreatePolygonWithID_NativeFunction, "VertexInstanceIDs");
        CreatePolygonWithID_NewEdgeIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePolygonWithID_NativeFunction, "NewEdgeIDs");
        CreatePolygonWithID_NewEdgeIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreatePolygonWithID_NativeFunction, "NewEdgeIDs");
        CreatePolygonGroupWithID_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreatePolygonGroupWithID");
        CreatePolygonGroupWithID_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreatePolygonGroupWithID_NativeFunction);
        CreatePolygonGroupWithID_PolygonGroupID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePolygonGroupWithID_NativeFunction, "PolygonGroupID");
        CreatePolygonGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreatePolygonGroup");
        CreatePolygonGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreatePolygonGroup_NativeFunction);
        CreatePolygonGroup_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePolygonGroup_NativeFunction, "ReturnValue");
        CreatePolygon_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreatePolygon");
        CreatePolygon_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreatePolygon_NativeFunction);
        CreatePolygon_PolygonGroupID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePolygon_NativeFunction, "PolygonGroupID");
        CreatePolygon_VertexInstanceIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePolygon_NativeFunction, "VertexInstanceIDs");
        CreatePolygon_VertexInstanceIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreatePolygon_NativeFunction, "VertexInstanceIDs");
        CreatePolygon_NewEdgeIDs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePolygon_NativeFunction, "NewEdgeIDs");
        CreatePolygon_NewEdgeIDs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreatePolygon_NativeFunction, "NewEdgeIDs");
        CreatePolygon_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePolygon_NativeFunction, "ReturnValue");
        CreateEdgeWithID_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateEdgeWithID");
        CreateEdgeWithID_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateEdgeWithID_NativeFunction);
        CreateEdgeWithID_EdgeID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateEdgeWithID_NativeFunction, "EdgeID");
        CreateEdgeWithID_VertexID0_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateEdgeWithID_NativeFunction, "VertexID0");
        CreateEdgeWithID_VertexID1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateEdgeWithID_NativeFunction, "VertexID1");
        CreateEdge_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateEdge");
        CreateEdge_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateEdge_NativeFunction);
        CreateEdge_VertexID0_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateEdge_NativeFunction, "VertexID0");
        CreateEdge_VertexID1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateEdge_NativeFunction, "VertexID1");
        CreateEdge_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateEdge_NativeFunction, "ReturnValue");
        ComputePolygonTriangulation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ComputePolygonTriangulation");
        ComputePolygonTriangulation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ComputePolygonTriangulation_NativeFunction);
        ComputePolygonTriangulation_PolygonID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComputePolygonTriangulation_NativeFunction, "PolygonID");
        
        
    }
    
    protected MeshDescriptionBase(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/MeshDescription.MeshDescriptionBase:SetVertexPosition
    static readonly IntPtr SetVertexPosition_NativeFunction;
    static readonly int SetVertexPosition_ParamsSize;
    static readonly int SetVertexPosition_VertexID_Offset;
    static readonly int SetVertexPosition_Position_Offset;
    
    public void SetVertexPosition(UnrealSharp.MeshDescription.VertexID vertexID, System.DoubleNumerics.Vector3 position)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVertexPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, SetVertexPosition_VertexID_Offset), 0, null, vertexID);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetVertexPosition_Position_Offset), 0, null, position);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVertexPosition_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:SetPolygonVertexInstances
    static readonly IntPtr SetPolygonVertexInstances_NativeFunction;
    static readonly int SetPolygonVertexInstances_ParamsSize;
    static readonly int SetPolygonVertexInstances_PolygonID_Offset;
    static readonly int SetPolygonVertexInstances_VertexInstanceIDs_Offset;
    static readonly int SetPolygonVertexInstances_VertexInstanceIDs_ElementSize;
    
    public void SetPolygonVertexInstances(UnrealSharp.MeshDescription.PolygonID polygonID, System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexInstanceID> vertexInstanceIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPolygonVertexInstances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, SetPolygonVertexInstances_PolygonID_Offset), 0, null, polygonID);
            IntPtr VertexInstanceIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, SetPolygonVertexInstances_VertexInstanceIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> VertexInstanceIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID>(1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.FromNative, SetPolygonVertexInstances_VertexInstanceIDs_ElementSize);
            VertexInstanceIDs_Marshaler.ToNative(VertexInstanceIDs_NativeBuffer, 0, null, vertexInstanceIDs);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPolygonVertexInstances_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:SetPolygonPolygonGroup
    static readonly IntPtr SetPolygonPolygonGroup_NativeFunction;
    static readonly int SetPolygonPolygonGroup_ParamsSize;
    static readonly int SetPolygonPolygonGroup_PolygonID_Offset;
    static readonly int SetPolygonPolygonGroup_PolygonGroupID_Offset;
    
    public void SetPolygonPolygonGroup(UnrealSharp.MeshDescription.PolygonID polygonID, UnrealSharp.MeshDescription.PolygonGroupID polygonGroupID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPolygonPolygonGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, SetPolygonPolygonGroup_PolygonID_Offset), 0, null, polygonID);
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.ToNative(IntPtr.Add(ParamsBuffer, SetPolygonPolygonGroup_PolygonGroupID_Offset), 0, null, polygonGroupID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPolygonPolygonGroup_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:ReversePolygonFacing
    static readonly IntPtr ReversePolygonFacing_NativeFunction;
    static readonly int ReversePolygonFacing_ParamsSize;
    static readonly int ReversePolygonFacing_PolygonID_Offset;
    
    public void ReversePolygonFacing(UnrealSharp.MeshDescription.PolygonID polygonID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReversePolygonFacing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, ReversePolygonFacing_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReversePolygonFacing_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:ReserveNewVertices
    static readonly IntPtr ReserveNewVertices_NativeFunction;
    static readonly int ReserveNewVertices_ParamsSize;
    static readonly int ReserveNewVertices_NumberOfNewVertices_Offset;
    
    public void ReserveNewVertices(int numberOfNewVertices)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReserveNewVertices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReserveNewVertices_NumberOfNewVertices_Offset), 0, null, numberOfNewVertices);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReserveNewVertices_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:ReserveNewVertexInstances
    static readonly IntPtr ReserveNewVertexInstances_NativeFunction;
    static readonly int ReserveNewVertexInstances_ParamsSize;
    static readonly int ReserveNewVertexInstances_NumberOfNewVertexInstances_Offset;
    
    public void ReserveNewVertexInstances(int numberOfNewVertexInstances)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReserveNewVertexInstances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReserveNewVertexInstances_NumberOfNewVertexInstances_Offset), 0, null, numberOfNewVertexInstances);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReserveNewVertexInstances_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:ReserveNewTriangles
    static readonly IntPtr ReserveNewTriangles_NativeFunction;
    static readonly int ReserveNewTriangles_ParamsSize;
    static readonly int ReserveNewTriangles_NumberOfNewTriangles_Offset;
    
    public void ReserveNewTriangles(int numberOfNewTriangles)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReserveNewTriangles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReserveNewTriangles_NumberOfNewTriangles_Offset), 0, null, numberOfNewTriangles);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReserveNewTriangles_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:ReserveNewPolygons
    static readonly IntPtr ReserveNewPolygons_NativeFunction;
    static readonly int ReserveNewPolygons_ParamsSize;
    static readonly int ReserveNewPolygons_NumberOfNewPolygons_Offset;
    
    public void ReserveNewPolygons(int numberOfNewPolygons)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReserveNewPolygons_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReserveNewPolygons_NumberOfNewPolygons_Offset), 0, null, numberOfNewPolygons);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReserveNewPolygons_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:ReserveNewPolygonGroups
    static readonly IntPtr ReserveNewPolygonGroups_NativeFunction;
    static readonly int ReserveNewPolygonGroups_ParamsSize;
    static readonly int ReserveNewPolygonGroups_NumberOfNewPolygonGroups_Offset;
    
    public void ReserveNewPolygonGroups(int numberOfNewPolygonGroups)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReserveNewPolygonGroups_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReserveNewPolygonGroups_NumberOfNewPolygonGroups_Offset), 0, null, numberOfNewPolygonGroups);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReserveNewPolygonGroups_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:ReserveNewEdges
    static readonly IntPtr ReserveNewEdges_NativeFunction;
    static readonly int ReserveNewEdges_ParamsSize;
    static readonly int ReserveNewEdges_NumberOfNewEdges_Offset;
    
    public void ReserveNewEdges(int numberOfNewEdges)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReserveNewEdges_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReserveNewEdges_NumberOfNewEdges_Offset), 0, null, numberOfNewEdges);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReserveNewEdges_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:IsVertexValid
    static readonly IntPtr IsVertexValid_NativeFunction;
    static readonly int IsVertexValid_ParamsSize;
    static readonly int IsVertexValid_VertexID_Offset;
    static readonly int IsVertexValid_ReturnValue_Offset;
    
    public bool IsVertexValid(UnrealSharp.MeshDescription.VertexID vertexID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsVertexValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, IsVertexValid_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsVertexValid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsVertexValid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:IsVertexOrphaned
    static readonly IntPtr IsVertexOrphaned_NativeFunction;
    static readonly int IsVertexOrphaned_ParamsSize;
    static readonly int IsVertexOrphaned_VertexID_Offset;
    static readonly int IsVertexOrphaned_ReturnValue_Offset;
    
    public bool IsVertexOrphaned(UnrealSharp.MeshDescription.VertexID vertexID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsVertexOrphaned_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, IsVertexOrphaned_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsVertexOrphaned_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsVertexOrphaned_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:IsVertexInstanceValid
    static readonly IntPtr IsVertexInstanceValid_NativeFunction;
    static readonly int IsVertexInstanceValid_ParamsSize;
    static readonly int IsVertexInstanceValid_VertexInstanceID_Offset;
    static readonly int IsVertexInstanceValid_ReturnValue_Offset;
    
    public bool IsVertexInstanceValid(UnrealSharp.MeshDescription.VertexInstanceID vertexInstanceID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsVertexInstanceValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative(IntPtr.Add(ParamsBuffer, IsVertexInstanceValid_VertexInstanceID_Offset), 0, null, vertexInstanceID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsVertexInstanceValid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsVertexInstanceValid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:IsTriangleValid
    static readonly IntPtr IsTriangleValid_NativeFunction;
    static readonly int IsTriangleValid_ParamsSize;
    static readonly int IsTriangleValid_TriangleID_Offset;
    static readonly int IsTriangleValid_ReturnValue_Offset;
    
    public bool IsTriangleValid(UnrealSharp.MeshDescription.TriangleID triangleID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsTriangleValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative(IntPtr.Add(ParamsBuffer, IsTriangleValid_TriangleID_Offset), 0, null, triangleID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsTriangleValid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsTriangleValid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:IsTrianglePartOfNgon
    static readonly IntPtr IsTrianglePartOfNgon_NativeFunction;
    static readonly int IsTrianglePartOfNgon_ParamsSize;
    static readonly int IsTrianglePartOfNgon_TriangleID_Offset;
    static readonly int IsTrianglePartOfNgon_ReturnValue_Offset;
    
    public bool IsTrianglePartOfNgon(UnrealSharp.MeshDescription.TriangleID triangleID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsTrianglePartOfNgon_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative(IntPtr.Add(ParamsBuffer, IsTrianglePartOfNgon_TriangleID_Offset), 0, null, triangleID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsTrianglePartOfNgon_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsTrianglePartOfNgon_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:IsPolygonValid
    static readonly IntPtr IsPolygonValid_NativeFunction;
    static readonly int IsPolygonValid_ParamsSize;
    static readonly int IsPolygonValid_PolygonID_Offset;
    static readonly int IsPolygonValid_ReturnValue_Offset;
    
    public bool IsPolygonValid(UnrealSharp.MeshDescription.PolygonID polygonID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPolygonValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, IsPolygonValid_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPolygonValid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPolygonValid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:IsPolygonGroupValid
    static readonly IntPtr IsPolygonGroupValid_NativeFunction;
    static readonly int IsPolygonGroupValid_ParamsSize;
    static readonly int IsPolygonGroupValid_PolygonGroupID_Offset;
    static readonly int IsPolygonGroupValid_ReturnValue_Offset;
    
    public bool IsPolygonGroupValid(UnrealSharp.MeshDescription.PolygonGroupID polygonGroupID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPolygonGroupValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.ToNative(IntPtr.Add(ParamsBuffer, IsPolygonGroupValid_PolygonGroupID_Offset), 0, null, polygonGroupID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPolygonGroupValid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPolygonGroupValid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:IsEmpty
    static readonly IntPtr IsEmpty_NativeFunction;
    static readonly int IsEmpty_ParamsSize;
    static readonly int IsEmpty_ReturnValue_Offset;
    
    public bool IsEmpty()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsEmpty_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsEmpty_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsEmpty_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:IsEdgeValid
    static readonly IntPtr IsEdgeValid_NativeFunction;
    static readonly int IsEdgeValid_ParamsSize;
    static readonly int IsEdgeValid_EdgeID_Offset;
    static readonly int IsEdgeValid_ReturnValue_Offset;
    
    public bool IsEdgeValid(UnrealSharp.MeshDescription.EdgeID edgeID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsEdgeValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative(IntPtr.Add(ParamsBuffer, IsEdgeValid_EdgeID_Offset), 0, null, edgeID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsEdgeValid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsEdgeValid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:IsEdgeInternalToPolygon
    static readonly IntPtr IsEdgeInternalToPolygon_NativeFunction;
    static readonly int IsEdgeInternalToPolygon_ParamsSize;
    static readonly int IsEdgeInternalToPolygon_EdgeID_Offset;
    static readonly int IsEdgeInternalToPolygon_PolygonID_Offset;
    static readonly int IsEdgeInternalToPolygon_ReturnValue_Offset;
    
    public bool IsEdgeInternalToPolygon(UnrealSharp.MeshDescription.EdgeID edgeID, UnrealSharp.MeshDescription.PolygonID polygonID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsEdgeInternalToPolygon_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative(IntPtr.Add(ParamsBuffer, IsEdgeInternalToPolygon_EdgeID_Offset), 0, null, edgeID);
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, IsEdgeInternalToPolygon_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsEdgeInternalToPolygon_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsEdgeInternalToPolygon_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:IsEdgeInternal
    static readonly IntPtr IsEdgeInternal_NativeFunction;
    static readonly int IsEdgeInternal_ParamsSize;
    static readonly int IsEdgeInternal_EdgeID_Offset;
    static readonly int IsEdgeInternal_ReturnValue_Offset;
    
    public bool IsEdgeInternal(UnrealSharp.MeshDescription.EdgeID edgeID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsEdgeInternal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative(IntPtr.Add(ParamsBuffer, IsEdgeInternal_EdgeID_Offset), 0, null, edgeID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsEdgeInternal_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsEdgeInternal_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexVertexInstances
    static readonly IntPtr GetVertexVertexInstances_NativeFunction;
    static readonly int GetVertexVertexInstances_ParamsSize;
    static readonly int GetVertexVertexInstances_VertexID_Offset;
    static readonly int GetVertexVertexInstances_OutVertexInstanceIDs_Offset;
    static readonly int GetVertexVertexInstances_OutVertexInstanceIDs_ElementSize;
    
    public void GetVertexVertexInstances(UnrealSharp.MeshDescription.VertexID vertexID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexInstanceID> outVertexInstanceIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexVertexInstances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexVertexInstances_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexVertexInstances_NativeFunction, ParamsBuffer);
            
            IntPtr OutVertexInstanceIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetVertexVertexInstances_OutVertexInstanceIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> OutVertexInstanceIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.FromNative, GetVertexVertexInstances_OutVertexInstanceIDs_ElementSize);
            outVertexInstanceIDs = OutVertexInstanceIDs_Marshaler.FromNative(OutVertexInstanceIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID>.DestructInstance(OutVertexInstanceIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexPosition
    static readonly IntPtr GetVertexPosition_NativeFunction;
    static readonly int GetVertexPosition_ParamsSize;
    static readonly int GetVertexPosition_VertexID_Offset;
    static readonly int GetVertexPosition_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetVertexPosition(UnrealSharp.MeshDescription.VertexID vertexID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexPosition_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetVertexPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexPairEdge
    static readonly IntPtr GetVertexPairEdge_NativeFunction;
    static readonly int GetVertexPairEdge_ParamsSize;
    static readonly int GetVertexPairEdge_VertexID0_Offset;
    static readonly int GetVertexPairEdge_VertexID1_Offset;
    static readonly int GetVertexPairEdge_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.EdgeID GetVertexPairEdge(UnrealSharp.MeshDescription.VertexID vertexID0, UnrealSharp.MeshDescription.VertexID vertexID1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexPairEdge_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexPairEdge_VertexID0_Offset), 0, null, vertexID0);
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexPairEdge_VertexID1_Offset), 0, null, vertexID1);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexPairEdge_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MeshDescription.EdgeID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.FromNative(IntPtr.Add(ParamsBuffer, GetVertexPairEdge_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexInstanceVertex
    static readonly IntPtr GetVertexInstanceVertex_NativeFunction;
    static readonly int GetVertexInstanceVertex_ParamsSize;
    static readonly int GetVertexInstanceVertex_VertexInstanceID_Offset;
    static readonly int GetVertexInstanceVertex_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.VertexID GetVertexInstanceVertex(UnrealSharp.MeshDescription.VertexInstanceID vertexInstanceID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexInstanceVertex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexInstanceVertex_VertexInstanceID_Offset), 0, null, vertexInstanceID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexInstanceVertex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MeshDescription.VertexID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.FromNative(IntPtr.Add(ParamsBuffer, GetVertexInstanceVertex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexInstancePairEdge
    static readonly IntPtr GetVertexInstancePairEdge_NativeFunction;
    static readonly int GetVertexInstancePairEdge_ParamsSize;
    static readonly int GetVertexInstancePairEdge_VertexInstanceID0_Offset;
    static readonly int GetVertexInstancePairEdge_VertexInstanceID1_Offset;
    static readonly int GetVertexInstancePairEdge_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.EdgeID GetVertexInstancePairEdge(UnrealSharp.MeshDescription.VertexInstanceID vertexInstanceID0, UnrealSharp.MeshDescription.VertexInstanceID vertexInstanceID1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexInstancePairEdge_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexInstancePairEdge_VertexInstanceID0_Offset), 0, null, vertexInstanceID0);
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexInstancePairEdge_VertexInstanceID1_Offset), 0, null, vertexInstanceID1);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexInstancePairEdge_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MeshDescription.EdgeID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.FromNative(IntPtr.Add(ParamsBuffer, GetVertexInstancePairEdge_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexInstanceForTriangleVertex
    static readonly IntPtr GetVertexInstanceForTriangleVertex_NativeFunction;
    static readonly int GetVertexInstanceForTriangleVertex_ParamsSize;
    static readonly int GetVertexInstanceForTriangleVertex_TriangleID_Offset;
    static readonly int GetVertexInstanceForTriangleVertex_VertexID_Offset;
    static readonly int GetVertexInstanceForTriangleVertex_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.VertexInstanceID GetVertexInstanceForTriangleVertex(UnrealSharp.MeshDescription.TriangleID triangleID, UnrealSharp.MeshDescription.VertexID vertexID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexInstanceForTriangleVertex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexInstanceForTriangleVertex_TriangleID_Offset), 0, null, triangleID);
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexInstanceForTriangleVertex_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexInstanceForTriangleVertex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MeshDescription.VertexInstanceID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.FromNative(IntPtr.Add(ParamsBuffer, GetVertexInstanceForTriangleVertex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexInstanceForPolygonVertex
    static readonly IntPtr GetVertexInstanceForPolygonVertex_NativeFunction;
    static readonly int GetVertexInstanceForPolygonVertex_ParamsSize;
    static readonly int GetVertexInstanceForPolygonVertex_PolygonID_Offset;
    static readonly int GetVertexInstanceForPolygonVertex_VertexID_Offset;
    static readonly int GetVertexInstanceForPolygonVertex_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.VertexInstanceID GetVertexInstanceForPolygonVertex(UnrealSharp.MeshDescription.PolygonID polygonID, UnrealSharp.MeshDescription.VertexID vertexID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexInstanceForPolygonVertex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexInstanceForPolygonVertex_PolygonID_Offset), 0, null, polygonID);
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexInstanceForPolygonVertex_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexInstanceForPolygonVertex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MeshDescription.VertexInstanceID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.FromNative(IntPtr.Add(ParamsBuffer, GetVertexInstanceForPolygonVertex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexInstanceCount
    static readonly IntPtr GetVertexInstanceCount_NativeFunction;
    static readonly int GetVertexInstanceCount_ParamsSize;
    static readonly int GetVertexInstanceCount_ReturnValue_Offset;
    
    public int GetVertexInstanceCount()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexInstanceCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexInstanceCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetVertexInstanceCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexInstanceConnectedTriangles
    static readonly IntPtr GetVertexInstanceConnectedTriangles_NativeFunction;
    static readonly int GetVertexInstanceConnectedTriangles_ParamsSize;
    static readonly int GetVertexInstanceConnectedTriangles_VertexInstanceID_Offset;
    static readonly int GetVertexInstanceConnectedTriangles_OutConnectedTriangleIDs_Offset;
    static readonly int GetVertexInstanceConnectedTriangles_OutConnectedTriangleIDs_ElementSize;
    
    public void GetVertexInstanceConnectedTriangles(UnrealSharp.MeshDescription.VertexInstanceID vertexInstanceID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.TriangleID> outConnectedTriangleIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexInstanceConnectedTriangles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexInstanceConnectedTriangles_VertexInstanceID_Offset), 0, null, vertexInstanceID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexInstanceConnectedTriangles_NativeFunction, ParamsBuffer);
            
            IntPtr OutConnectedTriangleIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetVertexInstanceConnectedTriangles_OutConnectedTriangleIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID> OutConnectedTriangleIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.FromNative, GetVertexInstanceConnectedTriangles_OutConnectedTriangleIDs_ElementSize);
            outConnectedTriangleIDs = OutConnectedTriangleIDs_Marshaler.FromNative(OutConnectedTriangleIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID>.DestructInstance(OutConnectedTriangleIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexInstanceConnectedPolygons
    static readonly IntPtr GetVertexInstanceConnectedPolygons_NativeFunction;
    static readonly int GetVertexInstanceConnectedPolygons_ParamsSize;
    static readonly int GetVertexInstanceConnectedPolygons_VertexInstanceID_Offset;
    static readonly int GetVertexInstanceConnectedPolygons_OutConnectedPolygonIDs_Offset;
    static readonly int GetVertexInstanceConnectedPolygons_OutConnectedPolygonIDs_ElementSize;
    
    public void GetVertexInstanceConnectedPolygons(UnrealSharp.MeshDescription.VertexInstanceID vertexInstanceID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.PolygonID> outConnectedPolygonIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexInstanceConnectedPolygons_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexInstanceConnectedPolygons_VertexInstanceID_Offset), 0, null, vertexInstanceID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexInstanceConnectedPolygons_NativeFunction, ParamsBuffer);
            
            IntPtr OutConnectedPolygonIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetVertexInstanceConnectedPolygons_OutConnectedPolygonIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID> OutConnectedPolygonIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.FromNative, GetVertexInstanceConnectedPolygons_OutConnectedPolygonIDs_ElementSize);
            outConnectedPolygonIDs = OutConnectedPolygonIDs_Marshaler.FromNative(OutConnectedPolygonIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID>.DestructInstance(OutConnectedPolygonIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexCount
    static readonly IntPtr GetVertexCount_NativeFunction;
    static readonly int GetVertexCount_ParamsSize;
    static readonly int GetVertexCount_ReturnValue_Offset;
    
    public int GetVertexCount()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetVertexCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexConnectedTriangles
    static readonly IntPtr GetVertexConnectedTriangles_NativeFunction;
    static readonly int GetVertexConnectedTriangles_ParamsSize;
    static readonly int GetVertexConnectedTriangles_VertexID_Offset;
    static readonly int GetVertexConnectedTriangles_OutConnectedTriangleIDs_Offset;
    static readonly int GetVertexConnectedTriangles_OutConnectedTriangleIDs_ElementSize;
    
    public void GetVertexConnectedTriangles(UnrealSharp.MeshDescription.VertexID vertexID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.TriangleID> outConnectedTriangleIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexConnectedTriangles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexConnectedTriangles_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexConnectedTriangles_NativeFunction, ParamsBuffer);
            
            IntPtr OutConnectedTriangleIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetVertexConnectedTriangles_OutConnectedTriangleIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID> OutConnectedTriangleIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.FromNative, GetVertexConnectedTriangles_OutConnectedTriangleIDs_ElementSize);
            outConnectedTriangleIDs = OutConnectedTriangleIDs_Marshaler.FromNative(OutConnectedTriangleIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID>.DestructInstance(OutConnectedTriangleIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexConnectedPolygons
    static readonly IntPtr GetVertexConnectedPolygons_NativeFunction;
    static readonly int GetVertexConnectedPolygons_ParamsSize;
    static readonly int GetVertexConnectedPolygons_VertexID_Offset;
    static readonly int GetVertexConnectedPolygons_OutConnectedPolygonIDs_Offset;
    static readonly int GetVertexConnectedPolygons_OutConnectedPolygonIDs_ElementSize;
    
    public void GetVertexConnectedPolygons(UnrealSharp.MeshDescription.VertexID vertexID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.PolygonID> outConnectedPolygonIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexConnectedPolygons_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexConnectedPolygons_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexConnectedPolygons_NativeFunction, ParamsBuffer);
            
            IntPtr OutConnectedPolygonIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetVertexConnectedPolygons_OutConnectedPolygonIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID> OutConnectedPolygonIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.FromNative, GetVertexConnectedPolygons_OutConnectedPolygonIDs_ElementSize);
            outConnectedPolygonIDs = OutConnectedPolygonIDs_Marshaler.FromNative(OutConnectedPolygonIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID>.DestructInstance(OutConnectedPolygonIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexConnectedEdges
    static readonly IntPtr GetVertexConnectedEdges_NativeFunction;
    static readonly int GetVertexConnectedEdges_ParamsSize;
    static readonly int GetVertexConnectedEdges_VertexID_Offset;
    static readonly int GetVertexConnectedEdges_OutEdgeIDs_Offset;
    static readonly int GetVertexConnectedEdges_OutEdgeIDs_ElementSize;
    
    public void GetVertexConnectedEdges(UnrealSharp.MeshDescription.VertexID vertexID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.EdgeID> outEdgeIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexConnectedEdges_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexConnectedEdges_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexConnectedEdges_NativeFunction, ParamsBuffer);
            
            IntPtr OutEdgeIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetVertexConnectedEdges_OutEdgeIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> OutEdgeIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.FromNative, GetVertexConnectedEdges_OutEdgeIDs_ElementSize);
            outEdgeIDs = OutEdgeIDs_Marshaler.FromNative(OutEdgeIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID>.DestructInstance(OutEdgeIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetVertexAdjacentVertices
    static readonly IntPtr GetVertexAdjacentVertices_NativeFunction;
    static readonly int GetVertexAdjacentVertices_ParamsSize;
    static readonly int GetVertexAdjacentVertices_VertexID_Offset;
    static readonly int GetVertexAdjacentVertices_OutAdjacentVertexIDs_Offset;
    static readonly int GetVertexAdjacentVertices_OutAdjacentVertexIDs_ElementSize;
    
    public void GetVertexAdjacentVertices(UnrealSharp.MeshDescription.VertexID vertexID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexID> outAdjacentVertexIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVertexAdjacentVertices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, GetVertexAdjacentVertices_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVertexAdjacentVertices_NativeFunction, ParamsBuffer);
            
            IntPtr OutAdjacentVertexIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetVertexAdjacentVertices_OutAdjacentVertexIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID> OutAdjacentVertexIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.FromNative, GetVertexAdjacentVertices_OutAdjacentVertexIDs_ElementSize);
            outAdjacentVertexIDs = OutAdjacentVertexIDs_Marshaler.FromNative(OutAdjacentVertexIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID>.DestructInstance(OutAdjacentVertexIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetTriangleVertices
    static readonly IntPtr GetTriangleVertices_NativeFunction;
    static readonly int GetTriangleVertices_ParamsSize;
    static readonly int GetTriangleVertices_TriangleID_Offset;
    static readonly int GetTriangleVertices_OutVertexIDs_Offset;
    static readonly int GetTriangleVertices_OutVertexIDs_ElementSize;
    
    public void GetTriangleVertices(UnrealSharp.MeshDescription.TriangleID triangleID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexID> outVertexIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTriangleVertices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative(IntPtr.Add(ParamsBuffer, GetTriangleVertices_TriangleID_Offset), 0, null, triangleID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTriangleVertices_NativeFunction, ParamsBuffer);
            
            IntPtr OutVertexIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetTriangleVertices_OutVertexIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID> OutVertexIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.FromNative, GetTriangleVertices_OutVertexIDs_ElementSize);
            outVertexIDs = OutVertexIDs_Marshaler.FromNative(OutVertexIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID>.DestructInstance(OutVertexIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetTriangleVertexInstances
    static readonly IntPtr GetTriangleVertexInstances_NativeFunction;
    static readonly int GetTriangleVertexInstances_ParamsSize;
    static readonly int GetTriangleVertexInstances_TriangleID_Offset;
    static readonly int GetTriangleVertexInstances_OutVertexInstanceIDs_Offset;
    static readonly int GetTriangleVertexInstances_OutVertexInstanceIDs_ElementSize;
    
    public void GetTriangleVertexInstances(UnrealSharp.MeshDescription.TriangleID triangleID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexInstanceID> outVertexInstanceIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTriangleVertexInstances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative(IntPtr.Add(ParamsBuffer, GetTriangleVertexInstances_TriangleID_Offset), 0, null, triangleID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTriangleVertexInstances_NativeFunction, ParamsBuffer);
            
            IntPtr OutVertexInstanceIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetTriangleVertexInstances_OutVertexInstanceIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> OutVertexInstanceIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.FromNative, GetTriangleVertexInstances_OutVertexInstanceIDs_ElementSize);
            outVertexInstanceIDs = OutVertexInstanceIDs_Marshaler.FromNative(OutVertexInstanceIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID>.DestructInstance(OutVertexInstanceIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetTriangleVertexInstance
    static readonly IntPtr GetTriangleVertexInstance_NativeFunction;
    static readonly int GetTriangleVertexInstance_ParamsSize;
    static readonly int GetTriangleVertexInstance_TriangleID_Offset;
    static readonly int GetTriangleVertexInstance_Index_Offset;
    static readonly int GetTriangleVertexInstance_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.VertexInstanceID GetTriangleVertexInstance(UnrealSharp.MeshDescription.TriangleID triangleID, int index)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTriangleVertexInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative(IntPtr.Add(ParamsBuffer, GetTriangleVertexInstance_TriangleID_Offset), 0, null, triangleID);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTriangleVertexInstance_Index_Offset), 0, null, index);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTriangleVertexInstance_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MeshDescription.VertexInstanceID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.FromNative(IntPtr.Add(ParamsBuffer, GetTriangleVertexInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetTrianglePolygonGroup
    static readonly IntPtr GetTrianglePolygonGroup_NativeFunction;
    static readonly int GetTrianglePolygonGroup_ParamsSize;
    static readonly int GetTrianglePolygonGroup_TriangleID_Offset;
    static readonly int GetTrianglePolygonGroup_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.PolygonGroupID GetTrianglePolygonGroup(UnrealSharp.MeshDescription.TriangleID triangleID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTrianglePolygonGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative(IntPtr.Add(ParamsBuffer, GetTrianglePolygonGroup_TriangleID_Offset), 0, null, triangleID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTrianglePolygonGroup_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MeshDescription.PolygonGroupID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.FromNative(IntPtr.Add(ParamsBuffer, GetTrianglePolygonGroup_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetTrianglePolygon
    static readonly IntPtr GetTrianglePolygon_NativeFunction;
    static readonly int GetTrianglePolygon_ParamsSize;
    static readonly int GetTrianglePolygon_TriangleID_Offset;
    static readonly int GetTrianglePolygon_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.PolygonID GetTrianglePolygon(UnrealSharp.MeshDescription.TriangleID triangleID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTrianglePolygon_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative(IntPtr.Add(ParamsBuffer, GetTrianglePolygon_TriangleID_Offset), 0, null, triangleID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTrianglePolygon_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MeshDescription.PolygonID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.FromNative(IntPtr.Add(ParamsBuffer, GetTrianglePolygon_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetTriangleEdges
    static readonly IntPtr GetTriangleEdges_NativeFunction;
    static readonly int GetTriangleEdges_ParamsSize;
    static readonly int GetTriangleEdges_TriangleID_Offset;
    static readonly int GetTriangleEdges_OutEdgeIDs_Offset;
    static readonly int GetTriangleEdges_OutEdgeIDs_ElementSize;
    
    public void GetTriangleEdges(UnrealSharp.MeshDescription.TriangleID triangleID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.EdgeID> outEdgeIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTriangleEdges_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative(IntPtr.Add(ParamsBuffer, GetTriangleEdges_TriangleID_Offset), 0, null, triangleID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTriangleEdges_NativeFunction, ParamsBuffer);
            
            IntPtr OutEdgeIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetTriangleEdges_OutEdgeIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> OutEdgeIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.FromNative, GetTriangleEdges_OutEdgeIDs_ElementSize);
            outEdgeIDs = OutEdgeIDs_Marshaler.FromNative(OutEdgeIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID>.DestructInstance(OutEdgeIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetTriangleCount
    static readonly IntPtr GetTriangleCount_NativeFunction;
    static readonly int GetTriangleCount_ParamsSize;
    static readonly int GetTriangleCount_ReturnValue_Offset;
    
    public int GetTriangleCount()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTriangleCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTriangleCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetTriangleCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetTriangleAdjacentTriangles
    static readonly IntPtr GetTriangleAdjacentTriangles_NativeFunction;
    static readonly int GetTriangleAdjacentTriangles_ParamsSize;
    static readonly int GetTriangleAdjacentTriangles_TriangleID_Offset;
    static readonly int GetTriangleAdjacentTriangles_OutTriangleIDs_Offset;
    static readonly int GetTriangleAdjacentTriangles_OutTriangleIDs_ElementSize;
    
    public void GetTriangleAdjacentTriangles(UnrealSharp.MeshDescription.TriangleID triangleID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.TriangleID> outTriangleIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTriangleAdjacentTriangles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative(IntPtr.Add(ParamsBuffer, GetTriangleAdjacentTriangles_TriangleID_Offset), 0, null, triangleID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTriangleAdjacentTriangles_NativeFunction, ParamsBuffer);
            
            IntPtr OutTriangleIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetTriangleAdjacentTriangles_OutTriangleIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID> OutTriangleIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.FromNative, GetTriangleAdjacentTriangles_OutTriangleIDs_ElementSize);
            outTriangleIDs = OutTriangleIDs_Marshaler.FromNative(OutTriangleIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID>.DestructInstance(OutTriangleIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetPolygonVertices
    static readonly IntPtr GetPolygonVertices_NativeFunction;
    static readonly int GetPolygonVertices_ParamsSize;
    static readonly int GetPolygonVertices_PolygonID_Offset;
    static readonly int GetPolygonVertices_OutVertexIDs_Offset;
    static readonly int GetPolygonVertices_OutVertexIDs_ElementSize;
    
    public void GetPolygonVertices(UnrealSharp.MeshDescription.PolygonID polygonID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexID> outVertexIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPolygonVertices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, GetPolygonVertices_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPolygonVertices_NativeFunction, ParamsBuffer);
            
            IntPtr OutVertexIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPolygonVertices_OutVertexIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID> OutVertexIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.FromNative, GetPolygonVertices_OutVertexIDs_ElementSize);
            outVertexIDs = OutVertexIDs_Marshaler.FromNative(OutVertexIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID>.DestructInstance(OutVertexIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetPolygonVertexInstances
    static readonly IntPtr GetPolygonVertexInstances_NativeFunction;
    static readonly int GetPolygonVertexInstances_ParamsSize;
    static readonly int GetPolygonVertexInstances_PolygonID_Offset;
    static readonly int GetPolygonVertexInstances_OutVertexInstanceIDs_Offset;
    static readonly int GetPolygonVertexInstances_OutVertexInstanceIDs_ElementSize;
    
    public void GetPolygonVertexInstances(UnrealSharp.MeshDescription.PolygonID polygonID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexInstanceID> outVertexInstanceIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPolygonVertexInstances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, GetPolygonVertexInstances_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPolygonVertexInstances_NativeFunction, ParamsBuffer);
            
            IntPtr OutVertexInstanceIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPolygonVertexInstances_OutVertexInstanceIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> OutVertexInstanceIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.FromNative, GetPolygonVertexInstances_OutVertexInstanceIDs_ElementSize);
            outVertexInstanceIDs = OutVertexInstanceIDs_Marshaler.FromNative(OutVertexInstanceIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID>.DestructInstance(OutVertexInstanceIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetPolygonTriangles
    static readonly IntPtr GetPolygonTriangles_NativeFunction;
    static readonly int GetPolygonTriangles_ParamsSize;
    static readonly int GetPolygonTriangles_PolygonID_Offset;
    static readonly int GetPolygonTriangles_OutTriangleIDs_Offset;
    static readonly int GetPolygonTriangles_OutTriangleIDs_ElementSize;
    
    public void GetPolygonTriangles(UnrealSharp.MeshDescription.PolygonID polygonID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.TriangleID> outTriangleIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPolygonTriangles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, GetPolygonTriangles_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPolygonTriangles_NativeFunction, ParamsBuffer);
            
            IntPtr OutTriangleIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPolygonTriangles_OutTriangleIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID> OutTriangleIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.FromNative, GetPolygonTriangles_OutTriangleIDs_ElementSize);
            outTriangleIDs = OutTriangleIDs_Marshaler.FromNative(OutTriangleIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID>.DestructInstance(OutTriangleIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetPolygonPolygonGroup
    static readonly IntPtr GetPolygonPolygonGroup_NativeFunction;
    static readonly int GetPolygonPolygonGroup_ParamsSize;
    static readonly int GetPolygonPolygonGroup_PolygonID_Offset;
    static readonly int GetPolygonPolygonGroup_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.PolygonGroupID GetPolygonPolygonGroup(UnrealSharp.MeshDescription.PolygonID polygonID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPolygonPolygonGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, GetPolygonPolygonGroup_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPolygonPolygonGroup_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MeshDescription.PolygonGroupID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.FromNative(IntPtr.Add(ParamsBuffer, GetPolygonPolygonGroup_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetPolygonPerimeterEdges
    static readonly IntPtr GetPolygonPerimeterEdges_NativeFunction;
    static readonly int GetPolygonPerimeterEdges_ParamsSize;
    static readonly int GetPolygonPerimeterEdges_PolygonID_Offset;
    static readonly int GetPolygonPerimeterEdges_OutEdgeIDs_Offset;
    static readonly int GetPolygonPerimeterEdges_OutEdgeIDs_ElementSize;
    
    public void GetPolygonPerimeterEdges(UnrealSharp.MeshDescription.PolygonID polygonID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.EdgeID> outEdgeIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPolygonPerimeterEdges_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, GetPolygonPerimeterEdges_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPolygonPerimeterEdges_NativeFunction, ParamsBuffer);
            
            IntPtr OutEdgeIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPolygonPerimeterEdges_OutEdgeIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> OutEdgeIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.FromNative, GetPolygonPerimeterEdges_OutEdgeIDs_ElementSize);
            outEdgeIDs = OutEdgeIDs_Marshaler.FromNative(OutEdgeIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID>.DestructInstance(OutEdgeIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetPolygonInternalEdges
    static readonly IntPtr GetPolygonInternalEdges_NativeFunction;
    static readonly int GetPolygonInternalEdges_ParamsSize;
    static readonly int GetPolygonInternalEdges_PolygonID_Offset;
    static readonly int GetPolygonInternalEdges_OutEdgeIDs_Offset;
    static readonly int GetPolygonInternalEdges_OutEdgeIDs_ElementSize;
    
    public void GetPolygonInternalEdges(UnrealSharp.MeshDescription.PolygonID polygonID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.EdgeID> outEdgeIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPolygonInternalEdges_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, GetPolygonInternalEdges_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPolygonInternalEdges_NativeFunction, ParamsBuffer);
            
            IntPtr OutEdgeIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPolygonInternalEdges_OutEdgeIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> OutEdgeIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.FromNative, GetPolygonInternalEdges_OutEdgeIDs_ElementSize);
            outEdgeIDs = OutEdgeIDs_Marshaler.FromNative(OutEdgeIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID>.DestructInstance(OutEdgeIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetPolygonGroupPolygons
    static readonly IntPtr GetPolygonGroupPolygons_NativeFunction;
    static readonly int GetPolygonGroupPolygons_ParamsSize;
    static readonly int GetPolygonGroupPolygons_PolygonGroupID_Offset;
    static readonly int GetPolygonGroupPolygons_OutPolygonIDs_Offset;
    static readonly int GetPolygonGroupPolygons_OutPolygonIDs_ElementSize;
    
    public void GetPolygonGroupPolygons(UnrealSharp.MeshDescription.PolygonGroupID polygonGroupID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.PolygonID> outPolygonIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPolygonGroupPolygons_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.ToNative(IntPtr.Add(ParamsBuffer, GetPolygonGroupPolygons_PolygonGroupID_Offset), 0, null, polygonGroupID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPolygonGroupPolygons_NativeFunction, ParamsBuffer);
            
            IntPtr OutPolygonIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPolygonGroupPolygons_OutPolygonIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID> OutPolygonIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.FromNative, GetPolygonGroupPolygons_OutPolygonIDs_ElementSize);
            outPolygonIDs = OutPolygonIDs_Marshaler.FromNative(OutPolygonIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID>.DestructInstance(OutPolygonIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetPolygonGroupCount
    static readonly IntPtr GetPolygonGroupCount_NativeFunction;
    static readonly int GetPolygonGroupCount_ParamsSize;
    static readonly int GetPolygonGroupCount_ReturnValue_Offset;
    
    public int GetPolygonGroupCount()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPolygonGroupCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPolygonGroupCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetPolygonGroupCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetPolygonCount
    static readonly IntPtr GetPolygonCount_NativeFunction;
    static readonly int GetPolygonCount_ParamsSize;
    static readonly int GetPolygonCount_ReturnValue_Offset;
    
    public int GetPolygonCount()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPolygonCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPolygonCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetPolygonCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetPolygonAdjacentPolygons
    static readonly IntPtr GetPolygonAdjacentPolygons_NativeFunction;
    static readonly int GetPolygonAdjacentPolygons_ParamsSize;
    static readonly int GetPolygonAdjacentPolygons_PolygonID_Offset;
    static readonly int GetPolygonAdjacentPolygons_OutPolygonIDs_Offset;
    static readonly int GetPolygonAdjacentPolygons_OutPolygonIDs_ElementSize;
    
    public void GetPolygonAdjacentPolygons(UnrealSharp.MeshDescription.PolygonID polygonID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.PolygonID> outPolygonIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPolygonAdjacentPolygons_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, GetPolygonAdjacentPolygons_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPolygonAdjacentPolygons_NativeFunction, ParamsBuffer);
            
            IntPtr OutPolygonIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPolygonAdjacentPolygons_OutPolygonIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID> OutPolygonIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.FromNative, GetPolygonAdjacentPolygons_OutPolygonIDs_ElementSize);
            outPolygonIDs = OutPolygonIDs_Marshaler.FromNative(OutPolygonIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID>.DestructInstance(OutPolygonIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetNumVertexVertexInstances
    static readonly IntPtr GetNumVertexVertexInstances_NativeFunction;
    static readonly int GetNumVertexVertexInstances_ParamsSize;
    static readonly int GetNumVertexVertexInstances_VertexID_Offset;
    static readonly int GetNumVertexVertexInstances_ReturnValue_Offset;
    
    public int GetNumVertexVertexInstances(UnrealSharp.MeshDescription.VertexID vertexID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumVertexVertexInstances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, GetNumVertexVertexInstances_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumVertexVertexInstances_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumVertexVertexInstances_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetNumVertexInstanceConnectedTriangles
    static readonly IntPtr GetNumVertexInstanceConnectedTriangles_NativeFunction;
    static readonly int GetNumVertexInstanceConnectedTriangles_ParamsSize;
    static readonly int GetNumVertexInstanceConnectedTriangles_VertexInstanceID_Offset;
    static readonly int GetNumVertexInstanceConnectedTriangles_ReturnValue_Offset;
    
    public int GetNumVertexInstanceConnectedTriangles(UnrealSharp.MeshDescription.VertexInstanceID vertexInstanceID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumVertexInstanceConnectedTriangles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative(IntPtr.Add(ParamsBuffer, GetNumVertexInstanceConnectedTriangles_VertexInstanceID_Offset), 0, null, vertexInstanceID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumVertexInstanceConnectedTriangles_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumVertexInstanceConnectedTriangles_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetNumVertexInstanceConnectedPolygons
    static readonly IntPtr GetNumVertexInstanceConnectedPolygons_NativeFunction;
    static readonly int GetNumVertexInstanceConnectedPolygons_ParamsSize;
    static readonly int GetNumVertexInstanceConnectedPolygons_VertexInstanceID_Offset;
    static readonly int GetNumVertexInstanceConnectedPolygons_ReturnValue_Offset;
    
    public int GetNumVertexInstanceConnectedPolygons(UnrealSharp.MeshDescription.VertexInstanceID vertexInstanceID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumVertexInstanceConnectedPolygons_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative(IntPtr.Add(ParamsBuffer, GetNumVertexInstanceConnectedPolygons_VertexInstanceID_Offset), 0, null, vertexInstanceID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumVertexInstanceConnectedPolygons_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumVertexInstanceConnectedPolygons_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetNumVertexConnectedTriangles
    static readonly IntPtr GetNumVertexConnectedTriangles_NativeFunction;
    static readonly int GetNumVertexConnectedTriangles_ParamsSize;
    static readonly int GetNumVertexConnectedTriangles_VertexID_Offset;
    static readonly int GetNumVertexConnectedTriangles_ReturnValue_Offset;
    
    public int GetNumVertexConnectedTriangles(UnrealSharp.MeshDescription.VertexID vertexID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumVertexConnectedTriangles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, GetNumVertexConnectedTriangles_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumVertexConnectedTriangles_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumVertexConnectedTriangles_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetNumVertexConnectedPolygons
    static readonly IntPtr GetNumVertexConnectedPolygons_NativeFunction;
    static readonly int GetNumVertexConnectedPolygons_ParamsSize;
    static readonly int GetNumVertexConnectedPolygons_VertexID_Offset;
    static readonly int GetNumVertexConnectedPolygons_ReturnValue_Offset;
    
    public int GetNumVertexConnectedPolygons(UnrealSharp.MeshDescription.VertexID vertexID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumVertexConnectedPolygons_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, GetNumVertexConnectedPolygons_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumVertexConnectedPolygons_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumVertexConnectedPolygons_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetNumVertexConnectedEdges
    static readonly IntPtr GetNumVertexConnectedEdges_NativeFunction;
    static readonly int GetNumVertexConnectedEdges_ParamsSize;
    static readonly int GetNumVertexConnectedEdges_VertexID_Offset;
    static readonly int GetNumVertexConnectedEdges_ReturnValue_Offset;
    
    public int GetNumVertexConnectedEdges(UnrealSharp.MeshDescription.VertexID vertexID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumVertexConnectedEdges_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, GetNumVertexConnectedEdges_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumVertexConnectedEdges_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumVertexConnectedEdges_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetNumPolygonVertices
    static readonly IntPtr GetNumPolygonVertices_NativeFunction;
    static readonly int GetNumPolygonVertices_ParamsSize;
    static readonly int GetNumPolygonVertices_PolygonID_Offset;
    static readonly int GetNumPolygonVertices_ReturnValue_Offset;
    
    public int GetNumPolygonVertices(UnrealSharp.MeshDescription.PolygonID polygonID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumPolygonVertices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, GetNumPolygonVertices_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumPolygonVertices_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumPolygonVertices_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetNumPolygonTriangles
    static readonly IntPtr GetNumPolygonTriangles_NativeFunction;
    static readonly int GetNumPolygonTriangles_ParamsSize;
    static readonly int GetNumPolygonTriangles_PolygonID_Offset;
    static readonly int GetNumPolygonTriangles_ReturnValue_Offset;
    
    public int GetNumPolygonTriangles(UnrealSharp.MeshDescription.PolygonID polygonID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumPolygonTriangles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, GetNumPolygonTriangles_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumPolygonTriangles_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumPolygonTriangles_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetNumPolygonInternalEdges
    static readonly IntPtr GetNumPolygonInternalEdges_NativeFunction;
    static readonly int GetNumPolygonInternalEdges_ParamsSize;
    static readonly int GetNumPolygonInternalEdges_PolygonID_Offset;
    static readonly int GetNumPolygonInternalEdges_ReturnValue_Offset;
    
    public int GetNumPolygonInternalEdges(UnrealSharp.MeshDescription.PolygonID polygonID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumPolygonInternalEdges_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, GetNumPolygonInternalEdges_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumPolygonInternalEdges_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumPolygonInternalEdges_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetNumPolygonGroupPolygons
    static readonly IntPtr GetNumPolygonGroupPolygons_NativeFunction;
    static readonly int GetNumPolygonGroupPolygons_ParamsSize;
    static readonly int GetNumPolygonGroupPolygons_PolygonGroupID_Offset;
    static readonly int GetNumPolygonGroupPolygons_ReturnValue_Offset;
    
    public int GetNumPolygonGroupPolygons(UnrealSharp.MeshDescription.PolygonGroupID polygonGroupID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumPolygonGroupPolygons_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.ToNative(IntPtr.Add(ParamsBuffer, GetNumPolygonGroupPolygons_PolygonGroupID_Offset), 0, null, polygonGroupID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumPolygonGroupPolygons_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumPolygonGroupPolygons_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetNumEdgeConnectedTriangles
    static readonly IntPtr GetNumEdgeConnectedTriangles_NativeFunction;
    static readonly int GetNumEdgeConnectedTriangles_ParamsSize;
    static readonly int GetNumEdgeConnectedTriangles_EdgeID_Offset;
    static readonly int GetNumEdgeConnectedTriangles_ReturnValue_Offset;
    
    public int GetNumEdgeConnectedTriangles(UnrealSharp.MeshDescription.EdgeID edgeID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumEdgeConnectedTriangles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative(IntPtr.Add(ParamsBuffer, GetNumEdgeConnectedTriangles_EdgeID_Offset), 0, null, edgeID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumEdgeConnectedTriangles_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumEdgeConnectedTriangles_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetNumEdgeConnectedPolygons
    static readonly IntPtr GetNumEdgeConnectedPolygons_NativeFunction;
    static readonly int GetNumEdgeConnectedPolygons_ParamsSize;
    static readonly int GetNumEdgeConnectedPolygons_EdgeID_Offset;
    static readonly int GetNumEdgeConnectedPolygons_ReturnValue_Offset;
    
    public int GetNumEdgeConnectedPolygons(UnrealSharp.MeshDescription.EdgeID edgeID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumEdgeConnectedPolygons_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative(IntPtr.Add(ParamsBuffer, GetNumEdgeConnectedPolygons_EdgeID_Offset), 0, null, edgeID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumEdgeConnectedPolygons_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumEdgeConnectedPolygons_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetEdgeVertices
    static readonly IntPtr GetEdgeVertices_NativeFunction;
    static readonly int GetEdgeVertices_ParamsSize;
    static readonly int GetEdgeVertices_EdgeID_Offset;
    static readonly int GetEdgeVertices_OutVertexIDs_Offset;
    static readonly int GetEdgeVertices_OutVertexIDs_ElementSize;
    
    public void GetEdgeVertices(UnrealSharp.MeshDescription.EdgeID edgeID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexID> outVertexIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEdgeVertices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative(IntPtr.Add(ParamsBuffer, GetEdgeVertices_EdgeID_Offset), 0, null, edgeID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEdgeVertices_NativeFunction, ParamsBuffer);
            
            IntPtr OutVertexIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetEdgeVertices_OutVertexIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID> OutVertexIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.FromNative, GetEdgeVertices_OutVertexIDs_ElementSize);
            outVertexIDs = OutVertexIDs_Marshaler.FromNative(OutVertexIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID>.DestructInstance(OutVertexIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetEdgeVertex
    static readonly IntPtr GetEdgeVertex_NativeFunction;
    static readonly int GetEdgeVertex_ParamsSize;
    static readonly int GetEdgeVertex_EdgeID_Offset;
    static readonly int GetEdgeVertex_VertexNumber_Offset;
    static readonly int GetEdgeVertex_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.VertexID GetEdgeVertex(UnrealSharp.MeshDescription.EdgeID edgeID, int vertexNumber)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEdgeVertex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative(IntPtr.Add(ParamsBuffer, GetEdgeVertex_EdgeID_Offset), 0, null, edgeID);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetEdgeVertex_VertexNumber_Offset), 0, null, vertexNumber);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEdgeVertex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MeshDescription.VertexID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.FromNative(IntPtr.Add(ParamsBuffer, GetEdgeVertex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetEdgeCount
    static readonly IntPtr GetEdgeCount_NativeFunction;
    static readonly int GetEdgeCount_ParamsSize;
    static readonly int GetEdgeCount_ReturnValue_Offset;
    
    public int GetEdgeCount()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEdgeCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEdgeCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetEdgeCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetEdgeConnectedTriangles
    static readonly IntPtr GetEdgeConnectedTriangles_NativeFunction;
    static readonly int GetEdgeConnectedTriangles_ParamsSize;
    static readonly int GetEdgeConnectedTriangles_EdgeID_Offset;
    static readonly int GetEdgeConnectedTriangles_OutConnectedTriangleIDs_Offset;
    static readonly int GetEdgeConnectedTriangles_OutConnectedTriangleIDs_ElementSize;
    
    public void GetEdgeConnectedTriangles(UnrealSharp.MeshDescription.EdgeID edgeID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.TriangleID> outConnectedTriangleIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEdgeConnectedTriangles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative(IntPtr.Add(ParamsBuffer, GetEdgeConnectedTriangles_EdgeID_Offset), 0, null, edgeID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEdgeConnectedTriangles_NativeFunction, ParamsBuffer);
            
            IntPtr OutConnectedTriangleIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetEdgeConnectedTriangles_OutConnectedTriangleIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID> OutConnectedTriangleIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.FromNative, GetEdgeConnectedTriangles_OutConnectedTriangleIDs_ElementSize);
            outConnectedTriangleIDs = OutConnectedTriangleIDs_Marshaler.FromNative(OutConnectedTriangleIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.TriangleID>.DestructInstance(OutConnectedTriangleIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:GetEdgeConnectedPolygons
    static readonly IntPtr GetEdgeConnectedPolygons_NativeFunction;
    static readonly int GetEdgeConnectedPolygons_ParamsSize;
    static readonly int GetEdgeConnectedPolygons_EdgeID_Offset;
    static readonly int GetEdgeConnectedPolygons_OutConnectedPolygonIDs_Offset;
    static readonly int GetEdgeConnectedPolygons_OutConnectedPolygonIDs_ElementSize;
    
    public void GetEdgeConnectedPolygons(UnrealSharp.MeshDescription.EdgeID edgeID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.PolygonID> outConnectedPolygonIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEdgeConnectedPolygons_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative(IntPtr.Add(ParamsBuffer, GetEdgeConnectedPolygons_EdgeID_Offset), 0, null, edgeID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEdgeConnectedPolygons_NativeFunction, ParamsBuffer);
            
            IntPtr OutConnectedPolygonIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetEdgeConnectedPolygons_OutConnectedPolygonIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID> OutConnectedPolygonIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.FromNative, GetEdgeConnectedPolygons_OutConnectedPolygonIDs_ElementSize);
            outConnectedPolygonIDs = OutConnectedPolygonIDs_Marshaler.FromNative(OutConnectedPolygonIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonID>.DestructInstance(OutConnectedPolygonIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:Empty
    static readonly IntPtr Empty_NativeFunction;
    
    public void Empty()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Empty_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:DeleteVertexInstance
    static readonly IntPtr DeleteVertexInstance_NativeFunction;
    static readonly int DeleteVertexInstance_ParamsSize;
    static readonly int DeleteVertexInstance_VertexInstanceID_Offset;
    static readonly int DeleteVertexInstance_OrphanedVertices_Offset;
    static readonly int DeleteVertexInstance_OrphanedVertices_ElementSize;
    
    public void DeleteVertexInstance(UnrealSharp.MeshDescription.VertexInstanceID vertexInstanceID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexID> orphanedVertices)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteVertexInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative(IntPtr.Add(ParamsBuffer, DeleteVertexInstance_VertexInstanceID_Offset), 0, null, vertexInstanceID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DeleteVertexInstance_NativeFunction, ParamsBuffer);
            
            IntPtr OrphanedVertices_NativeBuffer = IntPtr.Add(ParamsBuffer, DeleteVertexInstance_OrphanedVertices_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID> OrphanedVertices_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.FromNative, DeleteVertexInstance_OrphanedVertices_ElementSize);
            orphanedVertices = OrphanedVertices_Marshaler.FromNative(OrphanedVertices_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID>.DestructInstance(OrphanedVertices_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:DeleteVertex
    static readonly IntPtr DeleteVertex_NativeFunction;
    static readonly int DeleteVertex_ParamsSize;
    static readonly int DeleteVertex_VertexID_Offset;
    
    public void DeleteVertex(UnrealSharp.MeshDescription.VertexID vertexID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteVertex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, DeleteVertex_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DeleteVertex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:DeleteTriangle
    static readonly IntPtr DeleteTriangle_NativeFunction;
    static readonly int DeleteTriangle_ParamsSize;
    static readonly int DeleteTriangle_TriangleID_Offset;
    static readonly int DeleteTriangle_OrphanedEdges_Offset;
    static readonly int DeleteTriangle_OrphanedEdges_ElementSize;
    static readonly int DeleteTriangle_OrphanedVertexInstances_Offset;
    static readonly int DeleteTriangle_OrphanedVertexInstances_ElementSize;
    static readonly int DeleteTriangle_OrphanedPolygonGroupsPtr_Offset;
    static readonly int DeleteTriangle_OrphanedPolygonGroupsPtr_ElementSize;
    
    public void DeleteTriangle(UnrealSharp.MeshDescription.TriangleID triangleID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.EdgeID> orphanedEdges, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexInstanceID> orphanedVertexInstances, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.PolygonGroupID> orphanedPolygonGroupsPtr)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteTriangle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative(IntPtr.Add(ParamsBuffer, DeleteTriangle_TriangleID_Offset), 0, null, triangleID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DeleteTriangle_NativeFunction, ParamsBuffer);
            
            IntPtr OrphanedEdges_NativeBuffer = IntPtr.Add(ParamsBuffer, DeleteTriangle_OrphanedEdges_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> OrphanedEdges_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.FromNative, DeleteTriangle_OrphanedEdges_ElementSize);
            orphanedEdges = OrphanedEdges_Marshaler.FromNative(OrphanedEdges_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID>.DestructInstance(OrphanedEdges_NativeBuffer, 0);
            IntPtr OrphanedVertexInstances_NativeBuffer = IntPtr.Add(ParamsBuffer, DeleteTriangle_OrphanedVertexInstances_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> OrphanedVertexInstances_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.FromNative, DeleteTriangle_OrphanedVertexInstances_ElementSize);
            orphanedVertexInstances = OrphanedVertexInstances_Marshaler.FromNative(OrphanedVertexInstances_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID>.DestructInstance(OrphanedVertexInstances_NativeBuffer, 0);
            IntPtr OrphanedPolygonGroupsPtr_NativeBuffer = IntPtr.Add(ParamsBuffer, DeleteTriangle_OrphanedPolygonGroupsPtr_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonGroupID> OrphanedPolygonGroupsPtr_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonGroupID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.FromNative, DeleteTriangle_OrphanedPolygonGroupsPtr_ElementSize);
            orphanedPolygonGroupsPtr = OrphanedPolygonGroupsPtr_Marshaler.FromNative(OrphanedPolygonGroupsPtr_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonGroupID>.DestructInstance(OrphanedPolygonGroupsPtr_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:DeletePolygonGroup
    static readonly IntPtr DeletePolygonGroup_NativeFunction;
    static readonly int DeletePolygonGroup_ParamsSize;
    static readonly int DeletePolygonGroup_PolygonGroupID_Offset;
    
    public void DeletePolygonGroup(UnrealSharp.MeshDescription.PolygonGroupID polygonGroupID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeletePolygonGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.ToNative(IntPtr.Add(ParamsBuffer, DeletePolygonGroup_PolygonGroupID_Offset), 0, null, polygonGroupID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DeletePolygonGroup_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:DeletePolygon
    static readonly IntPtr DeletePolygon_NativeFunction;
    static readonly int DeletePolygon_ParamsSize;
    static readonly int DeletePolygon_PolygonID_Offset;
    static readonly int DeletePolygon_OrphanedEdges_Offset;
    static readonly int DeletePolygon_OrphanedEdges_ElementSize;
    static readonly int DeletePolygon_OrphanedVertexInstances_Offset;
    static readonly int DeletePolygon_OrphanedVertexInstances_ElementSize;
    static readonly int DeletePolygon_OrphanedPolygonGroups_Offset;
    static readonly int DeletePolygon_OrphanedPolygonGroups_ElementSize;
    
    public void DeletePolygon(UnrealSharp.MeshDescription.PolygonID polygonID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.EdgeID> orphanedEdges, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexInstanceID> orphanedVertexInstances, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.PolygonGroupID> orphanedPolygonGroups)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeletePolygon_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, DeletePolygon_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DeletePolygon_NativeFunction, ParamsBuffer);
            
            IntPtr OrphanedEdges_NativeBuffer = IntPtr.Add(ParamsBuffer, DeletePolygon_OrphanedEdges_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> OrphanedEdges_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.FromNative, DeletePolygon_OrphanedEdges_ElementSize);
            orphanedEdges = OrphanedEdges_Marshaler.FromNative(OrphanedEdges_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID>.DestructInstance(OrphanedEdges_NativeBuffer, 0);
            IntPtr OrphanedVertexInstances_NativeBuffer = IntPtr.Add(ParamsBuffer, DeletePolygon_OrphanedVertexInstances_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> OrphanedVertexInstances_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.FromNative, DeletePolygon_OrphanedVertexInstances_ElementSize);
            orphanedVertexInstances = OrphanedVertexInstances_Marshaler.FromNative(OrphanedVertexInstances_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID>.DestructInstance(OrphanedVertexInstances_NativeBuffer, 0);
            IntPtr OrphanedPolygonGroups_NativeBuffer = IntPtr.Add(ParamsBuffer, DeletePolygon_OrphanedPolygonGroups_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonGroupID> OrphanedPolygonGroups_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonGroupID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.FromNative, DeletePolygon_OrphanedPolygonGroups_ElementSize);
            orphanedPolygonGroups = OrphanedPolygonGroups_Marshaler.FromNative(OrphanedPolygonGroups_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.PolygonGroupID>.DestructInstance(OrphanedPolygonGroups_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:DeleteEdge
    static readonly IntPtr DeleteEdge_NativeFunction;
    static readonly int DeleteEdge_ParamsSize;
    static readonly int DeleteEdge_EdgeID_Offset;
    static readonly int DeleteEdge_OrphanedVertices_Offset;
    static readonly int DeleteEdge_OrphanedVertices_ElementSize;
    
    public void DeleteEdge(UnrealSharp.MeshDescription.EdgeID edgeID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexID> orphanedVertices)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteEdge_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative(IntPtr.Add(ParamsBuffer, DeleteEdge_EdgeID_Offset), 0, null, edgeID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DeleteEdge_NativeFunction, ParamsBuffer);
            
            IntPtr OrphanedVertices_NativeBuffer = IntPtr.Add(ParamsBuffer, DeleteEdge_OrphanedVertices_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID> OrphanedVertices_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.FromNative, DeleteEdge_OrphanedVertices_ElementSize);
            orphanedVertices = OrphanedVertices_Marshaler.FromNative(OrphanedVertices_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexID>.DestructInstance(OrphanedVertices_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:CreateVertexWithID
    static readonly IntPtr CreateVertexWithID_NativeFunction;
    static readonly int CreateVertexWithID_ParamsSize;
    static readonly int CreateVertexWithID_VertexID_Offset;
    
    public void CreateVertexWithID(UnrealSharp.MeshDescription.VertexID vertexID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateVertexWithID_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, CreateVertexWithID_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateVertexWithID_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:CreateVertexInstanceWithID
    static readonly IntPtr CreateVertexInstanceWithID_NativeFunction;
    static readonly int CreateVertexInstanceWithID_ParamsSize;
    static readonly int CreateVertexInstanceWithID_VertexInstanceID_Offset;
    static readonly int CreateVertexInstanceWithID_VertexID_Offset;
    
    public void CreateVertexInstanceWithID(UnrealSharp.MeshDescription.VertexInstanceID vertexInstanceID, UnrealSharp.MeshDescription.VertexID vertexID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateVertexInstanceWithID_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative(IntPtr.Add(ParamsBuffer, CreateVertexInstanceWithID_VertexInstanceID_Offset), 0, null, vertexInstanceID);
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, CreateVertexInstanceWithID_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateVertexInstanceWithID_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:CreateVertexInstance
    static readonly IntPtr CreateVertexInstance_NativeFunction;
    static readonly int CreateVertexInstance_ParamsSize;
    static readonly int CreateVertexInstance_VertexID_Offset;
    static readonly int CreateVertexInstance_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.VertexInstanceID CreateVertexInstance(UnrealSharp.MeshDescription.VertexID vertexID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateVertexInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, CreateVertexInstance_VertexID_Offset), 0, null, vertexID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateVertexInstance_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MeshDescription.VertexInstanceID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.FromNative(IntPtr.Add(ParamsBuffer, CreateVertexInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:CreateVertex
    static readonly IntPtr CreateVertex_NativeFunction;
    static readonly int CreateVertex_ParamsSize;
    static readonly int CreateVertex_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.VertexID CreateVertex()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateVertex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateVertex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MeshDescription.VertexID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.FromNative(IntPtr.Add(ParamsBuffer, CreateVertex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:CreateTriangleWithID
    static readonly IntPtr CreateTriangleWithID_NativeFunction;
    static readonly int CreateTriangleWithID_ParamsSize;
    static readonly int CreateTriangleWithID_TriangleID_Offset;
    static readonly int CreateTriangleWithID_PolygonGroupID_Offset;
    static readonly int CreateTriangleWithID_VertexInstanceIDs_Offset;
    static readonly int CreateTriangleWithID_VertexInstanceIDs_ElementSize;
    static readonly int CreateTriangleWithID_NewEdgeIDs_Offset;
    static readonly int CreateTriangleWithID_NewEdgeIDs_ElementSize;
    
    public void CreateTriangleWithID(UnrealSharp.MeshDescription.TriangleID triangleID, UnrealSharp.MeshDescription.PolygonGroupID polygonGroupID, System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexInstanceID> vertexInstanceIDs, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.EdgeID> newEdgeIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateTriangleWithID_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.ToNative(IntPtr.Add(ParamsBuffer, CreateTriangleWithID_TriangleID_Offset), 0, null, triangleID);
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.ToNative(IntPtr.Add(ParamsBuffer, CreateTriangleWithID_PolygonGroupID_Offset), 0, null, polygonGroupID);
            IntPtr VertexInstanceIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateTriangleWithID_VertexInstanceIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> VertexInstanceIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID>(1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.FromNative, CreateTriangleWithID_VertexInstanceIDs_ElementSize);
            VertexInstanceIDs_Marshaler.ToNative(VertexInstanceIDs_NativeBuffer, 0, null, vertexInstanceIDs);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateTriangleWithID_NativeFunction, ParamsBuffer);
            
            IntPtr NewEdgeIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateTriangleWithID_NewEdgeIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> NewEdgeIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.FromNative, CreateTriangleWithID_NewEdgeIDs_ElementSize);
            newEdgeIDs = NewEdgeIDs_Marshaler.FromNative(NewEdgeIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID>.DestructInstance(NewEdgeIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:CreateTriangle
    static readonly IntPtr CreateTriangle_NativeFunction;
    static readonly int CreateTriangle_ParamsSize;
    static readonly int CreateTriangle_PolygonGroupID_Offset;
    static readonly int CreateTriangle_VertexInstanceIDs_Offset;
    static readonly int CreateTriangle_VertexInstanceIDs_ElementSize;
    static readonly int CreateTriangle_NewEdgeIDs_Offset;
    static readonly int CreateTriangle_NewEdgeIDs_ElementSize;
    static readonly int CreateTriangle_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.TriangleID CreateTriangle(UnrealSharp.MeshDescription.PolygonGroupID polygonGroupID, System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexInstanceID> vertexInstanceIDs, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.EdgeID> newEdgeIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateTriangle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.ToNative(IntPtr.Add(ParamsBuffer, CreateTriangle_PolygonGroupID_Offset), 0, null, polygonGroupID);
            IntPtr VertexInstanceIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateTriangle_VertexInstanceIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> VertexInstanceIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID>(1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.FromNative, CreateTriangle_VertexInstanceIDs_ElementSize);
            VertexInstanceIDs_Marshaler.ToNative(VertexInstanceIDs_NativeBuffer, 0, null, vertexInstanceIDs);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateTriangle_NativeFunction, ParamsBuffer);
            
            IntPtr NewEdgeIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateTriangle_NewEdgeIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> NewEdgeIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.FromNative, CreateTriangle_NewEdgeIDs_ElementSize);
            newEdgeIDs = NewEdgeIDs_Marshaler.FromNative(NewEdgeIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID>.DestructInstance(NewEdgeIDs_NativeBuffer, 0);
            UnrealSharp.MeshDescription.TriangleID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.TriangleID>.FromNative(IntPtr.Add(ParamsBuffer, CreateTriangle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:CreatePolygonWithID
    static readonly IntPtr CreatePolygonWithID_NativeFunction;
    static readonly int CreatePolygonWithID_ParamsSize;
    static readonly int CreatePolygonWithID_PolygonID_Offset;
    static readonly int CreatePolygonWithID_PolygonGroupID_Offset;
    static readonly int CreatePolygonWithID_VertexInstanceIDs_Offset;
    static readonly int CreatePolygonWithID_VertexInstanceIDs_ElementSize;
    static readonly int CreatePolygonWithID_NewEdgeIDs_Offset;
    static readonly int CreatePolygonWithID_NewEdgeIDs_ElementSize;
    
    public void CreatePolygonWithID(UnrealSharp.MeshDescription.PolygonID polygonID, UnrealSharp.MeshDescription.PolygonGroupID polygonGroupID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexInstanceID> vertexInstanceIDs, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.EdgeID> newEdgeIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreatePolygonWithID_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, CreatePolygonWithID_PolygonID_Offset), 0, null, polygonID);
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.ToNative(IntPtr.Add(ParamsBuffer, CreatePolygonWithID_PolygonGroupID_Offset), 0, null, polygonGroupID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreatePolygonWithID_NativeFunction, ParamsBuffer);
            
            IntPtr VertexInstanceIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, CreatePolygonWithID_VertexInstanceIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> VertexInstanceIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.FromNative, CreatePolygonWithID_VertexInstanceIDs_ElementSize);
            vertexInstanceIDs = VertexInstanceIDs_Marshaler.FromNative(VertexInstanceIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID>.DestructInstance(VertexInstanceIDs_NativeBuffer, 0);
            IntPtr NewEdgeIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, CreatePolygonWithID_NewEdgeIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> NewEdgeIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.FromNative, CreatePolygonWithID_NewEdgeIDs_ElementSize);
            newEdgeIDs = NewEdgeIDs_Marshaler.FromNative(NewEdgeIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID>.DestructInstance(NewEdgeIDs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:CreatePolygonGroupWithID
    static readonly IntPtr CreatePolygonGroupWithID_NativeFunction;
    static readonly int CreatePolygonGroupWithID_ParamsSize;
    static readonly int CreatePolygonGroupWithID_PolygonGroupID_Offset;
    
    public void CreatePolygonGroupWithID(UnrealSharp.MeshDescription.PolygonGroupID polygonGroupID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreatePolygonGroupWithID_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.ToNative(IntPtr.Add(ParamsBuffer, CreatePolygonGroupWithID_PolygonGroupID_Offset), 0, null, polygonGroupID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreatePolygonGroupWithID_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:CreatePolygonGroup
    static readonly IntPtr CreatePolygonGroup_NativeFunction;
    static readonly int CreatePolygonGroup_ParamsSize;
    static readonly int CreatePolygonGroup_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.PolygonGroupID CreatePolygonGroup()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreatePolygonGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreatePolygonGroup_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MeshDescription.PolygonGroupID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.FromNative(IntPtr.Add(ParamsBuffer, CreatePolygonGroup_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:CreatePolygon
    static readonly IntPtr CreatePolygon_NativeFunction;
    static readonly int CreatePolygon_ParamsSize;
    static readonly int CreatePolygon_PolygonGroupID_Offset;
    static readonly int CreatePolygon_VertexInstanceIDs_Offset;
    static readonly int CreatePolygon_VertexInstanceIDs_ElementSize;
    static readonly int CreatePolygon_NewEdgeIDs_Offset;
    static readonly int CreatePolygon_NewEdgeIDs_ElementSize;
    static readonly int CreatePolygon_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.PolygonID CreatePolygon(UnrealSharp.MeshDescription.PolygonGroupID polygonGroupID, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.VertexInstanceID> vertexInstanceIDs, out System.Collections.Generic.IList<UnrealSharp.MeshDescription.EdgeID> newEdgeIDs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreatePolygon_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonGroupID>.ToNative(IntPtr.Add(ParamsBuffer, CreatePolygon_PolygonGroupID_Offset), 0, null, polygonGroupID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreatePolygon_NativeFunction, ParamsBuffer);
            
            IntPtr VertexInstanceIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, CreatePolygon_VertexInstanceIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> VertexInstanceIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.VertexInstanceID>.FromNative, CreatePolygon_VertexInstanceIDs_ElementSize);
            vertexInstanceIDs = VertexInstanceIDs_Marshaler.FromNative(VertexInstanceIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.VertexInstanceID>.DestructInstance(VertexInstanceIDs_NativeBuffer, 0);
            IntPtr NewEdgeIDs_NativeBuffer = IntPtr.Add(ParamsBuffer, CreatePolygon_NewEdgeIDs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> NewEdgeIDs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID> (1, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative, BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.FromNative, CreatePolygon_NewEdgeIDs_ElementSize);
            newEdgeIDs = NewEdgeIDs_Marshaler.FromNative(NewEdgeIDs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MeshDescription.EdgeID>.DestructInstance(NewEdgeIDs_NativeBuffer, 0);
            UnrealSharp.MeshDescription.PolygonID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.FromNative(IntPtr.Add(ParamsBuffer, CreatePolygon_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:CreateEdgeWithID
    static readonly IntPtr CreateEdgeWithID_NativeFunction;
    static readonly int CreateEdgeWithID_ParamsSize;
    static readonly int CreateEdgeWithID_EdgeID_Offset;
    static readonly int CreateEdgeWithID_VertexID0_Offset;
    static readonly int CreateEdgeWithID_VertexID1_Offset;
    
    public void CreateEdgeWithID(UnrealSharp.MeshDescription.EdgeID edgeID, UnrealSharp.MeshDescription.VertexID vertexID0, UnrealSharp.MeshDescription.VertexID vertexID1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateEdgeWithID_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.ToNative(IntPtr.Add(ParamsBuffer, CreateEdgeWithID_EdgeID_Offset), 0, null, edgeID);
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, CreateEdgeWithID_VertexID0_Offset), 0, null, vertexID0);
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, CreateEdgeWithID_VertexID1_Offset), 0, null, vertexID1);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateEdgeWithID_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:CreateEdge
    static readonly IntPtr CreateEdge_NativeFunction;
    static readonly int CreateEdge_ParamsSize;
    static readonly int CreateEdge_VertexID0_Offset;
    static readonly int CreateEdge_VertexID1_Offset;
    static readonly int CreateEdge_ReturnValue_Offset;
    
    public UnrealSharp.MeshDescription.EdgeID CreateEdge(UnrealSharp.MeshDescription.VertexID vertexID0, UnrealSharp.MeshDescription.VertexID vertexID1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateEdge_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, CreateEdge_VertexID0_Offset), 0, null, vertexID0);
            BlittableMarshaller<UnrealSharp.MeshDescription.VertexID>.ToNative(IntPtr.Add(ParamsBuffer, CreateEdge_VertexID1_Offset), 0, null, vertexID1);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateEdge_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MeshDescription.EdgeID returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MeshDescription.EdgeID>.FromNative(IntPtr.Add(ParamsBuffer, CreateEdge_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MeshDescription.MeshDescriptionBase:ComputePolygonTriangulation
    static readonly IntPtr ComputePolygonTriangulation_NativeFunction;
    static readonly int ComputePolygonTriangulation_ParamsSize;
    static readonly int ComputePolygonTriangulation_PolygonID_Offset;
    
    public void ComputePolygonTriangulation(UnrealSharp.MeshDescription.PolygonID polygonID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ComputePolygonTriangulation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MeshDescription.PolygonID>.ToNative(IntPtr.Add(ParamsBuffer, ComputePolygonTriangulation_PolygonID_Offset), 0, null, polygonID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ComputePolygonTriangulation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MetasoundEngine;

[UClass]
abstract public partial class MetaSoundBuilderBase : UnrealSharp.CoreUObject.Object
{
    
    static MetaSoundBuilderBase()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MetaSoundBuilderBase");
        
        
        SetNodeInputDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNodeInputDefault");
        SetNodeInputDefault_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNodeInputDefault_NativeFunction);
        SetNodeInputDefault_NodeInputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNodeInputDefault_NativeFunction, "NodeInputHandle");
        SetNodeInputDefault_Literal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNodeInputDefault_NativeFunction, "Literal");
        SetNodeInputDefault_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNodeInputDefault_NativeFunction, "OutResult");
        SetGraphInputDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGraphInputDefault");
        SetGraphInputDefault_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGraphInputDefault_NativeFunction);
        SetGraphInputDefault_InputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGraphInputDefault_NativeFunction, "InputName");
        SetGraphInputDefault_Literal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGraphInputDefault_NativeFunction, "Literal");
        SetGraphInputDefault_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGraphInputDefault_NativeFunction, "OutResult");
        RemoveNodeInputDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveNodeInputDefault");
        RemoveNodeInputDefault_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveNodeInputDefault_NativeFunction);
        RemoveNodeInputDefault_InputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveNodeInputDefault_NativeFunction, "InputHandle");
        RemoveNodeInputDefault_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveNodeInputDefault_NativeFunction, "OutResult");
        RemoveNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveNode");
        RemoveNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveNode_NativeFunction);
        RemoveNode_NodeHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveNode_NativeFunction, "NodeHandle");
        RemoveNode_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveNode_NativeFunction, "OutResult");
        RemoveInterface_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveInterface");
        RemoveInterface_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveInterface_NativeFunction);
        RemoveInterface_InterfaceName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveInterface_NativeFunction, "InterfaceName");
        RemoveInterface_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveInterface_NativeFunction, "OutResult");
        RemoveGraphOutput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveGraphOutput");
        RemoveGraphOutput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveGraphOutput_NativeFunction);
        RemoveGraphOutput_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveGraphOutput_NativeFunction, "Name");
        RemoveGraphOutput_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveGraphOutput_NativeFunction, "OutResult");
        RemoveGraphInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveGraphInput");
        RemoveGraphInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveGraphInput_NativeFunction);
        RemoveGraphInput_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveGraphInput_NativeFunction, "Name");
        RemoveGraphInput_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveGraphInput_NativeFunction, "OutResult");
        NodesAreConnected_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NodesAreConnected");
        NodesAreConnected_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NodesAreConnected_NativeFunction);
        NodesAreConnected_OutputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NodesAreConnected_NativeFunction, "OutputHandle");
        NodesAreConnected_InputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NodesAreConnected_NativeFunction, "InputHandle");
        NodesAreConnected_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NodesAreConnected_NativeFunction, "ReturnValue");
        NodeOutputIsConnected_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NodeOutputIsConnected");
        NodeOutputIsConnected_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NodeOutputIsConnected_NativeFunction);
        NodeOutputIsConnected_OutputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NodeOutputIsConnected_NativeFunction, "OutputHandle");
        NodeOutputIsConnected_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NodeOutputIsConnected_NativeFunction, "ReturnValue");
        NodeInputIsConnected_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NodeInputIsConnected");
        NodeInputIsConnected_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NodeInputIsConnected_NativeFunction);
        NodeInputIsConnected_InputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NodeInputIsConnected_NativeFunction, "InputHandle");
        NodeInputIsConnected_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NodeInputIsConnected_NativeFunction, "ReturnValue");
        IsPreset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPreset");
        IsPreset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPreset_NativeFunction);
        IsPreset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPreset_NativeFunction, "ReturnValue");
        InterfaceIsDeclared_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InterfaceIsDeclared");
        InterfaceIsDeclared_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InterfaceIsDeclared_NativeFunction);
        InterfaceIsDeclared_InterfaceName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InterfaceIsDeclared_NativeFunction, "InterfaceName");
        InterfaceIsDeclared_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InterfaceIsDeclared_NativeFunction, "ReturnValue");
        GetReferencedPresetAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetReferencedPresetAsset");
        GetReferencedPresetAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetReferencedPresetAsset_NativeFunction);
        GetReferencedPresetAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetReferencedPresetAsset_NativeFunction, "ReturnValue");
        GetNodeOutputData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNodeOutputData");
        GetNodeOutputData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNodeOutputData_NativeFunction);
        GetNodeOutputData_OutputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeOutputData_NativeFunction, "OutputHandle");
        GetNodeOutputData_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeOutputData_NativeFunction, "Name");
        GetNodeOutputData_DataType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeOutputData_NativeFunction, "DataType");
        GetNodeOutputData_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeOutputData_NativeFunction, "OutResult");
        GetNodeInputDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNodeInputDefault");
        GetNodeInputDefault_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNodeInputDefault_NativeFunction);
        GetNodeInputDefault_InputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeInputDefault_NativeFunction, "InputHandle");
        GetNodeInputDefault_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeInputDefault_NativeFunction, "OutResult");
        GetNodeInputDefault_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeInputDefault_NativeFunction, "ReturnValue");
        GetNodeInputData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNodeInputData");
        GetNodeInputData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNodeInputData_NativeFunction);
        GetNodeInputData_InputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeInputData_NativeFunction, "InputHandle");
        GetNodeInputData_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeInputData_NativeFunction, "Name");
        GetNodeInputData_DataType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeInputData_NativeFunction, "DataType");
        GetNodeInputData_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeInputData_NativeFunction, "OutResult");
        GetNodeInputClassDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNodeInputClassDefault");
        GetNodeInputClassDefault_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNodeInputClassDefault_NativeFunction);
        GetNodeInputClassDefault_InputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeInputClassDefault_NativeFunction, "InputHandle");
        GetNodeInputClassDefault_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeInputClassDefault_NativeFunction, "OutResult");
        GetNodeInputClassDefault_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeInputClassDefault_NativeFunction, "ReturnValue");
        FindNodeOutputsByDataType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNodeOutputsByDataType");
        FindNodeOutputsByDataType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNodeOutputsByDataType_NativeFunction);
        FindNodeOutputsByDataType_NodeHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeOutputsByDataType_NativeFunction, "NodeHandle");
        FindNodeOutputsByDataType_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeOutputsByDataType_NativeFunction, "OutResult");
        FindNodeOutputsByDataType_DataType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeOutputsByDataType_NativeFunction, "DataType");
        FindNodeOutputsByDataType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeOutputsByDataType_NativeFunction, "ReturnValue");
        FindNodeOutputsByDataType_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindNodeOutputsByDataType_NativeFunction, "ReturnValue");
        FindNodeOutputs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNodeOutputs");
        FindNodeOutputs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNodeOutputs_NativeFunction);
        FindNodeOutputs_NodeHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeOutputs_NativeFunction, "NodeHandle");
        FindNodeOutputs_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeOutputs_NativeFunction, "OutResult");
        FindNodeOutputs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeOutputs_NativeFunction, "ReturnValue");
        FindNodeOutputs_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindNodeOutputs_NativeFunction, "ReturnValue");
        FindNodeOutputParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNodeOutputParent");
        FindNodeOutputParent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNodeOutputParent_NativeFunction);
        FindNodeOutputParent_OutputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeOutputParent_NativeFunction, "OutputHandle");
        FindNodeOutputParent_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeOutputParent_NativeFunction, "OutResult");
        FindNodeOutputParent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeOutputParent_NativeFunction, "ReturnValue");
        FindNodeOutputByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNodeOutputByName");
        FindNodeOutputByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNodeOutputByName_NativeFunction);
        FindNodeOutputByName_NodeHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeOutputByName_NativeFunction, "NodeHandle");
        FindNodeOutputByName_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeOutputByName_NativeFunction, "OutputName");
        FindNodeOutputByName_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeOutputByName_NativeFunction, "OutResult");
        FindNodeOutputByName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeOutputByName_NativeFunction, "ReturnValue");
        FindNodeInputsByDataType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNodeInputsByDataType");
        FindNodeInputsByDataType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNodeInputsByDataType_NativeFunction);
        FindNodeInputsByDataType_NodeHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeInputsByDataType_NativeFunction, "NodeHandle");
        FindNodeInputsByDataType_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeInputsByDataType_NativeFunction, "OutResult");
        FindNodeInputsByDataType_DataType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeInputsByDataType_NativeFunction, "DataType");
        FindNodeInputsByDataType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeInputsByDataType_NativeFunction, "ReturnValue");
        FindNodeInputsByDataType_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindNodeInputsByDataType_NativeFunction, "ReturnValue");
        FindNodeInputs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNodeInputs");
        FindNodeInputs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNodeInputs_NativeFunction);
        FindNodeInputs_NodeHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeInputs_NativeFunction, "NodeHandle");
        FindNodeInputs_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeInputs_NativeFunction, "OutResult");
        FindNodeInputs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeInputs_NativeFunction, "ReturnValue");
        FindNodeInputs_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindNodeInputs_NativeFunction, "ReturnValue");
        FindNodeInputParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNodeInputParent");
        FindNodeInputParent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNodeInputParent_NativeFunction);
        FindNodeInputParent_InputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeInputParent_NativeFunction, "InputHandle");
        FindNodeInputParent_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeInputParent_NativeFunction, "OutResult");
        FindNodeInputParent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeInputParent_NativeFunction, "ReturnValue");
        FindNodeInputByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNodeInputByName");
        FindNodeInputByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNodeInputByName_NativeFunction);
        FindNodeInputByName_NodeHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeInputByName_NativeFunction, "NodeHandle");
        FindNodeInputByName_InputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeInputByName_NativeFunction, "InputName");
        FindNodeInputByName_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeInputByName_NativeFunction, "OutResult");
        FindNodeInputByName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeInputByName_NativeFunction, "ReturnValue");
        FindNodeClassVersion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNodeClassVersion");
        FindNodeClassVersion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNodeClassVersion_NativeFunction);
        FindNodeClassVersion_NodeHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeClassVersion_NativeFunction, "NodeHandle");
        FindNodeClassVersion_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeClassVersion_NativeFunction, "OutResult");
        FindNodeClassVersion_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeClassVersion_NativeFunction, "ReturnValue");
        FindInterfaceOutputNodes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindInterfaceOutputNodes");
        FindInterfaceOutputNodes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindInterfaceOutputNodes_NativeFunction);
        FindInterfaceOutputNodes_InterfaceName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindInterfaceOutputNodes_NativeFunction, "InterfaceName");
        FindInterfaceOutputNodes_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindInterfaceOutputNodes_NativeFunction, "OutResult");
        FindInterfaceOutputNodes_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindInterfaceOutputNodes_NativeFunction, "ReturnValue");
        FindInterfaceOutputNodes_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindInterfaceOutputNodes_NativeFunction, "ReturnValue");
        FindInterfaceInputNodes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindInterfaceInputNodes");
        FindInterfaceInputNodes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindInterfaceInputNodes_NativeFunction);
        FindInterfaceInputNodes_InterfaceName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindInterfaceInputNodes_NativeFunction, "InterfaceName");
        FindInterfaceInputNodes_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindInterfaceInputNodes_NativeFunction, "OutResult");
        FindInterfaceInputNodes_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindInterfaceInputNodes_NativeFunction, "ReturnValue");
        FindInterfaceInputNodes_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindInterfaceInputNodes_NativeFunction, "ReturnValue");
        FindGraphOutputNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindGraphOutputNode");
        FindGraphOutputNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindGraphOutputNode_NativeFunction);
        FindGraphOutputNode_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindGraphOutputNode_NativeFunction, "OutputName");
        FindGraphOutputNode_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindGraphOutputNode_NativeFunction, "OutResult");
        FindGraphOutputNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindGraphOutputNode_NativeFunction, "ReturnValue");
        FindGraphInputNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindGraphInputNode");
        FindGraphInputNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindGraphInputNode_NativeFunction);
        FindGraphInputNode_InputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindGraphInputNode_NativeFunction, "InputName");
        FindGraphInputNode_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindGraphInputNode_NativeFunction, "OutResult");
        FindGraphInputNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindGraphInputNode_NativeFunction, "ReturnValue");
        DisconnectNodesByInterfaceBindings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DisconnectNodesByInterfaceBindings");
        DisconnectNodesByInterfaceBindings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DisconnectNodesByInterfaceBindings_NativeFunction);
        DisconnectNodesByInterfaceBindings_FromNodeHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisconnectNodesByInterfaceBindings_NativeFunction, "FromNodeHandle");
        DisconnectNodesByInterfaceBindings_ToNodeHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisconnectNodesByInterfaceBindings_NativeFunction, "ToNodeHandle");
        DisconnectNodesByInterfaceBindings_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisconnectNodesByInterfaceBindings_NativeFunction, "OutResult");
        DisconnectNodes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DisconnectNodes");
        DisconnectNodes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DisconnectNodes_NativeFunction);
        DisconnectNodes_NodeOutputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisconnectNodes_NativeFunction, "NodeOutputHandle");
        DisconnectNodes_NodeInputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisconnectNodes_NativeFunction, "NodeInputHandle");
        DisconnectNodes_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisconnectNodes_NativeFunction, "OutResult");
        DisconnectNodeOutput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DisconnectNodeOutput");
        DisconnectNodeOutput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DisconnectNodeOutput_NativeFunction);
        DisconnectNodeOutput_NodeOutputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisconnectNodeOutput_NativeFunction, "NodeOutputHandle");
        DisconnectNodeOutput_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisconnectNodeOutput_NativeFunction, "OutResult");
        DisconnectNodeInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DisconnectNodeInput");
        DisconnectNodeInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DisconnectNodeInput_NativeFunction);
        DisconnectNodeInput_NodeInputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisconnectNodeInput_NativeFunction, "NodeInputHandle");
        DisconnectNodeInput_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisconnectNodeInput_NativeFunction, "OutResult");
        ConvertFromPreset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertFromPreset");
        ConvertFromPreset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertFromPreset_NativeFunction);
        ConvertFromPreset_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertFromPreset_NativeFunction, "OutResult");
        ContainsNodeOutput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ContainsNodeOutput");
        ContainsNodeOutput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ContainsNodeOutput_NativeFunction);
        ContainsNodeOutput_Output_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ContainsNodeOutput_NativeFunction, "Output");
        ContainsNodeOutput_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ContainsNodeOutput_NativeFunction, "ReturnValue");
        ContainsNodeInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ContainsNodeInput");
        ContainsNodeInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ContainsNodeInput_NativeFunction);
        ContainsNodeInput_Input_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ContainsNodeInput_NativeFunction, "Input");
        ContainsNodeInput_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ContainsNodeInput_NativeFunction, "ReturnValue");
        ContainsNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ContainsNode");
        ContainsNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ContainsNode_NativeFunction);
        ContainsNode_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ContainsNode_NativeFunction, "Node");
        ContainsNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ContainsNode_NativeFunction, "ReturnValue");
        ConnectNodesByInterfaceBindings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectNodesByInterfaceBindings");
        ConnectNodesByInterfaceBindings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectNodesByInterfaceBindings_NativeFunction);
        ConnectNodesByInterfaceBindings_FromNodeHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodesByInterfaceBindings_NativeFunction, "FromNodeHandle");
        ConnectNodesByInterfaceBindings_ToNodeHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodesByInterfaceBindings_NativeFunction, "ToNodeHandle");
        ConnectNodesByInterfaceBindings_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodesByInterfaceBindings_NativeFunction, "OutResult");
        ConnectNodes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectNodes");
        ConnectNodes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectNodes_NativeFunction);
        ConnectNodes_NodeOutputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodes_NativeFunction, "NodeOutputHandle");
        ConnectNodes_NodeInputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodes_NativeFunction, "NodeInputHandle");
        ConnectNodes_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodes_NativeFunction, "OutResult");
        ConnectNodeOutputToGraphOutput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectNodeOutputToGraphOutput");
        ConnectNodeOutputToGraphOutput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectNodeOutputToGraphOutput_NativeFunction);
        ConnectNodeOutputToGraphOutput_GraphOutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodeOutputToGraphOutput_NativeFunction, "GraphOutputName");
        ConnectNodeOutputToGraphOutput_NodeOutputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodeOutputToGraphOutput_NativeFunction, "NodeOutputHandle");
        ConnectNodeOutputToGraphOutput_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodeOutputToGraphOutput_NativeFunction, "OutResult");
        ConnectNodeOutputsToMatchingGraphInterfaceOutputs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectNodeOutputsToMatchingGraphInterfaceOutputs");
        ConnectNodeOutputsToMatchingGraphInterfaceOutputs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectNodeOutputsToMatchingGraphInterfaceOutputs_NativeFunction);
        ConnectNodeOutputsToMatchingGraphInterfaceOutputs_NodeHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodeOutputsToMatchingGraphInterfaceOutputs_NativeFunction, "NodeHandle");
        ConnectNodeOutputsToMatchingGraphInterfaceOutputs_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodeOutputsToMatchingGraphInterfaceOutputs_NativeFunction, "OutResult");
        ConnectNodeOutputsToMatchingGraphInterfaceOutputs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodeOutputsToMatchingGraphInterfaceOutputs_NativeFunction, "ReturnValue");
        ConnectNodeOutputsToMatchingGraphInterfaceOutputs_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ConnectNodeOutputsToMatchingGraphInterfaceOutputs_NativeFunction, "ReturnValue");
        ConnectNodeInputToGraphInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectNodeInputToGraphInput");
        ConnectNodeInputToGraphInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectNodeInputToGraphInput_NativeFunction);
        ConnectNodeInputToGraphInput_GraphInputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodeInputToGraphInput_NativeFunction, "GraphInputName");
        ConnectNodeInputToGraphInput_NodeInputHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodeInputToGraphInput_NativeFunction, "NodeInputHandle");
        ConnectNodeInputToGraphInput_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodeInputToGraphInput_NativeFunction, "OutResult");
        ConnectNodeInputsToMatchingGraphInterfaceInputs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectNodeInputsToMatchingGraphInterfaceInputs");
        ConnectNodeInputsToMatchingGraphInterfaceInputs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectNodeInputsToMatchingGraphInterfaceInputs_NativeFunction);
        ConnectNodeInputsToMatchingGraphInterfaceInputs_NodeHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodeInputsToMatchingGraphInterfaceInputs_NativeFunction, "NodeHandle");
        ConnectNodeInputsToMatchingGraphInterfaceInputs_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodeInputsToMatchingGraphInterfaceInputs_NativeFunction, "OutResult");
        ConnectNodeInputsToMatchingGraphInterfaceInputs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectNodeInputsToMatchingGraphInterfaceInputs_NativeFunction, "ReturnValue");
        ConnectNodeInputsToMatchingGraphInterfaceInputs_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ConnectNodeInputsToMatchingGraphInterfaceInputs_NativeFunction, "ReturnValue");
        AddNodeByClassName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddNodeByClassName");
        AddNodeByClassName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddNodeByClassName_NativeFunction);
        AddNodeByClassName_ClassName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddNodeByClassName_NativeFunction, "ClassName");
        AddNodeByClassName_MajorVersion_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddNodeByClassName_NativeFunction, "MajorVersion");
        AddNodeByClassName_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddNodeByClassName_NativeFunction, "OutResult");
        AddNodeByClassName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddNodeByClassName_NativeFunction, "ReturnValue");
        AddInterface_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddInterface");
        AddInterface_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddInterface_NativeFunction);
        AddInterface_InterfaceName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInterface_NativeFunction, "InterfaceName");
        AddInterface_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInterface_NativeFunction, "OutResult");
        AddGraphOutputNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddGraphOutputNode");
        AddGraphOutputNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddGraphOutputNode_NativeFunction);
        AddGraphOutputNode_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGraphOutputNode_NativeFunction, "Name");
        AddGraphOutputNode_DataType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGraphOutputNode_NativeFunction, "DataType");
        AddGraphOutputNode_DefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGraphOutputNode_NativeFunction, "DefaultValue");
        AddGraphOutputNode_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGraphOutputNode_NativeFunction, "OutResult");
        AddGraphOutputNode_bIsConstructorOutput_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGraphOutputNode_NativeFunction, "bIsConstructorOutput");
        AddGraphOutputNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGraphOutputNode_NativeFunction, "ReturnValue");
        AddGraphInputNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddGraphInputNode");
        AddGraphInputNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddGraphInputNode_NativeFunction);
        AddGraphInputNode_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGraphInputNode_NativeFunction, "Name");
        AddGraphInputNode_DataType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGraphInputNode_NativeFunction, "DataType");
        AddGraphInputNode_DefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGraphInputNode_NativeFunction, "DefaultValue");
        AddGraphInputNode_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGraphInputNode_NativeFunction, "OutResult");
        AddGraphInputNode_bIsConstructorInput_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGraphInputNode_NativeFunction, "bIsConstructorInput");
        AddGraphInputNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGraphInputNode_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MetaSoundBuilderBase(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:SetNodeInputDefault
    static readonly IntPtr SetNodeInputDefault_NativeFunction;
    static readonly int SetNodeInputDefault_ParamsSize;
    static readonly int SetNodeInputDefault_NodeInputHandle_Offset;
    static readonly int SetNodeInputDefault_Literal_Offset;
    static readonly int SetNodeInputDefault_OutResult_Offset;
    
    public void SetNodeInputDefault(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle nodeInputHandle, UnrealSharp.MetasoundFrontend.MetasoundFrontendLiteral literal, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNodeInputDefault_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetNodeInputDefault_NodeInputHandle_Offset), 0, null, nodeInputHandle);
            UnrealSharp.MetasoundFrontend.MetasoundFrontendLiteralMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetNodeInputDefault_Literal_Offset), 0, null, literal);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNodeInputDefault_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, SetNodeInputDefault_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:SetGraphInputDefault
    static readonly IntPtr SetGraphInputDefault_NativeFunction;
    static readonly int SetGraphInputDefault_ParamsSize;
    static readonly int SetGraphInputDefault_InputName_Offset;
    static readonly int SetGraphInputDefault_Literal_Offset;
    static readonly int SetGraphInputDefault_OutResult_Offset;
    
    public void SetGraphInputDefault(Name inputName, UnrealSharp.MetasoundFrontend.MetasoundFrontendLiteral literal, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGraphInputDefault_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetGraphInputDefault_InputName_Offset), 0, null, inputName);
            UnrealSharp.MetasoundFrontend.MetasoundFrontendLiteralMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetGraphInputDefault_Literal_Offset), 0, null, literal);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGraphInputDefault_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, SetGraphInputDefault_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:RemoveNodeInputDefault
    static readonly IntPtr RemoveNodeInputDefault_NativeFunction;
    static readonly int RemoveNodeInputDefault_ParamsSize;
    static readonly int RemoveNodeInputDefault_InputHandle_Offset;
    static readonly int RemoveNodeInputDefault_OutResult_Offset;
    
    public void RemoveNodeInputDefault(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle inputHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveNodeInputDefault_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RemoveNodeInputDefault_InputHandle_Offset), 0, null, inputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveNodeInputDefault_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, RemoveNodeInputDefault_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:RemoveNode
    static readonly IntPtr RemoveNode_NativeFunction;
    static readonly int RemoveNode_ParamsSize;
    static readonly int RemoveNode_NodeHandle_Offset;
    static readonly int RemoveNode_OutResult_Offset;
    
    public void RemoveNode(UnrealSharp.MetasoundEngine.MetaSoundNodeHandle nodeHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RemoveNode_NodeHandle_Offset), 0, null, nodeHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveNode_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, RemoveNode_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:RemoveInterface
    static readonly IntPtr RemoveInterface_NativeFunction;
    static readonly int RemoveInterface_ParamsSize;
    static readonly int RemoveInterface_InterfaceName_Offset;
    static readonly int RemoveInterface_OutResult_Offset;
    
    public void RemoveInterface(Name interfaceName, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveInterface_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveInterface_InterfaceName_Offset), 0, null, interfaceName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveInterface_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, RemoveInterface_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:RemoveGraphOutput
    static readonly IntPtr RemoveGraphOutput_NativeFunction;
    static readonly int RemoveGraphOutput_ParamsSize;
    static readonly int RemoveGraphOutput_Name_Offset;
    static readonly int RemoveGraphOutput_OutResult_Offset;
    
    public void RemoveGraphOutput(Name name, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveGraphOutput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveGraphOutput_Name_Offset), 0, null, name);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveGraphOutput_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, RemoveGraphOutput_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:RemoveGraphInput
    static readonly IntPtr RemoveGraphInput_NativeFunction;
    static readonly int RemoveGraphInput_ParamsSize;
    static readonly int RemoveGraphInput_Name_Offset;
    static readonly int RemoveGraphInput_OutResult_Offset;
    
    public void RemoveGraphInput(Name name, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveGraphInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveGraphInput_Name_Offset), 0, null, name);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveGraphInput_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, RemoveGraphInput_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:NodesAreConnected
    static readonly IntPtr NodesAreConnected_NativeFunction;
    static readonly int NodesAreConnected_ParamsSize;
    static readonly int NodesAreConnected_OutputHandle_Offset;
    static readonly int NodesAreConnected_InputHandle_Offset;
    static readonly int NodesAreConnected_ReturnValue_Offset;
    
    public bool NodesAreConnected(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle outputHandle, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle inputHandle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NodesAreConnected_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, NodesAreConnected_OutputHandle_Offset), 0, null, outputHandle);
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, NodesAreConnected_InputHandle_Offset), 0, null, inputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, NodesAreConnected_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NodesAreConnected_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:NodeOutputIsConnected
    static readonly IntPtr NodeOutputIsConnected_NativeFunction;
    static readonly int NodeOutputIsConnected_ParamsSize;
    static readonly int NodeOutputIsConnected_OutputHandle_Offset;
    static readonly int NodeOutputIsConnected_ReturnValue_Offset;
    
    public bool NodeOutputIsConnected(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle outputHandle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NodeOutputIsConnected_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, NodeOutputIsConnected_OutputHandle_Offset), 0, null, outputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, NodeOutputIsConnected_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NodeOutputIsConnected_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:NodeInputIsConnected
    static readonly IntPtr NodeInputIsConnected_NativeFunction;
    static readonly int NodeInputIsConnected_ParamsSize;
    static readonly int NodeInputIsConnected_InputHandle_Offset;
    static readonly int NodeInputIsConnected_ReturnValue_Offset;
    
    public bool NodeInputIsConnected(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle inputHandle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NodeInputIsConnected_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, NodeInputIsConnected_InputHandle_Offset), 0, null, inputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, NodeInputIsConnected_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NodeInputIsConnected_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:IsPreset
    static readonly IntPtr IsPreset_NativeFunction;
    static readonly int IsPreset_ParamsSize;
    static readonly int IsPreset_ReturnValue_Offset;
    
    public bool IsPreset()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPreset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPreset_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPreset_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:InterfaceIsDeclared
    static readonly IntPtr InterfaceIsDeclared_NativeFunction;
    static readonly int InterfaceIsDeclared_ParamsSize;
    static readonly int InterfaceIsDeclared_InterfaceName_Offset;
    static readonly int InterfaceIsDeclared_ReturnValue_Offset;
    
    public bool InterfaceIsDeclared(Name interfaceName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[InterfaceIsDeclared_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, InterfaceIsDeclared_InterfaceName_Offset), 0, null, interfaceName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, InterfaceIsDeclared_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, InterfaceIsDeclared_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:GetReferencedPresetAsset
    static readonly IntPtr GetReferencedPresetAsset_NativeFunction;
    static readonly int GetReferencedPresetAsset_ParamsSize;
    static readonly int GetReferencedPresetAsset_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.Object GetReferencedPresetAsset()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetReferencedPresetAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetReferencedPresetAsset_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetReferencedPresetAsset_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:GetNodeOutputData
    static readonly IntPtr GetNodeOutputData_NativeFunction;
    static readonly int GetNodeOutputData_ParamsSize;
    static readonly int GetNodeOutputData_OutputHandle_Offset;
    static readonly int GetNodeOutputData_Name_Offset;
    static readonly int GetNodeOutputData_DataType_Offset;
    static readonly int GetNodeOutputData_OutResult_Offset;
    
    public void GetNodeOutputData(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle outputHandle, out Name name, out Name dataType, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNodeOutputData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetNodeOutputData_OutputHandle_Offset), 0, null, outputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNodeOutputData_NativeFunction, ParamsBuffer);
            
            name = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetNodeOutputData_Name_Offset), 0, null);
            dataType = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetNodeOutputData_DataType_Offset), 0, null);
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, GetNodeOutputData_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:GetNodeInputDefault
    static readonly IntPtr GetNodeInputDefault_NativeFunction;
    static readonly int GetNodeInputDefault_ParamsSize;
    static readonly int GetNodeInputDefault_InputHandle_Offset;
    static readonly int GetNodeInputDefault_OutResult_Offset;
    static readonly int GetNodeInputDefault_ReturnValue_Offset;
    
    public UnrealSharp.MetasoundFrontend.MetasoundFrontendLiteral GetNodeInputDefault(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle inputHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNodeInputDefault_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetNodeInputDefault_InputHandle_Offset), 0, null, inputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNodeInputDefault_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, GetNodeInputDefault_OutResult_Offset), 0, null);
            UnrealSharp.MetasoundFrontend.MetasoundFrontendLiteral returnValue;
            returnValue = UnrealSharp.MetasoundFrontend.MetasoundFrontendLiteralMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetNodeInputDefault_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:GetNodeInputData
    static readonly IntPtr GetNodeInputData_NativeFunction;
    static readonly int GetNodeInputData_ParamsSize;
    static readonly int GetNodeInputData_InputHandle_Offset;
    static readonly int GetNodeInputData_Name_Offset;
    static readonly int GetNodeInputData_DataType_Offset;
    static readonly int GetNodeInputData_OutResult_Offset;
    
    public void GetNodeInputData(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle inputHandle, out Name name, out Name dataType, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNodeInputData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetNodeInputData_InputHandle_Offset), 0, null, inputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNodeInputData_NativeFunction, ParamsBuffer);
            
            name = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetNodeInputData_Name_Offset), 0, null);
            dataType = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetNodeInputData_DataType_Offset), 0, null);
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, GetNodeInputData_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:GetNodeInputClassDefault
    static readonly IntPtr GetNodeInputClassDefault_NativeFunction;
    static readonly int GetNodeInputClassDefault_ParamsSize;
    static readonly int GetNodeInputClassDefault_InputHandle_Offset;
    static readonly int GetNodeInputClassDefault_OutResult_Offset;
    static readonly int GetNodeInputClassDefault_ReturnValue_Offset;
    
    public UnrealSharp.MetasoundFrontend.MetasoundFrontendLiteral GetNodeInputClassDefault(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle inputHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNodeInputClassDefault_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetNodeInputClassDefault_InputHandle_Offset), 0, null, inputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNodeInputClassDefault_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, GetNodeInputClassDefault_OutResult_Offset), 0, null);
            UnrealSharp.MetasoundFrontend.MetasoundFrontendLiteral returnValue;
            returnValue = UnrealSharp.MetasoundFrontend.MetasoundFrontendLiteralMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetNodeInputClassDefault_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:FindNodeOutputsByDataType
    static readonly IntPtr FindNodeOutputsByDataType_NativeFunction;
    static readonly int FindNodeOutputsByDataType_ParamsSize;
    static readonly int FindNodeOutputsByDataType_NodeHandle_Offset;
    static readonly int FindNodeOutputsByDataType_OutResult_Offset;
    static readonly int FindNodeOutputsByDataType_DataType_Offset;
    static readonly int FindNodeOutputsByDataType_ReturnValue_Offset;
    static readonly int FindNodeOutputsByDataType_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle> FindNodeOutputsByDataType(UnrealSharp.MetasoundEngine.MetaSoundNodeHandle nodeHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult, Name dataType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNodeOutputsByDataType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindNodeOutputsByDataType_NodeHandle_Offset), 0, null, nodeHandle);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindNodeOutputsByDataType_DataType_Offset), 0, null, dataType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindNodeOutputsByDataType_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, FindNodeOutputsByDataType_OutResult_Offset), 0, null);
            System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindNodeOutputsByDataType_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle> (1, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.ToNative, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.FromNative, FindNodeOutputsByDataType_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:FindNodeOutputs
    static readonly IntPtr FindNodeOutputs_NativeFunction;
    static readonly int FindNodeOutputs_ParamsSize;
    static readonly int FindNodeOutputs_NodeHandle_Offset;
    static readonly int FindNodeOutputs_OutResult_Offset;
    static readonly int FindNodeOutputs_ReturnValue_Offset;
    static readonly int FindNodeOutputs_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle> FindNodeOutputs(UnrealSharp.MetasoundEngine.MetaSoundNodeHandle nodeHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNodeOutputs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindNodeOutputs_NodeHandle_Offset), 0, null, nodeHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindNodeOutputs_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, FindNodeOutputs_OutResult_Offset), 0, null);
            System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindNodeOutputs_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle> (1, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.ToNative, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.FromNative, FindNodeOutputs_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:FindNodeOutputParent
    static readonly IntPtr FindNodeOutputParent_NativeFunction;
    static readonly int FindNodeOutputParent_ParamsSize;
    static readonly int FindNodeOutputParent_OutputHandle_Offset;
    static readonly int FindNodeOutputParent_OutResult_Offset;
    static readonly int FindNodeOutputParent_ReturnValue_Offset;
    
    public UnrealSharp.MetasoundEngine.MetaSoundNodeHandle FindNodeOutputParent(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle outputHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNodeOutputParent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindNodeOutputParent_OutputHandle_Offset), 0, null, outputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindNodeOutputParent_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, FindNodeOutputParent_OutResult_Offset), 0, null);
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandle returnValue;
            returnValue = UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FindNodeOutputParent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:FindNodeOutputByName
    static readonly IntPtr FindNodeOutputByName_NativeFunction;
    static readonly int FindNodeOutputByName_ParamsSize;
    static readonly int FindNodeOutputByName_NodeHandle_Offset;
    static readonly int FindNodeOutputByName_OutputName_Offset;
    static readonly int FindNodeOutputByName_OutResult_Offset;
    static readonly int FindNodeOutputByName_ReturnValue_Offset;
    
    public UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle FindNodeOutputByName(UnrealSharp.MetasoundEngine.MetaSoundNodeHandle nodeHandle, Name outputName, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNodeOutputByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindNodeOutputByName_NodeHandle_Offset), 0, null, nodeHandle);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindNodeOutputByName_OutputName_Offset), 0, null, outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindNodeOutputByName_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, FindNodeOutputByName_OutResult_Offset), 0, null);
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle returnValue;
            returnValue = UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FindNodeOutputByName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:FindNodeInputsByDataType
    static readonly IntPtr FindNodeInputsByDataType_NativeFunction;
    static readonly int FindNodeInputsByDataType_ParamsSize;
    static readonly int FindNodeInputsByDataType_NodeHandle_Offset;
    static readonly int FindNodeInputsByDataType_OutResult_Offset;
    static readonly int FindNodeInputsByDataType_DataType_Offset;
    static readonly int FindNodeInputsByDataType_ReturnValue_Offset;
    static readonly int FindNodeInputsByDataType_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle> FindNodeInputsByDataType(UnrealSharp.MetasoundEngine.MetaSoundNodeHandle nodeHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult, Name dataType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNodeInputsByDataType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindNodeInputsByDataType_NodeHandle_Offset), 0, null, nodeHandle);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindNodeInputsByDataType_DataType_Offset), 0, null, dataType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindNodeInputsByDataType_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, FindNodeInputsByDataType_OutResult_Offset), 0, null);
            System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindNodeInputsByDataType_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle> (1, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.FromNative, FindNodeInputsByDataType_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:FindNodeInputs
    static readonly IntPtr FindNodeInputs_NativeFunction;
    static readonly int FindNodeInputs_ParamsSize;
    static readonly int FindNodeInputs_NodeHandle_Offset;
    static readonly int FindNodeInputs_OutResult_Offset;
    static readonly int FindNodeInputs_ReturnValue_Offset;
    static readonly int FindNodeInputs_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle> FindNodeInputs(UnrealSharp.MetasoundEngine.MetaSoundNodeHandle nodeHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNodeInputs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindNodeInputs_NodeHandle_Offset), 0, null, nodeHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindNodeInputs_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, FindNodeInputs_OutResult_Offset), 0, null);
            System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindNodeInputs_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle> (1, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.FromNative, FindNodeInputs_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:FindNodeInputParent
    static readonly IntPtr FindNodeInputParent_NativeFunction;
    static readonly int FindNodeInputParent_ParamsSize;
    static readonly int FindNodeInputParent_InputHandle_Offset;
    static readonly int FindNodeInputParent_OutResult_Offset;
    static readonly int FindNodeInputParent_ReturnValue_Offset;
    
    public UnrealSharp.MetasoundEngine.MetaSoundNodeHandle FindNodeInputParent(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle inputHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNodeInputParent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindNodeInputParent_InputHandle_Offset), 0, null, inputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindNodeInputParent_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, FindNodeInputParent_OutResult_Offset), 0, null);
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandle returnValue;
            returnValue = UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FindNodeInputParent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:FindNodeInputByName
    static readonly IntPtr FindNodeInputByName_NativeFunction;
    static readonly int FindNodeInputByName_ParamsSize;
    static readonly int FindNodeInputByName_NodeHandle_Offset;
    static readonly int FindNodeInputByName_InputName_Offset;
    static readonly int FindNodeInputByName_OutResult_Offset;
    static readonly int FindNodeInputByName_ReturnValue_Offset;
    
    public UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle FindNodeInputByName(UnrealSharp.MetasoundEngine.MetaSoundNodeHandle nodeHandle, Name inputName, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNodeInputByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindNodeInputByName_NodeHandle_Offset), 0, null, nodeHandle);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindNodeInputByName_InputName_Offset), 0, null, inputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindNodeInputByName_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, FindNodeInputByName_OutResult_Offset), 0, null);
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle returnValue;
            returnValue = UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FindNodeInputByName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:FindNodeClassVersion
    static readonly IntPtr FindNodeClassVersion_NativeFunction;
    static readonly int FindNodeClassVersion_ParamsSize;
    static readonly int FindNodeClassVersion_NodeHandle_Offset;
    static readonly int FindNodeClassVersion_OutResult_Offset;
    static readonly int FindNodeClassVersion_ReturnValue_Offset;
    
    public UnrealSharp.MetasoundFrontend.MetasoundFrontendVersion FindNodeClassVersion(UnrealSharp.MetasoundEngine.MetaSoundNodeHandle nodeHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNodeClassVersion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindNodeClassVersion_NodeHandle_Offset), 0, null, nodeHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindNodeClassVersion_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, FindNodeClassVersion_OutResult_Offset), 0, null);
            UnrealSharp.MetasoundFrontend.MetasoundFrontendVersion returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MetasoundFrontend.MetasoundFrontendVersion>.FromNative(IntPtr.Add(ParamsBuffer, FindNodeClassVersion_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:FindInterfaceOutputNodes
    static readonly IntPtr FindInterfaceOutputNodes_NativeFunction;
    static readonly int FindInterfaceOutputNodes_ParamsSize;
    static readonly int FindInterfaceOutputNodes_InterfaceName_Offset;
    static readonly int FindInterfaceOutputNodes_OutResult_Offset;
    static readonly int FindInterfaceOutputNodes_ReturnValue_Offset;
    static readonly int FindInterfaceOutputNodes_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundNodeHandle> FindInterfaceOutputNodes(Name interfaceName, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindInterfaceOutputNodes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindInterfaceOutputNodes_InterfaceName_Offset), 0, null, interfaceName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindInterfaceOutputNodes_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, FindInterfaceOutputNodes_OutResult_Offset), 0, null);
            System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundNodeHandle> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindInterfaceOutputNodes_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundNodeHandle> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundNodeHandle> (1, UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative, UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.FromNative, FindInterfaceOutputNodes_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundNodeHandle>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:FindInterfaceInputNodes
    static readonly IntPtr FindInterfaceInputNodes_NativeFunction;
    static readonly int FindInterfaceInputNodes_ParamsSize;
    static readonly int FindInterfaceInputNodes_InterfaceName_Offset;
    static readonly int FindInterfaceInputNodes_OutResult_Offset;
    static readonly int FindInterfaceInputNodes_ReturnValue_Offset;
    static readonly int FindInterfaceInputNodes_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundNodeHandle> FindInterfaceInputNodes(Name interfaceName, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindInterfaceInputNodes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindInterfaceInputNodes_InterfaceName_Offset), 0, null, interfaceName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindInterfaceInputNodes_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, FindInterfaceInputNodes_OutResult_Offset), 0, null);
            System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundNodeHandle> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindInterfaceInputNodes_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundNodeHandle> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundNodeHandle> (1, UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative, UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.FromNative, FindInterfaceInputNodes_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundNodeHandle>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:FindGraphOutputNode
    static readonly IntPtr FindGraphOutputNode_NativeFunction;
    static readonly int FindGraphOutputNode_ParamsSize;
    static readonly int FindGraphOutputNode_OutputName_Offset;
    static readonly int FindGraphOutputNode_OutResult_Offset;
    static readonly int FindGraphOutputNode_ReturnValue_Offset;
    
    public UnrealSharp.MetasoundEngine.MetaSoundNodeHandle FindGraphOutputNode(Name outputName, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindGraphOutputNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindGraphOutputNode_OutputName_Offset), 0, null, outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindGraphOutputNode_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, FindGraphOutputNode_OutResult_Offset), 0, null);
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandle returnValue;
            returnValue = UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FindGraphOutputNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:FindGraphInputNode
    static readonly IntPtr FindGraphInputNode_NativeFunction;
    static readonly int FindGraphInputNode_ParamsSize;
    static readonly int FindGraphInputNode_InputName_Offset;
    static readonly int FindGraphInputNode_OutResult_Offset;
    static readonly int FindGraphInputNode_ReturnValue_Offset;
    
    public UnrealSharp.MetasoundEngine.MetaSoundNodeHandle FindGraphInputNode(Name inputName, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindGraphInputNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindGraphInputNode_InputName_Offset), 0, null, inputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindGraphInputNode_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, FindGraphInputNode_OutResult_Offset), 0, null);
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandle returnValue;
            returnValue = UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FindGraphInputNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:DisconnectNodesByInterfaceBindings
    static readonly IntPtr DisconnectNodesByInterfaceBindings_NativeFunction;
    static readonly int DisconnectNodesByInterfaceBindings_ParamsSize;
    static readonly int DisconnectNodesByInterfaceBindings_FromNodeHandle_Offset;
    static readonly int DisconnectNodesByInterfaceBindings_ToNodeHandle_Offset;
    static readonly int DisconnectNodesByInterfaceBindings_OutResult_Offset;
    
    public void DisconnectNodesByInterfaceBindings(UnrealSharp.MetasoundEngine.MetaSoundNodeHandle fromNodeHandle, UnrealSharp.MetasoundEngine.MetaSoundNodeHandle toNodeHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DisconnectNodesByInterfaceBindings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DisconnectNodesByInterfaceBindings_FromNodeHandle_Offset), 0, null, fromNodeHandle);
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DisconnectNodesByInterfaceBindings_ToNodeHandle_Offset), 0, null, toNodeHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DisconnectNodesByInterfaceBindings_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, DisconnectNodesByInterfaceBindings_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:DisconnectNodes
    static readonly IntPtr DisconnectNodes_NativeFunction;
    static readonly int DisconnectNodes_ParamsSize;
    static readonly int DisconnectNodes_NodeOutputHandle_Offset;
    static readonly int DisconnectNodes_NodeInputHandle_Offset;
    static readonly int DisconnectNodes_OutResult_Offset;
    
    public void DisconnectNodes(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle nodeOutputHandle, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle nodeInputHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DisconnectNodes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DisconnectNodes_NodeOutputHandle_Offset), 0, null, nodeOutputHandle);
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DisconnectNodes_NodeInputHandle_Offset), 0, null, nodeInputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DisconnectNodes_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, DisconnectNodes_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:DisconnectNodeOutput
    static readonly IntPtr DisconnectNodeOutput_NativeFunction;
    static readonly int DisconnectNodeOutput_ParamsSize;
    static readonly int DisconnectNodeOutput_NodeOutputHandle_Offset;
    static readonly int DisconnectNodeOutput_OutResult_Offset;
    
    public void DisconnectNodeOutput(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle nodeOutputHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DisconnectNodeOutput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DisconnectNodeOutput_NodeOutputHandle_Offset), 0, null, nodeOutputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DisconnectNodeOutput_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, DisconnectNodeOutput_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:DisconnectNodeInput
    static readonly IntPtr DisconnectNodeInput_NativeFunction;
    static readonly int DisconnectNodeInput_ParamsSize;
    static readonly int DisconnectNodeInput_NodeInputHandle_Offset;
    static readonly int DisconnectNodeInput_OutResult_Offset;
    
    public void DisconnectNodeInput(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle nodeInputHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DisconnectNodeInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DisconnectNodeInput_NodeInputHandle_Offset), 0, null, nodeInputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DisconnectNodeInput_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, DisconnectNodeInput_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:ConvertFromPreset
    static readonly IntPtr ConvertFromPreset_NativeFunction;
    static readonly int ConvertFromPreset_ParamsSize;
    static readonly int ConvertFromPreset_OutResult_Offset;
    
    public void ConvertFromPreset(out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertFromPreset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConvertFromPreset_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, ConvertFromPreset_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:ContainsNodeOutput
    static readonly IntPtr ContainsNodeOutput_NativeFunction;
    static readonly int ContainsNodeOutput_ParamsSize;
    static readonly int ContainsNodeOutput_Output_Offset;
    static readonly int ContainsNodeOutput_ReturnValue_Offset;
    
    public bool ContainsNodeOutput(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle output)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ContainsNodeOutput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ContainsNodeOutput_Output_Offset), 0, null, output);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ContainsNodeOutput_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ContainsNodeOutput_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:ContainsNodeInput
    static readonly IntPtr ContainsNodeInput_NativeFunction;
    static readonly int ContainsNodeInput_ParamsSize;
    static readonly int ContainsNodeInput_Input_Offset;
    static readonly int ContainsNodeInput_ReturnValue_Offset;
    
    public bool ContainsNodeInput(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle input)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ContainsNodeInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ContainsNodeInput_Input_Offset), 0, null, input);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ContainsNodeInput_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ContainsNodeInput_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:ContainsNode
    static readonly IntPtr ContainsNode_NativeFunction;
    static readonly int ContainsNode_ParamsSize;
    static readonly int ContainsNode_Node_Offset;
    static readonly int ContainsNode_ReturnValue_Offset;
    
    public bool ContainsNode(UnrealSharp.MetasoundEngine.MetaSoundNodeHandle node)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ContainsNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ContainsNode_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ContainsNode_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ContainsNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:ConnectNodesByInterfaceBindings
    static readonly IntPtr ConnectNodesByInterfaceBindings_NativeFunction;
    static readonly int ConnectNodesByInterfaceBindings_ParamsSize;
    static readonly int ConnectNodesByInterfaceBindings_FromNodeHandle_Offset;
    static readonly int ConnectNodesByInterfaceBindings_ToNodeHandle_Offset;
    static readonly int ConnectNodesByInterfaceBindings_OutResult_Offset;
    
    public void ConnectNodesByInterfaceBindings(UnrealSharp.MetasoundEngine.MetaSoundNodeHandle fromNodeHandle, UnrealSharp.MetasoundEngine.MetaSoundNodeHandle toNodeHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectNodesByInterfaceBindings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConnectNodesByInterfaceBindings_FromNodeHandle_Offset), 0, null, fromNodeHandle);
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConnectNodesByInterfaceBindings_ToNodeHandle_Offset), 0, null, toNodeHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectNodesByInterfaceBindings_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, ConnectNodesByInterfaceBindings_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:ConnectNodes
    static readonly IntPtr ConnectNodes_NativeFunction;
    static readonly int ConnectNodes_ParamsSize;
    static readonly int ConnectNodes_NodeOutputHandle_Offset;
    static readonly int ConnectNodes_NodeInputHandle_Offset;
    static readonly int ConnectNodes_OutResult_Offset;
    
    public void ConnectNodes(UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle nodeOutputHandle, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle nodeInputHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectNodes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConnectNodes_NodeOutputHandle_Offset), 0, null, nodeOutputHandle);
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConnectNodes_NodeInputHandle_Offset), 0, null, nodeInputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectNodes_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, ConnectNodes_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:ConnectNodeOutputToGraphOutput
    static readonly IntPtr ConnectNodeOutputToGraphOutput_NativeFunction;
    static readonly int ConnectNodeOutputToGraphOutput_ParamsSize;
    static readonly int ConnectNodeOutputToGraphOutput_GraphOutputName_Offset;
    static readonly int ConnectNodeOutputToGraphOutput_NodeOutputHandle_Offset;
    static readonly int ConnectNodeOutputToGraphOutput_OutResult_Offset;
    
    public void ConnectNodeOutputToGraphOutput(Name graphOutputName, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle nodeOutputHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectNodeOutputToGraphOutput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ConnectNodeOutputToGraphOutput_GraphOutputName_Offset), 0, null, graphOutputName);
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConnectNodeOutputToGraphOutput_NodeOutputHandle_Offset), 0, null, nodeOutputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectNodeOutputToGraphOutput_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, ConnectNodeOutputToGraphOutput_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:ConnectNodeOutputsToMatchingGraphInterfaceOutputs
    static readonly IntPtr ConnectNodeOutputsToMatchingGraphInterfaceOutputs_NativeFunction;
    static readonly int ConnectNodeOutputsToMatchingGraphInterfaceOutputs_ParamsSize;
    static readonly int ConnectNodeOutputsToMatchingGraphInterfaceOutputs_NodeHandle_Offset;
    static readonly int ConnectNodeOutputsToMatchingGraphInterfaceOutputs_OutResult_Offset;
    static readonly int ConnectNodeOutputsToMatchingGraphInterfaceOutputs_ReturnValue_Offset;
    static readonly int ConnectNodeOutputsToMatchingGraphInterfaceOutputs_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle> ConnectNodeOutputsToMatchingGraphInterfaceOutputs(UnrealSharp.MetasoundEngine.MetaSoundNodeHandle nodeHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectNodeOutputsToMatchingGraphInterfaceOutputs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConnectNodeOutputsToMatchingGraphInterfaceOutputs_NodeHandle_Offset), 0, null, nodeHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectNodeOutputsToMatchingGraphInterfaceOutputs_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, ConnectNodeOutputsToMatchingGraphInterfaceOutputs_OutResult_Offset), 0, null);
            System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, ConnectNodeOutputsToMatchingGraphInterfaceOutputs_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle> (1, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.FromNative, ConnectNodeOutputsToMatchingGraphInterfaceOutputs_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:ConnectNodeInputToGraphInput
    static readonly IntPtr ConnectNodeInputToGraphInput_NativeFunction;
    static readonly int ConnectNodeInputToGraphInput_ParamsSize;
    static readonly int ConnectNodeInputToGraphInput_GraphInputName_Offset;
    static readonly int ConnectNodeInputToGraphInput_NodeInputHandle_Offset;
    static readonly int ConnectNodeInputToGraphInput_OutResult_Offset;
    
    public void ConnectNodeInputToGraphInput(Name graphInputName, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle nodeInputHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectNodeInputToGraphInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ConnectNodeInputToGraphInput_GraphInputName_Offset), 0, null, graphInputName);
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConnectNodeInputToGraphInput_NodeInputHandle_Offset), 0, null, nodeInputHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectNodeInputToGraphInput_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, ConnectNodeInputToGraphInput_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:ConnectNodeInputsToMatchingGraphInterfaceInputs
    static readonly IntPtr ConnectNodeInputsToMatchingGraphInterfaceInputs_NativeFunction;
    static readonly int ConnectNodeInputsToMatchingGraphInterfaceInputs_ParamsSize;
    static readonly int ConnectNodeInputsToMatchingGraphInterfaceInputs_NodeHandle_Offset;
    static readonly int ConnectNodeInputsToMatchingGraphInterfaceInputs_OutResult_Offset;
    static readonly int ConnectNodeInputsToMatchingGraphInterfaceInputs_ReturnValue_Offset;
    static readonly int ConnectNodeInputsToMatchingGraphInterfaceInputs_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle> ConnectNodeInputsToMatchingGraphInterfaceInputs(UnrealSharp.MetasoundEngine.MetaSoundNodeHandle nodeHandle, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectNodeInputsToMatchingGraphInterfaceInputs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConnectNodeInputsToMatchingGraphInterfaceInputs_NodeHandle_Offset), 0, null, nodeHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectNodeInputsToMatchingGraphInterfaceInputs_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, ConnectNodeInputsToMatchingGraphInterfaceInputs_OutResult_Offset), 0, null);
            System.Collections.Generic.IList<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, ConnectNodeInputsToMatchingGraphInterfaceInputs_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle> (1, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.ToNative, UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.FromNative, ConnectNodeInputsToMatchingGraphInterfaceInputs_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:AddNodeByClassName
    static readonly IntPtr AddNodeByClassName_NativeFunction;
    static readonly int AddNodeByClassName_ParamsSize;
    static readonly int AddNodeByClassName_ClassName_Offset;
    static readonly int AddNodeByClassName_MajorVersion_Offset;
    static readonly int AddNodeByClassName_OutResult_Offset;
    static readonly int AddNodeByClassName_ReturnValue_Offset;
    
    public UnrealSharp.MetasoundEngine.MetaSoundNodeHandle AddNodeByClassName(UnrealSharp.MetasoundFrontend.MetasoundFrontendClassName className, int majorVersion, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddNodeByClassName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MetasoundFrontend.MetasoundFrontendClassName>.ToNative(IntPtr.Add(ParamsBuffer, AddNodeByClassName_ClassName_Offset), 0, null, className);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, AddNodeByClassName_MajorVersion_Offset), 0, null, majorVersion);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddNodeByClassName_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, AddNodeByClassName_OutResult_Offset), 0, null);
            UnrealSharp.MetasoundEngine.MetaSoundNodeHandle returnValue;
            returnValue = UnrealSharp.MetasoundEngine.MetaSoundNodeHandleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, AddNodeByClassName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:AddInterface
    static readonly IntPtr AddInterface_NativeFunction;
    static readonly int AddInterface_ParamsSize;
    static readonly int AddInterface_InterfaceName_Offset;
    static readonly int AddInterface_OutResult_Offset;
    
    public void AddInterface(Name interfaceName, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddInterface_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddInterface_InterfaceName_Offset), 0, null, interfaceName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddInterface_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, AddInterface_OutResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:AddGraphOutputNode
    static readonly IntPtr AddGraphOutputNode_NativeFunction;
    static readonly int AddGraphOutputNode_ParamsSize;
    static readonly int AddGraphOutputNode_Name_Offset;
    static readonly int AddGraphOutputNode_DataType_Offset;
    static readonly int AddGraphOutputNode_DefaultValue_Offset;
    static readonly int AddGraphOutputNode_OutResult_Offset;
    static readonly int AddGraphOutputNode_bIsConstructorOutput_Offset;
    static readonly int AddGraphOutputNode_ReturnValue_Offset;
    
    public UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle AddGraphOutputNode(Name name, Name dataType, UnrealSharp.MetasoundFrontend.MetasoundFrontendLiteral defaultValue, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult, bool bIsConstructorOutput = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddGraphOutputNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddGraphOutputNode_Name_Offset), 0, null, name);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddGraphOutputNode_DataType_Offset), 0, null, dataType);
            UnrealSharp.MetasoundFrontend.MetasoundFrontendLiteralMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AddGraphOutputNode_DefaultValue_Offset), 0, null, defaultValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddGraphOutputNode_bIsConstructorOutput_Offset), 0, null, bIsConstructorOutput);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddGraphOutputNode_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, AddGraphOutputNode_OutResult_Offset), 0, null);
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandle returnValue;
            returnValue = UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeInputHandleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, AddGraphOutputNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MetasoundEngine.MetaSoundBuilderBase:AddGraphInputNode
    static readonly IntPtr AddGraphInputNode_NativeFunction;
    static readonly int AddGraphInputNode_ParamsSize;
    static readonly int AddGraphInputNode_Name_Offset;
    static readonly int AddGraphInputNode_DataType_Offset;
    static readonly int AddGraphInputNode_DefaultValue_Offset;
    static readonly int AddGraphInputNode_OutResult_Offset;
    static readonly int AddGraphInputNode_bIsConstructorInput_Offset;
    static readonly int AddGraphInputNode_ReturnValue_Offset;
    
    public UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle AddGraphInputNode(Name name, Name dataType, UnrealSharp.MetasoundFrontend.MetasoundFrontendLiteral defaultValue, out UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult outResult, bool bIsConstructorInput = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddGraphInputNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddGraphInputNode_Name_Offset), 0, null, name);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddGraphInputNode_DataType_Offset), 0, null, dataType);
            UnrealSharp.MetasoundFrontend.MetasoundFrontendLiteralMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AddGraphInputNode_DefaultValue_Offset), 0, null, defaultValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddGraphInputNode_bIsConstructorInput_Offset), 0, null, bIsConstructorInput);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddGraphInputNode_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.MetasoundEngine.EMetaSoundBuilderResult>.FromNative(IntPtr.Add(ParamsBuffer, AddGraphInputNode_OutResult_Offset), 0, null);
            UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandle returnValue;
            returnValue = UnrealSharp.MetasoundEngine.MetaSoundBuilderNodeOutputHandleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, AddGraphInputNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MovieScene;

[UClass]
abstract public partial class MovieSceneSection : UnrealSharp.MovieScene.MovieSceneSignedObject
{
    
    static MovieSceneSection()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MovieSceneSection");
        
        
        SetRowIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRowIndex");
        SetRowIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRowIndex_NativeFunction);
        SetRowIndex_NewRowIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRowIndex_NativeFunction, "NewRowIndex");
        SetPreRollFrames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPreRollFrames");
        SetPreRollFrames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPreRollFrames_NativeFunction);
        SetPreRollFrames_InPreRollFrames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPreRollFrames_NativeFunction, "InPreRollFrames");
        SetPostRollFrames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPostRollFrames");
        SetPostRollFrames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPostRollFrames_NativeFunction);
        SetPostRollFrames_InPostRollFrames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPostRollFrames_NativeFunction, "InPostRollFrames");
        SetOverlapPriority_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOverlapPriority");
        SetOverlapPriority_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOverlapPriority_NativeFunction);
        SetOverlapPriority_NewPriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOverlapPriority_NativeFunction, "NewPriority");
        SetIsLocked_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsLocked");
        SetIsLocked_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsLocked_NativeFunction);
        SetIsLocked_bInIsLocked_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsLocked_NativeFunction, "bInIsLocked");
        SetIsActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsActive");
        SetIsActive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsActive_NativeFunction);
        SetIsActive_bInIsActive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsActive_NativeFunction, "bInIsActive");
        SetCompletionMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCompletionMode");
        SetCompletionMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCompletionMode_NativeFunction);
        SetCompletionMode_InCompletionMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCompletionMode_NativeFunction, "InCompletionMode");
        SetColorTint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetColorTint");
        SetColorTint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetColorTint_NativeFunction);
        SetColorTint_InColorTint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetColorTint_NativeFunction, "InColorTint");
        SetBlendType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBlendType");
        SetBlendType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBlendType_NativeFunction);
        SetBlendType_InBlendType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlendType_NativeFunction, "InBlendType");
        IsLocked_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLocked");
        IsLocked_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLocked_NativeFunction);
        IsLocked_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLocked_NativeFunction, "ReturnValue");
        IsActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsActive");
        IsActive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsActive_NativeFunction);
        IsActive_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsActive_NativeFunction, "ReturnValue");
        GetRowIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRowIndex");
        GetRowIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRowIndex_NativeFunction);
        GetRowIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRowIndex_NativeFunction, "ReturnValue");
        GetPreRollFrames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPreRollFrames");
        GetPreRollFrames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPreRollFrames_NativeFunction);
        GetPreRollFrames_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPreRollFrames_NativeFunction, "ReturnValue");
        GetPostRollFrames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPostRollFrames");
        GetPostRollFrames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPostRollFrames_NativeFunction);
        GetPostRollFrames_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPostRollFrames_NativeFunction, "ReturnValue");
        GetOverlapPriority_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOverlapPriority");
        GetOverlapPriority_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOverlapPriority_NativeFunction);
        GetOverlapPriority_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOverlapPriority_NativeFunction, "ReturnValue");
        GetCompletionMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCompletionMode");
        GetCompletionMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCompletionMode_NativeFunction);
        GetCompletionMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCompletionMode_NativeFunction, "ReturnValue");
        GetColorTint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetColorTint");
        GetColorTint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetColorTint_NativeFunction);
        GetColorTint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetColorTint_NativeFunction, "ReturnValue");
        GetBlendType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBlendType");
        GetBlendType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBlendType_NativeFunction);
        GetBlendType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBlendType_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MovieSceneSection(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/MovieScene.MovieSceneSection:SetRowIndex
    static readonly IntPtr SetRowIndex_NativeFunction;
    static readonly int SetRowIndex_ParamsSize;
    static readonly int SetRowIndex_NewRowIndex_Offset;
    
    public void SetRowIndex(int newRowIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRowIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetRowIndex_NewRowIndex_Offset), 0, null, newRowIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRowIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:SetPreRollFrames
    static readonly IntPtr SetPreRollFrames_NativeFunction;
    static readonly int SetPreRollFrames_ParamsSize;
    static readonly int SetPreRollFrames_InPreRollFrames_Offset;
    
    public void SetPreRollFrames(int inPreRollFrames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPreRollFrames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetPreRollFrames_InPreRollFrames_Offset), 0, null, inPreRollFrames);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPreRollFrames_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:SetPostRollFrames
    static readonly IntPtr SetPostRollFrames_NativeFunction;
    static readonly int SetPostRollFrames_ParamsSize;
    static readonly int SetPostRollFrames_InPostRollFrames_Offset;
    
    public void SetPostRollFrames(int inPostRollFrames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPostRollFrames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetPostRollFrames_InPostRollFrames_Offset), 0, null, inPostRollFrames);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPostRollFrames_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:SetOverlapPriority
    static readonly IntPtr SetOverlapPriority_NativeFunction;
    static readonly int SetOverlapPriority_ParamsSize;
    static readonly int SetOverlapPriority_NewPriority_Offset;
    
    public void SetOverlapPriority(int newPriority)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOverlapPriority_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetOverlapPriority_NewPriority_Offset), 0, null, newPriority);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOverlapPriority_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:SetIsLocked
    static readonly IntPtr SetIsLocked_NativeFunction;
    static readonly int SetIsLocked_ParamsSize;
    static readonly int SetIsLocked_bInIsLocked_Offset;
    
    public void SetIsLocked(bool bInIsLocked)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsLocked_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsLocked_bInIsLocked_Offset), 0, null, bInIsLocked);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsLocked_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:SetIsActive
    static readonly IntPtr SetIsActive_NativeFunction;
    static readonly int SetIsActive_ParamsSize;
    static readonly int SetIsActive_bInIsActive_Offset;
    
    public void SetIsActive(bool bInIsActive)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsActive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsActive_bInIsActive_Offset), 0, null, bInIsActive);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsActive_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:SetCompletionMode
    static readonly IntPtr SetCompletionMode_NativeFunction;
    static readonly int SetCompletionMode_ParamsSize;
    static readonly int SetCompletionMode_InCompletionMode_Offset;
    
    public void SetCompletionMode(UnrealSharp.MovieScene.EMovieSceneCompletionMode inCompletionMode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCompletionMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MovieScene.EMovieSceneCompletionMode>.ToNative(IntPtr.Add(ParamsBuffer, SetCompletionMode_InCompletionMode_Offset), 0, null, inCompletionMode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCompletionMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:SetColorTint
    static readonly IntPtr SetColorTint_NativeFunction;
    static readonly int SetColorTint_ParamsSize;
    static readonly int SetColorTint_InColorTint_Offset;
    
    public void SetColorTint(UnrealSharp.CoreUObject.Color inColorTint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetColorTint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, SetColorTint_InColorTint_Offset), 0, null, inColorTint);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetColorTint_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:SetBlendType
    static readonly IntPtr SetBlendType_NativeFunction;
    static readonly int SetBlendType_ParamsSize;
    static readonly int SetBlendType_InBlendType_Offset;
    
    public void SetBlendType(UnrealSharp.MovieScene.EMovieSceneBlendType inBlendType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBlendType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MovieScene.EMovieSceneBlendType>.ToNative(IntPtr.Add(ParamsBuffer, SetBlendType_InBlendType_Offset), 0, null, inBlendType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBlendType_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:IsLocked
    static readonly IntPtr IsLocked_NativeFunction;
    static readonly int IsLocked_ParamsSize;
    static readonly int IsLocked_ReturnValue_Offset;
    
    public bool IsLocked()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLocked_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLocked_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLocked_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:IsActive
    static readonly IntPtr IsActive_NativeFunction;
    static readonly int IsActive_ParamsSize;
    static readonly int IsActive_ReturnValue_Offset;
    
    public bool IsActive()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsActive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsActive_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsActive_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:GetRowIndex
    static readonly IntPtr GetRowIndex_NativeFunction;
    static readonly int GetRowIndex_ParamsSize;
    static readonly int GetRowIndex_ReturnValue_Offset;
    
    public int GetRowIndex()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRowIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRowIndex_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetRowIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:GetPreRollFrames
    static readonly IntPtr GetPreRollFrames_NativeFunction;
    static readonly int GetPreRollFrames_ParamsSize;
    static readonly int GetPreRollFrames_ReturnValue_Offset;
    
    public int GetPreRollFrames()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPreRollFrames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPreRollFrames_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetPreRollFrames_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:GetPostRollFrames
    static readonly IntPtr GetPostRollFrames_NativeFunction;
    static readonly int GetPostRollFrames_ParamsSize;
    static readonly int GetPostRollFrames_ReturnValue_Offset;
    
    public int GetPostRollFrames()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPostRollFrames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPostRollFrames_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetPostRollFrames_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:GetOverlapPriority
    static readonly IntPtr GetOverlapPriority_NativeFunction;
    static readonly int GetOverlapPriority_ParamsSize;
    static readonly int GetOverlapPriority_ReturnValue_Offset;
    
    public int GetOverlapPriority()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOverlapPriority_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOverlapPriority_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetOverlapPriority_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:GetCompletionMode
    static readonly IntPtr GetCompletionMode_NativeFunction;
    static readonly int GetCompletionMode_ParamsSize;
    static readonly int GetCompletionMode_ReturnValue_Offset;
    
    public UnrealSharp.MovieScene.EMovieSceneCompletionMode GetCompletionMode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCompletionMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCompletionMode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.EMovieSceneCompletionMode returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MovieScene.EMovieSceneCompletionMode>.FromNative(IntPtr.Add(ParamsBuffer, GetCompletionMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:GetColorTint
    static readonly IntPtr GetColorTint_NativeFunction;
    static readonly int GetColorTint_ParamsSize;
    static readonly int GetColorTint_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.Color GetColorTint()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetColorTint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetColorTint_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Color returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(ParamsBuffer, GetColorTint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MovieScene.MovieSceneSection:GetBlendType
    static readonly IntPtr GetBlendType_NativeFunction;
    static readonly int GetBlendType_ParamsSize;
    static readonly int GetBlendType_ReturnValue_Offset;
    
    public UnrealSharp.MovieScene.OptionalMovieSceneBlendType GetBlendType()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBlendType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBlendType_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.OptionalMovieSceneBlendType returnValue;
            returnValue = UnrealSharp.MovieScene.OptionalMovieSceneBlendTypeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetBlendType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
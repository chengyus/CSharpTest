// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MovieSceneCapture;

[UClass]
abstract public partial class UserDefinedImageCaptureProtocol : UnrealSharp.MovieSceneCapture.UserDefinedCaptureProtocol
{
    
    static UserDefinedImageCaptureProtocol()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("UserDefinedImageCaptureProtocol");
        
        Format_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Format");
        bEnableCompression_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableCompression");
        CompressionQuality_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CompressionQuality");
        
        WriteImageToDisk_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WriteImageToDisk");
        WriteImageToDisk_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(WriteImageToDisk_NativeFunction);
        WriteImageToDisk_PixelData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WriteImageToDisk_NativeFunction, "PixelData");
        WriteImageToDisk_StreamID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WriteImageToDisk_NativeFunction, "StreamID");
        WriteImageToDisk_FrameMetrics_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WriteImageToDisk_NativeFunction, "FrameMetrics");
        WriteImageToDisk_bCopyImageData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WriteImageToDisk_NativeFunction, "bCopyImageData");
        GenerateFilenameForCurrentFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GenerateFilenameForCurrentFrame");
        GenerateFilenameForCurrentFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GenerateFilenameForCurrentFrame_NativeFunction);
        GenerateFilenameForCurrentFrame_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateFilenameForCurrentFrame_NativeFunction, "ReturnValue");
        GenerateFilenameForBuffer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GenerateFilenameForBuffer");
        GenerateFilenameForBuffer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GenerateFilenameForBuffer_NativeFunction);
        GenerateFilenameForBuffer_Buffer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateFilenameForBuffer_NativeFunction, "Buffer");
        GenerateFilenameForBuffer_StreamID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateFilenameForBuffer_NativeFunction, "StreamID");
        GenerateFilenameForBuffer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateFilenameForBuffer_NativeFunction, "ReturnValue");
        
        
    }
    
    protected UserDefinedImageCaptureProtocol(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // EnumProperty /Script/MovieSceneCapture.UserDefinedImageCaptureProtocol:Format
    static readonly int Format_Offset;
    
    public UnrealSharp.ImageWriteQueue.EDesiredImageFormat Format
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.ImageWriteQueue.EDesiredImageFormat>.FromNative(IntPtr.Add(NativeObject, Format_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.ImageWriteQueue.EDesiredImageFormat>.ToNative(IntPtr.Add(NativeObject, Format_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/MovieSceneCapture.UserDefinedImageCaptureProtocol:bEnableCompression
    static readonly int bEnableCompression_Offset;
    
    public bool bEnableCompression
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnableCompression_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bEnableCompression_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/MovieSceneCapture.UserDefinedImageCaptureProtocol:CompressionQuality
    static readonly int CompressionQuality_Offset;
    
    public int CompressionQuality
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, CompressionQuality_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, CompressionQuality_Offset), 0, this, value);
        }
    }
    
    // Function /Script/MovieSceneCapture.UserDefinedImageCaptureProtocol:WriteImageToDisk
    static readonly IntPtr WriteImageToDisk_NativeFunction;
    static readonly int WriteImageToDisk_ParamsSize;
    static readonly int WriteImageToDisk_PixelData_Offset;
    static readonly int WriteImageToDisk_StreamID_Offset;
    static readonly int WriteImageToDisk_FrameMetrics_Offset;
    static readonly int WriteImageToDisk_bCopyImageData_Offset;
    
    public void WriteImageToDisk(UnrealSharp.MovieSceneCapture.CapturedPixels pixelData, UnrealSharp.MovieSceneCapture.CapturedPixelsID streamID, UnrealSharp.MovieSceneCapture.FrameMetrics frameMetrics, bool bCopyImageData = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[WriteImageToDisk_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieSceneCapture.CapturedPixelsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, WriteImageToDisk_PixelData_Offset), 0, null, pixelData);
            UnrealSharp.MovieSceneCapture.CapturedPixelsIDMarshaler.ToNative(IntPtr.Add(ParamsBuffer, WriteImageToDisk_StreamID_Offset), 0, null, streamID);
            BlittableMarshaller<UnrealSharp.MovieSceneCapture.FrameMetrics>.ToNative(IntPtr.Add(ParamsBuffer, WriteImageToDisk_FrameMetrics_Offset), 0, null, frameMetrics);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, WriteImageToDisk_bCopyImageData_Offset), 0, null, bCopyImageData);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, WriteImageToDisk_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/MovieSceneCapture.UserDefinedImageCaptureProtocol:GenerateFilenameForCurrentFrame
    static readonly IntPtr GenerateFilenameForCurrentFrame_NativeFunction;
    static readonly int GenerateFilenameForCurrentFrame_ParamsSize;
    static readonly int GenerateFilenameForCurrentFrame_ReturnValue_Offset;
    
    public string GenerateFilenameForCurrentFrame()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GenerateFilenameForCurrentFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GenerateFilenameForCurrentFrame_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GenerateFilenameForCurrentFrame_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MovieSceneCapture.UserDefinedImageCaptureProtocol:GenerateFilenameForBuffer
    static readonly IntPtr GenerateFilenameForBuffer_NativeFunction;
    static readonly int GenerateFilenameForBuffer_ParamsSize;
    static readonly int GenerateFilenameForBuffer_Buffer_Offset;
    static readonly int GenerateFilenameForBuffer_StreamID_Offset;
    static readonly int GenerateFilenameForBuffer_ReturnValue_Offset;
    
    public string GenerateFilenameForBuffer(UnrealSharp.Engine.Texture buffer, UnrealSharp.MovieSceneCapture.CapturedPixelsID streamID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GenerateFilenameForBuffer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(ParamsBuffer, GenerateFilenameForBuffer_Buffer_Offset), 0, null, buffer);
            UnrealSharp.MovieSceneCapture.CapturedPixelsIDMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GenerateFilenameForBuffer_StreamID_Offset), 0, null, streamID);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GenerateFilenameForBuffer_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GenerateFilenameForBuffer_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.MovieScene;
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MovieSceneTracks;

[UClass]
public partial class MovieScene3DAttachSection : UnrealSharp.MovieSceneTracks.MovieScene3DConstraintSection, IMovieSceneEntityProvider
{
    
    static MovieScene3DAttachSection()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MovieScene3DAttachSection");
        
        AttachSocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AttachSocketName");
        AttachComponentName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AttachComponentName");
        AttachmentLocationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AttachmentLocationRule");
        AttachmentRotationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AttachmentRotationRule");
        AttachmentScaleRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AttachmentScaleRule");
        DetachmentLocationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DetachmentLocationRule");
        DetachmentRotationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DetachmentRotationRule");
        DetachmentScaleRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DetachmentScaleRule");
        
        
        
    }
    
    protected MovieScene3DAttachSection(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // NameProperty /Script/MovieSceneTracks.MovieScene3DAttachSection:AttachSocketName
    static readonly int AttachSocketName_Offset;
    
    public Name AttachSocketName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, AttachSocketName_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, AttachSocketName_Offset), 0, this, value);
        }
    }
    
    // NameProperty /Script/MovieSceneTracks.MovieScene3DAttachSection:AttachComponentName
    static readonly int AttachComponentName_Offset;
    
    public Name AttachComponentName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, AttachComponentName_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, AttachComponentName_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/MovieSceneTracks.MovieScene3DAttachSection:AttachmentLocationRule
    static readonly int AttachmentLocationRule_Offset;
    
    public UnrealSharp.Engine.EAttachmentRule AttachmentLocationRule
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.FromNative(IntPtr.Add(NativeObject, AttachmentLocationRule_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(NativeObject, AttachmentLocationRule_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/MovieSceneTracks.MovieScene3DAttachSection:AttachmentRotationRule
    static readonly int AttachmentRotationRule_Offset;
    
    public UnrealSharp.Engine.EAttachmentRule AttachmentRotationRule
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.FromNative(IntPtr.Add(NativeObject, AttachmentRotationRule_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(NativeObject, AttachmentRotationRule_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/MovieSceneTracks.MovieScene3DAttachSection:AttachmentScaleRule
    static readonly int AttachmentScaleRule_Offset;
    
    public UnrealSharp.Engine.EAttachmentRule AttachmentScaleRule
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.FromNative(IntPtr.Add(NativeObject, AttachmentScaleRule_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(NativeObject, AttachmentScaleRule_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/MovieSceneTracks.MovieScene3DAttachSection:DetachmentLocationRule
    static readonly int DetachmentLocationRule_Offset;
    
    public UnrealSharp.Engine.EDetachmentRule DetachmentLocationRule
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EDetachmentRule>.FromNative(IntPtr.Add(NativeObject, DetachmentLocationRule_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EDetachmentRule>.ToNative(IntPtr.Add(NativeObject, DetachmentLocationRule_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/MovieSceneTracks.MovieScene3DAttachSection:DetachmentRotationRule
    static readonly int DetachmentRotationRule_Offset;
    
    public UnrealSharp.Engine.EDetachmentRule DetachmentRotationRule
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EDetachmentRule>.FromNative(IntPtr.Add(NativeObject, DetachmentRotationRule_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EDetachmentRule>.ToNative(IntPtr.Add(NativeObject, DetachmentRotationRule_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/MovieSceneTracks.MovieScene3DAttachSection:DetachmentScaleRule
    static readonly int DetachmentScaleRule_Offset;
    
    public UnrealSharp.Engine.EDetachmentRule DetachmentScaleRule
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EDetachmentRule>.FromNative(IntPtr.Add(NativeObject, DetachmentScaleRule_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EDetachmentRule>.ToNative(IntPtr.Add(NativeObject, DetachmentScaleRule_Offset), 0, this, value);
        }
    }
    
    
}
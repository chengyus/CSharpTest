// This file is automatically generated
using UnrealSharp.MovieScene;
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MovieSceneTracks;

[UClass]
public partial class MovieSceneLevelVisibilitySection : UnrealSharp.MovieScene.MovieSceneSection, IMovieSceneEntityProvider
{
    
    static MovieSceneLevelVisibilitySection()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MovieSceneLevelVisibilitySection");
        
        
        SetVisibility_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVisibility");
        SetVisibility_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVisibility_NativeFunction);
        SetVisibility_InVisibility_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVisibility_NativeFunction, "InVisibility");
        SetLevelNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLevelNames");
        SetLevelNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLevelNames_NativeFunction);
        SetLevelNames_InLevelNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLevelNames_NativeFunction, "InLevelNames");
        SetLevelNames_InLevelNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLevelNames_NativeFunction, "InLevelNames");
        GetVisibility_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVisibility");
        GetVisibility_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVisibility_NativeFunction);
        GetVisibility_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVisibility_NativeFunction, "ReturnValue");
        GetLevelNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLevelNames");
        GetLevelNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLevelNames_NativeFunction);
        GetLevelNames_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLevelNames_NativeFunction, "ReturnValue");
        GetLevelNames_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLevelNames_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MovieSceneLevelVisibilitySection(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection:SetVisibility
    static readonly IntPtr SetVisibility_NativeFunction;
    static readonly int SetVisibility_ParamsSize;
    static readonly int SetVisibility_InVisibility_Offset;
    
    public void SetVisibility(UnrealSharp.MovieSceneTracks.ELevelVisibility inVisibility)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVisibility_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MovieSceneTracks.ELevelVisibility>.ToNative(IntPtr.Add(ParamsBuffer, SetVisibility_InVisibility_Offset), 0, null, inVisibility);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVisibility_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection:SetLevelNames
    static readonly IntPtr SetLevelNames_NativeFunction;
    static readonly int SetLevelNames_ParamsSize;
    static readonly int SetLevelNames_InLevelNames_Offset;
    static readonly int SetLevelNames_InLevelNames_ElementSize;
    
    public void SetLevelNames(System.Collections.Generic.IList<Name> inLevelNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLevelNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InLevelNames_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLevelNames_InLevelNames_Offset);
            UnrealArrayCopyMarshaler<Name> InLevelNames_Marshaler = new UnrealArrayCopyMarshaler<Name>(1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, SetLevelNames_InLevelNames_ElementSize);
            InLevelNames_Marshaler.ToNative(InLevelNames_NativeBuffer, 0, null, inLevelNames);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLevelNames_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection:GetVisibility
    static readonly IntPtr GetVisibility_NativeFunction;
    static readonly int GetVisibility_ParamsSize;
    static readonly int GetVisibility_ReturnValue_Offset;
    
    public UnrealSharp.MovieSceneTracks.ELevelVisibility GetVisibility()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVisibility_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVisibility_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieSceneTracks.ELevelVisibility returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MovieSceneTracks.ELevelVisibility>.FromNative(IntPtr.Add(ParamsBuffer, GetVisibility_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection:GetLevelNames
    static readonly IntPtr GetLevelNames_NativeFunction;
    static readonly int GetLevelNames_ParamsSize;
    static readonly int GetLevelNames_ReturnValue_Offset;
    static readonly int GetLevelNames_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<Name> GetLevelNames()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLevelNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLevelNames_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLevelNames_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetLevelNames_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.NavigationSystem;

[UClass]
public partial class NavigationPath : UnrealSharp.CoreUObject.Object
{
    
    static NavigationPath()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("NavigationPath");
        
        PathPoints_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PathPoints");
        PathPoints_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "PathPoints");
        RecalculateOnInvalidation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RecalculateOnInvalidation");
        
        IsValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValid");
        IsValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValid_NativeFunction);
        IsValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValid_NativeFunction, "ReturnValue");
        IsStringPulled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsStringPulled");
        IsStringPulled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsStringPulled_NativeFunction);
        IsStringPulled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStringPulled_NativeFunction, "ReturnValue");
        IsPartial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPartial");
        IsPartial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPartial_NativeFunction);
        IsPartial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPartial_NativeFunction, "ReturnValue");
        GetPathLength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPathLength");
        GetPathLength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPathLength_NativeFunction);
        GetPathLength_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPathLength_NativeFunction, "ReturnValue");
        GetPathCost_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPathCost");
        GetPathCost_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPathCost_NativeFunction);
        GetPathCost_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPathCost_NativeFunction, "ReturnValue");
        GetDebugString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDebugString");
        GetDebugString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDebugString_NativeFunction);
        GetDebugString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDebugString_NativeFunction, "ReturnValue");
        EnableRecalculationOnInvalidation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnableRecalculationOnInvalidation");
        EnableRecalculationOnInvalidation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EnableRecalculationOnInvalidation_NativeFunction);
        EnableRecalculationOnInvalidation_DoRecalculation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnableRecalculationOnInvalidation_NativeFunction, "DoRecalculation");
        EnableDebugDrawing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnableDebugDrawing");
        EnableDebugDrawing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EnableDebugDrawing_NativeFunction);
        EnableDebugDrawing_bShouldDrawDebugData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnableDebugDrawing_NativeFunction, "bShouldDrawDebugData");
        EnableDebugDrawing_PathColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnableDebugDrawing_NativeFunction, "PathColor");
        
        
    }
    
    protected NavigationPath(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ArrayProperty /Script/NavigationSystem.NavigationPath:PathPoints
    static readonly int PathPoints_Offset;
    static readonly IntPtr PathPoints_NativeProperty;
    UnrealArrayReadOnlyMarshaler<System.DoubleNumerics.Vector3> PathPoints_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<System.DoubleNumerics.Vector3> PathPoints
    {
        get
        {
            if(PathPoints_Wrapper == null)
            {
                PathPoints_Wrapper = new UnrealArrayReadOnlyMarshaler<System.DoubleNumerics.Vector3>(1, PathPoints_NativeProperty, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative);
            }
            
            return PathPoints_Wrapper.FromNative(IntPtr.Add(NativeObject,PathPoints_Offset),0,this);
        }
    }
    
    // ByteProperty /Script/NavigationSystem.NavigationPath:RecalculateOnInvalidation
    static readonly int RecalculateOnInvalidation_Offset;
    
    public UnrealSharp.Engine.ENavigationOptionFlag RecalculateOnInvalidation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ENavigationOptionFlag>.FromNative(IntPtr.Add(NativeObject, RecalculateOnInvalidation_Offset), 0, this);
        }
    }
    
    // Function /Script/NavigationSystem.NavigationPath:IsValid
    static readonly IntPtr IsValid_NativeFunction;
    static readonly int IsValid_ParamsSize;
    static readonly int IsValid_ReturnValue_Offset;
    
    public bool IsValid()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsValid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/NavigationSystem.NavigationPath:IsStringPulled
    static readonly IntPtr IsStringPulled_NativeFunction;
    static readonly int IsStringPulled_ParamsSize;
    static readonly int IsStringPulled_ReturnValue_Offset;
    
    public bool IsStringPulled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsStringPulled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsStringPulled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsStringPulled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/NavigationSystem.NavigationPath:IsPartial
    static readonly IntPtr IsPartial_NativeFunction;
    static readonly int IsPartial_ParamsSize;
    static readonly int IsPartial_ReturnValue_Offset;
    
    public bool IsPartial()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPartial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPartial_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPartial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/NavigationSystem.NavigationPath:GetPathLength
    static readonly IntPtr GetPathLength_NativeFunction;
    static readonly int GetPathLength_ParamsSize;
    static readonly int GetPathLength_ReturnValue_Offset;
    
    public double GetPathLength()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPathLength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPathLength_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetPathLength_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/NavigationSystem.NavigationPath:GetPathCost
    static readonly IntPtr GetPathCost_NativeFunction;
    static readonly int GetPathCost_ParamsSize;
    static readonly int GetPathCost_ReturnValue_Offset;
    
    public double GetPathCost()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPathCost_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPathCost_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetPathCost_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/NavigationSystem.NavigationPath:GetDebugString
    static readonly IntPtr GetDebugString_NativeFunction;
    static readonly int GetDebugString_ParamsSize;
    static readonly int GetDebugString_ReturnValue_Offset;
    
    public string GetDebugString()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDebugString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDebugString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetDebugString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/NavigationSystem.NavigationPath:EnableRecalculationOnInvalidation
    static readonly IntPtr EnableRecalculationOnInvalidation_NativeFunction;
    static readonly int EnableRecalculationOnInvalidation_ParamsSize;
    static readonly int EnableRecalculationOnInvalidation_DoRecalculation_Offset;
    
    public void EnableRecalculationOnInvalidation(UnrealSharp.Engine.ENavigationOptionFlag doRecalculation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EnableRecalculationOnInvalidation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ENavigationOptionFlag>.ToNative(IntPtr.Add(ParamsBuffer, EnableRecalculationOnInvalidation_DoRecalculation_Offset), 0, null, doRecalculation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EnableRecalculationOnInvalidation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/NavigationSystem.NavigationPath:EnableDebugDrawing
    static readonly IntPtr EnableDebugDrawing_NativeFunction;
    static readonly int EnableDebugDrawing_ParamsSize;
    static readonly int EnableDebugDrawing_bShouldDrawDebugData_Offset;
    static readonly int EnableDebugDrawing_PathColor_Offset;
    
    public void EnableDebugDrawing(bool bShouldDrawDebugData)
    {
        UnrealSharp.CoreUObject.LinearColor pathColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        EnableDebugDrawing(bShouldDrawDebugData, pathColor);
    }
    
    public void EnableDebugDrawing(bool bShouldDrawDebugData, UnrealSharp.CoreUObject.LinearColor pathColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EnableDebugDrawing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, EnableDebugDrawing_bShouldDrawDebugData_Offset), 0, null, bShouldDrawDebugData);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, EnableDebugDrawing_PathColor_Offset), 0, null, pathColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EnableDebugDrawing_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
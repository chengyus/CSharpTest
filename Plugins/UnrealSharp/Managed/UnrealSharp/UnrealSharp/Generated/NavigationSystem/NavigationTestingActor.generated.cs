// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.NavigationSystem;

[UClass]
public partial class NavigationTestingActor : UnrealSharp.Engine.Actor
{
    
    static NavigationTestingActor()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("NavigationTestingActor");
        
        ProjectedLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ProjectedLocation");
        bProjectedLocationValid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bProjectedLocationValid");
        bProjectedLocationValid_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bProjectedLocationValid");
        bPathExist_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPathExist");
        bPathExist_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bPathExist");
        bPathIsPartial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPathIsPartial");
        bPathIsPartial_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bPathIsPartial");
        bPathSearchOutOfNodes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPathSearchOutOfNodes");
        bPathSearchOutOfNodes_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bPathSearchOutOfNodes");
        PathfindingTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PathfindingTime");
        PathCost_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PathCost");
        PathfindingSteps_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PathfindingSteps");
        
        
        
    }
    
    protected NavigationTestingActor(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/NavigationSystem.NavigationTestingActor:ProjectedLocation
    static readonly int ProjectedLocation_Offset;
    
    public System.DoubleNumerics.Vector3 ProjectedLocation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, ProjectedLocation_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/NavigationSystem.NavigationTestingActor:bProjectedLocationValid
    static readonly int bProjectedLocationValid_Offset;
    static readonly IntPtr bProjectedLocationValid_NativeProperty;
    
    public bool bProjectedLocationValid
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bProjectedLocationValid_NativeProperty, bProjectedLocationValid_Offset);
        }
    }
    
    // BoolProperty /Script/NavigationSystem.NavigationTestingActor:bPathExist
    static readonly int bPathExist_Offset;
    static readonly IntPtr bPathExist_NativeProperty;
    
    public bool bPathExist
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bPathExist_NativeProperty, bPathExist_Offset);
        }
    }
    
    // BoolProperty /Script/NavigationSystem.NavigationTestingActor:bPathIsPartial
    static readonly int bPathIsPartial_Offset;
    static readonly IntPtr bPathIsPartial_NativeProperty;
    
    public bool bPathIsPartial
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bPathIsPartial_NativeProperty, bPathIsPartial_Offset);
        }
    }
    
    // BoolProperty /Script/NavigationSystem.NavigationTestingActor:bPathSearchOutOfNodes
    static readonly int bPathSearchOutOfNodes_Offset;
    static readonly IntPtr bPathSearchOutOfNodes_NativeProperty;
    
    public bool bPathSearchOutOfNodes
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bPathSearchOutOfNodes_NativeProperty, bPathSearchOutOfNodes_Offset);
        }
    }
    
    // FloatProperty /Script/NavigationSystem.NavigationTestingActor:PathfindingTime
    static readonly int PathfindingTime_Offset;
    
    public float PathfindingTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PathfindingTime_Offset), 0, this);
        }
    }
    
    // DoubleProperty /Script/NavigationSystem.NavigationTestingActor:PathCost
    static readonly int PathCost_Offset;
    
    public double PathCost
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<double>.FromNative(IntPtr.Add(NativeObject, PathCost_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/NavigationSystem.NavigationTestingActor:PathfindingSteps
    static readonly int PathfindingSteps_Offset;
    
    public int PathfindingSteps
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, PathfindingSteps_Offset), 0, this);
        }
    }
    
    
}
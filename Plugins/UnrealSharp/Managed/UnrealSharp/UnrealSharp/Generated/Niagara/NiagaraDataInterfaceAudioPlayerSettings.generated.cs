// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Niagara;

[UClass]
public partial class NiagaraDataInterfaceAudioPlayerSettings : UnrealSharp.CoreUObject.Object
{
    
    static NiagaraDataInterfaceAudioPlayerSettings()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("NiagaraDataInterfaceAudioPlayerSettings");
        
        bOverrideConcurrency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideConcurrency");
        Concurrency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Concurrency");
        bOverrideAttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideAttenuationSettings");
        AttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AttenuationSettings");
        
        
        
    }
    
    protected NiagaraDataInterfaceAudioPlayerSettings(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/Niagara.NiagaraDataInterfaceAudioPlayerSettings:bOverrideConcurrency
    static readonly int bOverrideConcurrency_Offset;
    
    public bool bOverrideConcurrency
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bOverrideConcurrency_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bOverrideConcurrency_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Niagara.NiagaraDataInterfaceAudioPlayerSettings:Concurrency
    static readonly int Concurrency_Offset;
    
    public UnrealSharp.Engine.SoundConcurrency Concurrency
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SoundConcurrency>.FromNative(IntPtr.Add(NativeObject, Concurrency_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.SoundConcurrency>.ToNative(IntPtr.Add(NativeObject, Concurrency_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Niagara.NiagaraDataInterfaceAudioPlayerSettings:bOverrideAttenuationSettings
    static readonly int bOverrideAttenuationSettings_Offset;
    
    public bool bOverrideAttenuationSettings
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bOverrideAttenuationSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bOverrideAttenuationSettings_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Niagara.NiagaraDataInterfaceAudioPlayerSettings:AttenuationSettings
    static readonly int AttenuationSettings_Offset;
    
    public UnrealSharp.Engine.SoundAttenuationSettings AttenuationSettings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.SoundAttenuationSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, AttenuationSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.SoundAttenuationSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, AttenuationSettings_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Niagara;

[UClass]
public partial class NiagaraDataInterfaceGrid3DCollection : UnrealSharp.Niagara.NiagaraDataInterfaceGrid3D
{
    
    static NiagaraDataInterfaceGrid3DCollection()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("NiagaraDataInterfaceGrid3DCollection");
        
        
        GetTextureSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTextureSize");
        GetTextureSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTextureSize_NativeFunction);
        GetTextureSize_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextureSize_NativeFunction, "Component");
        GetTextureSize_SizeX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextureSize_NativeFunction, "SizeX");
        GetTextureSize_SizeY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextureSize_NativeFunction, "SizeY");
        GetTextureSize_SizeZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextureSize_NativeFunction, "SizeZ");
        GetRawTextureSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRawTextureSize");
        GetRawTextureSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRawTextureSize_NativeFunction);
        GetRawTextureSize_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTextureSize_NativeFunction, "Component");
        GetRawTextureSize_SizeX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTextureSize_NativeFunction, "SizeX");
        GetRawTextureSize_SizeY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTextureSize_NativeFunction, "SizeY");
        GetRawTextureSize_SizeZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTextureSize_NativeFunction, "SizeZ");
        FillVolumeTexture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FillVolumeTexture");
        FillVolumeTexture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FillVolumeTexture_NativeFunction);
        FillVolumeTexture_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillVolumeTexture_NativeFunction, "Component");
        FillVolumeTexture_dest_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillVolumeTexture_NativeFunction, "dest");
        FillVolumeTexture_AttributeIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillVolumeTexture_NativeFunction, "AttributeIndex");
        FillVolumeTexture_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillVolumeTexture_NativeFunction, "ReturnValue");
        FillRawVolumeTexture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FillRawVolumeTexture");
        FillRawVolumeTexture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FillRawVolumeTexture_NativeFunction);
        FillRawVolumeTexture_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillRawVolumeTexture_NativeFunction, "Component");
        FillRawVolumeTexture_Dest_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillRawVolumeTexture_NativeFunction, "Dest");
        FillRawVolumeTexture_TilesX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillRawVolumeTexture_NativeFunction, "TilesX");
        FillRawVolumeTexture_TilesY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillRawVolumeTexture_NativeFunction, "TilesY");
        FillRawVolumeTexture_TileZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillRawVolumeTexture_NativeFunction, "TileZ");
        FillRawVolumeTexture_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillRawVolumeTexture_NativeFunction, "ReturnValue");
        
        
    }
    
    protected NiagaraDataInterfaceGrid3DCollection(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Niagara.NiagaraDataInterfaceGrid3DCollection:GetTextureSize
    static readonly IntPtr GetTextureSize_NativeFunction;
    static readonly int GetTextureSize_ParamsSize;
    static readonly int GetTextureSize_Component_Offset;
    static readonly int GetTextureSize_SizeX_Offset;
    static readonly int GetTextureSize_SizeY_Offset;
    static readonly int GetTextureSize_SizeZ_Offset;
    
    public void GetTextureSize(UnrealSharp.Niagara.NiagaraComponent component, out int sizeX, out int sizeY, out int sizeZ)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTextureSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Niagara.NiagaraComponent>.ToNative(IntPtr.Add(ParamsBuffer, GetTextureSize_Component_Offset), 0, null, component);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTextureSize_NativeFunction, ParamsBuffer);
            
            sizeX = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetTextureSize_SizeX_Offset), 0, null);
            sizeY = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetTextureSize_SizeY_Offset), 0, null);
            sizeZ = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetTextureSize_SizeZ_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Niagara.NiagaraDataInterfaceGrid3DCollection:GetRawTextureSize
    static readonly IntPtr GetRawTextureSize_NativeFunction;
    static readonly int GetRawTextureSize_ParamsSize;
    static readonly int GetRawTextureSize_Component_Offset;
    static readonly int GetRawTextureSize_SizeX_Offset;
    static readonly int GetRawTextureSize_SizeY_Offset;
    static readonly int GetRawTextureSize_SizeZ_Offset;
    
    public void GetRawTextureSize(UnrealSharp.Niagara.NiagaraComponent component, out int sizeX, out int sizeY, out int sizeZ)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRawTextureSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Niagara.NiagaraComponent>.ToNative(IntPtr.Add(ParamsBuffer, GetRawTextureSize_Component_Offset), 0, null, component);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRawTextureSize_NativeFunction, ParamsBuffer);
            
            sizeX = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetRawTextureSize_SizeX_Offset), 0, null);
            sizeY = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetRawTextureSize_SizeY_Offset), 0, null);
            sizeZ = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetRawTextureSize_SizeZ_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Niagara.NiagaraDataInterfaceGrid3DCollection:FillVolumeTexture
    static readonly IntPtr FillVolumeTexture_NativeFunction;
    static readonly int FillVolumeTexture_ParamsSize;
    static readonly int FillVolumeTexture_Component_Offset;
    static readonly int FillVolumeTexture_dest_Offset;
    static readonly int FillVolumeTexture_AttributeIndex_Offset;
    static readonly int FillVolumeTexture_ReturnValue_Offset;
    
    [Obsolete("This function has been replaced by object user variables on the emitter to specify render targets to fill with data.")]
    public bool FillVolumeTexture(UnrealSharp.Niagara.NiagaraComponent component, UnrealSharp.Engine.VolumeTexture dest, int attributeIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FillVolumeTexture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Niagara.NiagaraComponent>.ToNative(IntPtr.Add(ParamsBuffer, FillVolumeTexture_Component_Offset), 0, null, component);
            ObjectMarshaller<UnrealSharp.Engine.VolumeTexture>.ToNative(IntPtr.Add(ParamsBuffer, FillVolumeTexture_dest_Offset), 0, null, dest);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, FillVolumeTexture_AttributeIndex_Offset), 0, null, attributeIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FillVolumeTexture_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, FillVolumeTexture_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Niagara.NiagaraDataInterfaceGrid3DCollection:FillRawVolumeTexture
    static readonly IntPtr FillRawVolumeTexture_NativeFunction;
    static readonly int FillRawVolumeTexture_ParamsSize;
    static readonly int FillRawVolumeTexture_Component_Offset;
    static readonly int FillRawVolumeTexture_Dest_Offset;
    static readonly int FillRawVolumeTexture_TilesX_Offset;
    static readonly int FillRawVolumeTexture_TilesY_Offset;
    static readonly int FillRawVolumeTexture_TileZ_Offset;
    static readonly int FillRawVolumeTexture_ReturnValue_Offset;
    
    [Obsolete("This function has been replaced by object user variables on the emitter to specify render targets to fill with data.")]
    public bool FillRawVolumeTexture(UnrealSharp.Niagara.NiagaraComponent component, UnrealSharp.Engine.VolumeTexture dest, out int tilesX, out int tilesY, out int tileZ)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FillRawVolumeTexture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Niagara.NiagaraComponent>.ToNative(IntPtr.Add(ParamsBuffer, FillRawVolumeTexture_Component_Offset), 0, null, component);
            ObjectMarshaller<UnrealSharp.Engine.VolumeTexture>.ToNative(IntPtr.Add(ParamsBuffer, FillRawVolumeTexture_Dest_Offset), 0, null, dest);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FillRawVolumeTexture_NativeFunction, ParamsBuffer);
            
            tilesX = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, FillRawVolumeTexture_TilesX_Offset), 0, null);
            tilesY = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, FillRawVolumeTexture_TilesY_Offset), 0, null);
            tileZ = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, FillRawVolumeTexture_TileZ_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, FillRawVolumeTexture_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
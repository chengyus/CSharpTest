// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Niagara;

[UClass]
public partial class NiagaraSimCache : UnrealSharp.CoreUObject.Object
{
    
    static NiagaraSimCache()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("NiagaraSimCache");
        
        
        ReadVectorAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadVectorAttribute");
        ReadVectorAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadVectorAttribute_NativeFunction);
        ReadVectorAttribute_OutValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadVectorAttribute_NativeFunction, "OutValues");
        ReadVectorAttribute_OutValues_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadVectorAttribute_NativeFunction, "OutValues");
        ReadVectorAttribute_AttributeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadVectorAttribute_NativeFunction, "AttributeName");
        ReadVectorAttribute_EmitterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadVectorAttribute_NativeFunction, "EmitterName");
        ReadVectorAttribute_FrameIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadVectorAttribute_NativeFunction, "FrameIndex");
        ReadVector4Attribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadVector4Attribute");
        ReadVector4Attribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadVector4Attribute_NativeFunction);
        ReadVector4Attribute_OutValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadVector4Attribute_NativeFunction, "OutValues");
        ReadVector4Attribute_OutValues_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadVector4Attribute_NativeFunction, "OutValues");
        ReadVector4Attribute_AttributeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadVector4Attribute_NativeFunction, "AttributeName");
        ReadVector4Attribute_EmitterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadVector4Attribute_NativeFunction, "EmitterName");
        ReadVector4Attribute_FrameIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadVector4Attribute_NativeFunction, "FrameIndex");
        ReadVector2Attribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadVector2Attribute");
        ReadVector2Attribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadVector2Attribute_NativeFunction);
        ReadVector2Attribute_OutValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadVector2Attribute_NativeFunction, "OutValues");
        ReadVector2Attribute_OutValues_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadVector2Attribute_NativeFunction, "OutValues");
        ReadVector2Attribute_AttributeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadVector2Attribute_NativeFunction, "AttributeName");
        ReadVector2Attribute_EmitterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadVector2Attribute_NativeFunction, "EmitterName");
        ReadVector2Attribute_FrameIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadVector2Attribute_NativeFunction, "FrameIndex");
        ReadQuatAttributeWithRebase_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadQuatAttributeWithRebase");
        ReadQuatAttributeWithRebase_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadQuatAttributeWithRebase_NativeFunction);
        ReadQuatAttributeWithRebase_OutValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadQuatAttributeWithRebase_NativeFunction, "OutValues");
        ReadQuatAttributeWithRebase_OutValues_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadQuatAttributeWithRebase_NativeFunction, "OutValues");
        ReadQuatAttributeWithRebase_Quat_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadQuatAttributeWithRebase_NativeFunction, "Quat");
        ReadQuatAttributeWithRebase_AttributeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadQuatAttributeWithRebase_NativeFunction, "AttributeName");
        ReadQuatAttributeWithRebase_EmitterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadQuatAttributeWithRebase_NativeFunction, "EmitterName");
        ReadQuatAttributeWithRebase_FrameIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadQuatAttributeWithRebase_NativeFunction, "FrameIndex");
        ReadQuatAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadQuatAttribute");
        ReadQuatAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadQuatAttribute_NativeFunction);
        ReadQuatAttribute_OutValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadQuatAttribute_NativeFunction, "OutValues");
        ReadQuatAttribute_OutValues_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadQuatAttribute_NativeFunction, "OutValues");
        ReadQuatAttribute_AttributeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadQuatAttribute_NativeFunction, "AttributeName");
        ReadQuatAttribute_EmitterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadQuatAttribute_NativeFunction, "EmitterName");
        ReadQuatAttribute_bLocalSpaceToWorld_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadQuatAttribute_NativeFunction, "bLocalSpaceToWorld");
        ReadQuatAttribute_FrameIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadQuatAttribute_NativeFunction, "FrameIndex");
        ReadPositionAttributeWithRebase_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadPositionAttributeWithRebase");
        ReadPositionAttributeWithRebase_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadPositionAttributeWithRebase_NativeFunction);
        ReadPositionAttributeWithRebase_OutValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadPositionAttributeWithRebase_NativeFunction, "OutValues");
        ReadPositionAttributeWithRebase_OutValues_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadPositionAttributeWithRebase_NativeFunction, "OutValues");
        ReadPositionAttributeWithRebase_Transform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadPositionAttributeWithRebase_NativeFunction, "Transform");
        ReadPositionAttributeWithRebase_AttributeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadPositionAttributeWithRebase_NativeFunction, "AttributeName");
        ReadPositionAttributeWithRebase_EmitterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadPositionAttributeWithRebase_NativeFunction, "EmitterName");
        ReadPositionAttributeWithRebase_FrameIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadPositionAttributeWithRebase_NativeFunction, "FrameIndex");
        ReadPositionAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadPositionAttribute");
        ReadPositionAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadPositionAttribute_NativeFunction);
        ReadPositionAttribute_OutValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadPositionAttribute_NativeFunction, "OutValues");
        ReadPositionAttribute_OutValues_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadPositionAttribute_NativeFunction, "OutValues");
        ReadPositionAttribute_AttributeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadPositionAttribute_NativeFunction, "AttributeName");
        ReadPositionAttribute_EmitterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadPositionAttribute_NativeFunction, "EmitterName");
        ReadPositionAttribute_bLocalSpaceToWorld_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadPositionAttribute_NativeFunction, "bLocalSpaceToWorld");
        ReadPositionAttribute_FrameIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadPositionAttribute_NativeFunction, "FrameIndex");
        ReadIntAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadIntAttribute");
        ReadIntAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadIntAttribute_NativeFunction);
        ReadIntAttribute_OutValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadIntAttribute_NativeFunction, "OutValues");
        ReadIntAttribute_OutValues_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadIntAttribute_NativeFunction, "OutValues");
        ReadIntAttribute_AttributeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadIntAttribute_NativeFunction, "AttributeName");
        ReadIntAttribute_EmitterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadIntAttribute_NativeFunction, "EmitterName");
        ReadIntAttribute_FrameIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadIntAttribute_NativeFunction, "FrameIndex");
        ReadIDAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadIDAttribute");
        ReadIDAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadIDAttribute_NativeFunction);
        ReadIDAttribute_OutValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadIDAttribute_NativeFunction, "OutValues");
        ReadIDAttribute_OutValues_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadIDAttribute_NativeFunction, "OutValues");
        ReadIDAttribute_AttributeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadIDAttribute_NativeFunction, "AttributeName");
        ReadIDAttribute_EmitterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadIDAttribute_NativeFunction, "EmitterName");
        ReadIDAttribute_FrameIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadIDAttribute_NativeFunction, "FrameIndex");
        ReadFloatAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadFloatAttribute");
        ReadFloatAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadFloatAttribute_NativeFunction);
        ReadFloatAttribute_OutValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadFloatAttribute_NativeFunction, "OutValues");
        ReadFloatAttribute_OutValues_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadFloatAttribute_NativeFunction, "OutValues");
        ReadFloatAttribute_AttributeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadFloatAttribute_NativeFunction, "AttributeName");
        ReadFloatAttribute_EmitterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadFloatAttribute_NativeFunction, "EmitterName");
        ReadFloatAttribute_FrameIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadFloatAttribute_NativeFunction, "FrameIndex");
        ReadColorAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadColorAttribute");
        ReadColorAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadColorAttribute_NativeFunction);
        ReadColorAttribute_OutValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadColorAttribute_NativeFunction, "OutValues");
        ReadColorAttribute_OutValues_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadColorAttribute_NativeFunction, "OutValues");
        ReadColorAttribute_AttributeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadColorAttribute_NativeFunction, "AttributeName");
        ReadColorAttribute_EmitterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadColorAttribute_NativeFunction, "EmitterName");
        ReadColorAttribute_FrameIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadColorAttribute_NativeFunction, "FrameIndex");
        IsEmpty_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsEmpty");
        IsEmpty_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsEmpty_NativeFunction);
        IsEmpty_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEmpty_NativeFunction, "ReturnValue");
        IsCacheValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsCacheValid");
        IsCacheValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsCacheValid_NativeFunction);
        IsCacheValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsCacheValid_NativeFunction, "ReturnValue");
        GetStartSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStartSeconds");
        GetStartSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStartSeconds_NativeFunction);
        GetStartSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStartSeconds_NativeFunction, "ReturnValue");
        GetNumFrames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumFrames");
        GetNumFrames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumFrames_NativeFunction);
        GetNumFrames_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumFrames_NativeFunction, "ReturnValue");
        GetNumEmitters_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumEmitters");
        GetNumEmitters_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumEmitters_NativeFunction);
        GetNumEmitters_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumEmitters_NativeFunction, "ReturnValue");
        GetEmitterNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEmitterNames");
        GetEmitterNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEmitterNames_NativeFunction);
        GetEmitterNames_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEmitterNames_NativeFunction, "ReturnValue");
        GetEmitterNames_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetEmitterNames_NativeFunction, "ReturnValue");
        GetEmitterName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEmitterName");
        GetEmitterName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEmitterName_NativeFunction);
        GetEmitterName_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEmitterName_NativeFunction, "EmitterIndex");
        GetEmitterName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEmitterName_NativeFunction, "ReturnValue");
        GetAttributeCaptureMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAttributeCaptureMode");
        GetAttributeCaptureMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAttributeCaptureMode_NativeFunction);
        GetAttributeCaptureMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAttributeCaptureMode_NativeFunction, "ReturnValue");
        
        
    }
    
    protected NiagaraSimCache(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Niagara.NiagaraSimCache:ReadVectorAttribute
    static readonly IntPtr ReadVectorAttribute_NativeFunction;
    static readonly int ReadVectorAttribute_ParamsSize;
    static readonly int ReadVectorAttribute_OutValues_Offset;
    static readonly int ReadVectorAttribute_OutValues_ElementSize;
    static readonly int ReadVectorAttribute_AttributeName_Offset;
    static readonly int ReadVectorAttribute_EmitterName_Offset;
    static readonly int ReadVectorAttribute_FrameIndex_Offset;
    
    public void ReadVectorAttribute(out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> outValues, Name attributeName, Name emitterName, int frameIndex = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadVectorAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadVectorAttribute_AttributeName_Offset), 0, null, attributeName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadVectorAttribute_EmitterName_Offset), 0, null, emitterName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadVectorAttribute_FrameIndex_Offset), 0, null, frameIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReadVectorAttribute_NativeFunction, ParamsBuffer);
            
            IntPtr OutValues_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadVectorAttribute_OutValues_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> OutValues_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, ReadVectorAttribute_OutValues_ElementSize);
            outValues = OutValues_Marshaler.FromNative(OutValues_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(OutValues_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:ReadVector4Attribute
    static readonly IntPtr ReadVector4Attribute_NativeFunction;
    static readonly int ReadVector4Attribute_ParamsSize;
    static readonly int ReadVector4Attribute_OutValues_Offset;
    static readonly int ReadVector4Attribute_OutValues_ElementSize;
    static readonly int ReadVector4Attribute_AttributeName_Offset;
    static readonly int ReadVector4Attribute_EmitterName_Offset;
    static readonly int ReadVector4Attribute_FrameIndex_Offset;
    
    public void ReadVector4Attribute(out System.Collections.Generic.IList<System.DoubleNumerics.Vector4> outValues, Name attributeName, Name emitterName, int frameIndex = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadVector4Attribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadVector4Attribute_AttributeName_Offset), 0, null, attributeName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadVector4Attribute_EmitterName_Offset), 0, null, emitterName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadVector4Attribute_FrameIndex_Offset), 0, null, frameIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReadVector4Attribute_NativeFunction, ParamsBuffer);
            
            IntPtr OutValues_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadVector4Attribute_OutValues_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector4> OutValues_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector4> (1, BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector4>.FromNative, ReadVector4Attribute_OutValues_ElementSize);
            outValues = OutValues_Marshaler.FromNative(OutValues_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector4>.DestructInstance(OutValues_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:ReadVector2Attribute
    static readonly IntPtr ReadVector2Attribute_NativeFunction;
    static readonly int ReadVector2Attribute_ParamsSize;
    static readonly int ReadVector2Attribute_OutValues_Offset;
    static readonly int ReadVector2Attribute_OutValues_ElementSize;
    static readonly int ReadVector2Attribute_AttributeName_Offset;
    static readonly int ReadVector2Attribute_EmitterName_Offset;
    static readonly int ReadVector2Attribute_FrameIndex_Offset;
    
    public void ReadVector2Attribute(out System.Collections.Generic.IList<System.DoubleNumerics.Vector2> outValues, Name attributeName, Name emitterName, int frameIndex = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadVector2Attribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadVector2Attribute_AttributeName_Offset), 0, null, attributeName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadVector2Attribute_EmitterName_Offset), 0, null, emitterName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadVector2Attribute_FrameIndex_Offset), 0, null, frameIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReadVector2Attribute_NativeFunction, ParamsBuffer);
            
            IntPtr OutValues_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadVector2Attribute_OutValues_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> OutValues_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> (1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, ReadVector2Attribute_OutValues_ElementSize);
            outValues = OutValues_Marshaler.FromNative(OutValues_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>.DestructInstance(OutValues_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:ReadQuatAttributeWithRebase
    static readonly IntPtr ReadQuatAttributeWithRebase_NativeFunction;
    static readonly int ReadQuatAttributeWithRebase_ParamsSize;
    static readonly int ReadQuatAttributeWithRebase_OutValues_Offset;
    static readonly int ReadQuatAttributeWithRebase_OutValues_ElementSize;
    static readonly int ReadQuatAttributeWithRebase_Quat_Offset;
    static readonly int ReadQuatAttributeWithRebase_AttributeName_Offset;
    static readonly int ReadQuatAttributeWithRebase_EmitterName_Offset;
    static readonly int ReadQuatAttributeWithRebase_FrameIndex_Offset;
    
    public void ReadQuatAttributeWithRebase(out System.Collections.Generic.IList<System.DoubleNumerics.Quaternion> outValues, System.DoubleNumerics.Quaternion quat)
    {
        Name attributeName = new Name("MeshOrientation");
        ReadQuatAttributeWithRebase(out outValues, quat, attributeName);
    }
    
    public void ReadQuatAttributeWithRebase(out System.Collections.Generic.IList<System.DoubleNumerics.Quaternion> outValues, System.DoubleNumerics.Quaternion quat, Name attributeName, Name emitterName = default(Name), int frameIndex = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadQuatAttributeWithRebase_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, ReadQuatAttributeWithRebase_Quat_Offset), 0, null, quat);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadQuatAttributeWithRebase_AttributeName_Offset), 0, null, attributeName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadQuatAttributeWithRebase_EmitterName_Offset), 0, null, emitterName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadQuatAttributeWithRebase_FrameIndex_Offset), 0, null, frameIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReadQuatAttributeWithRebase_NativeFunction, ParamsBuffer);
            
            IntPtr OutValues_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadQuatAttributeWithRebase_OutValues_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion> OutValues_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion> (1, BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative, BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative, ReadQuatAttributeWithRebase_OutValues_ElementSize);
            outValues = OutValues_Marshaler.FromNative(OutValues_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion>.DestructInstance(OutValues_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:ReadQuatAttribute
    static readonly IntPtr ReadQuatAttribute_NativeFunction;
    static readonly int ReadQuatAttribute_ParamsSize;
    static readonly int ReadQuatAttribute_OutValues_Offset;
    static readonly int ReadQuatAttribute_OutValues_ElementSize;
    static readonly int ReadQuatAttribute_AttributeName_Offset;
    static readonly int ReadQuatAttribute_EmitterName_Offset;
    static readonly int ReadQuatAttribute_bLocalSpaceToWorld_Offset;
    static readonly int ReadQuatAttribute_FrameIndex_Offset;
    
    public void ReadQuatAttribute(out System.Collections.Generic.IList<System.DoubleNumerics.Quaternion> outValues)
    {
        Name attributeName = new Name("MeshOrientation");
        ReadQuatAttribute(out outValues, attributeName);
    }
    
    public void ReadQuatAttribute(out System.Collections.Generic.IList<System.DoubleNumerics.Quaternion> outValues, Name attributeName, Name emitterName = default(Name), bool bLocalSpaceToWorld = true, int frameIndex = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadQuatAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadQuatAttribute_AttributeName_Offset), 0, null, attributeName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadQuatAttribute_EmitterName_Offset), 0, null, emitterName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ReadQuatAttribute_bLocalSpaceToWorld_Offset), 0, null, bLocalSpaceToWorld);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadQuatAttribute_FrameIndex_Offset), 0, null, frameIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReadQuatAttribute_NativeFunction, ParamsBuffer);
            
            IntPtr OutValues_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadQuatAttribute_OutValues_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion> OutValues_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion> (1, BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative, BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative, ReadQuatAttribute_OutValues_ElementSize);
            outValues = OutValues_Marshaler.FromNative(OutValues_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion>.DestructInstance(OutValues_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:ReadPositionAttributeWithRebase
    static readonly IntPtr ReadPositionAttributeWithRebase_NativeFunction;
    static readonly int ReadPositionAttributeWithRebase_ParamsSize;
    static readonly int ReadPositionAttributeWithRebase_OutValues_Offset;
    static readonly int ReadPositionAttributeWithRebase_OutValues_ElementSize;
    static readonly int ReadPositionAttributeWithRebase_Transform_Offset;
    static readonly int ReadPositionAttributeWithRebase_AttributeName_Offset;
    static readonly int ReadPositionAttributeWithRebase_EmitterName_Offset;
    static readonly int ReadPositionAttributeWithRebase_FrameIndex_Offset;
    
    public void ReadPositionAttributeWithRebase(out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> outValues, UnrealSharp.Transform transform)
    {
        Name attributeName = new Name("Position");
        ReadPositionAttributeWithRebase(out outValues, transform, attributeName);
    }
    
    public void ReadPositionAttributeWithRebase(out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> outValues, UnrealSharp.Transform transform, Name attributeName, Name emitterName = default(Name), int frameIndex = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadPositionAttributeWithRebase_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, ReadPositionAttributeWithRebase_Transform_Offset), 0, null, transform);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadPositionAttributeWithRebase_AttributeName_Offset), 0, null, attributeName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadPositionAttributeWithRebase_EmitterName_Offset), 0, null, emitterName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadPositionAttributeWithRebase_FrameIndex_Offset), 0, null, frameIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReadPositionAttributeWithRebase_NativeFunction, ParamsBuffer);
            
            IntPtr OutValues_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadPositionAttributeWithRebase_OutValues_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> OutValues_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, ReadPositionAttributeWithRebase_OutValues_ElementSize);
            outValues = OutValues_Marshaler.FromNative(OutValues_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(OutValues_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:ReadPositionAttribute
    static readonly IntPtr ReadPositionAttribute_NativeFunction;
    static readonly int ReadPositionAttribute_ParamsSize;
    static readonly int ReadPositionAttribute_OutValues_Offset;
    static readonly int ReadPositionAttribute_OutValues_ElementSize;
    static readonly int ReadPositionAttribute_AttributeName_Offset;
    static readonly int ReadPositionAttribute_EmitterName_Offset;
    static readonly int ReadPositionAttribute_bLocalSpaceToWorld_Offset;
    static readonly int ReadPositionAttribute_FrameIndex_Offset;
    
    public void ReadPositionAttribute(out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> outValues)
    {
        Name attributeName = new Name("Position");
        ReadPositionAttribute(out outValues, attributeName);
    }
    
    public void ReadPositionAttribute(out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> outValues, Name attributeName, Name emitterName = default(Name), bool bLocalSpaceToWorld = true, int frameIndex = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadPositionAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadPositionAttribute_AttributeName_Offset), 0, null, attributeName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadPositionAttribute_EmitterName_Offset), 0, null, emitterName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ReadPositionAttribute_bLocalSpaceToWorld_Offset), 0, null, bLocalSpaceToWorld);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadPositionAttribute_FrameIndex_Offset), 0, null, frameIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReadPositionAttribute_NativeFunction, ParamsBuffer);
            
            IntPtr OutValues_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadPositionAttribute_OutValues_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> OutValues_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, ReadPositionAttribute_OutValues_ElementSize);
            outValues = OutValues_Marshaler.FromNative(OutValues_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(OutValues_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:ReadIntAttribute
    static readonly IntPtr ReadIntAttribute_NativeFunction;
    static readonly int ReadIntAttribute_ParamsSize;
    static readonly int ReadIntAttribute_OutValues_Offset;
    static readonly int ReadIntAttribute_OutValues_ElementSize;
    static readonly int ReadIntAttribute_AttributeName_Offset;
    static readonly int ReadIntAttribute_EmitterName_Offset;
    static readonly int ReadIntAttribute_FrameIndex_Offset;
    
    public void ReadIntAttribute(out System.Collections.Generic.IList<int> outValues, Name attributeName, Name emitterName, int frameIndex = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadIntAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadIntAttribute_AttributeName_Offset), 0, null, attributeName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadIntAttribute_EmitterName_Offset), 0, null, emitterName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadIntAttribute_FrameIndex_Offset), 0, null, frameIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReadIntAttribute_NativeFunction, ParamsBuffer);
            
            IntPtr OutValues_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadIntAttribute_OutValues_Offset);
            UnrealArrayCopyMarshaler<int> OutValues_Marshaler = new UnrealArrayCopyMarshaler<int> (1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, ReadIntAttribute_OutValues_ElementSize);
            outValues = OutValues_Marshaler.FromNative(OutValues_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<int>.DestructInstance(OutValues_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:ReadIDAttribute
    static readonly IntPtr ReadIDAttribute_NativeFunction;
    static readonly int ReadIDAttribute_ParamsSize;
    static readonly int ReadIDAttribute_OutValues_Offset;
    static readonly int ReadIDAttribute_OutValues_ElementSize;
    static readonly int ReadIDAttribute_AttributeName_Offset;
    static readonly int ReadIDAttribute_EmitterName_Offset;
    static readonly int ReadIDAttribute_FrameIndex_Offset;
    
    public void ReadIDAttribute(out System.Collections.Generic.IList<UnrealSharp.Niagara.NiagaraID> outValues, Name attributeName, Name emitterName, int frameIndex = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadIDAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadIDAttribute_AttributeName_Offset), 0, null, attributeName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadIDAttribute_EmitterName_Offset), 0, null, emitterName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadIDAttribute_FrameIndex_Offset), 0, null, frameIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReadIDAttribute_NativeFunction, ParamsBuffer);
            
            IntPtr OutValues_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadIDAttribute_OutValues_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Niagara.NiagaraID> OutValues_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Niagara.NiagaraID> (1, BlittableMarshaller<UnrealSharp.Niagara.NiagaraID>.ToNative, BlittableMarshaller<UnrealSharp.Niagara.NiagaraID>.FromNative, ReadIDAttribute_OutValues_ElementSize);
            outValues = OutValues_Marshaler.FromNative(OutValues_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Niagara.NiagaraID>.DestructInstance(OutValues_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:ReadFloatAttribute
    static readonly IntPtr ReadFloatAttribute_NativeFunction;
    static readonly int ReadFloatAttribute_ParamsSize;
    static readonly int ReadFloatAttribute_OutValues_Offset;
    static readonly int ReadFloatAttribute_OutValues_ElementSize;
    static readonly int ReadFloatAttribute_AttributeName_Offset;
    static readonly int ReadFloatAttribute_EmitterName_Offset;
    static readonly int ReadFloatAttribute_FrameIndex_Offset;
    
    public void ReadFloatAttribute(out System.Collections.Generic.IList<float> outValues, Name attributeName, Name emitterName, int frameIndex = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadFloatAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadFloatAttribute_AttributeName_Offset), 0, null, attributeName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadFloatAttribute_EmitterName_Offset), 0, null, emitterName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadFloatAttribute_FrameIndex_Offset), 0, null, frameIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReadFloatAttribute_NativeFunction, ParamsBuffer);
            
            IntPtr OutValues_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadFloatAttribute_OutValues_Offset);
            UnrealArrayCopyMarshaler<float> OutValues_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, ReadFloatAttribute_OutValues_ElementSize);
            outValues = OutValues_Marshaler.FromNative(OutValues_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(OutValues_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:ReadColorAttribute
    static readonly IntPtr ReadColorAttribute_NativeFunction;
    static readonly int ReadColorAttribute_ParamsSize;
    static readonly int ReadColorAttribute_OutValues_Offset;
    static readonly int ReadColorAttribute_OutValues_ElementSize;
    static readonly int ReadColorAttribute_AttributeName_Offset;
    static readonly int ReadColorAttribute_EmitterName_Offset;
    static readonly int ReadColorAttribute_FrameIndex_Offset;
    
    public void ReadColorAttribute(out System.Collections.Generic.IList<UnrealSharp.CoreUObject.LinearColor> outValues)
    {
        Name attributeName = new Name("Color");
        ReadColorAttribute(out outValues, attributeName);
    }
    
    public void ReadColorAttribute(out System.Collections.Generic.IList<UnrealSharp.CoreUObject.LinearColor> outValues, Name attributeName, Name emitterName = default(Name), int frameIndex = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadColorAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadColorAttribute_AttributeName_Offset), 0, null, attributeName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReadColorAttribute_EmitterName_Offset), 0, null, emitterName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadColorAttribute_FrameIndex_Offset), 0, null, frameIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReadColorAttribute_NativeFunction, ParamsBuffer);
            
            IntPtr OutValues_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadColorAttribute_OutValues_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor> OutValues_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor> (1, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative, ReadColorAttribute_OutValues_ElementSize);
            outValues = OutValues_Marshaler.FromNative(OutValues_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor>.DestructInstance(OutValues_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:IsEmpty
    static readonly IntPtr IsEmpty_NativeFunction;
    static readonly int IsEmpty_ParamsSize;
    static readonly int IsEmpty_ReturnValue_Offset;
    
    public bool IsEmpty()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsEmpty_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsEmpty_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsEmpty_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:IsCacheValid
    static readonly IntPtr IsCacheValid_NativeFunction;
    static readonly int IsCacheValid_ParamsSize;
    static readonly int IsCacheValid_ReturnValue_Offset;
    
    public bool IsCacheValid()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsCacheValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsCacheValid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsCacheValid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:GetStartSeconds
    static readonly IntPtr GetStartSeconds_NativeFunction;
    static readonly int GetStartSeconds_ParamsSize;
    static readonly int GetStartSeconds_ReturnValue_Offset;
    
    public float GetStartSeconds()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStartSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetStartSeconds_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetStartSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:GetNumFrames
    static readonly IntPtr GetNumFrames_NativeFunction;
    static readonly int GetNumFrames_ParamsSize;
    static readonly int GetNumFrames_ReturnValue_Offset;
    
    public int GetNumFrames()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumFrames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumFrames_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumFrames_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:GetNumEmitters
    static readonly IntPtr GetNumEmitters_NativeFunction;
    static readonly int GetNumEmitters_ParamsSize;
    static readonly int GetNumEmitters_ReturnValue_Offset;
    
    public int GetNumEmitters()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumEmitters_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumEmitters_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumEmitters_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:GetEmitterNames
    static readonly IntPtr GetEmitterNames_NativeFunction;
    static readonly int GetEmitterNames_ParamsSize;
    static readonly int GetEmitterNames_ReturnValue_Offset;
    static readonly int GetEmitterNames_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<Name> GetEmitterNames()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEmitterNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEmitterNames_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetEmitterNames_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetEmitterNames_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:GetEmitterName
    static readonly IntPtr GetEmitterName_NativeFunction;
    static readonly int GetEmitterName_ParamsSize;
    static readonly int GetEmitterName_EmitterIndex_Offset;
    static readonly int GetEmitterName_ReturnValue_Offset;
    
    public Name GetEmitterName(int emitterIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEmitterName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetEmitterName_EmitterIndex_Offset), 0, null, emitterIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEmitterName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetEmitterName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Niagara.NiagaraSimCache:GetAttributeCaptureMode
    static readonly IntPtr GetAttributeCaptureMode_NativeFunction;
    static readonly int GetAttributeCaptureMode_ParamsSize;
    static readonly int GetAttributeCaptureMode_ReturnValue_Offset;
    
    public UnrealSharp.Niagara.ENiagaraSimCacheAttributeCaptureMode GetAttributeCaptureMode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAttributeCaptureMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAttributeCaptureMode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Niagara.ENiagaraSimCacheAttributeCaptureMode returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Niagara.ENiagaraSimCacheAttributeCaptureMode>.FromNative(IntPtr.Add(ParamsBuffer, GetAttributeCaptureMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
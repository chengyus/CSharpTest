// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.OnlineSubsystemUtils;

[UClass]
public partial class AchievementLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static AchievementLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AchievementBlueprintLibrary");
        
        
        GetCachedAchievementProgress_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCachedAchievementProgress");
        GetCachedAchievementProgress_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCachedAchievementProgress_NativeFunction);
        GetCachedAchievementProgress_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCachedAchievementProgress_NativeFunction, "WorldContextObject");
        GetCachedAchievementProgress_PlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCachedAchievementProgress_NativeFunction, "PlayerController");
        GetCachedAchievementProgress_AchievementID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCachedAchievementProgress_NativeFunction, "AchievementID");
        GetCachedAchievementProgress_bFoundID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCachedAchievementProgress_NativeFunction, "bFoundID");
        GetCachedAchievementProgress_Progress_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCachedAchievementProgress_NativeFunction, "Progress");
        
        
    }
    
    protected AchievementLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/OnlineSubsystemUtils.AchievementBlueprintLibrary:GetCachedAchievementProgress
    static readonly IntPtr GetCachedAchievementProgress_NativeFunction;
    static readonly int GetCachedAchievementProgress_ParamsSize;
    static readonly int GetCachedAchievementProgress_WorldContextObject_Offset;
    static readonly int GetCachedAchievementProgress_PlayerController_Offset;
    static readonly int GetCachedAchievementProgress_AchievementID_Offset;
    static readonly int GetCachedAchievementProgress_bFoundID_Offset;
    static readonly int GetCachedAchievementProgress_Progress_Offset;
    
    public static void GetCachedAchievementProgress(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.PlayerController playerController, Name achievementID, out bool bFoundID, out float progress)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCachedAchievementProgress_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetCachedAchievementProgress_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, GetCachedAchievementProgress_PlayerController_Offset), 0, null, playerController);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetCachedAchievementProgress_AchievementID_Offset), 0, null, achievementID);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCachedAchievementProgress_NativeFunction, ParamsBuffer);
            
            bFoundID = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCachedAchievementProgress_bFoundID_Offset), 0, null);
            progress = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCachedAchievementProgress_Progress_Offset), 0, null);
            
        }
    }
    
    
}
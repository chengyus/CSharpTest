// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.OnlineSubsystemUtils;

[UClass]
public partial class TurnBasedLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static TurnBasedLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TurnBasedBlueprintLibrary");
        
        
        RegisterTurnBasedMatchInterfaceObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RegisterTurnBasedMatchInterfaceObject");
        RegisterTurnBasedMatchInterfaceObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RegisterTurnBasedMatchInterfaceObject_NativeFunction);
        RegisterTurnBasedMatchInterfaceObject_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RegisterTurnBasedMatchInterfaceObject_NativeFunction, "WorldContextObject");
        RegisterTurnBasedMatchInterfaceObject_PlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RegisterTurnBasedMatchInterfaceObject_NativeFunction, "PlayerController");
        RegisterTurnBasedMatchInterfaceObject_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RegisterTurnBasedMatchInterfaceObject_NativeFunction, "Object");
        GetPlayerDisplayName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerDisplayName");
        GetPlayerDisplayName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerDisplayName_NativeFunction);
        GetPlayerDisplayName_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerDisplayName_NativeFunction, "WorldContextObject");
        GetPlayerDisplayName_PlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerDisplayName_NativeFunction, "PlayerController");
        GetPlayerDisplayName_MatchID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerDisplayName_NativeFunction, "MatchID");
        GetPlayerDisplayName_PlayerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerDisplayName_NativeFunction, "PlayerIndex");
        GetPlayerDisplayName_PlayerDisplayName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerDisplayName_NativeFunction, "PlayerDisplayName");
        GetMyPlayerIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMyPlayerIndex");
        GetMyPlayerIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMyPlayerIndex_NativeFunction);
        GetMyPlayerIndex_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMyPlayerIndex_NativeFunction, "WorldContextObject");
        GetMyPlayerIndex_PlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMyPlayerIndex_NativeFunction, "PlayerController");
        GetMyPlayerIndex_MatchID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMyPlayerIndex_NativeFunction, "MatchID");
        GetMyPlayerIndex_PlayerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMyPlayerIndex_NativeFunction, "PlayerIndex");
        GetIsMyTurn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetIsMyTurn");
        GetIsMyTurn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetIsMyTurn_NativeFunction);
        GetIsMyTurn_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIsMyTurn_NativeFunction, "WorldContextObject");
        GetIsMyTurn_PlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIsMyTurn_NativeFunction, "PlayerController");
        GetIsMyTurn_MatchID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIsMyTurn_NativeFunction, "MatchID");
        GetIsMyTurn_bIsMyTurn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIsMyTurn_NativeFunction, "bIsMyTurn");
        
        
    }
    
    protected TurnBasedLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/OnlineSubsystemUtils.TurnBasedBlueprintLibrary:RegisterTurnBasedMatchInterfaceObject
    static readonly IntPtr RegisterTurnBasedMatchInterfaceObject_NativeFunction;
    static readonly int RegisterTurnBasedMatchInterfaceObject_ParamsSize;
    static readonly int RegisterTurnBasedMatchInterfaceObject_WorldContextObject_Offset;
    static readonly int RegisterTurnBasedMatchInterfaceObject_PlayerController_Offset;
    static readonly int RegisterTurnBasedMatchInterfaceObject_Object_Offset;
    
    public static void RegisterTurnBasedMatchInterfaceObject(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.PlayerController playerController, UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RegisterTurnBasedMatchInterfaceObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, RegisterTurnBasedMatchInterfaceObject_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, RegisterTurnBasedMatchInterfaceObject_PlayerController_Offset), 0, null, playerController);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, RegisterTurnBasedMatchInterfaceObject_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RegisterTurnBasedMatchInterfaceObject_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/OnlineSubsystemUtils.TurnBasedBlueprintLibrary:GetPlayerDisplayName
    static readonly IntPtr GetPlayerDisplayName_NativeFunction;
    static readonly int GetPlayerDisplayName_ParamsSize;
    static readonly int GetPlayerDisplayName_WorldContextObject_Offset;
    static readonly int GetPlayerDisplayName_PlayerController_Offset;
    static readonly int GetPlayerDisplayName_MatchID_Offset;
    static readonly int GetPlayerDisplayName_PlayerIndex_Offset;
    static readonly int GetPlayerDisplayName_PlayerDisplayName_Offset;
    
    public static void GetPlayerDisplayName(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.PlayerController playerController, string matchID, int playerIndex, out string playerDisplayName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerDisplayName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerDisplayName_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerDisplayName_PlayerController_Offset), 0, null, playerController);
            IntPtr MatchID_NativePtr = IntPtr.Add(ParamsBuffer,GetPlayerDisplayName_MatchID_Offset);
            StringMarshaller.ToNative(MatchID_NativePtr,0,null,matchID);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerDisplayName_PlayerIndex_Offset), 0, null, playerIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlayerDisplayName_NativeFunction, ParamsBuffer);
            
            IntPtr PlayerDisplayName_NativePtr = IntPtr.Add(ParamsBuffer,GetPlayerDisplayName_PlayerDisplayName_Offset);
            playerDisplayName = StringMarshaller.FromNative(PlayerDisplayName_NativePtr,0,null);
            StringMarshaller.DestructInstance(PlayerDisplayName_NativePtr, 0);
            
            StringMarshaller.DestructInstance(MatchID_NativePtr, 0);
        }
    }
    
    // Function /Script/OnlineSubsystemUtils.TurnBasedBlueprintLibrary:GetMyPlayerIndex
    static readonly IntPtr GetMyPlayerIndex_NativeFunction;
    static readonly int GetMyPlayerIndex_ParamsSize;
    static readonly int GetMyPlayerIndex_WorldContextObject_Offset;
    static readonly int GetMyPlayerIndex_PlayerController_Offset;
    static readonly int GetMyPlayerIndex_MatchID_Offset;
    static readonly int GetMyPlayerIndex_PlayerIndex_Offset;
    
    public static void GetMyPlayerIndex(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.PlayerController playerController, string matchID, out int playerIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMyPlayerIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetMyPlayerIndex_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, GetMyPlayerIndex_PlayerController_Offset), 0, null, playerController);
            IntPtr MatchID_NativePtr = IntPtr.Add(ParamsBuffer,GetMyPlayerIndex_MatchID_Offset);
            StringMarshaller.ToNative(MatchID_NativePtr,0,null,matchID);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMyPlayerIndex_NativeFunction, ParamsBuffer);
            
            playerIndex = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMyPlayerIndex_PlayerIndex_Offset), 0, null);
            
            StringMarshaller.DestructInstance(MatchID_NativePtr, 0);
        }
    }
    
    // Function /Script/OnlineSubsystemUtils.TurnBasedBlueprintLibrary:GetIsMyTurn
    static readonly IntPtr GetIsMyTurn_NativeFunction;
    static readonly int GetIsMyTurn_ParamsSize;
    static readonly int GetIsMyTurn_WorldContextObject_Offset;
    static readonly int GetIsMyTurn_PlayerController_Offset;
    static readonly int GetIsMyTurn_MatchID_Offset;
    static readonly int GetIsMyTurn_bIsMyTurn_Offset;
    
    public static void GetIsMyTurn(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.PlayerController playerController, string matchID, out bool bIsMyTurn)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetIsMyTurn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetIsMyTurn_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, GetIsMyTurn_PlayerController_Offset), 0, null, playerController);
            IntPtr MatchID_NativePtr = IntPtr.Add(ParamsBuffer,GetIsMyTurn_MatchID_Offset);
            StringMarshaller.ToNative(MatchID_NativePtr,0,null,matchID);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetIsMyTurn_NativeFunction, ParamsBuffer);
            
            bIsMyTurn = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetIsMyTurn_bIsMyTurn_Offset), 0, null);
            
            StringMarshaller.DestructInstance(MatchID_NativePtr, 0);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Paper2D;

[UClass]
public partial class PaperGroupedSpriteComponent : UnrealSharp.Engine.MeshComponent
{
    
    static PaperGroupedSpriteComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PaperGroupedSpriteComponent");
        
        
        UpdateInstanceTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UpdateInstanceTransform");
        UpdateInstanceTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UpdateInstanceTransform_NativeFunction);
        UpdateInstanceTransform_InstanceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceTransform_NativeFunction, "InstanceIndex");
        UpdateInstanceTransform_NewInstanceTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceTransform_NativeFunction, "NewInstanceTransform");
        UpdateInstanceTransform_bWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceTransform_NativeFunction, "bWorldSpace");
        UpdateInstanceTransform_bMarkRenderStateDirty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceTransform_NativeFunction, "bMarkRenderStateDirty");
        UpdateInstanceTransform_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceTransform_NativeFunction, "bTeleport");
        UpdateInstanceTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceTransform_NativeFunction, "ReturnValue");
        UpdateInstanceColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UpdateInstanceColor");
        UpdateInstanceColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UpdateInstanceColor_NativeFunction);
        UpdateInstanceColor_InstanceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceColor_NativeFunction, "InstanceIndex");
        UpdateInstanceColor_NewInstanceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceColor_NativeFunction, "NewInstanceColor");
        UpdateInstanceColor_bMarkRenderStateDirty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceColor_NativeFunction, "bMarkRenderStateDirty");
        UpdateInstanceColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceColor_NativeFunction, "ReturnValue");
        SortInstancesAlongAxis_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SortInstancesAlongAxis");
        SortInstancesAlongAxis_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SortInstancesAlongAxis_NativeFunction);
        SortInstancesAlongAxis_WorldSpaceSortAxis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SortInstancesAlongAxis_NativeFunction, "WorldSpaceSortAxis");
        RemoveInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveInstance");
        RemoveInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveInstance_NativeFunction);
        RemoveInstance_InstanceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveInstance_NativeFunction, "InstanceIndex");
        RemoveInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveInstance_NativeFunction, "ReturnValue");
        GetInstanceTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInstanceTransform");
        GetInstanceTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInstanceTransform_NativeFunction);
        GetInstanceTransform_InstanceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstanceTransform_NativeFunction, "InstanceIndex");
        GetInstanceTransform_OutInstanceTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstanceTransform_NativeFunction, "OutInstanceTransform");
        GetInstanceTransform_bWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstanceTransform_NativeFunction, "bWorldSpace");
        GetInstanceTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstanceTransform_NativeFunction, "ReturnValue");
        GetInstanceCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInstanceCount");
        GetInstanceCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInstanceCount_NativeFunction);
        GetInstanceCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstanceCount_NativeFunction, "ReturnValue");
        ClearInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearInstances");
        AddInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddInstance");
        AddInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddInstance_NativeFunction);
        AddInstance_Transform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInstance_NativeFunction, "Transform");
        AddInstance_Sprite_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInstance_NativeFunction, "Sprite");
        AddInstance_bWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInstance_NativeFunction, "bWorldSpace");
        AddInstance_Color_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInstance_NativeFunction, "Color");
        AddInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInstance_NativeFunction, "ReturnValue");
        
        
    }
    
    protected PaperGroupedSpriteComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Paper2D.PaperGroupedSpriteComponent:UpdateInstanceTransform
    static readonly IntPtr UpdateInstanceTransform_NativeFunction;
    static readonly int UpdateInstanceTransform_ParamsSize;
    static readonly int UpdateInstanceTransform_InstanceIndex_Offset;
    static readonly int UpdateInstanceTransform_NewInstanceTransform_Offset;
    static readonly int UpdateInstanceTransform_bWorldSpace_Offset;
    static readonly int UpdateInstanceTransform_bMarkRenderStateDirty_Offset;
    static readonly int UpdateInstanceTransform_bTeleport_Offset;
    static readonly int UpdateInstanceTransform_ReturnValue_Offset;
    
    public bool UpdateInstanceTransform(int instanceIndex, UnrealSharp.Transform newInstanceTransform, bool bWorldSpace = false, bool bMarkRenderStateDirty = true, bool bTeleport = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UpdateInstanceTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, UpdateInstanceTransform_InstanceIndex_Offset), 0, null, instanceIndex);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, UpdateInstanceTransform_NewInstanceTransform_Offset), 0, null, newInstanceTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UpdateInstanceTransform_bWorldSpace_Offset), 0, null, bWorldSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UpdateInstanceTransform_bMarkRenderStateDirty_Offset), 0, null, bMarkRenderStateDirty);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UpdateInstanceTransform_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UpdateInstanceTransform_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, UpdateInstanceTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Paper2D.PaperGroupedSpriteComponent:UpdateInstanceColor
    static readonly IntPtr UpdateInstanceColor_NativeFunction;
    static readonly int UpdateInstanceColor_ParamsSize;
    static readonly int UpdateInstanceColor_InstanceIndex_Offset;
    static readonly int UpdateInstanceColor_NewInstanceColor_Offset;
    static readonly int UpdateInstanceColor_bMarkRenderStateDirty_Offset;
    static readonly int UpdateInstanceColor_ReturnValue_Offset;
    
    public bool UpdateInstanceColor(int instanceIndex, UnrealSharp.CoreUObject.LinearColor newInstanceColor, bool bMarkRenderStateDirty = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UpdateInstanceColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, UpdateInstanceColor_InstanceIndex_Offset), 0, null, instanceIndex);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, UpdateInstanceColor_NewInstanceColor_Offset), 0, null, newInstanceColor);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UpdateInstanceColor_bMarkRenderStateDirty_Offset), 0, null, bMarkRenderStateDirty);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UpdateInstanceColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, UpdateInstanceColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Paper2D.PaperGroupedSpriteComponent:SortInstancesAlongAxis
    static readonly IntPtr SortInstancesAlongAxis_NativeFunction;
    static readonly int SortInstancesAlongAxis_ParamsSize;
    static readonly int SortInstancesAlongAxis_WorldSpaceSortAxis_Offset;
    
    public void SortInstancesAlongAxis(System.DoubleNumerics.Vector3 worldSpaceSortAxis)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SortInstancesAlongAxis_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SortInstancesAlongAxis_WorldSpaceSortAxis_Offset), 0, null, worldSpaceSortAxis);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SortInstancesAlongAxis_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Paper2D.PaperGroupedSpriteComponent:RemoveInstance
    static readonly IntPtr RemoveInstance_NativeFunction;
    static readonly int RemoveInstance_ParamsSize;
    static readonly int RemoveInstance_InstanceIndex_Offset;
    static readonly int RemoveInstance_ReturnValue_Offset;
    
    public bool RemoveInstance(int instanceIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RemoveInstance_InstanceIndex_Offset), 0, null, instanceIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveInstance_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Paper2D.PaperGroupedSpriteComponent:GetInstanceTransform
    static readonly IntPtr GetInstanceTransform_NativeFunction;
    static readonly int GetInstanceTransform_ParamsSize;
    static readonly int GetInstanceTransform_InstanceIndex_Offset;
    static readonly int GetInstanceTransform_OutInstanceTransform_Offset;
    static readonly int GetInstanceTransform_bWorldSpace_Offset;
    static readonly int GetInstanceTransform_ReturnValue_Offset;
    
    public bool GetInstanceTransform(int instanceIndex, out UnrealSharp.Transform outInstanceTransform, bool bWorldSpace = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInstanceTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetInstanceTransform_InstanceIndex_Offset), 0, null, instanceIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetInstanceTransform_bWorldSpace_Offset), 0, null, bWorldSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInstanceTransform_NativeFunction, ParamsBuffer);
            
            outInstanceTransform = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetInstanceTransform_OutInstanceTransform_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetInstanceTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Paper2D.PaperGroupedSpriteComponent:GetInstanceCount
    static readonly IntPtr GetInstanceCount_NativeFunction;
    static readonly int GetInstanceCount_ParamsSize;
    static readonly int GetInstanceCount_ReturnValue_Offset;
    
    public int GetInstanceCount()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInstanceCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInstanceCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetInstanceCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Paper2D.PaperGroupedSpriteComponent:ClearInstances
    static readonly IntPtr ClearInstances_NativeFunction;
    
    public void ClearInstances()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearInstances_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Paper2D.PaperGroupedSpriteComponent:AddInstance
    static readonly IntPtr AddInstance_NativeFunction;
    static readonly int AddInstance_ParamsSize;
    static readonly int AddInstance_Transform_Offset;
    static readonly int AddInstance_Sprite_Offset;
    static readonly int AddInstance_bWorldSpace_Offset;
    static readonly int AddInstance_Color_Offset;
    static readonly int AddInstance_ReturnValue_Offset;
    
    public int AddInstance(UnrealSharp.Transform transform, UnrealSharp.Paper2D.PaperSprite sprite, bool bWorldSpace = false)
    {
        UnrealSharp.CoreUObject.LinearColor color = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        return AddInstance(transform, sprite, bWorldSpace, color);
    }
    
    public int AddInstance(UnrealSharp.Transform transform, UnrealSharp.Paper2D.PaperSprite sprite, bool bWorldSpace, UnrealSharp.CoreUObject.LinearColor color)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, AddInstance_Transform_Offset), 0, null, transform);
            ObjectMarshaller<UnrealSharp.Paper2D.PaperSprite>.ToNative(IntPtr.Add(ParamsBuffer, AddInstance_Sprite_Offset), 0, null, sprite);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddInstance_bWorldSpace_Offset), 0, null, bWorldSpace);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, AddInstance_Color_Offset), 0, null, color);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddInstance_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, AddInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
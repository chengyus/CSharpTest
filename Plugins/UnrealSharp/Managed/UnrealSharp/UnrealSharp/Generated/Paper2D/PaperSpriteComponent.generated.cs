// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Paper2D;

[UClass]
public partial class PaperSpriteComponent : UnrealSharp.Engine.MeshComponent
{
    
    static PaperSpriteComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PaperSpriteComponent");
        
        SourceSprite_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SourceSprite");
        SpriteColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SpriteColor");
        
        SetSpriteColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSpriteColor");
        SetSpriteColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSpriteColor_NativeFunction);
        SetSpriteColor_NewColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSpriteColor_NativeFunction, "NewColor");
        SetSprite_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSprite");
        SetSprite_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSprite_NativeFunction);
        SetSprite_NewSprite_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSprite_NativeFunction, "NewSprite");
        SetSprite_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSprite_NativeFunction, "ReturnValue");
        GetSprite_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSprite");
        GetSprite_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSprite_NativeFunction);
        GetSprite_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSprite_NativeFunction, "ReturnValue");
        
        
    }
    
    protected PaperSpriteComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Paper2D.PaperSpriteComponent:SourceSprite
    static readonly int SourceSprite_Offset;
    
    public UnrealSharp.Paper2D.PaperSprite SourceSprite
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Paper2D.PaperSprite>.FromNative(IntPtr.Add(NativeObject, SourceSprite_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Paper2D.PaperSpriteComponent:SpriteColor
    static readonly int SpriteColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor SpriteColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, SpriteColor_Offset), 0, this);
        }
    }
    
    // Function /Script/Paper2D.PaperSpriteComponent:SetSpriteColor
    static readonly IntPtr SetSpriteColor_NativeFunction;
    static readonly int SetSpriteColor_ParamsSize;
    static readonly int SetSpriteColor_NewColor_Offset;
    
    public void SetSpriteColor(UnrealSharp.CoreUObject.LinearColor newColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSpriteColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetSpriteColor_NewColor_Offset), 0, null, newColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSpriteColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Paper2D.PaperSpriteComponent:SetSprite
    static readonly IntPtr SetSprite_NativeFunction;
    static readonly int SetSprite_ParamsSize;
    static readonly int SetSprite_NewSprite_Offset;
    static readonly int SetSprite_ReturnValue_Offset;
    
    public bool SetSprite(UnrealSharp.Paper2D.PaperSprite newSprite)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSprite_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Paper2D.PaperSprite>.ToNative(IntPtr.Add(ParamsBuffer, SetSprite_NewSprite_Offset), 0, null, newSprite);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSprite_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetSprite_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Paper2D.PaperSpriteComponent:GetSprite
    static readonly IntPtr GetSprite_NativeFunction;
    static readonly int GetSprite_ParamsSize;
    static readonly int GetSprite_ReturnValue_Offset;
    
    public UnrealSharp.Paper2D.PaperSprite GetSprite()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSprite_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSprite_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Paper2D.PaperSprite returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Paper2D.PaperSprite>.FromNative(IntPtr.Add(ParamsBuffer, GetSprite_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
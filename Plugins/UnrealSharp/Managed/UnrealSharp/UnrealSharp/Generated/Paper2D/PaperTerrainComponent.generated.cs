// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Paper2D;

[UClass]
public partial class PaperTerrainComponent : UnrealSharp.Engine.PrimitiveComponent
{
    
    static PaperTerrainComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PaperTerrainComponent");
        
        TerrainMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TerrainMaterial");
        bClosedSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bClosedSpline");
        bFilledSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bFilledSpline");
        TerrainColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TerrainColor");
        
        SetTerrainColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTerrainColor");
        SetTerrainColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTerrainColor_NativeFunction);
        SetTerrainColor_NewColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTerrainColor_NativeFunction, "NewColor");
        
        
    }
    
    protected PaperTerrainComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Paper2D.PaperTerrainComponent:TerrainMaterial
    static readonly int TerrainMaterial_Offset;
    
    public UnrealSharp.Paper2D.PaperTerrainMaterial TerrainMaterial
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Paper2D.PaperTerrainMaterial>.FromNative(IntPtr.Add(NativeObject, TerrainMaterial_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Paper2D.PaperTerrainComponent:bClosedSpline
    static readonly int bClosedSpline_Offset;
    
    public bool bClosedSpline
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bClosedSpline_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Paper2D.PaperTerrainComponent:bFilledSpline
    static readonly int bFilledSpline_Offset;
    
    public bool bFilledSpline
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bFilledSpline_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Paper2D.PaperTerrainComponent:TerrainColor
    static readonly int TerrainColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor TerrainColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, TerrainColor_Offset), 0, this);
        }
    }
    
    // Function /Script/Paper2D.PaperTerrainComponent:SetTerrainColor
    static readonly IntPtr SetTerrainColor_NativeFunction;
    static readonly int SetTerrainColor_ParamsSize;
    static readonly int SetTerrainColor_NewColor_Offset;
    
    public void SetTerrainColor(UnrealSharp.CoreUObject.LinearColor newColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTerrainColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetTerrainColor_NewColor_Offset), 0, null, newColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTerrainColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
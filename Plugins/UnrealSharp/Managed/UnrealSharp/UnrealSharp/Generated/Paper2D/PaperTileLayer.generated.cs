// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Paper2D;

[UClass]
public partial class PaperTileLayer : UnrealSharp.CoreUObject.Object
{
    
    static PaperTileLayer()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PaperTileLayer");
        
        LayerName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LayerName");
        LayerName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "LayerName");
        LayerWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LayerWidth");
        LayerHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LayerHeight");
        bHiddenInGame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bHiddenInGame");
        bHiddenInGame_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bHiddenInGame");
        bLayerCollides_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bLayerCollides");
        bLayerCollides_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bLayerCollides");
        bOverrideCollisionThickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideCollisionThickness");
        bOverrideCollisionThickness_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOverrideCollisionThickness");
        bOverrideCollisionOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideCollisionOffset");
        bOverrideCollisionOffset_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOverrideCollisionOffset");
        CollisionThicknessOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CollisionThicknessOverride");
        CollisionOffsetOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CollisionOffsetOverride");
        LayerColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LayerColor");
        
        
        
    }
    
    protected PaperTileLayer(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // TextProperty /Script/Paper2D.PaperTileLayer:LayerName
    static readonly int LayerName_Offset;
    static readonly IntPtr LayerName_NativeProperty;
    TextMarshaller LayerName_Wrapper;
    
    public Text LayerName
    {
        get
        {
            if (LayerName_Wrapper == null)
            {
                LayerName_Wrapper  = new TextMarshaller(1);
            }
            return LayerName_Wrapper.FromNative(this.NativeObject + LayerName_Offset, 0, this);
        }
    }
    
    // IntProperty /Script/Paper2D.PaperTileLayer:LayerWidth
    static readonly int LayerWidth_Offset;
    
    public int LayerWidth
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, LayerWidth_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Paper2D.PaperTileLayer:LayerHeight
    static readonly int LayerHeight_Offset;
    
    public int LayerHeight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, LayerHeight_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Paper2D.PaperTileLayer:bHiddenInGame
    static readonly int bHiddenInGame_Offset;
    static readonly IntPtr bHiddenInGame_NativeProperty;
    
    public bool bHiddenInGame
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bHiddenInGame_NativeProperty, bHiddenInGame_Offset);
        }
    }
    
    // BoolProperty /Script/Paper2D.PaperTileLayer:bLayerCollides
    static readonly int bLayerCollides_Offset;
    static readonly IntPtr bLayerCollides_NativeProperty;
    
    public bool bLayerCollides
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bLayerCollides_NativeProperty, bLayerCollides_Offset);
        }
    }
    
    // BoolProperty /Script/Paper2D.PaperTileLayer:bOverrideCollisionThickness
    static readonly int bOverrideCollisionThickness_Offset;
    static readonly IntPtr bOverrideCollisionThickness_NativeProperty;
    
    public bool bOverrideCollisionThickness
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOverrideCollisionThickness_NativeProperty, bOverrideCollisionThickness_Offset);
        }
    }
    
    // BoolProperty /Script/Paper2D.PaperTileLayer:bOverrideCollisionOffset
    static readonly int bOverrideCollisionOffset_Offset;
    static readonly IntPtr bOverrideCollisionOffset_NativeProperty;
    
    public bool bOverrideCollisionOffset
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOverrideCollisionOffset_NativeProperty, bOverrideCollisionOffset_Offset);
        }
    }
    
    // FloatProperty /Script/Paper2D.PaperTileLayer:CollisionThicknessOverride
    static readonly int CollisionThicknessOverride_Offset;
    
    public float CollisionThicknessOverride
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CollisionThicknessOverride_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Paper2D.PaperTileLayer:CollisionOffsetOverride
    static readonly int CollisionOffsetOverride_Offset;
    
    public float CollisionOffsetOverride
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CollisionOffsetOverride_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Paper2D.PaperTileLayer:LayerColor
    static readonly int LayerColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor LayerColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, LayerColor_Offset), 0, this);
        }
    }
    
    
}
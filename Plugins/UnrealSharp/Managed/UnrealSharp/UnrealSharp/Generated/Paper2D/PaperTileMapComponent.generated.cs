// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Paper2D;

[UClass]
public partial class PaperTileMapComponent : UnrealSharp.Engine.MeshComponent
{
    
    static PaperTileMapComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PaperTileMapComponent");
        
        TileMap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TileMap");
        
        SetTileMapColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTileMapColor");
        SetTileMapColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTileMapColor_NativeFunction);
        SetTileMapColor_NewColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTileMapColor_NativeFunction, "NewColor");
        SetTileMap_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTileMap");
        SetTileMap_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTileMap_NativeFunction);
        SetTileMap_NewTileMap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTileMap_NativeFunction, "NewTileMap");
        SetTileMap_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTileMap_NativeFunction, "ReturnValue");
        SetTile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTile");
        SetTile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTile_NativeFunction);
        SetTile_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTile_NativeFunction, "X");
        SetTile_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTile_NativeFunction, "Y");
        SetTile_Layer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTile_NativeFunction, "Layer");
        SetTile_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTile_NativeFunction, "NewValue");
        SetLayerColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLayerColor");
        SetLayerColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLayerColor_NativeFunction);
        SetLayerColor_NewColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLayerColor_NativeFunction, "NewColor");
        SetLayerColor_Layer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLayerColor_NativeFunction, "Layer");
        SetLayerCollision_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLayerCollision");
        SetLayerCollision_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLayerCollision_NativeFunction);
        SetLayerCollision_Layer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLayerCollision_NativeFunction, "Layer");
        SetLayerCollision_bHasCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLayerCollision_NativeFunction, "bHasCollision");
        SetLayerCollision_bOverrideThickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLayerCollision_NativeFunction, "bOverrideThickness");
        SetLayerCollision_CustomThickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLayerCollision_NativeFunction, "CustomThickness");
        SetLayerCollision_bOverrideOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLayerCollision_NativeFunction, "bOverrideOffset");
        SetLayerCollision_CustomOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLayerCollision_NativeFunction, "CustomOffset");
        SetLayerCollision_bRebuildCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLayerCollision_NativeFunction, "bRebuildCollision");
        SetDefaultCollisionThickness_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultCollisionThickness");
        SetDefaultCollisionThickness_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultCollisionThickness_NativeFunction);
        SetDefaultCollisionThickness_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultCollisionThickness_NativeFunction, "Thickness");
        SetDefaultCollisionThickness_bRebuildCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultCollisionThickness_NativeFunction, "bRebuildCollision");
        ResizeMap_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResizeMap");
        ResizeMap_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResizeMap_NativeFunction);
        ResizeMap_NewWidthInTiles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResizeMap_NativeFunction, "NewWidthInTiles");
        ResizeMap_NewHeightInTiles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResizeMap_NativeFunction, "NewHeightInTiles");
        RebuildCollision_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RebuildCollision");
        OwnsTileMap_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OwnsTileMap");
        OwnsTileMap_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OwnsTileMap_NativeFunction);
        OwnsTileMap_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OwnsTileMap_NativeFunction, "ReturnValue");
        MakeTileMapEditable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeTileMapEditable");
        GetTilePolygon_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTilePolygon");
        GetTilePolygon_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTilePolygon_NativeFunction);
        GetTilePolygon_TileX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTilePolygon_NativeFunction, "TileX");
        GetTilePolygon_TileY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTilePolygon_NativeFunction, "TileY");
        GetTilePolygon_Points_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTilePolygon_NativeFunction, "Points");
        GetTilePolygon_Points_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetTilePolygon_NativeFunction, "Points");
        GetTilePolygon_LayerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTilePolygon_NativeFunction, "LayerIndex");
        GetTilePolygon_bWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTilePolygon_NativeFunction, "bWorldSpace");
        GetTileMapColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTileMapColor");
        GetTileMapColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTileMapColor_NativeFunction);
        GetTileMapColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTileMapColor_NativeFunction, "ReturnValue");
        GetTileCornerPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTileCornerPosition");
        GetTileCornerPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTileCornerPosition_NativeFunction);
        GetTileCornerPosition_TileX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTileCornerPosition_NativeFunction, "TileX");
        GetTileCornerPosition_TileY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTileCornerPosition_NativeFunction, "TileY");
        GetTileCornerPosition_LayerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTileCornerPosition_NativeFunction, "LayerIndex");
        GetTileCornerPosition_bWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTileCornerPosition_NativeFunction, "bWorldSpace");
        GetTileCornerPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTileCornerPosition_NativeFunction, "ReturnValue");
        GetTileCenterPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTileCenterPosition");
        GetTileCenterPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTileCenterPosition_NativeFunction);
        GetTileCenterPosition_TileX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTileCenterPosition_NativeFunction, "TileX");
        GetTileCenterPosition_TileY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTileCenterPosition_NativeFunction, "TileY");
        GetTileCenterPosition_LayerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTileCenterPosition_NativeFunction, "LayerIndex");
        GetTileCenterPosition_bWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTileCenterPosition_NativeFunction, "bWorldSpace");
        GetTileCenterPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTileCenterPosition_NativeFunction, "ReturnValue");
        GetTile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTile");
        GetTile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTile_NativeFunction);
        GetTile_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTile_NativeFunction, "X");
        GetTile_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTile_NativeFunction, "Y");
        GetTile_Layer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTile_NativeFunction, "Layer");
        GetTile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTile_NativeFunction, "ReturnValue");
        GetMapSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMapSize");
        GetMapSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMapSize_NativeFunction);
        GetMapSize_MapWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMapSize_NativeFunction, "MapWidth");
        GetMapSize_MapHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMapSize_NativeFunction, "MapHeight");
        GetMapSize_NumLayers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMapSize_NativeFunction, "NumLayers");
        GetLayerColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLayerColor");
        GetLayerColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLayerColor_NativeFunction);
        GetLayerColor_Layer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLayerColor_NativeFunction, "Layer");
        GetLayerColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLayerColor_NativeFunction, "ReturnValue");
        CreateNewTileMap_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateNewTileMap");
        CreateNewTileMap_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateNewTileMap_NativeFunction);
        CreateNewTileMap_MapWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNewTileMap_NativeFunction, "MapWidth");
        CreateNewTileMap_MapHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNewTileMap_NativeFunction, "MapHeight");
        CreateNewTileMap_TileWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNewTileMap_NativeFunction, "TileWidth");
        CreateNewTileMap_TileHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNewTileMap_NativeFunction, "TileHeight");
        CreateNewTileMap_PixelsPerUnrealUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNewTileMap_NativeFunction, "PixelsPerUnrealUnit");
        CreateNewTileMap_bCreateLayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNewTileMap_NativeFunction, "bCreateLayer");
        AddNewLayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddNewLayer");
        AddNewLayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddNewLayer_NativeFunction);
        AddNewLayer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddNewLayer_NativeFunction, "ReturnValue");
        
        
    }
    
    protected PaperTileMapComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Paper2D.PaperTileMapComponent:TileMap
    static readonly int TileMap_Offset;
    
    public UnrealSharp.Paper2D.PaperTileMap TileMap
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Paper2D.PaperTileMap>.FromNative(IntPtr.Add(NativeObject, TileMap_Offset), 0, this);
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:SetTileMapColor
    static readonly IntPtr SetTileMapColor_NativeFunction;
    static readonly int SetTileMapColor_ParamsSize;
    static readonly int SetTileMapColor_NewColor_Offset;
    
    public void SetTileMapColor(UnrealSharp.CoreUObject.LinearColor newColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTileMapColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetTileMapColor_NewColor_Offset), 0, null, newColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTileMapColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:SetTileMap
    static readonly IntPtr SetTileMap_NativeFunction;
    static readonly int SetTileMap_ParamsSize;
    static readonly int SetTileMap_NewTileMap_Offset;
    static readonly int SetTileMap_ReturnValue_Offset;
    
    public bool SetTileMap(UnrealSharp.Paper2D.PaperTileMap newTileMap)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTileMap_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Paper2D.PaperTileMap>.ToNative(IntPtr.Add(ParamsBuffer, SetTileMap_NewTileMap_Offset), 0, null, newTileMap);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTileMap_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetTileMap_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:SetTile
    static readonly IntPtr SetTile_NativeFunction;
    static readonly int SetTile_ParamsSize;
    static readonly int SetTile_X_Offset;
    static readonly int SetTile_Y_Offset;
    static readonly int SetTile_Layer_Offset;
    static readonly int SetTile_NewValue_Offset;
    
    public void SetTile(int x, int y, int layer, UnrealSharp.Paper2D.PaperTileInfo newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetTile_X_Offset), 0, null, x);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetTile_Y_Offset), 0, null, y);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetTile_Layer_Offset), 0, null, layer);
            UnrealSharp.Paper2D.PaperTileInfoMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetTile_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTile_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:SetLayerColor
    static readonly IntPtr SetLayerColor_NativeFunction;
    static readonly int SetLayerColor_ParamsSize;
    static readonly int SetLayerColor_NewColor_Offset;
    static readonly int SetLayerColor_Layer_Offset;
    
    public void SetLayerColor(UnrealSharp.CoreUObject.LinearColor newColor, int layer = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLayerColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetLayerColor_NewColor_Offset), 0, null, newColor);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetLayerColor_Layer_Offset), 0, null, layer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLayerColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:SetLayerCollision
    static readonly IntPtr SetLayerCollision_NativeFunction;
    static readonly int SetLayerCollision_ParamsSize;
    static readonly int SetLayerCollision_Layer_Offset;
    static readonly int SetLayerCollision_bHasCollision_Offset;
    static readonly int SetLayerCollision_bOverrideThickness_Offset;
    static readonly int SetLayerCollision_CustomThickness_Offset;
    static readonly int SetLayerCollision_bOverrideOffset_Offset;
    static readonly int SetLayerCollision_CustomOffset_Offset;
    static readonly int SetLayerCollision_bRebuildCollision_Offset;
    
    public void SetLayerCollision(int layer = 0, bool bHasCollision = true, bool bOverrideThickness = true, float customThickness = 50.000000f, bool bOverrideOffset = false, float customOffset = 0.000000f, bool bRebuildCollision = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLayerCollision_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetLayerCollision_Layer_Offset), 0, null, layer);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLayerCollision_bHasCollision_Offset), 0, null, bHasCollision);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLayerCollision_bOverrideThickness_Offset), 0, null, bOverrideThickness);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLayerCollision_CustomThickness_Offset), 0, null, customThickness);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLayerCollision_bOverrideOffset_Offset), 0, null, bOverrideOffset);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLayerCollision_CustomOffset_Offset), 0, null, customOffset);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLayerCollision_bRebuildCollision_Offset), 0, null, bRebuildCollision);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLayerCollision_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:SetDefaultCollisionThickness
    static readonly IntPtr SetDefaultCollisionThickness_NativeFunction;
    static readonly int SetDefaultCollisionThickness_ParamsSize;
    static readonly int SetDefaultCollisionThickness_Thickness_Offset;
    static readonly int SetDefaultCollisionThickness_bRebuildCollision_Offset;
    
    public void SetDefaultCollisionThickness(float thickness, bool bRebuildCollision = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultCollisionThickness_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultCollisionThickness_Thickness_Offset), 0, null, thickness);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultCollisionThickness_bRebuildCollision_Offset), 0, null, bRebuildCollision);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefaultCollisionThickness_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:ResizeMap
    static readonly IntPtr ResizeMap_NativeFunction;
    static readonly int ResizeMap_ParamsSize;
    static readonly int ResizeMap_NewWidthInTiles_Offset;
    static readonly int ResizeMap_NewHeightInTiles_Offset;
    
    public void ResizeMap(int newWidthInTiles, int newHeightInTiles)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResizeMap_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ResizeMap_NewWidthInTiles_Offset), 0, null, newWidthInTiles);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ResizeMap_NewHeightInTiles_Offset), 0, null, newHeightInTiles);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResizeMap_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:RebuildCollision
    static readonly IntPtr RebuildCollision_NativeFunction;
    
    public void RebuildCollision()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RebuildCollision_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:OwnsTileMap
    static readonly IntPtr OwnsTileMap_NativeFunction;
    static readonly int OwnsTileMap_ParamsSize;
    static readonly int OwnsTileMap_ReturnValue_Offset;
    
    public bool OwnsTileMap()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[OwnsTileMap_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OwnsTileMap_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, OwnsTileMap_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:MakeTileMapEditable
    static readonly IntPtr MakeTileMapEditable_NativeFunction;
    
    public void MakeTileMapEditable()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, MakeTileMapEditable_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:GetTilePolygon
    static readonly IntPtr GetTilePolygon_NativeFunction;
    static readonly int GetTilePolygon_ParamsSize;
    static readonly int GetTilePolygon_TileX_Offset;
    static readonly int GetTilePolygon_TileY_Offset;
    static readonly int GetTilePolygon_Points_Offset;
    static readonly int GetTilePolygon_Points_ElementSize;
    static readonly int GetTilePolygon_LayerIndex_Offset;
    static readonly int GetTilePolygon_bWorldSpace_Offset;
    
    public void GetTilePolygon(int tileX, int tileY, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> points, int layerIndex = 0, bool bWorldSpace = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTilePolygon_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTilePolygon_TileX_Offset), 0, null, tileX);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTilePolygon_TileY_Offset), 0, null, tileY);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTilePolygon_LayerIndex_Offset), 0, null, layerIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetTilePolygon_bWorldSpace_Offset), 0, null, bWorldSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTilePolygon_NativeFunction, ParamsBuffer);
            
            IntPtr Points_NativeBuffer = IntPtr.Add(ParamsBuffer, GetTilePolygon_Points_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Points_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetTilePolygon_Points_ElementSize);
            points = Points_Marshaler.FromNative(Points_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(Points_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:GetTileMapColor
    static readonly IntPtr GetTileMapColor_NativeFunction;
    static readonly int GetTileMapColor_ParamsSize;
    static readonly int GetTileMapColor_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor GetTileMapColor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTileMapColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTileMapColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, GetTileMapColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:GetTileCornerPosition
    static readonly IntPtr GetTileCornerPosition_NativeFunction;
    static readonly int GetTileCornerPosition_ParamsSize;
    static readonly int GetTileCornerPosition_TileX_Offset;
    static readonly int GetTileCornerPosition_TileY_Offset;
    static readonly int GetTileCornerPosition_LayerIndex_Offset;
    static readonly int GetTileCornerPosition_bWorldSpace_Offset;
    static readonly int GetTileCornerPosition_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetTileCornerPosition(int tileX, int tileY, int layerIndex = 0, bool bWorldSpace = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTileCornerPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTileCornerPosition_TileX_Offset), 0, null, tileX);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTileCornerPosition_TileY_Offset), 0, null, tileY);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTileCornerPosition_LayerIndex_Offset), 0, null, layerIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetTileCornerPosition_bWorldSpace_Offset), 0, null, bWorldSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTileCornerPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetTileCornerPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:GetTileCenterPosition
    static readonly IntPtr GetTileCenterPosition_NativeFunction;
    static readonly int GetTileCenterPosition_ParamsSize;
    static readonly int GetTileCenterPosition_TileX_Offset;
    static readonly int GetTileCenterPosition_TileY_Offset;
    static readonly int GetTileCenterPosition_LayerIndex_Offset;
    static readonly int GetTileCenterPosition_bWorldSpace_Offset;
    static readonly int GetTileCenterPosition_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetTileCenterPosition(int tileX, int tileY, int layerIndex = 0, bool bWorldSpace = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTileCenterPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTileCenterPosition_TileX_Offset), 0, null, tileX);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTileCenterPosition_TileY_Offset), 0, null, tileY);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTileCenterPosition_LayerIndex_Offset), 0, null, layerIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetTileCenterPosition_bWorldSpace_Offset), 0, null, bWorldSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTileCenterPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetTileCenterPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:GetTile
    static readonly IntPtr GetTile_NativeFunction;
    static readonly int GetTile_ParamsSize;
    static readonly int GetTile_X_Offset;
    static readonly int GetTile_Y_Offset;
    static readonly int GetTile_Layer_Offset;
    static readonly int GetTile_ReturnValue_Offset;
    
    public UnrealSharp.Paper2D.PaperTileInfo GetTile(int x, int y, int layer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTile_X_Offset), 0, null, x);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTile_Y_Offset), 0, null, y);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTile_Layer_Offset), 0, null, layer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTile_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Paper2D.PaperTileInfo returnValue;
            returnValue = UnrealSharp.Paper2D.PaperTileInfoMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetTile_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:GetMapSize
    static readonly IntPtr GetMapSize_NativeFunction;
    static readonly int GetMapSize_ParamsSize;
    static readonly int GetMapSize_MapWidth_Offset;
    static readonly int GetMapSize_MapHeight_Offset;
    static readonly int GetMapSize_NumLayers_Offset;
    
    public void GetMapSize(out int mapWidth, out int mapHeight, out int numLayers)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMapSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMapSize_NativeFunction, ParamsBuffer);
            
            mapWidth = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMapSize_MapWidth_Offset), 0, null);
            mapHeight = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMapSize_MapHeight_Offset), 0, null);
            numLayers = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMapSize_NumLayers_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:GetLayerColor
    static readonly IntPtr GetLayerColor_NativeFunction;
    static readonly int GetLayerColor_ParamsSize;
    static readonly int GetLayerColor_Layer_Offset;
    static readonly int GetLayerColor_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor GetLayerColor(int layer = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLayerColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetLayerColor_Layer_Offset), 0, null, layer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLayerColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, GetLayerColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:CreateNewTileMap
    static readonly IntPtr CreateNewTileMap_NativeFunction;
    static readonly int CreateNewTileMap_ParamsSize;
    static readonly int CreateNewTileMap_MapWidth_Offset;
    static readonly int CreateNewTileMap_MapHeight_Offset;
    static readonly int CreateNewTileMap_TileWidth_Offset;
    static readonly int CreateNewTileMap_TileHeight_Offset;
    static readonly int CreateNewTileMap_PixelsPerUnrealUnit_Offset;
    static readonly int CreateNewTileMap_bCreateLayer_Offset;
    
    public void CreateNewTileMap(int mapWidth = 4, int mapHeight = 4, int tileWidth = 32, int tileHeight = 32, float pixelsPerUnrealUnit = 1.000000f, bool bCreateLayer = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateNewTileMap_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateNewTileMap_MapWidth_Offset), 0, null, mapWidth);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateNewTileMap_MapHeight_Offset), 0, null, mapHeight);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateNewTileMap_TileWidth_Offset), 0, null, tileWidth);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateNewTileMap_TileHeight_Offset), 0, null, tileHeight);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CreateNewTileMap_PixelsPerUnrealUnit_Offset), 0, null, pixelsPerUnrealUnit);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateNewTileMap_bCreateLayer_Offset), 0, null, bCreateLayer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateNewTileMap_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Paper2D.PaperTileMapComponent:AddNewLayer
    static readonly IntPtr AddNewLayer_NativeFunction;
    static readonly int AddNewLayer_ParamsSize;
    static readonly int AddNewLayer_ReturnValue_Offset;
    
    public UnrealSharp.Paper2D.PaperTileLayer AddNewLayer()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddNewLayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddNewLayer_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Paper2D.PaperTileLayer returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Paper2D.PaperTileLayer>.FromNative(IntPtr.Add(ParamsBuffer, AddNewLayer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
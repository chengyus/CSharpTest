// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.PhysicsCore;

[UClass]
public partial class ChaosPhysicalMaterial : UnrealSharp.CoreUObject.Object
{
    
    static ChaosPhysicalMaterial()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ChaosPhysicalMaterial");
        
        Friction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Friction");
        StaticFriction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StaticFriction");
        Restitution_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Restitution");
        LinearEtherDrag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LinearEtherDrag");
        AngularEtherDrag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AngularEtherDrag");
        SleepingLinearVelocityThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SleepingLinearVelocityThreshold");
        SleepingAngularVelocityThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SleepingAngularVelocityThreshold");
        
        
        
    }
    
    protected ChaosPhysicalMaterial(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/PhysicsCore.ChaosPhysicalMaterial:Friction
    static readonly int Friction_Offset;
    
    public float Friction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Friction_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/PhysicsCore.ChaosPhysicalMaterial:StaticFriction
    static readonly int StaticFriction_Offset;
    
    public float StaticFriction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, StaticFriction_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/PhysicsCore.ChaosPhysicalMaterial:Restitution
    static readonly int Restitution_Offset;
    
    public float Restitution
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Restitution_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/PhysicsCore.ChaosPhysicalMaterial:LinearEtherDrag
    static readonly int LinearEtherDrag_Offset;
    
    public float LinearEtherDrag
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LinearEtherDrag_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/PhysicsCore.ChaosPhysicalMaterial:AngularEtherDrag
    static readonly int AngularEtherDrag_Offset;
    
    public float AngularEtherDrag
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AngularEtherDrag_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/PhysicsCore.ChaosPhysicalMaterial:SleepingLinearVelocityThreshold
    static readonly int SleepingLinearVelocityThreshold_Offset;
    
    public float SleepingLinearVelocityThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SleepingLinearVelocityThreshold_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/PhysicsCore.ChaosPhysicalMaterial:SleepingAngularVelocityThreshold
    static readonly int SleepingAngularVelocityThreshold_Offset;
    
    public float SleepingAngularVelocityThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SleepingAngularVelocityThreshold_Offset), 0, this);
        }
    }
    
    
}
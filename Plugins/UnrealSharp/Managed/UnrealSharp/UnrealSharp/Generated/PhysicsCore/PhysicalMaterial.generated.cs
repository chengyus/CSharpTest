// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.PhysicsCore;

[UClass]
public partial class PhysicalMaterial : UnrealSharp.CoreUObject.Object
{
    
    static PhysicalMaterial()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PhysicalMaterial");
        
        Friction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Friction");
        StaticFriction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StaticFriction");
        FrictionCombineMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FrictionCombineMode");
        bOverrideFrictionCombineMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideFrictionCombineMode");
        Restitution_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Restitution");
        RestitutionCombineMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RestitutionCombineMode");
        bOverrideRestitutionCombineMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideRestitutionCombineMode");
        Density_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Density");
        SleepLinearVelocityThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SleepLinearVelocityThreshold");
        SleepAngularVelocityThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SleepAngularVelocityThreshold");
        SleepCounterThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SleepCounterThreshold");
        RaiseMassToPower_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RaiseMassToPower");
        SurfaceType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SurfaceType");
        Strength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Strength");
        
        
        
    }
    
    protected PhysicalMaterial(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/PhysicsCore.PhysicalMaterial:Friction
    static readonly int Friction_Offset;
    
    public float Friction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Friction_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/PhysicsCore.PhysicalMaterial:StaticFriction
    static readonly int StaticFriction_Offset;
    
    public float StaticFriction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, StaticFriction_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/PhysicsCore.PhysicalMaterial:FrictionCombineMode
    static readonly int FrictionCombineMode_Offset;
    
    public UnrealSharp.PhysicsCore.EFrictionCombineMode FrictionCombineMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.PhysicsCore.EFrictionCombineMode>.FromNative(IntPtr.Add(NativeObject, FrictionCombineMode_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/PhysicsCore.PhysicalMaterial:bOverrideFrictionCombineMode
    static readonly int bOverrideFrictionCombineMode_Offset;
    
    public bool bOverrideFrictionCombineMode
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bOverrideFrictionCombineMode_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bOverrideFrictionCombineMode_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/PhysicsCore.PhysicalMaterial:Restitution
    static readonly int Restitution_Offset;
    
    public float Restitution
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Restitution_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/PhysicsCore.PhysicalMaterial:RestitutionCombineMode
    static readonly int RestitutionCombineMode_Offset;
    
    public UnrealSharp.PhysicsCore.EFrictionCombineMode RestitutionCombineMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.PhysicsCore.EFrictionCombineMode>.FromNative(IntPtr.Add(NativeObject, RestitutionCombineMode_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/PhysicsCore.PhysicalMaterial:bOverrideRestitutionCombineMode
    static readonly int bOverrideRestitutionCombineMode_Offset;
    
    public bool bOverrideRestitutionCombineMode
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bOverrideRestitutionCombineMode_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bOverrideRestitutionCombineMode_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/PhysicsCore.PhysicalMaterial:Density
    static readonly int Density_Offset;
    
    public float Density
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Density_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/PhysicsCore.PhysicalMaterial:SleepLinearVelocityThreshold
    static readonly int SleepLinearVelocityThreshold_Offset;
    
    public float SleepLinearVelocityThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SleepLinearVelocityThreshold_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/PhysicsCore.PhysicalMaterial:SleepAngularVelocityThreshold
    static readonly int SleepAngularVelocityThreshold_Offset;
    
    public float SleepAngularVelocityThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SleepAngularVelocityThreshold_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/PhysicsCore.PhysicalMaterial:SleepCounterThreshold
    static readonly int SleepCounterThreshold_Offset;
    
    public int SleepCounterThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, SleepCounterThreshold_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/PhysicsCore.PhysicalMaterial:RaiseMassToPower
    static readonly int RaiseMassToPower_Offset;
    
    public float RaiseMassToPower
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, RaiseMassToPower_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/PhysicsCore.PhysicalMaterial:SurfaceType
    static readonly int SurfaceType_Offset;
    
    public UnrealSharp.PhysicsCore.EPhysicalSurface SurfaceType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.PhysicsCore.EPhysicalSurface>.FromNative(IntPtr.Add(NativeObject, SurfaceType_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/PhysicsCore.PhysicalMaterial:Strength
    static readonly int Strength_Offset;
    
    public UnrealSharp.PhysicsCore.PhysicalMaterialStrength Strength
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.PhysicsCore.PhysicalMaterialStrength>.FromNative(IntPtr.Add(NativeObject, Strength_Offset), 0, this);
        }
    }
    
    
}
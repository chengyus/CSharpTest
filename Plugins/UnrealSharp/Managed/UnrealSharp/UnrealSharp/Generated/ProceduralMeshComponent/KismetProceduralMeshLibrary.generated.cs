// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ProceduralMeshComponent;

[UClass]
public partial class ProceduralMeshLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static ProceduralMeshLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("KismetProceduralMeshLibrary");
        
        
        SliceProceduralMesh_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SliceProceduralMesh");
        SliceProceduralMesh_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SliceProceduralMesh_NativeFunction);
        SliceProceduralMesh_InProcMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SliceProceduralMesh_NativeFunction, "InProcMesh");
        SliceProceduralMesh_PlanePosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SliceProceduralMesh_NativeFunction, "PlanePosition");
        SliceProceduralMesh_PlaneNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SliceProceduralMesh_NativeFunction, "PlaneNormal");
        SliceProceduralMesh_bCreateOtherHalf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SliceProceduralMesh_NativeFunction, "bCreateOtherHalf");
        SliceProceduralMesh_OutOtherHalfProcMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SliceProceduralMesh_NativeFunction, "OutOtherHalfProcMesh");
        SliceProceduralMesh_CapOption_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SliceProceduralMesh_NativeFunction, "CapOption");
        SliceProceduralMesh_CapMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SliceProceduralMesh_NativeFunction, "CapMaterial");
        GetSectionFromStaticMesh_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSectionFromStaticMesh");
        GetSectionFromStaticMesh_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSectionFromStaticMesh_NativeFunction);
        GetSectionFromStaticMesh_InMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromStaticMesh_NativeFunction, "InMesh");
        GetSectionFromStaticMesh_LODIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromStaticMesh_NativeFunction, "LODIndex");
        GetSectionFromStaticMesh_SectionIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromStaticMesh_NativeFunction, "SectionIndex");
        GetSectionFromStaticMesh_Vertices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromStaticMesh_NativeFunction, "Vertices");
        GetSectionFromStaticMesh_Vertices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSectionFromStaticMesh_NativeFunction, "Vertices");
        GetSectionFromStaticMesh_Triangles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromStaticMesh_NativeFunction, "Triangles");
        GetSectionFromStaticMesh_Triangles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSectionFromStaticMesh_NativeFunction, "Triangles");
        GetSectionFromStaticMesh_Normals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromStaticMesh_NativeFunction, "Normals");
        GetSectionFromStaticMesh_Normals_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSectionFromStaticMesh_NativeFunction, "Normals");
        GetSectionFromStaticMesh_UVs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromStaticMesh_NativeFunction, "UVs");
        GetSectionFromStaticMesh_UVs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSectionFromStaticMesh_NativeFunction, "UVs");
        GetSectionFromStaticMesh_Tangents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromStaticMesh_NativeFunction, "Tangents");
        GetSectionFromStaticMesh_Tangents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSectionFromStaticMesh_NativeFunction, "Tangents");
        GetSectionFromProceduralMesh_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSectionFromProceduralMesh");
        GetSectionFromProceduralMesh_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSectionFromProceduralMesh_NativeFunction);
        GetSectionFromProceduralMesh_InProcMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromProceduralMesh_NativeFunction, "InProcMesh");
        GetSectionFromProceduralMesh_SectionIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromProceduralMesh_NativeFunction, "SectionIndex");
        GetSectionFromProceduralMesh_Vertices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromProceduralMesh_NativeFunction, "Vertices");
        GetSectionFromProceduralMesh_Vertices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSectionFromProceduralMesh_NativeFunction, "Vertices");
        GetSectionFromProceduralMesh_Triangles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromProceduralMesh_NativeFunction, "Triangles");
        GetSectionFromProceduralMesh_Triangles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSectionFromProceduralMesh_NativeFunction, "Triangles");
        GetSectionFromProceduralMesh_Normals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromProceduralMesh_NativeFunction, "Normals");
        GetSectionFromProceduralMesh_Normals_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSectionFromProceduralMesh_NativeFunction, "Normals");
        GetSectionFromProceduralMesh_UVs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromProceduralMesh_NativeFunction, "UVs");
        GetSectionFromProceduralMesh_UVs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSectionFromProceduralMesh_NativeFunction, "UVs");
        GetSectionFromProceduralMesh_Tangents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionFromProceduralMesh_NativeFunction, "Tangents");
        GetSectionFromProceduralMesh_Tangents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSectionFromProceduralMesh_NativeFunction, "Tangents");
        GenerateBoxMesh_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GenerateBoxMesh");
        GenerateBoxMesh_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GenerateBoxMesh_NativeFunction);
        GenerateBoxMesh_BoxRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateBoxMesh_NativeFunction, "BoxRadius");
        GenerateBoxMesh_Vertices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateBoxMesh_NativeFunction, "Vertices");
        GenerateBoxMesh_Vertices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GenerateBoxMesh_NativeFunction, "Vertices");
        GenerateBoxMesh_Triangles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateBoxMesh_NativeFunction, "Triangles");
        GenerateBoxMesh_Triangles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GenerateBoxMesh_NativeFunction, "Triangles");
        GenerateBoxMesh_Normals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateBoxMesh_NativeFunction, "Normals");
        GenerateBoxMesh_Normals_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GenerateBoxMesh_NativeFunction, "Normals");
        GenerateBoxMesh_UVs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateBoxMesh_NativeFunction, "UVs");
        GenerateBoxMesh_UVs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GenerateBoxMesh_NativeFunction, "UVs");
        GenerateBoxMesh_Tangents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateBoxMesh_NativeFunction, "Tangents");
        GenerateBoxMesh_Tangents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GenerateBoxMesh_NativeFunction, "Tangents");
        CreateGridMeshWelded_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateGridMeshWelded");
        CreateGridMeshWelded_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateGridMeshWelded_NativeFunction);
        CreateGridMeshWelded_NumX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshWelded_NativeFunction, "NumX");
        CreateGridMeshWelded_NumY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshWelded_NativeFunction, "NumY");
        CreateGridMeshWelded_Triangles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshWelded_NativeFunction, "Triangles");
        CreateGridMeshWelded_Triangles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateGridMeshWelded_NativeFunction, "Triangles");
        CreateGridMeshWelded_Vertices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshWelded_NativeFunction, "Vertices");
        CreateGridMeshWelded_Vertices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateGridMeshWelded_NativeFunction, "Vertices");
        CreateGridMeshWelded_UVs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshWelded_NativeFunction, "UVs");
        CreateGridMeshWelded_UVs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateGridMeshWelded_NativeFunction, "UVs");
        CreateGridMeshWelded_GridSpacing_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshWelded_NativeFunction, "GridSpacing");
        CreateGridMeshTriangles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateGridMeshTriangles");
        CreateGridMeshTriangles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateGridMeshTriangles_NativeFunction);
        CreateGridMeshTriangles_NumX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshTriangles_NativeFunction, "NumX");
        CreateGridMeshTriangles_NumY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshTriangles_NativeFunction, "NumY");
        CreateGridMeshTriangles_bWinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshTriangles_NativeFunction, "bWinding");
        CreateGridMeshTriangles_Triangles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshTriangles_NativeFunction, "Triangles");
        CreateGridMeshTriangles_Triangles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateGridMeshTriangles_NativeFunction, "Triangles");
        CreateGridMeshSplit_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateGridMeshSplit");
        CreateGridMeshSplit_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateGridMeshSplit_NativeFunction);
        CreateGridMeshSplit_NumX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshSplit_NativeFunction, "NumX");
        CreateGridMeshSplit_NumY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshSplit_NativeFunction, "NumY");
        CreateGridMeshSplit_Triangles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshSplit_NativeFunction, "Triangles");
        CreateGridMeshSplit_Triangles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateGridMeshSplit_NativeFunction, "Triangles");
        CreateGridMeshSplit_Vertices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshSplit_NativeFunction, "Vertices");
        CreateGridMeshSplit_Vertices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateGridMeshSplit_NativeFunction, "Vertices");
        CreateGridMeshSplit_UVs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshSplit_NativeFunction, "UVs");
        CreateGridMeshSplit_UVs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateGridMeshSplit_NativeFunction, "UVs");
        CreateGridMeshSplit_UV1s_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshSplit_NativeFunction, "UV1s");
        CreateGridMeshSplit_UV1s_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateGridMeshSplit_NativeFunction, "UV1s");
        CreateGridMeshSplit_GridSpacing_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateGridMeshSplit_NativeFunction, "GridSpacing");
        CopyProceduralMeshFromStaticMeshComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CopyProceduralMeshFromStaticMeshComponent");
        CopyProceduralMeshFromStaticMeshComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CopyProceduralMeshFromStaticMeshComponent_NativeFunction);
        CopyProceduralMeshFromStaticMeshComponent_StaticMeshComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyProceduralMeshFromStaticMeshComponent_NativeFunction, "StaticMeshComponent");
        CopyProceduralMeshFromStaticMeshComponent_LODIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyProceduralMeshFromStaticMeshComponent_NativeFunction, "LODIndex");
        CopyProceduralMeshFromStaticMeshComponent_ProcMeshComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyProceduralMeshFromStaticMeshComponent_NativeFunction, "ProcMeshComponent");
        CopyProceduralMeshFromStaticMeshComponent_bCreateCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyProceduralMeshFromStaticMeshComponent_NativeFunction, "bCreateCollision");
        ConvertQuadToTriangles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertQuadToTriangles");
        ConvertQuadToTriangles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertQuadToTriangles_NativeFunction);
        ConvertQuadToTriangles_Triangles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertQuadToTriangles_NativeFunction, "Triangles");
        ConvertQuadToTriangles_Triangles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ConvertQuadToTriangles_NativeFunction, "Triangles");
        ConvertQuadToTriangles_Vert0_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertQuadToTriangles_NativeFunction, "Vert0");
        ConvertQuadToTriangles_Vert1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertQuadToTriangles_NativeFunction, "Vert1");
        ConvertQuadToTriangles_Vert2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertQuadToTriangles_NativeFunction, "Vert2");
        ConvertQuadToTriangles_Vert3_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertQuadToTriangles_NativeFunction, "Vert3");
        CalculateTangentsForMesh_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CalculateTangentsForMesh");
        CalculateTangentsForMesh_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CalculateTangentsForMesh_NativeFunction);
        CalculateTangentsForMesh_Vertices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CalculateTangentsForMesh_NativeFunction, "Vertices");
        CalculateTangentsForMesh_Vertices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CalculateTangentsForMesh_NativeFunction, "Vertices");
        CalculateTangentsForMesh_Triangles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CalculateTangentsForMesh_NativeFunction, "Triangles");
        CalculateTangentsForMesh_Triangles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CalculateTangentsForMesh_NativeFunction, "Triangles");
        CalculateTangentsForMesh_UVs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CalculateTangentsForMesh_NativeFunction, "UVs");
        CalculateTangentsForMesh_UVs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CalculateTangentsForMesh_NativeFunction, "UVs");
        CalculateTangentsForMesh_Normals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CalculateTangentsForMesh_NativeFunction, "Normals");
        CalculateTangentsForMesh_Normals_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CalculateTangentsForMesh_NativeFunction, "Normals");
        CalculateTangentsForMesh_Tangents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CalculateTangentsForMesh_NativeFunction, "Tangents");
        CalculateTangentsForMesh_Tangents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CalculateTangentsForMesh_NativeFunction, "Tangents");
        
        
    }
    
    protected ProceduralMeshLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/ProceduralMeshComponent.KismetProceduralMeshLibrary:SliceProceduralMesh
    static readonly IntPtr SliceProceduralMesh_NativeFunction;
    static readonly int SliceProceduralMesh_ParamsSize;
    static readonly int SliceProceduralMesh_InProcMesh_Offset;
    static readonly int SliceProceduralMesh_PlanePosition_Offset;
    static readonly int SliceProceduralMesh_PlaneNormal_Offset;
    static readonly int SliceProceduralMesh_bCreateOtherHalf_Offset;
    static readonly int SliceProceduralMesh_OutOtherHalfProcMesh_Offset;
    static readonly int SliceProceduralMesh_CapOption_Offset;
    static readonly int SliceProceduralMesh_CapMaterial_Offset;
    
    public static void SliceProceduralMesh(UnrealSharp.ProceduralMeshComponent.ProceduralMeshComponent inProcMesh, System.DoubleNumerics.Vector3 planePosition, System.DoubleNumerics.Vector3 planeNormal, bool bCreateOtherHalf, out UnrealSharp.ProceduralMeshComponent.ProceduralMeshComponent outOtherHalfProcMesh, UnrealSharp.ProceduralMeshComponent.EProcMeshSliceCapOption capOption, UnrealSharp.Engine.MaterialInterface capMaterial)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SliceProceduralMesh_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ProceduralMeshComponent.ProceduralMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, SliceProceduralMesh_InProcMesh_Offset), 0, null, inProcMesh);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SliceProceduralMesh_PlanePosition_Offset), 0, null, planePosition);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SliceProceduralMesh_PlaneNormal_Offset), 0, null, planeNormal);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SliceProceduralMesh_bCreateOtherHalf_Offset), 0, null, bCreateOtherHalf);
            BlittableMarshaller<UnrealSharp.ProceduralMeshComponent.EProcMeshSliceCapOption>.ToNative(IntPtr.Add(ParamsBuffer, SliceProceduralMesh_CapOption_Offset), 0, null, capOption);
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SliceProceduralMesh_CapMaterial_Offset), 0, null, capMaterial);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SliceProceduralMesh_NativeFunction, ParamsBuffer);
            
            outOtherHalfProcMesh = ObjectMarshaller<UnrealSharp.ProceduralMeshComponent.ProceduralMeshComponent>.FromNative(IntPtr.Add(ParamsBuffer, SliceProceduralMesh_OutOtherHalfProcMesh_Offset), 0, null);
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.KismetProceduralMeshLibrary:GetSectionFromStaticMesh
    static readonly IntPtr GetSectionFromStaticMesh_NativeFunction;
    static readonly int GetSectionFromStaticMesh_ParamsSize;
    static readonly int GetSectionFromStaticMesh_InMesh_Offset;
    static readonly int GetSectionFromStaticMesh_LODIndex_Offset;
    static readonly int GetSectionFromStaticMesh_SectionIndex_Offset;
    static readonly int GetSectionFromStaticMesh_Vertices_Offset;
    static readonly int GetSectionFromStaticMesh_Vertices_ElementSize;
    static readonly int GetSectionFromStaticMesh_Triangles_Offset;
    static readonly int GetSectionFromStaticMesh_Triangles_ElementSize;
    static readonly int GetSectionFromStaticMesh_Normals_Offset;
    static readonly int GetSectionFromStaticMesh_Normals_ElementSize;
    static readonly int GetSectionFromStaticMesh_UVs_Offset;
    static readonly int GetSectionFromStaticMesh_UVs_ElementSize;
    static readonly int GetSectionFromStaticMesh_Tangents_Offset;
    static readonly int GetSectionFromStaticMesh_Tangents_ElementSize;
    
    public static void GetSectionFromStaticMesh(UnrealSharp.Engine.StaticMesh inMesh, int lODIndex, int sectionIndex, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> vertices, out System.Collections.Generic.IList<int> triangles, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> normals, out System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uVs, out System.Collections.Generic.IList<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> tangents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSectionFromStaticMesh_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.StaticMesh>.ToNative(IntPtr.Add(ParamsBuffer, GetSectionFromStaticMesh_InMesh_Offset), 0, null, inMesh);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetSectionFromStaticMesh_LODIndex_Offset), 0, null, lODIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetSectionFromStaticMesh_SectionIndex_Offset), 0, null, sectionIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSectionFromStaticMesh_NativeFunction, ParamsBuffer);
            
            IntPtr Vertices_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSectionFromStaticMesh_Vertices_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Vertices_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetSectionFromStaticMesh_Vertices_ElementSize);
            vertices = Vertices_Marshaler.FromNative(Vertices_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(Vertices_NativeBuffer, 0);
            IntPtr Triangles_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSectionFromStaticMesh_Triangles_Offset);
            UnrealArrayCopyMarshaler<int> Triangles_Marshaler = new UnrealArrayCopyMarshaler<int> (1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, GetSectionFromStaticMesh_Triangles_ElementSize);
            triangles = Triangles_Marshaler.FromNative(Triangles_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<int>.DestructInstance(Triangles_NativeBuffer, 0);
            IntPtr Normals_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSectionFromStaticMesh_Normals_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Normals_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetSectionFromStaticMesh_Normals_ElementSize);
            normals = Normals_Marshaler.FromNative(Normals_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(Normals_NativeBuffer, 0);
            IntPtr UVs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSectionFromStaticMesh_UVs_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UVs_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> (1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, GetSectionFromStaticMesh_UVs_ElementSize);
            uVs = UVs_Marshaler.FromNative(UVs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>.DestructInstance(UVs_NativeBuffer, 0);
            IntPtr Tangents_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSectionFromStaticMesh_Tangents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> Tangents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> (1, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.ToNative, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.FromNative, GetSectionFromStaticMesh_Tangents_ElementSize);
            tangents = Tangents_Marshaler.FromNative(Tangents_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent>.DestructInstance(Tangents_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.KismetProceduralMeshLibrary:GetSectionFromProceduralMesh
    static readonly IntPtr GetSectionFromProceduralMesh_NativeFunction;
    static readonly int GetSectionFromProceduralMesh_ParamsSize;
    static readonly int GetSectionFromProceduralMesh_InProcMesh_Offset;
    static readonly int GetSectionFromProceduralMesh_SectionIndex_Offset;
    static readonly int GetSectionFromProceduralMesh_Vertices_Offset;
    static readonly int GetSectionFromProceduralMesh_Vertices_ElementSize;
    static readonly int GetSectionFromProceduralMesh_Triangles_Offset;
    static readonly int GetSectionFromProceduralMesh_Triangles_ElementSize;
    static readonly int GetSectionFromProceduralMesh_Normals_Offset;
    static readonly int GetSectionFromProceduralMesh_Normals_ElementSize;
    static readonly int GetSectionFromProceduralMesh_UVs_Offset;
    static readonly int GetSectionFromProceduralMesh_UVs_ElementSize;
    static readonly int GetSectionFromProceduralMesh_Tangents_Offset;
    static readonly int GetSectionFromProceduralMesh_Tangents_ElementSize;
    
    public static void GetSectionFromProceduralMesh(UnrealSharp.ProceduralMeshComponent.ProceduralMeshComponent inProcMesh, int sectionIndex, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> vertices, out System.Collections.Generic.IList<int> triangles, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> normals, out System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uVs, out System.Collections.Generic.IList<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> tangents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSectionFromProceduralMesh_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ProceduralMeshComponent.ProceduralMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, GetSectionFromProceduralMesh_InProcMesh_Offset), 0, null, inProcMesh);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetSectionFromProceduralMesh_SectionIndex_Offset), 0, null, sectionIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSectionFromProceduralMesh_NativeFunction, ParamsBuffer);
            
            IntPtr Vertices_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSectionFromProceduralMesh_Vertices_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Vertices_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetSectionFromProceduralMesh_Vertices_ElementSize);
            vertices = Vertices_Marshaler.FromNative(Vertices_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(Vertices_NativeBuffer, 0);
            IntPtr Triangles_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSectionFromProceduralMesh_Triangles_Offset);
            UnrealArrayCopyMarshaler<int> Triangles_Marshaler = new UnrealArrayCopyMarshaler<int> (1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, GetSectionFromProceduralMesh_Triangles_ElementSize);
            triangles = Triangles_Marshaler.FromNative(Triangles_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<int>.DestructInstance(Triangles_NativeBuffer, 0);
            IntPtr Normals_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSectionFromProceduralMesh_Normals_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Normals_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetSectionFromProceduralMesh_Normals_ElementSize);
            normals = Normals_Marshaler.FromNative(Normals_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(Normals_NativeBuffer, 0);
            IntPtr UVs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSectionFromProceduralMesh_UVs_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UVs_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> (1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, GetSectionFromProceduralMesh_UVs_ElementSize);
            uVs = UVs_Marshaler.FromNative(UVs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>.DestructInstance(UVs_NativeBuffer, 0);
            IntPtr Tangents_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSectionFromProceduralMesh_Tangents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> Tangents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> (1, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.ToNative, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.FromNative, GetSectionFromProceduralMesh_Tangents_ElementSize);
            tangents = Tangents_Marshaler.FromNative(Tangents_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent>.DestructInstance(Tangents_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.KismetProceduralMeshLibrary:GenerateBoxMesh
    static readonly IntPtr GenerateBoxMesh_NativeFunction;
    static readonly int GenerateBoxMesh_ParamsSize;
    static readonly int GenerateBoxMesh_BoxRadius_Offset;
    static readonly int GenerateBoxMesh_Vertices_Offset;
    static readonly int GenerateBoxMesh_Vertices_ElementSize;
    static readonly int GenerateBoxMesh_Triangles_Offset;
    static readonly int GenerateBoxMesh_Triangles_ElementSize;
    static readonly int GenerateBoxMesh_Normals_Offset;
    static readonly int GenerateBoxMesh_Normals_ElementSize;
    static readonly int GenerateBoxMesh_UVs_Offset;
    static readonly int GenerateBoxMesh_UVs_ElementSize;
    static readonly int GenerateBoxMesh_Tangents_Offset;
    static readonly int GenerateBoxMesh_Tangents_ElementSize;
    
    public static void GenerateBoxMesh(System.DoubleNumerics.Vector3 boxRadius, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> vertices, out System.Collections.Generic.IList<int> triangles, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> normals, out System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uVs, out System.Collections.Generic.IList<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> tangents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GenerateBoxMesh_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GenerateBoxMesh_BoxRadius_Offset), 0, null, boxRadius);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GenerateBoxMesh_NativeFunction, ParamsBuffer);
            
            IntPtr Vertices_NativeBuffer = IntPtr.Add(ParamsBuffer, GenerateBoxMesh_Vertices_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Vertices_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GenerateBoxMesh_Vertices_ElementSize);
            vertices = Vertices_Marshaler.FromNative(Vertices_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(Vertices_NativeBuffer, 0);
            IntPtr Triangles_NativeBuffer = IntPtr.Add(ParamsBuffer, GenerateBoxMesh_Triangles_Offset);
            UnrealArrayCopyMarshaler<int> Triangles_Marshaler = new UnrealArrayCopyMarshaler<int> (1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, GenerateBoxMesh_Triangles_ElementSize);
            triangles = Triangles_Marshaler.FromNative(Triangles_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<int>.DestructInstance(Triangles_NativeBuffer, 0);
            IntPtr Normals_NativeBuffer = IntPtr.Add(ParamsBuffer, GenerateBoxMesh_Normals_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Normals_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GenerateBoxMesh_Normals_ElementSize);
            normals = Normals_Marshaler.FromNative(Normals_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(Normals_NativeBuffer, 0);
            IntPtr UVs_NativeBuffer = IntPtr.Add(ParamsBuffer, GenerateBoxMesh_UVs_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UVs_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> (1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, GenerateBoxMesh_UVs_ElementSize);
            uVs = UVs_Marshaler.FromNative(UVs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>.DestructInstance(UVs_NativeBuffer, 0);
            IntPtr Tangents_NativeBuffer = IntPtr.Add(ParamsBuffer, GenerateBoxMesh_Tangents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> Tangents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> (1, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.ToNative, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.FromNative, GenerateBoxMesh_Tangents_ElementSize);
            tangents = Tangents_Marshaler.FromNative(Tangents_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent>.DestructInstance(Tangents_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.KismetProceduralMeshLibrary:CreateGridMeshWelded
    static readonly IntPtr CreateGridMeshWelded_NativeFunction;
    static readonly int CreateGridMeshWelded_ParamsSize;
    static readonly int CreateGridMeshWelded_NumX_Offset;
    static readonly int CreateGridMeshWelded_NumY_Offset;
    static readonly int CreateGridMeshWelded_Triangles_Offset;
    static readonly int CreateGridMeshWelded_Triangles_ElementSize;
    static readonly int CreateGridMeshWelded_Vertices_Offset;
    static readonly int CreateGridMeshWelded_Vertices_ElementSize;
    static readonly int CreateGridMeshWelded_UVs_Offset;
    static readonly int CreateGridMeshWelded_UVs_ElementSize;
    static readonly int CreateGridMeshWelded_GridSpacing_Offset;
    
    public static void CreateGridMeshWelded(int numX, int numY, out System.Collections.Generic.IList<int> triangles, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> vertices, out System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uVs, float gridSpacing = 16.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateGridMeshWelded_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateGridMeshWelded_NumX_Offset), 0, null, numX);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateGridMeshWelded_NumY_Offset), 0, null, numY);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CreateGridMeshWelded_GridSpacing_Offset), 0, null, gridSpacing);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateGridMeshWelded_NativeFunction, ParamsBuffer);
            
            IntPtr Triangles_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateGridMeshWelded_Triangles_Offset);
            UnrealArrayCopyMarshaler<int> Triangles_Marshaler = new UnrealArrayCopyMarshaler<int> (1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, CreateGridMeshWelded_Triangles_ElementSize);
            triangles = Triangles_Marshaler.FromNative(Triangles_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<int>.DestructInstance(Triangles_NativeBuffer, 0);
            IntPtr Vertices_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateGridMeshWelded_Vertices_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Vertices_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, CreateGridMeshWelded_Vertices_ElementSize);
            vertices = Vertices_Marshaler.FromNative(Vertices_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(Vertices_NativeBuffer, 0);
            IntPtr UVs_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateGridMeshWelded_UVs_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UVs_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> (1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, CreateGridMeshWelded_UVs_ElementSize);
            uVs = UVs_Marshaler.FromNative(UVs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>.DestructInstance(UVs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.KismetProceduralMeshLibrary:CreateGridMeshTriangles
    static readonly IntPtr CreateGridMeshTriangles_NativeFunction;
    static readonly int CreateGridMeshTriangles_ParamsSize;
    static readonly int CreateGridMeshTriangles_NumX_Offset;
    static readonly int CreateGridMeshTriangles_NumY_Offset;
    static readonly int CreateGridMeshTriangles_bWinding_Offset;
    static readonly int CreateGridMeshTriangles_Triangles_Offset;
    static readonly int CreateGridMeshTriangles_Triangles_ElementSize;
    
    public static void CreateGridMeshTriangles(int numX, int numY, bool bWinding, out System.Collections.Generic.IList<int> triangles)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateGridMeshTriangles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateGridMeshTriangles_NumX_Offset), 0, null, numX);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateGridMeshTriangles_NumY_Offset), 0, null, numY);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateGridMeshTriangles_bWinding_Offset), 0, null, bWinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateGridMeshTriangles_NativeFunction, ParamsBuffer);
            
            IntPtr Triangles_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateGridMeshTriangles_Triangles_Offset);
            UnrealArrayCopyMarshaler<int> Triangles_Marshaler = new UnrealArrayCopyMarshaler<int> (1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, CreateGridMeshTriangles_Triangles_ElementSize);
            triangles = Triangles_Marshaler.FromNative(Triangles_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<int>.DestructInstance(Triangles_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.KismetProceduralMeshLibrary:CreateGridMeshSplit
    static readonly IntPtr CreateGridMeshSplit_NativeFunction;
    static readonly int CreateGridMeshSplit_ParamsSize;
    static readonly int CreateGridMeshSplit_NumX_Offset;
    static readonly int CreateGridMeshSplit_NumY_Offset;
    static readonly int CreateGridMeshSplit_Triangles_Offset;
    static readonly int CreateGridMeshSplit_Triangles_ElementSize;
    static readonly int CreateGridMeshSplit_Vertices_Offset;
    static readonly int CreateGridMeshSplit_Vertices_ElementSize;
    static readonly int CreateGridMeshSplit_UVs_Offset;
    static readonly int CreateGridMeshSplit_UVs_ElementSize;
    static readonly int CreateGridMeshSplit_UV1s_Offset;
    static readonly int CreateGridMeshSplit_UV1s_ElementSize;
    static readonly int CreateGridMeshSplit_GridSpacing_Offset;
    
    public static void CreateGridMeshSplit(int numX, int numY, out System.Collections.Generic.IList<int> triangles, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> vertices, out System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uVs, out System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uV1s, float gridSpacing = 16.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateGridMeshSplit_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateGridMeshSplit_NumX_Offset), 0, null, numX);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateGridMeshSplit_NumY_Offset), 0, null, numY);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CreateGridMeshSplit_GridSpacing_Offset), 0, null, gridSpacing);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateGridMeshSplit_NativeFunction, ParamsBuffer);
            
            IntPtr Triangles_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateGridMeshSplit_Triangles_Offset);
            UnrealArrayCopyMarshaler<int> Triangles_Marshaler = new UnrealArrayCopyMarshaler<int> (1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, CreateGridMeshSplit_Triangles_ElementSize);
            triangles = Triangles_Marshaler.FromNative(Triangles_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<int>.DestructInstance(Triangles_NativeBuffer, 0);
            IntPtr Vertices_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateGridMeshSplit_Vertices_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Vertices_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, CreateGridMeshSplit_Vertices_ElementSize);
            vertices = Vertices_Marshaler.FromNative(Vertices_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(Vertices_NativeBuffer, 0);
            IntPtr UVs_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateGridMeshSplit_UVs_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UVs_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> (1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, CreateGridMeshSplit_UVs_ElementSize);
            uVs = UVs_Marshaler.FromNative(UVs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>.DestructInstance(UVs_NativeBuffer, 0);
            IntPtr UV1s_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateGridMeshSplit_UV1s_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UV1s_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> (1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, CreateGridMeshSplit_UV1s_ElementSize);
            uV1s = UV1s_Marshaler.FromNative(UV1s_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>.DestructInstance(UV1s_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.KismetProceduralMeshLibrary:CopyProceduralMeshFromStaticMeshComponent
    static readonly IntPtr CopyProceduralMeshFromStaticMeshComponent_NativeFunction;
    static readonly int CopyProceduralMeshFromStaticMeshComponent_ParamsSize;
    static readonly int CopyProceduralMeshFromStaticMeshComponent_StaticMeshComponent_Offset;
    static readonly int CopyProceduralMeshFromStaticMeshComponent_LODIndex_Offset;
    static readonly int CopyProceduralMeshFromStaticMeshComponent_ProcMeshComponent_Offset;
    static readonly int CopyProceduralMeshFromStaticMeshComponent_bCreateCollision_Offset;
    
    public static void CopyProceduralMeshFromStaticMeshComponent(UnrealSharp.Engine.StaticMeshComponent staticMeshComponent, int lODIndex, UnrealSharp.ProceduralMeshComponent.ProceduralMeshComponent procMeshComponent, bool bCreateCollision)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CopyProceduralMeshFromStaticMeshComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.StaticMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, CopyProceduralMeshFromStaticMeshComponent_StaticMeshComponent_Offset), 0, null, staticMeshComponent);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CopyProceduralMeshFromStaticMeshComponent_LODIndex_Offset), 0, null, lODIndex);
            ObjectMarshaller<UnrealSharp.ProceduralMeshComponent.ProceduralMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, CopyProceduralMeshFromStaticMeshComponent_ProcMeshComponent_Offset), 0, null, procMeshComponent);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CopyProceduralMeshFromStaticMeshComponent_bCreateCollision_Offset), 0, null, bCreateCollision);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CopyProceduralMeshFromStaticMeshComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.KismetProceduralMeshLibrary:ConvertQuadToTriangles
    static readonly IntPtr ConvertQuadToTriangles_NativeFunction;
    static readonly int ConvertQuadToTriangles_ParamsSize;
    static readonly int ConvertQuadToTriangles_Triangles_Offset;
    static readonly int ConvertQuadToTriangles_Triangles_ElementSize;
    static readonly int ConvertQuadToTriangles_Vert0_Offset;
    static readonly int ConvertQuadToTriangles_Vert1_Offset;
    static readonly int ConvertQuadToTriangles_Vert2_Offset;
    static readonly int ConvertQuadToTriangles_Vert3_Offset;
    
    public static void ConvertQuadToTriangles(ref System.Collections.Generic.IList<int> triangles, int vert0, int vert1, int vert2, int vert3)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertQuadToTriangles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Triangles_NativeBuffer = IntPtr.Add(ParamsBuffer, ConvertQuadToTriangles_Triangles_Offset);
            UnrealArrayCopyMarshaler<int> Triangles_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, ConvertQuadToTriangles_Triangles_ElementSize);
            Triangles_Marshaler.ToNative(Triangles_NativeBuffer, 0, null, triangles);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ConvertQuadToTriangles_Vert0_Offset), 0, null, vert0);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ConvertQuadToTriangles_Vert1_Offset), 0, null, vert1);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ConvertQuadToTriangles_Vert2_Offset), 0, null, vert2);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ConvertQuadToTriangles_Vert3_Offset), 0, null, vert3);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertQuadToTriangles_NativeFunction, ParamsBuffer);
            
            triangles = Triangles_Marshaler.FromNative(Triangles_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<int>.DestructInstance(Triangles_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.KismetProceduralMeshLibrary:CalculateTangentsForMesh
    static readonly IntPtr CalculateTangentsForMesh_NativeFunction;
    static readonly int CalculateTangentsForMesh_ParamsSize;
    static readonly int CalculateTangentsForMesh_Vertices_Offset;
    static readonly int CalculateTangentsForMesh_Vertices_ElementSize;
    static readonly int CalculateTangentsForMesh_Triangles_Offset;
    static readonly int CalculateTangentsForMesh_Triangles_ElementSize;
    static readonly int CalculateTangentsForMesh_UVs_Offset;
    static readonly int CalculateTangentsForMesh_UVs_ElementSize;
    static readonly int CalculateTangentsForMesh_Normals_Offset;
    static readonly int CalculateTangentsForMesh_Normals_ElementSize;
    static readonly int CalculateTangentsForMesh_Tangents_Offset;
    static readonly int CalculateTangentsForMesh_Tangents_ElementSize;
    
    public static void CalculateTangentsForMesh(System.Collections.Generic.IList<System.DoubleNumerics.Vector3> vertices, System.Collections.Generic.IList<int> triangles, System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uVs, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> normals, out System.Collections.Generic.IList<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> tangents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CalculateTangentsForMesh_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Vertices_NativeBuffer = IntPtr.Add(ParamsBuffer, CalculateTangentsForMesh_Vertices_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Vertices_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, CalculateTangentsForMesh_Vertices_ElementSize);
            Vertices_Marshaler.ToNative(Vertices_NativeBuffer, 0, null, vertices);
            IntPtr Triangles_NativeBuffer = IntPtr.Add(ParamsBuffer, CalculateTangentsForMesh_Triangles_Offset);
            UnrealArrayCopyMarshaler<int> Triangles_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, CalculateTangentsForMesh_Triangles_ElementSize);
            Triangles_Marshaler.ToNative(Triangles_NativeBuffer, 0, null, triangles);
            IntPtr UVs_NativeBuffer = IntPtr.Add(ParamsBuffer, CalculateTangentsForMesh_UVs_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UVs_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>(1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, CalculateTangentsForMesh_UVs_ElementSize);
            UVs_Marshaler.ToNative(UVs_NativeBuffer, 0, null, uVs);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CalculateTangentsForMesh_NativeFunction, ParamsBuffer);
            
            IntPtr Normals_NativeBuffer = IntPtr.Add(ParamsBuffer, CalculateTangentsForMesh_Normals_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Normals_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, CalculateTangentsForMesh_Normals_ElementSize);
            normals = Normals_Marshaler.FromNative(Normals_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(Normals_NativeBuffer, 0);
            IntPtr Tangents_NativeBuffer = IntPtr.Add(ParamsBuffer, CalculateTangentsForMesh_Tangents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> Tangents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> (1, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.ToNative, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.FromNative, CalculateTangentsForMesh_Tangents_ElementSize);
            tangents = Tangents_Marshaler.FromNative(Tangents_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent>.DestructInstance(Tangents_NativeBuffer, 0);
            
        }
    }
    
    
}
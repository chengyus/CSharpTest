// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ProceduralMeshComponent;

[UClass]
public partial class ProceduralMeshComponent : UnrealSharp.Engine.MeshComponent
{
    
    static ProceduralMeshComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ProceduralMeshComponent");
        
        bUseComplexAsSimpleCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseComplexAsSimpleCollision");
        bUseAsyncCooking_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseAsyncCooking");
        
        UpdateMeshSection_LinearColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UpdateMeshSection_LinearColor");
        UpdateMeshSection_LinearColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UpdateMeshSection_LinearColor_NativeFunction);
        UpdateMeshSection_LinearColor_SectionIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_LinearColor_NativeFunction, "SectionIndex");
        UpdateMeshSection_LinearColor_Vertices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_LinearColor_NativeFunction, "Vertices");
        UpdateMeshSection_LinearColor_Vertices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(UpdateMeshSection_LinearColor_NativeFunction, "Vertices");
        UpdateMeshSection_LinearColor_Normals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_LinearColor_NativeFunction, "Normals");
        UpdateMeshSection_LinearColor_Normals_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(UpdateMeshSection_LinearColor_NativeFunction, "Normals");
        UpdateMeshSection_LinearColor_UV0_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_LinearColor_NativeFunction, "UV0");
        UpdateMeshSection_LinearColor_UV0_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(UpdateMeshSection_LinearColor_NativeFunction, "UV0");
        UpdateMeshSection_LinearColor_UV1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_LinearColor_NativeFunction, "UV1");
        UpdateMeshSection_LinearColor_UV1_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(UpdateMeshSection_LinearColor_NativeFunction, "UV1");
        UpdateMeshSection_LinearColor_UV2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_LinearColor_NativeFunction, "UV2");
        UpdateMeshSection_LinearColor_UV2_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(UpdateMeshSection_LinearColor_NativeFunction, "UV2");
        UpdateMeshSection_LinearColor_UV3_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_LinearColor_NativeFunction, "UV3");
        UpdateMeshSection_LinearColor_UV3_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(UpdateMeshSection_LinearColor_NativeFunction, "UV3");
        UpdateMeshSection_LinearColor_VertexColors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_LinearColor_NativeFunction, "VertexColors");
        UpdateMeshSection_LinearColor_VertexColors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(UpdateMeshSection_LinearColor_NativeFunction, "VertexColors");
        UpdateMeshSection_LinearColor_Tangents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_LinearColor_NativeFunction, "Tangents");
        UpdateMeshSection_LinearColor_Tangents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(UpdateMeshSection_LinearColor_NativeFunction, "Tangents");
        UpdateMeshSection_LinearColor_bSRGBConversion_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_LinearColor_NativeFunction, "bSRGBConversion");
        UpdateMeshSection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UpdateMeshSection");
        UpdateMeshSection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UpdateMeshSection_NativeFunction);
        UpdateMeshSection_SectionIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_NativeFunction, "SectionIndex");
        UpdateMeshSection_Vertices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_NativeFunction, "Vertices");
        UpdateMeshSection_Vertices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(UpdateMeshSection_NativeFunction, "Vertices");
        UpdateMeshSection_Normals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_NativeFunction, "Normals");
        UpdateMeshSection_Normals_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(UpdateMeshSection_NativeFunction, "Normals");
        UpdateMeshSection_UV0_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_NativeFunction, "UV0");
        UpdateMeshSection_UV0_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(UpdateMeshSection_NativeFunction, "UV0");
        UpdateMeshSection_VertexColors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_NativeFunction, "VertexColors");
        UpdateMeshSection_VertexColors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(UpdateMeshSection_NativeFunction, "VertexColors");
        UpdateMeshSection_Tangents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMeshSection_NativeFunction, "Tangents");
        UpdateMeshSection_Tangents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(UpdateMeshSection_NativeFunction, "Tangents");
        SetMeshSectionVisible_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMeshSectionVisible");
        SetMeshSectionVisible_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMeshSectionVisible_NativeFunction);
        SetMeshSectionVisible_SectionIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMeshSectionVisible_NativeFunction, "SectionIndex");
        SetMeshSectionVisible_bNewVisibility_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMeshSectionVisible_NativeFunction, "bNewVisibility");
        IsMeshSectionVisible_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsMeshSectionVisible");
        IsMeshSectionVisible_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsMeshSectionVisible_NativeFunction);
        IsMeshSectionVisible_SectionIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsMeshSectionVisible_NativeFunction, "SectionIndex");
        IsMeshSectionVisible_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsMeshSectionVisible_NativeFunction, "ReturnValue");
        GetNumSections_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumSections");
        GetNumSections_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumSections_NativeFunction);
        GetNumSections_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumSections_NativeFunction, "ReturnValue");
        CreateMeshSection_LinearColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateMeshSection_LinearColor");
        CreateMeshSection_LinearColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateMeshSection_LinearColor_NativeFunction);
        CreateMeshSection_LinearColor_SectionIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_LinearColor_NativeFunction, "SectionIndex");
        CreateMeshSection_LinearColor_Vertices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_LinearColor_NativeFunction, "Vertices");
        CreateMeshSection_LinearColor_Vertices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_LinearColor_NativeFunction, "Vertices");
        CreateMeshSection_LinearColor_Triangles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_LinearColor_NativeFunction, "Triangles");
        CreateMeshSection_LinearColor_Triangles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_LinearColor_NativeFunction, "Triangles");
        CreateMeshSection_LinearColor_Normals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_LinearColor_NativeFunction, "Normals");
        CreateMeshSection_LinearColor_Normals_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_LinearColor_NativeFunction, "Normals");
        CreateMeshSection_LinearColor_UV0_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_LinearColor_NativeFunction, "UV0");
        CreateMeshSection_LinearColor_UV0_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_LinearColor_NativeFunction, "UV0");
        CreateMeshSection_LinearColor_UV1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_LinearColor_NativeFunction, "UV1");
        CreateMeshSection_LinearColor_UV1_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_LinearColor_NativeFunction, "UV1");
        CreateMeshSection_LinearColor_UV2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_LinearColor_NativeFunction, "UV2");
        CreateMeshSection_LinearColor_UV2_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_LinearColor_NativeFunction, "UV2");
        CreateMeshSection_LinearColor_UV3_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_LinearColor_NativeFunction, "UV3");
        CreateMeshSection_LinearColor_UV3_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_LinearColor_NativeFunction, "UV3");
        CreateMeshSection_LinearColor_VertexColors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_LinearColor_NativeFunction, "VertexColors");
        CreateMeshSection_LinearColor_VertexColors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_LinearColor_NativeFunction, "VertexColors");
        CreateMeshSection_LinearColor_Tangents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_LinearColor_NativeFunction, "Tangents");
        CreateMeshSection_LinearColor_Tangents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_LinearColor_NativeFunction, "Tangents");
        CreateMeshSection_LinearColor_bCreateCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_LinearColor_NativeFunction, "bCreateCollision");
        CreateMeshSection_LinearColor_bSRGBConversion_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_LinearColor_NativeFunction, "bSRGBConversion");
        CreateMeshSection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateMeshSection");
        CreateMeshSection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateMeshSection_NativeFunction);
        CreateMeshSection_SectionIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_NativeFunction, "SectionIndex");
        CreateMeshSection_Vertices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_NativeFunction, "Vertices");
        CreateMeshSection_Vertices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_NativeFunction, "Vertices");
        CreateMeshSection_Triangles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_NativeFunction, "Triangles");
        CreateMeshSection_Triangles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_NativeFunction, "Triangles");
        CreateMeshSection_Normals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_NativeFunction, "Normals");
        CreateMeshSection_Normals_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_NativeFunction, "Normals");
        CreateMeshSection_UV0_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_NativeFunction, "UV0");
        CreateMeshSection_UV0_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_NativeFunction, "UV0");
        CreateMeshSection_VertexColors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_NativeFunction, "VertexColors");
        CreateMeshSection_VertexColors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_NativeFunction, "VertexColors");
        CreateMeshSection_Tangents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_NativeFunction, "Tangents");
        CreateMeshSection_Tangents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CreateMeshSection_NativeFunction, "Tangents");
        CreateMeshSection_bCreateCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMeshSection_NativeFunction, "bCreateCollision");
        ClearMeshSection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearMeshSection");
        ClearMeshSection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearMeshSection_NativeFunction);
        ClearMeshSection_SectionIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearMeshSection_NativeFunction, "SectionIndex");
        ClearCollisionConvexMeshes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearCollisionConvexMeshes");
        ClearAllMeshSections_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearAllMeshSections");
        AddCollisionConvexMesh_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddCollisionConvexMesh");
        AddCollisionConvexMesh_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddCollisionConvexMesh_NativeFunction);
        AddCollisionConvexMesh_ConvexVerts_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddCollisionConvexMesh_NativeFunction, "ConvexVerts");
        AddCollisionConvexMesh_ConvexVerts_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddCollisionConvexMesh_NativeFunction, "ConvexVerts");
        
        
    }
    
    protected ProceduralMeshComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/ProceduralMeshComponent.ProceduralMeshComponent:bUseComplexAsSimpleCollision
    static readonly int bUseComplexAsSimpleCollision_Offset;
    
    public bool bUseComplexAsSimpleCollision
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseComplexAsSimpleCollision_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/ProceduralMeshComponent.ProceduralMeshComponent:bUseAsyncCooking
    static readonly int bUseAsyncCooking_Offset;
    
    public bool bUseAsyncCooking
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseAsyncCooking_Offset), 0, this);
        }
    }
    
    // Function /Script/ProceduralMeshComponent.ProceduralMeshComponent:UpdateMeshSection_LinearColor
    static readonly IntPtr UpdateMeshSection_LinearColor_NativeFunction;
    static readonly int UpdateMeshSection_LinearColor_ParamsSize;
    static readonly int UpdateMeshSection_LinearColor_SectionIndex_Offset;
    static readonly int UpdateMeshSection_LinearColor_Vertices_Offset;
    static readonly int UpdateMeshSection_LinearColor_Vertices_ElementSize;
    static readonly int UpdateMeshSection_LinearColor_Normals_Offset;
    static readonly int UpdateMeshSection_LinearColor_Normals_ElementSize;
    static readonly int UpdateMeshSection_LinearColor_UV0_Offset;
    static readonly int UpdateMeshSection_LinearColor_UV0_ElementSize;
    static readonly int UpdateMeshSection_LinearColor_UV1_Offset;
    static readonly int UpdateMeshSection_LinearColor_UV1_ElementSize;
    static readonly int UpdateMeshSection_LinearColor_UV2_Offset;
    static readonly int UpdateMeshSection_LinearColor_UV2_ElementSize;
    static readonly int UpdateMeshSection_LinearColor_UV3_Offset;
    static readonly int UpdateMeshSection_LinearColor_UV3_ElementSize;
    static readonly int UpdateMeshSection_LinearColor_VertexColors_Offset;
    static readonly int UpdateMeshSection_LinearColor_VertexColors_ElementSize;
    static readonly int UpdateMeshSection_LinearColor_Tangents_Offset;
    static readonly int UpdateMeshSection_LinearColor_Tangents_ElementSize;
    static readonly int UpdateMeshSection_LinearColor_bSRGBConversion_Offset;
    
    public void UpdateMeshSection_LinearColor(int sectionIndex, System.Collections.Generic.IList<System.DoubleNumerics.Vector3> vertices, System.Collections.Generic.IList<System.DoubleNumerics.Vector3> normals, System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uV0, System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uV1, System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uV2, System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uV3, System.Collections.Generic.IList<UnrealSharp.CoreUObject.LinearColor> vertexColors, System.Collections.Generic.IList<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> tangents, bool bSRGBConversion = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UpdateMeshSection_LinearColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, UpdateMeshSection_LinearColor_SectionIndex_Offset), 0, null, sectionIndex);
            IntPtr Vertices_NativeBuffer = IntPtr.Add(ParamsBuffer, UpdateMeshSection_LinearColor_Vertices_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Vertices_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, UpdateMeshSection_LinearColor_Vertices_ElementSize);
            Vertices_Marshaler.ToNative(Vertices_NativeBuffer, 0, null, vertices);
            IntPtr Normals_NativeBuffer = IntPtr.Add(ParamsBuffer, UpdateMeshSection_LinearColor_Normals_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Normals_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, UpdateMeshSection_LinearColor_Normals_ElementSize);
            Normals_Marshaler.ToNative(Normals_NativeBuffer, 0, null, normals);
            IntPtr UV0_NativeBuffer = IntPtr.Add(ParamsBuffer, UpdateMeshSection_LinearColor_UV0_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UV0_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>(1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, UpdateMeshSection_LinearColor_UV0_ElementSize);
            UV0_Marshaler.ToNative(UV0_NativeBuffer, 0, null, uV0);
            IntPtr UV1_NativeBuffer = IntPtr.Add(ParamsBuffer, UpdateMeshSection_LinearColor_UV1_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UV1_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>(1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, UpdateMeshSection_LinearColor_UV1_ElementSize);
            UV1_Marshaler.ToNative(UV1_NativeBuffer, 0, null, uV1);
            IntPtr UV2_NativeBuffer = IntPtr.Add(ParamsBuffer, UpdateMeshSection_LinearColor_UV2_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UV2_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>(1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, UpdateMeshSection_LinearColor_UV2_ElementSize);
            UV2_Marshaler.ToNative(UV2_NativeBuffer, 0, null, uV2);
            IntPtr UV3_NativeBuffer = IntPtr.Add(ParamsBuffer, UpdateMeshSection_LinearColor_UV3_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UV3_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>(1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, UpdateMeshSection_LinearColor_UV3_ElementSize);
            UV3_Marshaler.ToNative(UV3_NativeBuffer, 0, null, uV3);
            IntPtr VertexColors_NativeBuffer = IntPtr.Add(ParamsBuffer, UpdateMeshSection_LinearColor_VertexColors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor> VertexColors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor>(1, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative, UpdateMeshSection_LinearColor_VertexColors_ElementSize);
            VertexColors_Marshaler.ToNative(VertexColors_NativeBuffer, 0, null, vertexColors);
            IntPtr Tangents_NativeBuffer = IntPtr.Add(ParamsBuffer, UpdateMeshSection_LinearColor_Tangents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> Tangents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent>(1, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.ToNative, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.FromNative, UpdateMeshSection_LinearColor_Tangents_ElementSize);
            Tangents_Marshaler.ToNative(Tangents_NativeBuffer, 0, null, tangents);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UpdateMeshSection_LinearColor_bSRGBConversion_Offset), 0, null, bSRGBConversion);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UpdateMeshSection_LinearColor_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.ProceduralMeshComponent:UpdateMeshSection
    static readonly IntPtr UpdateMeshSection_NativeFunction;
    static readonly int UpdateMeshSection_ParamsSize;
    static readonly int UpdateMeshSection_SectionIndex_Offset;
    static readonly int UpdateMeshSection_Vertices_Offset;
    static readonly int UpdateMeshSection_Vertices_ElementSize;
    static readonly int UpdateMeshSection_Normals_Offset;
    static readonly int UpdateMeshSection_Normals_ElementSize;
    static readonly int UpdateMeshSection_UV0_Offset;
    static readonly int UpdateMeshSection_UV0_ElementSize;
    static readonly int UpdateMeshSection_VertexColors_Offset;
    static readonly int UpdateMeshSection_VertexColors_ElementSize;
    static readonly int UpdateMeshSection_Tangents_Offset;
    static readonly int UpdateMeshSection_Tangents_ElementSize;
    
    [Obsolete("This function is deprecated for Blueprints because it uses the unsupported 'Color' type. Use new 'Update Mesh Section' function which uses LinearColor instead.")]
    public void UpdateMeshSection(int sectionIndex, System.Collections.Generic.IList<System.DoubleNumerics.Vector3> vertices, System.Collections.Generic.IList<System.DoubleNumerics.Vector3> normals, System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uV0, System.Collections.Generic.IList<UnrealSharp.CoreUObject.Color> vertexColors, System.Collections.Generic.IList<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> tangents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UpdateMeshSection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, UpdateMeshSection_SectionIndex_Offset), 0, null, sectionIndex);
            IntPtr Vertices_NativeBuffer = IntPtr.Add(ParamsBuffer, UpdateMeshSection_Vertices_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Vertices_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, UpdateMeshSection_Vertices_ElementSize);
            Vertices_Marshaler.ToNative(Vertices_NativeBuffer, 0, null, vertices);
            IntPtr Normals_NativeBuffer = IntPtr.Add(ParamsBuffer, UpdateMeshSection_Normals_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Normals_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, UpdateMeshSection_Normals_ElementSize);
            Normals_Marshaler.ToNative(Normals_NativeBuffer, 0, null, normals);
            IntPtr UV0_NativeBuffer = IntPtr.Add(ParamsBuffer, UpdateMeshSection_UV0_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UV0_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>(1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, UpdateMeshSection_UV0_ElementSize);
            UV0_Marshaler.ToNative(UV0_NativeBuffer, 0, null, uV0);
            IntPtr VertexColors_NativeBuffer = IntPtr.Add(ParamsBuffer, UpdateMeshSection_VertexColors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Color> VertexColors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Color>(1, BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative, UpdateMeshSection_VertexColors_ElementSize);
            VertexColors_Marshaler.ToNative(VertexColors_NativeBuffer, 0, null, vertexColors);
            IntPtr Tangents_NativeBuffer = IntPtr.Add(ParamsBuffer, UpdateMeshSection_Tangents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> Tangents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent>(1, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.ToNative, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.FromNative, UpdateMeshSection_Tangents_ElementSize);
            Tangents_Marshaler.ToNative(Tangents_NativeBuffer, 0, null, tangents);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UpdateMeshSection_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.ProceduralMeshComponent:SetMeshSectionVisible
    static readonly IntPtr SetMeshSectionVisible_NativeFunction;
    static readonly int SetMeshSectionVisible_ParamsSize;
    static readonly int SetMeshSectionVisible_SectionIndex_Offset;
    static readonly int SetMeshSectionVisible_bNewVisibility_Offset;
    
    public void SetMeshSectionVisible(int sectionIndex, bool bNewVisibility)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMeshSectionVisible_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetMeshSectionVisible_SectionIndex_Offset), 0, null, sectionIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetMeshSectionVisible_bNewVisibility_Offset), 0, null, bNewVisibility);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMeshSectionVisible_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.ProceduralMeshComponent:IsMeshSectionVisible
    static readonly IntPtr IsMeshSectionVisible_NativeFunction;
    static readonly int IsMeshSectionVisible_ParamsSize;
    static readonly int IsMeshSectionVisible_SectionIndex_Offset;
    static readonly int IsMeshSectionVisible_ReturnValue_Offset;
    
    public bool IsMeshSectionVisible(int sectionIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsMeshSectionVisible_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, IsMeshSectionVisible_SectionIndex_Offset), 0, null, sectionIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsMeshSectionVisible_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsMeshSectionVisible_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ProceduralMeshComponent.ProceduralMeshComponent:GetNumSections
    static readonly IntPtr GetNumSections_NativeFunction;
    static readonly int GetNumSections_ParamsSize;
    static readonly int GetNumSections_ReturnValue_Offset;
    
    public int GetNumSections()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumSections_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumSections_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumSections_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ProceduralMeshComponent.ProceduralMeshComponent:CreateMeshSection_LinearColor
    static readonly IntPtr CreateMeshSection_LinearColor_NativeFunction;
    static readonly int CreateMeshSection_LinearColor_ParamsSize;
    static readonly int CreateMeshSection_LinearColor_SectionIndex_Offset;
    static readonly int CreateMeshSection_LinearColor_Vertices_Offset;
    static readonly int CreateMeshSection_LinearColor_Vertices_ElementSize;
    static readonly int CreateMeshSection_LinearColor_Triangles_Offset;
    static readonly int CreateMeshSection_LinearColor_Triangles_ElementSize;
    static readonly int CreateMeshSection_LinearColor_Normals_Offset;
    static readonly int CreateMeshSection_LinearColor_Normals_ElementSize;
    static readonly int CreateMeshSection_LinearColor_UV0_Offset;
    static readonly int CreateMeshSection_LinearColor_UV0_ElementSize;
    static readonly int CreateMeshSection_LinearColor_UV1_Offset;
    static readonly int CreateMeshSection_LinearColor_UV1_ElementSize;
    static readonly int CreateMeshSection_LinearColor_UV2_Offset;
    static readonly int CreateMeshSection_LinearColor_UV2_ElementSize;
    static readonly int CreateMeshSection_LinearColor_UV3_Offset;
    static readonly int CreateMeshSection_LinearColor_UV3_ElementSize;
    static readonly int CreateMeshSection_LinearColor_VertexColors_Offset;
    static readonly int CreateMeshSection_LinearColor_VertexColors_ElementSize;
    static readonly int CreateMeshSection_LinearColor_Tangents_Offset;
    static readonly int CreateMeshSection_LinearColor_Tangents_ElementSize;
    static readonly int CreateMeshSection_LinearColor_bCreateCollision_Offset;
    static readonly int CreateMeshSection_LinearColor_bSRGBConversion_Offset;
    
    public void CreateMeshSection_LinearColor(int sectionIndex, System.Collections.Generic.IList<System.DoubleNumerics.Vector3> vertices, System.Collections.Generic.IList<int> triangles, System.Collections.Generic.IList<System.DoubleNumerics.Vector3> normals, System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uV0, System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uV1, System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uV2, System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uV3, System.Collections.Generic.IList<UnrealSharp.CoreUObject.LinearColor> vertexColors, System.Collections.Generic.IList<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> tangents, bool bCreateCollision, bool bSRGBConversion = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateMeshSection_LinearColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateMeshSection_LinearColor_SectionIndex_Offset), 0, null, sectionIndex);
            IntPtr Vertices_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_LinearColor_Vertices_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Vertices_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, CreateMeshSection_LinearColor_Vertices_ElementSize);
            Vertices_Marshaler.ToNative(Vertices_NativeBuffer, 0, null, vertices);
            IntPtr Triangles_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_LinearColor_Triangles_Offset);
            UnrealArrayCopyMarshaler<int> Triangles_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, CreateMeshSection_LinearColor_Triangles_ElementSize);
            Triangles_Marshaler.ToNative(Triangles_NativeBuffer, 0, null, triangles);
            IntPtr Normals_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_LinearColor_Normals_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Normals_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, CreateMeshSection_LinearColor_Normals_ElementSize);
            Normals_Marshaler.ToNative(Normals_NativeBuffer, 0, null, normals);
            IntPtr UV0_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_LinearColor_UV0_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UV0_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>(1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, CreateMeshSection_LinearColor_UV0_ElementSize);
            UV0_Marshaler.ToNative(UV0_NativeBuffer, 0, null, uV0);
            IntPtr UV1_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_LinearColor_UV1_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UV1_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>(1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, CreateMeshSection_LinearColor_UV1_ElementSize);
            UV1_Marshaler.ToNative(UV1_NativeBuffer, 0, null, uV1);
            IntPtr UV2_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_LinearColor_UV2_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UV2_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>(1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, CreateMeshSection_LinearColor_UV2_ElementSize);
            UV2_Marshaler.ToNative(UV2_NativeBuffer, 0, null, uV2);
            IntPtr UV3_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_LinearColor_UV3_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UV3_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>(1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, CreateMeshSection_LinearColor_UV3_ElementSize);
            UV3_Marshaler.ToNative(UV3_NativeBuffer, 0, null, uV3);
            IntPtr VertexColors_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_LinearColor_VertexColors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor> VertexColors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor>(1, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative, CreateMeshSection_LinearColor_VertexColors_ElementSize);
            VertexColors_Marshaler.ToNative(VertexColors_NativeBuffer, 0, null, vertexColors);
            IntPtr Tangents_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_LinearColor_Tangents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> Tangents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent>(1, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.ToNative, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.FromNative, CreateMeshSection_LinearColor_Tangents_ElementSize);
            Tangents_Marshaler.ToNative(Tangents_NativeBuffer, 0, null, tangents);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateMeshSection_LinearColor_bCreateCollision_Offset), 0, null, bCreateCollision);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateMeshSection_LinearColor_bSRGBConversion_Offset), 0, null, bSRGBConversion);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateMeshSection_LinearColor_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.ProceduralMeshComponent:CreateMeshSection
    static readonly IntPtr CreateMeshSection_NativeFunction;
    static readonly int CreateMeshSection_ParamsSize;
    static readonly int CreateMeshSection_SectionIndex_Offset;
    static readonly int CreateMeshSection_Vertices_Offset;
    static readonly int CreateMeshSection_Vertices_ElementSize;
    static readonly int CreateMeshSection_Triangles_Offset;
    static readonly int CreateMeshSection_Triangles_ElementSize;
    static readonly int CreateMeshSection_Normals_Offset;
    static readonly int CreateMeshSection_Normals_ElementSize;
    static readonly int CreateMeshSection_UV0_Offset;
    static readonly int CreateMeshSection_UV0_ElementSize;
    static readonly int CreateMeshSection_VertexColors_Offset;
    static readonly int CreateMeshSection_VertexColors_ElementSize;
    static readonly int CreateMeshSection_Tangents_Offset;
    static readonly int CreateMeshSection_Tangents_ElementSize;
    static readonly int CreateMeshSection_bCreateCollision_Offset;
    
    [Obsolete("This function is deprecated for Blueprints because it uses the unsupported 'Color' type. Use new 'Create Mesh Section' function which uses LinearColor instead.")]
    public void CreateMeshSection(int sectionIndex, System.Collections.Generic.IList<System.DoubleNumerics.Vector3> vertices, System.Collections.Generic.IList<int> triangles, System.Collections.Generic.IList<System.DoubleNumerics.Vector3> normals, System.Collections.Generic.IList<System.DoubleNumerics.Vector2> uV0, System.Collections.Generic.IList<UnrealSharp.CoreUObject.Color> vertexColors, System.Collections.Generic.IList<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> tangents, bool bCreateCollision)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateMeshSection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateMeshSection_SectionIndex_Offset), 0, null, sectionIndex);
            IntPtr Vertices_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_Vertices_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Vertices_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, CreateMeshSection_Vertices_ElementSize);
            Vertices_Marshaler.ToNative(Vertices_NativeBuffer, 0, null, vertices);
            IntPtr Triangles_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_Triangles_Offset);
            UnrealArrayCopyMarshaler<int> Triangles_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, CreateMeshSection_Triangles_ElementSize);
            Triangles_Marshaler.ToNative(Triangles_NativeBuffer, 0, null, triangles);
            IntPtr Normals_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_Normals_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Normals_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, CreateMeshSection_Normals_ElementSize);
            Normals_Marshaler.ToNative(Normals_NativeBuffer, 0, null, normals);
            IntPtr UV0_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_UV0_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> UV0_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>(1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, CreateMeshSection_UV0_ElementSize);
            UV0_Marshaler.ToNative(UV0_NativeBuffer, 0, null, uV0);
            IntPtr VertexColors_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_VertexColors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Color> VertexColors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Color>(1, BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative, CreateMeshSection_VertexColors_ElementSize);
            VertexColors_Marshaler.ToNative(VertexColors_NativeBuffer, 0, null, vertexColors);
            IntPtr Tangents_NativeBuffer = IntPtr.Add(ParamsBuffer, CreateMeshSection_Tangents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent> Tangents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ProceduralMeshComponent.ProcMeshTangent>(1, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.ToNative, UnrealSharp.ProceduralMeshComponent.ProcMeshTangentMarshaler.FromNative, CreateMeshSection_Tangents_ElementSize);
            Tangents_Marshaler.ToNative(Tangents_NativeBuffer, 0, null, tangents);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateMeshSection_bCreateCollision_Offset), 0, null, bCreateCollision);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateMeshSection_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.ProceduralMeshComponent:ClearMeshSection
    static readonly IntPtr ClearMeshSection_NativeFunction;
    static readonly int ClearMeshSection_ParamsSize;
    static readonly int ClearMeshSection_SectionIndex_Offset;
    
    public void ClearMeshSection(int sectionIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearMeshSection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ClearMeshSection_SectionIndex_Offset), 0, null, sectionIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearMeshSection_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ProceduralMeshComponent.ProceduralMeshComponent:ClearCollisionConvexMeshes
    static readonly IntPtr ClearCollisionConvexMeshes_NativeFunction;
    
    public void ClearCollisionConvexMeshes()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearCollisionConvexMeshes_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/ProceduralMeshComponent.ProceduralMeshComponent:ClearAllMeshSections
    static readonly IntPtr ClearAllMeshSections_NativeFunction;
    
    public void ClearAllMeshSections()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearAllMeshSections_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/ProceduralMeshComponent.ProceduralMeshComponent:AddCollisionConvexMesh
    static readonly IntPtr AddCollisionConvexMesh_NativeFunction;
    static readonly int AddCollisionConvexMesh_ParamsSize;
    static readonly int AddCollisionConvexMesh_ConvexVerts_Offset;
    static readonly int AddCollisionConvexMesh_ConvexVerts_ElementSize;
    
    public void AddCollisionConvexMesh(System.Collections.Generic.IList<System.DoubleNumerics.Vector3> convexVerts)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddCollisionConvexMesh_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ConvexVerts_NativeBuffer = IntPtr.Add(ParamsBuffer, AddCollisionConvexMesh_ConvexVerts_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> ConvexVerts_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, AddCollisionConvexMesh_ConvexVerts_ElementSize);
            ConvexVerts_Marshaler.ToNative(ConvexVerts_NativeBuffer, 0, null, convexVerts);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddCollisionConvexMesh_NativeFunction, ParamsBuffer);
            
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(ConvexVerts_NativeBuffer, 0);
        }
    }
    
    
}
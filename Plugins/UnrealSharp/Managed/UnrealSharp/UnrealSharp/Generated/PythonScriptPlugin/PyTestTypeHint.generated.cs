// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.PythonScriptPlugin;

[UClass]
public partial class PyTestTypeHint : UnrealSharp.CoreUObject.Object
{
    
    static readonly IntPtr NativeClassPtr;
    static PyTestTypeHint()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PyTestTypeHint");
        
        BoolProp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BoolProp");
        IntProp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IntProp");
        FloatProp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FloatProp");
        EnumProp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EnumProp");
        StringProp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StringProp");
        StringProp_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "StringProp");
        NameProp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NameProp");
        TextProp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextProp");
        TextProp_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "TextProp");
        StructProp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StructProp");
        ObjectProp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ObjectProp");
        NameArrayProp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NameArrayProp");
        NameArrayProp_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "NameArrayProp");
        ObjectArrayProp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ObjectArrayProp");
        ObjectArrayProp_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ObjectArrayProp");
        
        GetStringConst_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStringConst");
        GetStringConst_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStringConst_NativeFunction);
        GetStringConst_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStringConst_NativeFunction, "ReturnValue");
        GetIntConst_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetIntConst");
        GetIntConst_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetIntConst_NativeFunction);
        GetIntConst_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIntConst_NativeFunction, "ReturnValue");
        CheckTupleReturnType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CheckTupleReturnType");
        CheckTupleReturnType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CheckTupleReturnType_NativeFunction);
        CheckTupleReturnType_InOutString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckTupleReturnType_NativeFunction, "InOutString");
        CheckTupleReturnType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckTupleReturnType_NativeFunction, "ReturnValue");
        CheckStructTypeHints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CheckStructTypeHints");
        CheckStructTypeHints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CheckStructTypeHints_NativeFunction);
        CheckStructTypeHints_Param1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckStructTypeHints_NativeFunction, "Param1");
        CheckStructTypeHints_Param2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckStructTypeHints_NativeFunction, "Param2");
        CheckStructTypeHints_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckStructTypeHints_NativeFunction, "ReturnValue");
        CheckStringTypeHints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CheckStringTypeHints");
        CheckStringTypeHints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CheckStringTypeHints_NativeFunction);
        CheckStringTypeHints_Param1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckStringTypeHints_NativeFunction, "Param1");
        CheckStringTypeHints_Param2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckStringTypeHints_NativeFunction, "Param2");
        CheckStringTypeHints_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckStringTypeHints_NativeFunction, "ReturnValue");
        CheckStaticFunction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CheckStaticFunction");
        CheckStaticFunction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CheckStaticFunction_NativeFunction);
        CheckStaticFunction_Param1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckStaticFunction_NativeFunction, "Param1");
        CheckStaticFunction_Param2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckStaticFunction_NativeFunction, "Param2");
        CheckStaticFunction_Param3_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckStaticFunction_NativeFunction, "Param3");
        CheckStaticFunction_Param4_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckStaticFunction_NativeFunction, "Param4");
        CheckStaticFunction_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckStaticFunction_NativeFunction, "ReturnValue");
        CheckObjectTypeHints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CheckObjectTypeHints");
        CheckObjectTypeHints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CheckObjectTypeHints_NativeFunction);
        CheckObjectTypeHints_Param1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckObjectTypeHints_NativeFunction, "Param1");
        CheckObjectTypeHints_Param4_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckObjectTypeHints_NativeFunction, "Param4");
        CheckObjectTypeHints_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckObjectTypeHints_NativeFunction, "ReturnValue");
        CheckNameTypeHints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CheckNameTypeHints");
        CheckNameTypeHints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CheckNameTypeHints_NativeFunction);
        CheckNameTypeHints_Param1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckNameTypeHints_NativeFunction, "Param1");
        CheckNameTypeHints_Param2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckNameTypeHints_NativeFunction, "Param2");
        CheckNameTypeHints_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckNameTypeHints_NativeFunction, "ReturnValue");
        CheckIntegerTypeHints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CheckIntegerTypeHints");
        CheckIntegerTypeHints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CheckIntegerTypeHints_NativeFunction);
        CheckIntegerTypeHints_Param1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckIntegerTypeHints_NativeFunction, "Param1");
        CheckIntegerTypeHints_Param2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckIntegerTypeHints_NativeFunction, "Param2");
        CheckIntegerTypeHints_Param3_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckIntegerTypeHints_NativeFunction, "Param3");
        CheckIntegerTypeHints_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckIntegerTypeHints_NativeFunction, "ReturnValue");
        CheckFloatTypeHints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CheckFloatTypeHints");
        CheckFloatTypeHints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CheckFloatTypeHints_NativeFunction);
        CheckFloatTypeHints_Param1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckFloatTypeHints_NativeFunction, "Param1");
        CheckFloatTypeHints_Param2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckFloatTypeHints_NativeFunction, "Param2");
        CheckFloatTypeHints_Param3_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckFloatTypeHints_NativeFunction, "Param3");
        CheckFloatTypeHints_Param4_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckFloatTypeHints_NativeFunction, "Param4");
        CheckFloatTypeHints_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckFloatTypeHints_NativeFunction, "ReturnValue");
        CheckEnumTypeHints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CheckEnumTypeHints");
        CheckEnumTypeHints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CheckEnumTypeHints_NativeFunction);
        CheckEnumTypeHints_Param1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckEnumTypeHints_NativeFunction, "Param1");
        CheckEnumTypeHints_Param2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckEnumTypeHints_NativeFunction, "Param2");
        CheckEnumTypeHints_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckEnumTypeHints_NativeFunction, "ReturnValue");
        CheckBoolTypeHints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CheckBoolTypeHints");
        CheckBoolTypeHints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CheckBoolTypeHints_NativeFunction);
        CheckBoolTypeHints_bParam1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckBoolTypeHints_NativeFunction, "bParam1");
        CheckBoolTypeHints_bParam2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckBoolTypeHints_NativeFunction, "bParam2");
        CheckBoolTypeHints_bParam3_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckBoolTypeHints_NativeFunction, "bParam3");
        CheckBoolTypeHints_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckBoolTypeHints_NativeFunction, "ReturnValue");
        
        
    }
    
    protected PyTestTypeHint(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/PythonScriptPlugin.PyTestTypeHint:BoolProp
    static readonly int BoolProp_Offset;
    
    public bool BoolProp
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, BoolProp_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, BoolProp_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/PythonScriptPlugin.PyTestTypeHint:IntProp
    static readonly int IntProp_Offset;
    
    public int IntProp
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, IntProp_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, IntProp_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/PythonScriptPlugin.PyTestTypeHint:FloatProp
    static readonly int FloatProp_Offset;
    
    public float FloatProp
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FloatProp_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, FloatProp_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/PythonScriptPlugin.PyTestTypeHint:EnumProp
    static readonly int EnumProp_Offset;
    
    public UnrealSharp.PythonScriptPlugin.EPyTestEnum EnumProp
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.PythonScriptPlugin.EPyTestEnum>.FromNative(IntPtr.Add(NativeObject, EnumProp_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.PythonScriptPlugin.EPyTestEnum>.ToNative(IntPtr.Add(NativeObject, EnumProp_Offset), 0, this, value);
        }
    }
    
    // StrProperty /Script/PythonScriptPlugin.PyTestTypeHint:StringProp
    static readonly int StringProp_Offset;
    static readonly IntPtr StringProp_NativeProperty;
    
    public string StringProp
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,StringProp_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,StringProp_Offset),0,this,value);
        }
    }
    
    // NameProperty /Script/PythonScriptPlugin.PyTestTypeHint:NameProp
    static readonly int NameProp_Offset;
    
    public Name NameProp
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, NameProp_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, NameProp_Offset), 0, this, value);
        }
    }
    
    // TextProperty /Script/PythonScriptPlugin.PyTestTypeHint:TextProp
    static readonly int TextProp_Offset;
    static readonly IntPtr TextProp_NativeProperty;
    TextMarshaller TextProp_Wrapper;
    
    public Text TextProp
    {
        get
        {
            if (TextProp_Wrapper == null)
            {
                TextProp_Wrapper  = new TextMarshaller(1);
            }
            return TextProp_Wrapper.FromNative(this.NativeObject + TextProp_Offset, 0, this);
        }
    }
    
    // StructProperty /Script/PythonScriptPlugin.PyTestTypeHint:StructProp
    static readonly int StructProp_Offset;
    
    public UnrealSharp.PythonScriptPlugin.PyTestStruct StructProp
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.PythonScriptPlugin.PyTestStructMarshaler.FromNative(IntPtr.Add(NativeObject, StructProp_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.PythonScriptPlugin.PyTestStructMarshaler.ToNative(IntPtr.Add(NativeObject, StructProp_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/PythonScriptPlugin.PyTestTypeHint:ObjectProp
    static readonly int ObjectProp_Offset;
    
    public UnrealSharp.PythonScriptPlugin.PyTestObject ObjectProp
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.PythonScriptPlugin.PyTestObject>.FromNative(IntPtr.Add(NativeObject, ObjectProp_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.PythonScriptPlugin.PyTestObject>.ToNative(IntPtr.Add(NativeObject, ObjectProp_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/PythonScriptPlugin.PyTestTypeHint:NameArrayProp
    static readonly int NameArrayProp_Offset;
    static readonly IntPtr NameArrayProp_NativeProperty;
    UnrealArrayReadWriteMarshaler<Name> NameArrayProp_Wrapper = null;
    
    public System.Collections.Generic.IList<Name> NameArrayProp
    {
        get
        {
            if(NameArrayProp_Wrapper == null)
            {
                NameArrayProp_Wrapper = new UnrealArrayReadWriteMarshaler<Name>(1, NameArrayProp_NativeProperty, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative);
            }
            
            return NameArrayProp_Wrapper.FromNative(IntPtr.Add(NativeObject,NameArrayProp_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/PythonScriptPlugin.PyTestTypeHint:ObjectArrayProp
    static readonly int ObjectArrayProp_Offset;
    static readonly IntPtr ObjectArrayProp_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.CoreUObject.Object> ObjectArrayProp_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> ObjectArrayProp
    {
        get
        {
            if(ObjectArrayProp_Wrapper == null)
            {
                ObjectArrayProp_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.CoreUObject.Object>(1, ObjectArrayProp_NativeProperty, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative);
            }
            
            return ObjectArrayProp_Wrapper.FromNative(IntPtr.Add(NativeObject,ObjectArrayProp_Offset),0,this);
        }
    }
    
    // Function /Script/PythonScriptPlugin.PyTestTypeHint:GetStringConst
    static readonly IntPtr GetStringConst_NativeFunction;
    static readonly int GetStringConst_ParamsSize;
    static readonly int GetStringConst_ReturnValue_Offset;
    
    public static string GetStringConst()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStringConst_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStringConst_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetStringConst_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/PythonScriptPlugin.PyTestTypeHint:GetIntConst
    static readonly IntPtr GetIntConst_NativeFunction;
    static readonly int GetIntConst_ParamsSize;
    static readonly int GetIntConst_ReturnValue_Offset;
    
    public static int GetIntConst()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetIntConst_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetIntConst_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetIntConst_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/PythonScriptPlugin.PyTestTypeHint:CheckTupleReturnType
    static readonly IntPtr CheckTupleReturnType_NativeFunction;
    static readonly int CheckTupleReturnType_ParamsSize;
    static readonly int CheckTupleReturnType_InOutString_Offset;
    static readonly int CheckTupleReturnType_ReturnValue_Offset;
    
    public static int CheckTupleReturnType(ref string inOutString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CheckTupleReturnType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InOutString_NativePtr = IntPtr.Add(ParamsBuffer,CheckTupleReturnType_InOutString_Offset);
            StringMarshaller.ToNative(InOutString_NativePtr,0,null,inOutString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CheckTupleReturnType_NativeFunction, ParamsBuffer);
            
            inOutString = StringMarshaller.FromNative(InOutString_NativePtr,0,null);
            StringMarshaller.DestructInstance(InOutString_NativePtr, 0);
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, CheckTupleReturnType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/PythonScriptPlugin.PyTestTypeHint:CheckStructTypeHints
    static readonly IntPtr CheckStructTypeHints_NativeFunction;
    static readonly int CheckStructTypeHints_ParamsSize;
    static readonly int CheckStructTypeHints_Param1_Offset;
    static readonly int CheckStructTypeHints_Param2_Offset;
    static readonly int CheckStructTypeHints_ReturnValue_Offset;
    
    public UnrealSharp.PythonScriptPlugin.PyTestStruct CheckStructTypeHints(UnrealSharp.PythonScriptPlugin.PyTestStruct param1)
    {
        return CheckStructTypeHints(param1, new PyTestStruct());
    }
    
    public UnrealSharp.PythonScriptPlugin.PyTestStruct CheckStructTypeHints(UnrealSharp.PythonScriptPlugin.PyTestStruct param1, UnrealSharp.PythonScriptPlugin.PyTestStruct param2)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CheckStructTypeHints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.PythonScriptPlugin.PyTestStructMarshaler.ToNative(IntPtr.Add(ParamsBuffer, CheckStructTypeHints_Param1_Offset), 0, null, param1);
            UnrealSharp.PythonScriptPlugin.PyTestStructMarshaler.ToNative(IntPtr.Add(ParamsBuffer, CheckStructTypeHints_Param2_Offset), 0, null, param2);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CheckStructTypeHints_NativeFunction, ParamsBuffer);
            
            UnrealSharp.PythonScriptPlugin.PyTestStruct returnValue;
            returnValue = UnrealSharp.PythonScriptPlugin.PyTestStructMarshaler.FromNative(IntPtr.Add(ParamsBuffer, CheckStructTypeHints_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/PythonScriptPlugin.PyTestTypeHint:CheckStringTypeHints
    static readonly IntPtr CheckStringTypeHints_NativeFunction;
    static readonly int CheckStringTypeHints_ParamsSize;
    static readonly int CheckStringTypeHints_Param1_Offset;
    static readonly int CheckStringTypeHints_Param2_Offset;
    static readonly int CheckStringTypeHints_ReturnValue_Offset;
    
    public string CheckStringTypeHints(string param1, string param2 = "Hi")
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CheckStringTypeHints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Param1_NativePtr = IntPtr.Add(ParamsBuffer,CheckStringTypeHints_Param1_Offset);
            StringMarshaller.ToNative(Param1_NativePtr,0,null,param1);
            IntPtr Param2_NativePtr = IntPtr.Add(ParamsBuffer,CheckStringTypeHints_Param2_Offset);
            StringMarshaller.ToNative(Param2_NativePtr,0,null,param2);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CheckStringTypeHints_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,CheckStringTypeHints_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(Param1_NativePtr, 0);
            StringMarshaller.DestructInstance(Param2_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/PythonScriptPlugin.PyTestTypeHint:CheckStaticFunction
    static readonly IntPtr CheckStaticFunction_NativeFunction;
    static readonly int CheckStaticFunction_ParamsSize;
    static readonly int CheckStaticFunction_Param1_Offset;
    static readonly int CheckStaticFunction_Param2_Offset;
    static readonly int CheckStaticFunction_Param3_Offset;
    static readonly int CheckStaticFunction_Param4_Offset;
    static readonly int CheckStaticFunction_ReturnValue_Offset;
    
    public static bool CheckStaticFunction(bool param1, int param2, double param3, string param4)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CheckStaticFunction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CheckStaticFunction_Param1_Offset), 0, null, param1);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CheckStaticFunction_Param2_Offset), 0, null, param2);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, CheckStaticFunction_Param3_Offset), 0, null, param3);
            IntPtr Param4_NativePtr = IntPtr.Add(ParamsBuffer,CheckStaticFunction_Param4_Offset);
            StringMarshaller.ToNative(Param4_NativePtr,0,null,param4);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CheckStaticFunction_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CheckStaticFunction_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Param4_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/PythonScriptPlugin.PyTestTypeHint:CheckObjectTypeHints
    static readonly IntPtr CheckObjectTypeHints_NativeFunction;
    static readonly int CheckObjectTypeHints_ParamsSize;
    static readonly int CheckObjectTypeHints_Param1_Offset;
    static readonly int CheckObjectTypeHints_Param4_Offset;
    static readonly int CheckObjectTypeHints_ReturnValue_Offset;
    
    public UnrealSharp.PythonScriptPlugin.PyTestObject CheckObjectTypeHints(UnrealSharp.PythonScriptPlugin.PyTestObject param1, UnrealSharp.PythonScriptPlugin.PyTestObject param4 = default(UnrealSharp.PythonScriptPlugin.PyTestObject))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CheckObjectTypeHints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.PythonScriptPlugin.PyTestObject>.ToNative(IntPtr.Add(ParamsBuffer, CheckObjectTypeHints_Param1_Offset), 0, null, param1);
            ObjectMarshaller<UnrealSharp.PythonScriptPlugin.PyTestObject>.ToNative(IntPtr.Add(ParamsBuffer, CheckObjectTypeHints_Param4_Offset), 0, null, param4);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CheckObjectTypeHints_NativeFunction, ParamsBuffer);
            
            UnrealSharp.PythonScriptPlugin.PyTestObject returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.PythonScriptPlugin.PyTestObject>.FromNative(IntPtr.Add(ParamsBuffer, CheckObjectTypeHints_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/PythonScriptPlugin.PyTestTypeHint:CheckNameTypeHints
    static readonly IntPtr CheckNameTypeHints_NativeFunction;
    static readonly int CheckNameTypeHints_ParamsSize;
    static readonly int CheckNameTypeHints_Param1_Offset;
    static readonly int CheckNameTypeHints_Param2_Offset;
    static readonly int CheckNameTypeHints_ReturnValue_Offset;
    
    public Name CheckNameTypeHints(Name param1)
    {
        Name param2 = new Name("Hi");
        return CheckNameTypeHints(param1, param2);
    }
    
    public Name CheckNameTypeHints(Name param1, Name param2)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CheckNameTypeHints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, CheckNameTypeHints_Param1_Offset), 0, null, param1);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, CheckNameTypeHints_Param2_Offset), 0, null, param2);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CheckNameTypeHints_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, CheckNameTypeHints_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/PythonScriptPlugin.PyTestTypeHint:CheckIntegerTypeHints
    static readonly IntPtr CheckIntegerTypeHints_NativeFunction;
    static readonly int CheckIntegerTypeHints_ParamsSize;
    static readonly int CheckIntegerTypeHints_Param1_Offset;
    static readonly int CheckIntegerTypeHints_Param2_Offset;
    static readonly int CheckIntegerTypeHints_Param3_Offset;
    static readonly int CheckIntegerTypeHints_ReturnValue_Offset;
    
    public int CheckIntegerTypeHints(byte param1, int param2 = 4, long param3 = 5)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CheckIntegerTypeHints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, CheckIntegerTypeHints_Param1_Offset), 0, null, param1);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CheckIntegerTypeHints_Param2_Offset), 0, null, param2);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, CheckIntegerTypeHints_Param3_Offset), 0, null, param3);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CheckIntegerTypeHints_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, CheckIntegerTypeHints_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/PythonScriptPlugin.PyTestTypeHint:CheckFloatTypeHints
    static readonly IntPtr CheckFloatTypeHints_NativeFunction;
    static readonly int CheckFloatTypeHints_ParamsSize;
    static readonly int CheckFloatTypeHints_Param1_Offset;
    static readonly int CheckFloatTypeHints_Param2_Offset;
    static readonly int CheckFloatTypeHints_Param3_Offset;
    static readonly int CheckFloatTypeHints_Param4_Offset;
    static readonly int CheckFloatTypeHints_ReturnValue_Offset;
    
    public double CheckFloatTypeHints(float param1, double param2, float param3 = -3.300000f, double param4 = 4.400000)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CheckFloatTypeHints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CheckFloatTypeHints_Param1_Offset), 0, null, param1);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, CheckFloatTypeHints_Param2_Offset), 0, null, param2);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CheckFloatTypeHints_Param3_Offset), 0, null, param3);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, CheckFloatTypeHints_Param4_Offset), 0, null, param4);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CheckFloatTypeHints_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, CheckFloatTypeHints_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/PythonScriptPlugin.PyTestTypeHint:CheckEnumTypeHints
    static readonly IntPtr CheckEnumTypeHints_NativeFunction;
    static readonly int CheckEnumTypeHints_ParamsSize;
    static readonly int CheckEnumTypeHints_Param1_Offset;
    static readonly int CheckEnumTypeHints_Param2_Offset;
    static readonly int CheckEnumTypeHints_ReturnValue_Offset;
    
    public UnrealSharp.PythonScriptPlugin.EPyTestEnum CheckEnumTypeHints(UnrealSharp.PythonScriptPlugin.EPyTestEnum param1, UnrealSharp.PythonScriptPlugin.EPyTestEnum param2 = UnrealSharp.PythonScriptPlugin.EPyTestEnum.One)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CheckEnumTypeHints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.PythonScriptPlugin.EPyTestEnum>.ToNative(IntPtr.Add(ParamsBuffer, CheckEnumTypeHints_Param1_Offset), 0, null, param1);
            BlittableMarshaller<UnrealSharp.PythonScriptPlugin.EPyTestEnum>.ToNative(IntPtr.Add(ParamsBuffer, CheckEnumTypeHints_Param2_Offset), 0, null, param2);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CheckEnumTypeHints_NativeFunction, ParamsBuffer);
            
            UnrealSharp.PythonScriptPlugin.EPyTestEnum returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.PythonScriptPlugin.EPyTestEnum>.FromNative(IntPtr.Add(ParamsBuffer, CheckEnumTypeHints_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/PythonScriptPlugin.PyTestTypeHint:CheckBoolTypeHints
    static readonly IntPtr CheckBoolTypeHints_NativeFunction;
    static readonly int CheckBoolTypeHints_ParamsSize;
    static readonly int CheckBoolTypeHints_bParam1_Offset;
    static readonly int CheckBoolTypeHints_bParam2_Offset;
    static readonly int CheckBoolTypeHints_bParam3_Offset;
    static readonly int CheckBoolTypeHints_ReturnValue_Offset;
    
    public bool CheckBoolTypeHints(bool bParam1, bool bParam2 = true, bool bParam3 = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CheckBoolTypeHints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CheckBoolTypeHints_bParam1_Offset), 0, null, bParam1);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CheckBoolTypeHints_bParam2_Offset), 0, null, bParam2);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CheckBoolTypeHints_bParam3_Offset), 0, null, bParam3);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CheckBoolTypeHints_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CheckBoolTypeHints_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
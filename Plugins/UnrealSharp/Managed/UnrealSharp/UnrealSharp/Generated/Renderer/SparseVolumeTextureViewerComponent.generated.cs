// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Renderer;

[UClass]
public partial class SparseVolumeTextureViewerComponent : UnrealSharp.Engine.PrimitiveComponent
{
    
    static SparseVolumeTextureViewerComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SparseVolumeTextureViewerComponent");
        
        SparseVolumeTexturePreview_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SparseVolumeTexturePreview");
        bAnimate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAnimate");
        bAnimate_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAnimate");
        bReversePlayback_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReversePlayback");
        bReversePlayback_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bReversePlayback");
        bBlockingStreamingRequests_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bBlockingStreamingRequests");
        bBlockingStreamingRequests_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bBlockingStreamingRequests");
        AnimationFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AnimationFrame");
        FrameRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FrameRate");
        PreviewAttribute_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PreviewAttribute");
        MipLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MipLevel");
        Extinction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Extinction");
        
        
        
    }
    
    protected SparseVolumeTextureViewerComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Renderer.SparseVolumeTextureViewerComponent:SparseVolumeTexturePreview
    static readonly int SparseVolumeTexturePreview_Offset;
    
    public UnrealSharp.Engine.SparseVolumeTexture SparseVolumeTexturePreview
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SparseVolumeTexture>.FromNative(IntPtr.Add(NativeObject, SparseVolumeTexturePreview_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.SparseVolumeTexture>.ToNative(IntPtr.Add(NativeObject, SparseVolumeTexturePreview_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Renderer.SparseVolumeTextureViewerComponent:bAnimate
    static readonly int bAnimate_Offset;
    static readonly IntPtr bAnimate_NativeProperty;
    
    public bool bAnimate
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAnimate_NativeProperty, bAnimate_Offset);
        }
    }
    
    // BoolProperty /Script/Renderer.SparseVolumeTextureViewerComponent:bReversePlayback
    static readonly int bReversePlayback_Offset;
    static readonly IntPtr bReversePlayback_NativeProperty;
    
    public bool bReversePlayback
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bReversePlayback_NativeProperty, bReversePlayback_Offset);
        }
    }
    
    // BoolProperty /Script/Renderer.SparseVolumeTextureViewerComponent:bBlockingStreamingRequests
    static readonly int bBlockingStreamingRequests_Offset;
    static readonly IntPtr bBlockingStreamingRequests_NativeProperty;
    
    public bool bBlockingStreamingRequests
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bBlockingStreamingRequests_NativeProperty, bBlockingStreamingRequests_Offset);
        }
    }
    
    // FloatProperty /Script/Renderer.SparseVolumeTextureViewerComponent:AnimationFrame
    static readonly int AnimationFrame_Offset;
    
    public float AnimationFrame
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AnimationFrame_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AnimationFrame_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Renderer.SparseVolumeTextureViewerComponent:FrameRate
    static readonly int FrameRate_Offset;
    
    public float FrameRate
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FrameRate_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, FrameRate_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Renderer.SparseVolumeTextureViewerComponent:PreviewAttribute
    static readonly int PreviewAttribute_Offset;
    
    public UnrealSharp.Renderer.ESparseVolumeTexturePreviewAttribute PreviewAttribute
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Renderer.ESparseVolumeTexturePreviewAttribute>.FromNative(IntPtr.Add(NativeObject, PreviewAttribute_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Renderer.ESparseVolumeTexturePreviewAttribute>.ToNative(IntPtr.Add(NativeObject, PreviewAttribute_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Renderer.SparseVolumeTextureViewerComponent:MipLevel
    static readonly int MipLevel_Offset;
    
    public int MipLevel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MipLevel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MipLevel_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Renderer.SparseVolumeTextureViewerComponent:Extinction
    static readonly int Extinction_Offset;
    
    public float Extinction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Extinction_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Extinction_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.RigVM;

[UClass]
abstract public partial class RigVMHost : UnrealSharp.CoreUObject.Object
{
    
    static readonly IntPtr NativeClassPtr;
    static RigVMHost()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RigVMHost");
        
        
        SupportsEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SupportsEvent");
        SupportsEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SupportsEvent_NativeFunction);
        SupportsEvent_InEventName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SupportsEvent_NativeFunction, "InEventName");
        SupportsEvent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SupportsEvent_NativeFunction, "ReturnValue");
        SetVariableFromString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVariableFromString");
        SetVariableFromString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVariableFromString_NativeFunction);
        SetVariableFromString_InVariableName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVariableFromString_NativeFunction, "InVariableName");
        SetVariableFromString_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVariableFromString_NativeFunction, "InValue");
        SetVariableFromString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVariableFromString_NativeFunction, "ReturnValue");
        SetFramesPerSecond_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFramesPerSecond");
        SetFramesPerSecond_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFramesPerSecond_NativeFunction);
        SetFramesPerSecond_InFramesPerSecond_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFramesPerSecond_NativeFunction, "InFramesPerSecond");
        SetDeltaTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDeltaTime");
        SetDeltaTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDeltaTime_NativeFunction);
        SetDeltaTime_InDeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDeltaTime_NativeFunction, "InDeltaTime");
        SetAbsoluteTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAbsoluteTime");
        SetAbsoluteTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAbsoluteTime_NativeFunction);
        SetAbsoluteTime_InAbsoluteTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAbsoluteTime_NativeFunction, "InAbsoluteTime");
        SetAbsoluteTime_InSetDeltaTimeZero_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAbsoluteTime_NativeFunction, "InSetDeltaTimeZero");
        SetAbsoluteAndDeltaTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAbsoluteAndDeltaTime");
        SetAbsoluteAndDeltaTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAbsoluteAndDeltaTime_NativeFunction);
        SetAbsoluteAndDeltaTime_InAbsoluteTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAbsoluteAndDeltaTime_NativeFunction, "InAbsoluteTime");
        SetAbsoluteAndDeltaTime_InDeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAbsoluteAndDeltaTime_NativeFunction, "InDeltaTime");
        RequestRunOnceEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RequestRunOnceEvent");
        RequestRunOnceEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RequestRunOnceEvent_NativeFunction);
        RequestRunOnceEvent_InEventName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RequestRunOnceEvent_NativeFunction, "InEventName");
        RequestRunOnceEvent_InEventIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RequestRunOnceEvent_NativeFunction, "InEventIndex");
        RequestInit_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RequestInit");
        RemoveRunOnceEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveRunOnceEvent");
        RemoveRunOnceEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveRunOnceEvent_NativeFunction);
        RemoveRunOnceEvent_InEventName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveRunOnceEvent_NativeFunction, "InEventName");
        RemoveRunOnceEvent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveRunOnceEvent_NativeFunction, "ReturnValue");
        GetVM_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVM");
        GetVM_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVM_NativeFunction);
        GetVM_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVM_NativeFunction, "ReturnValue");
        GetVariableType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVariableType");
        GetVariableType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVariableType_NativeFunction);
        GetVariableType_InVariableName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVariableType_NativeFunction, "InVariableName");
        GetVariableType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVariableType_NativeFunction, "ReturnValue");
        GetVariableAsString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVariableAsString");
        GetVariableAsString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVariableAsString_NativeFunction);
        GetVariableAsString_InVariableName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVariableAsString_NativeFunction, "InVariableName");
        GetVariableAsString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVariableAsString_NativeFunction, "ReturnValue");
        GetSupportedEvents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSupportedEvents");
        GetSupportedEvents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSupportedEvents_NativeFunction);
        GetSupportedEvents_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSupportedEvents_NativeFunction, "ReturnValue");
        GetSupportedEvents_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSupportedEvents_NativeFunction, "ReturnValue");
        GetScriptAccessibleVariables_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetScriptAccessibleVariables");
        GetScriptAccessibleVariables_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetScriptAccessibleVariables_NativeFunction);
        GetScriptAccessibleVariables_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScriptAccessibleVariables_NativeFunction, "ReturnValue");
        GetScriptAccessibleVariables_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetScriptAccessibleVariables_NativeFunction, "ReturnValue");
        GetExtendedExecuteContext_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetExtendedExecuteContext");
        GetExtendedExecuteContext_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetExtendedExecuteContext_NativeFunction);
        GetExtendedExecuteContext_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetExtendedExecuteContext_NativeFunction, "ReturnValue");
        GetDeltaTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDeltaTime");
        GetDeltaTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDeltaTime_NativeFunction);
        GetDeltaTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDeltaTime_NativeFunction, "ReturnValue");
        GetCurrentFramesPerSecond_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentFramesPerSecond");
        GetCurrentFramesPerSecond_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentFramesPerSecond_NativeFunction);
        GetCurrentFramesPerSecond_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentFramesPerSecond_NativeFunction, "ReturnValue");
        GetAbsoluteTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAbsoluteTime");
        GetAbsoluteTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAbsoluteTime_NativeFunction);
        GetAbsoluteTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAbsoluteTime_NativeFunction, "ReturnValue");
        FindRigVMHosts_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindRigVMHosts");
        FindRigVMHosts_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindRigVMHosts_NativeFunction);
        FindRigVMHosts_Outer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRigVMHosts_NativeFunction, "Outer");
        FindRigVMHosts_OptionalClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRigVMHosts_NativeFunction, "OptionalClass");
        FindRigVMHosts_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRigVMHosts_NativeFunction, "ReturnValue");
        FindRigVMHosts_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindRigVMHosts_NativeFunction, "ReturnValue");
        ExecuteEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ExecuteEvent");
        ExecuteEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ExecuteEvent_NativeFunction);
        ExecuteEvent_InEventName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExecuteEvent_NativeFunction, "InEventName");
        ExecuteEvent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExecuteEvent_NativeFunction, "ReturnValue");
        Execute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Execute");
        Execute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Execute_NativeFunction);
        Execute_InEventName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Execute_NativeFunction, "InEventName");
        Execute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Execute_NativeFunction, "ReturnValue");
        CanExecute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanExecute");
        CanExecute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanExecute_NativeFunction);
        CanExecute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanExecute_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RigVMHost(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/RigVM.RigVMHost:SupportsEvent
    static readonly IntPtr SupportsEvent_NativeFunction;
    static readonly int SupportsEvent_ParamsSize;
    static readonly int SupportsEvent_InEventName_Offset;
    static readonly int SupportsEvent_ReturnValue_Offset;
    
    public bool SupportsEvent(Name inEventName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SupportsEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SupportsEvent_InEventName_Offset), 0, null, inEventName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SupportsEvent_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SupportsEvent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:SetVariableFromString
    static readonly IntPtr SetVariableFromString_NativeFunction;
    static readonly int SetVariableFromString_ParamsSize;
    static readonly int SetVariableFromString_InVariableName_Offset;
    static readonly int SetVariableFromString_InValue_Offset;
    static readonly int SetVariableFromString_ReturnValue_Offset;
    
    public bool SetVariableFromString(Name inVariableName, string inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVariableFromString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetVariableFromString_InVariableName_Offset), 0, null, inVariableName);
            IntPtr InValue_NativePtr = IntPtr.Add(ParamsBuffer,SetVariableFromString_InValue_Offset);
            StringMarshaller.ToNative(InValue_NativePtr,0,null,inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVariableFromString_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetVariableFromString_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:SetFramesPerSecond
    static readonly IntPtr SetFramesPerSecond_NativeFunction;
    static readonly int SetFramesPerSecond_ParamsSize;
    static readonly int SetFramesPerSecond_InFramesPerSecond_Offset;
    
    public void SetFramesPerSecond(float inFramesPerSecond)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFramesPerSecond_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFramesPerSecond_InFramesPerSecond_Offset), 0, null, inFramesPerSecond);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFramesPerSecond_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/RigVM.RigVMHost:SetDeltaTime
    static readonly IntPtr SetDeltaTime_NativeFunction;
    static readonly int SetDeltaTime_ParamsSize;
    static readonly int SetDeltaTime_InDeltaTime_Offset;
    
    public void SetDeltaTime(float inDeltaTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDeltaTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDeltaTime_InDeltaTime_Offset), 0, null, inDeltaTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDeltaTime_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/RigVM.RigVMHost:SetAbsoluteTime
    static readonly IntPtr SetAbsoluteTime_NativeFunction;
    static readonly int SetAbsoluteTime_ParamsSize;
    static readonly int SetAbsoluteTime_InAbsoluteTime_Offset;
    static readonly int SetAbsoluteTime_InSetDeltaTimeZero_Offset;
    
    public void SetAbsoluteTime(float inAbsoluteTime, bool inSetDeltaTimeZero = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAbsoluteTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAbsoluteTime_InAbsoluteTime_Offset), 0, null, inAbsoluteTime);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAbsoluteTime_InSetDeltaTimeZero_Offset), 0, null, inSetDeltaTimeZero);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAbsoluteTime_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/RigVM.RigVMHost:SetAbsoluteAndDeltaTime
    static readonly IntPtr SetAbsoluteAndDeltaTime_NativeFunction;
    static readonly int SetAbsoluteAndDeltaTime_ParamsSize;
    static readonly int SetAbsoluteAndDeltaTime_InAbsoluteTime_Offset;
    static readonly int SetAbsoluteAndDeltaTime_InDeltaTime_Offset;
    
    public void SetAbsoluteAndDeltaTime(float inAbsoluteTime, float inDeltaTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAbsoluteAndDeltaTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAbsoluteAndDeltaTime_InAbsoluteTime_Offset), 0, null, inAbsoluteTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAbsoluteAndDeltaTime_InDeltaTime_Offset), 0, null, inDeltaTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAbsoluteAndDeltaTime_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/RigVM.RigVMHost:RequestRunOnceEvent
    static readonly IntPtr RequestRunOnceEvent_NativeFunction;
    static readonly int RequestRunOnceEvent_ParamsSize;
    static readonly int RequestRunOnceEvent_InEventName_Offset;
    static readonly int RequestRunOnceEvent_InEventIndex_Offset;
    
    public void RequestRunOnceEvent(Name inEventName, int inEventIndex = -1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RequestRunOnceEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RequestRunOnceEvent_InEventName_Offset), 0, null, inEventName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RequestRunOnceEvent_InEventIndex_Offset), 0, null, inEventIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RequestRunOnceEvent_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/RigVM.RigVMHost:RequestInit
    static readonly IntPtr RequestInit_NativeFunction;
    
    public void RequestInit()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RequestInit_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/RigVM.RigVMHost:RemoveRunOnceEvent
    static readonly IntPtr RemoveRunOnceEvent_NativeFunction;
    static readonly int RemoveRunOnceEvent_ParamsSize;
    static readonly int RemoveRunOnceEvent_InEventName_Offset;
    static readonly int RemoveRunOnceEvent_ReturnValue_Offset;
    
    public bool RemoveRunOnceEvent(Name inEventName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveRunOnceEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveRunOnceEvent_InEventName_Offset), 0, null, inEventName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveRunOnceEvent_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveRunOnceEvent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:GetVM
    static readonly IntPtr GetVM_NativeFunction;
    static readonly int GetVM_ParamsSize;
    static readonly int GetVM_ReturnValue_Offset;
    
    public UnrealSharp.RigVM.RigVM GetVM()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVM_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVM_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVM.RigVM returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVM.RigVM>.FromNative(IntPtr.Add(ParamsBuffer, GetVM_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:GetVariableType
    static readonly IntPtr GetVariableType_NativeFunction;
    static readonly int GetVariableType_ParamsSize;
    static readonly int GetVariableType_InVariableName_Offset;
    static readonly int GetVariableType_ReturnValue_Offset;
    
    public Name GetVariableType(Name inVariableName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVariableType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetVariableType_InVariableName_Offset), 0, null, inVariableName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVariableType_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetVariableType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:GetVariableAsString
    static readonly IntPtr GetVariableAsString_NativeFunction;
    static readonly int GetVariableAsString_ParamsSize;
    static readonly int GetVariableAsString_InVariableName_Offset;
    static readonly int GetVariableAsString_ReturnValue_Offset;
    
    public string GetVariableAsString(Name inVariableName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVariableAsString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetVariableAsString_InVariableName_Offset), 0, null, inVariableName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVariableAsString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetVariableAsString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:GetSupportedEvents
    static readonly IntPtr GetSupportedEvents_NativeFunction;
    static readonly int GetSupportedEvents_ParamsSize;
    static readonly int GetSupportedEvents_ReturnValue_Offset;
    static readonly int GetSupportedEvents_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<Name> GetSupportedEvents()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSupportedEvents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSupportedEvents_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSupportedEvents_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetSupportedEvents_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:GetScriptAccessibleVariables
    static readonly IntPtr GetScriptAccessibleVariables_NativeFunction;
    static readonly int GetScriptAccessibleVariables_ParamsSize;
    static readonly int GetScriptAccessibleVariables_ReturnValue_Offset;
    static readonly int GetScriptAccessibleVariables_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<Name> GetScriptAccessibleVariables()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetScriptAccessibleVariables_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetScriptAccessibleVariables_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetScriptAccessibleVariables_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetScriptAccessibleVariables_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:GetExtendedExecuteContext
    static readonly IntPtr GetExtendedExecuteContext_NativeFunction;
    static readonly int GetExtendedExecuteContext_ParamsSize;
    static readonly int GetExtendedExecuteContext_ReturnValue_Offset;
    
    public UnrealSharp.RigVM.RigVMExtendedExecuteContext GetExtendedExecuteContext()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetExtendedExecuteContext_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetExtendedExecuteContext_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVM.RigVMExtendedExecuteContext returnValue;
            returnValue = UnrealSharp.RigVM.RigVMExtendedExecuteContextMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetExtendedExecuteContext_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:GetDeltaTime
    static readonly IntPtr GetDeltaTime_NativeFunction;
    static readonly int GetDeltaTime_ParamsSize;
    static readonly int GetDeltaTime_ReturnValue_Offset;
    
    public float GetDeltaTime()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDeltaTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDeltaTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDeltaTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:GetCurrentFramesPerSecond
    static readonly IntPtr GetCurrentFramesPerSecond_NativeFunction;
    static readonly int GetCurrentFramesPerSecond_ParamsSize;
    static readonly int GetCurrentFramesPerSecond_ReturnValue_Offset;
    
    public float GetCurrentFramesPerSecond()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentFramesPerSecond_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentFramesPerSecond_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentFramesPerSecond_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:GetAbsoluteTime
    static readonly IntPtr GetAbsoluteTime_NativeFunction;
    static readonly int GetAbsoluteTime_ParamsSize;
    static readonly int GetAbsoluteTime_ReturnValue_Offset;
    
    public float GetAbsoluteTime()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAbsoluteTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAbsoluteTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetAbsoluteTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:FindRigVMHosts
    static readonly IntPtr FindRigVMHosts_NativeFunction;
    static readonly int FindRigVMHosts_ParamsSize;
    static readonly int FindRigVMHosts_Outer_Offset;
    static readonly int FindRigVMHosts_OptionalClass_Offset;
    static readonly int FindRigVMHosts_ReturnValue_Offset;
    static readonly int FindRigVMHosts_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.RigVM.RigVMHost> FindRigVMHosts(UnrealSharp.CoreUObject.Object outer, SubclassOf<UnrealSharp.RigVM.RigVMHost> optionalClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindRigVMHosts_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, FindRigVMHosts_Outer_Offset), 0, null, outer);
            SubclassOfMarshaller<UnrealSharp.RigVM.RigVMHost>.ToNative(IntPtr.Add(ParamsBuffer, FindRigVMHosts_OptionalClass_Offset), 0, null, optionalClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindRigVMHosts_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVM.RigVMHost> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindRigVMHosts_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVM.RigVMHost> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVM.RigVMHost> (1, ObjectMarshaller<UnrealSharp.RigVM.RigVMHost>.ToNative, ObjectMarshaller<UnrealSharp.RigVM.RigVMHost>.FromNative, FindRigVMHosts_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVM.RigVMHost>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:ExecuteEvent
    static readonly IntPtr ExecuteEvent_NativeFunction;
    static readonly int ExecuteEvent_ParamsSize;
    static readonly int ExecuteEvent_InEventName_Offset;
    static readonly int ExecuteEvent_ReturnValue_Offset;
    
    public bool ExecuteEvent(Name inEventName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ExecuteEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ExecuteEvent_InEventName_Offset), 0, null, inEventName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ExecuteEvent_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ExecuteEvent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:Execute
    static readonly IntPtr Execute_NativeFunction;
    static readonly int Execute_ParamsSize;
    static readonly int Execute_InEventName_Offset;
    static readonly int Execute_ReturnValue_Offset;
    
    public bool Execute(Name inEventName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Execute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, Execute_InEventName_Offset), 0, null, inEventName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Execute_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Execute_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVM.RigVMHost:CanExecute
    static readonly IntPtr CanExecute_NativeFunction;
    static readonly int CanExecute_ParamsSize;
    static readonly int CanExecute_ReturnValue_Offset;
    
    public bool CanExecute()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanExecute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanExecute_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanExecute_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
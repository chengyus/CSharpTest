// This file is automatically generated
using UnrealSharp.RigVMDeveloper;
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.RigVMDeveloper;

[UClass]
public partial class RigVMBlueprint : UnrealSharp.Engine.Blueprint, IRigVMClientHost
{
    
    static RigVMBlueprint()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RigVMBlueprint");
        
        VMCompileSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VMCompileSettings");
        
        SuspendNotifications_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SuspendNotifications");
        SuspendNotifications_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SuspendNotifications_NativeFunction);
        SuspendNotifications_bSuspendNotifs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuspendNotifications_NativeFunction, "bSuspendNotifs");
        SetAutoVMRecompile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAutoVMRecompile");
        SetAutoVMRecompile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAutoVMRecompile_NativeFunction);
        SetAutoVMRecompile_bAutoRecompile_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAutoVMRecompile_NativeFunction, "bAutoRecompile");
        RequestRigVMInit_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RequestRigVMInit");
        RequestAutoVMRecompilation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RequestAutoVMRecompilation");
        RenameMemberVariable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RenameMemberVariable");
        RenameMemberVariable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RenameMemberVariable_NativeFunction);
        RenameMemberVariable_InOldName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameMemberVariable_NativeFunction, "InOldName");
        RenameMemberVariable_InNewName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameMemberVariable_NativeFunction, "InNewName");
        RenameMemberVariable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameMemberVariable_NativeFunction, "ReturnValue");
        RemoveModel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveModel");
        RemoveModel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveModel_NativeFunction);
        RemoveModel_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveModel_NativeFunction, "InName");
        RemoveModel_bSetupUndoRedo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveModel_NativeFunction, "bSetupUndoRedo");
        RemoveModel_bPrintPythonCommand_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveModel_NativeFunction, "bPrintPythonCommand");
        RemoveModel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveModel_NativeFunction, "ReturnValue");
        RemoveMemberVariable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveMemberVariable");
        RemoveMemberVariable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveMemberVariable_NativeFunction);
        RemoveMemberVariable_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMemberVariable_NativeFunction, "InName");
        RemoveMemberVariable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMemberVariable_NativeFunction, "ReturnValue");
        RecompileVMIfRequired_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RecompileVMIfRequired");
        RecompileVM_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RecompileVM");
        GetRigVMHostClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRigVMHostClass");
        GetRigVMHostClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRigVMHostClass_NativeFunction);
        GetRigVMHostClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRigVMHostClass_NativeFunction, "ReturnValue");
        GetOrCreateController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOrCreateController");
        GetOrCreateController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOrCreateController_NativeFunction);
        GetOrCreateController_InGraph_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOrCreateController_NativeFunction, "InGraph");
        GetOrCreateController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOrCreateController_NativeFunction, "ReturnValue");
        GetModel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetModel");
        GetModel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetModel_NativeFunction);
        GetModel_InEdGraph_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetModel_NativeFunction, "InEdGraph");
        GetModel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetModel_NativeFunction, "ReturnValue");
        GetMemberVariables_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMemberVariables");
        GetMemberVariables_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMemberVariables_NativeFunction);
        GetMemberVariables_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMemberVariables_NativeFunction, "ReturnValue");
        GetMemberVariables_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMemberVariables_NativeFunction, "ReturnValue");
        GetLocalFunctionLibrary_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalFunctionLibrary");
        GetLocalFunctionLibrary_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalFunctionLibrary_NativeFunction);
        GetLocalFunctionLibrary_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalFunctionLibrary_NativeFunction, "ReturnValue");
        GetFocusedModel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFocusedModel");
        GetFocusedModel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFocusedModel_NativeFunction);
        GetFocusedModel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFocusedModel_NativeFunction, "ReturnValue");
        GetDefaultModel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultModel");
        GetDefaultModel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultModel_NativeFunction);
        GetDefaultModel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultModel_NativeFunction, "ReturnValue");
        GetControllerByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControllerByName");
        GetControllerByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControllerByName_NativeFunction);
        GetControllerByName_InGraphName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerByName_NativeFunction, "InGraphName");
        GetControllerByName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerByName_NativeFunction, "ReturnValue");
        GetController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetController");
        GetController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetController_NativeFunction);
        GetController_InGraph_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetController_NativeFunction, "InGraph");
        GetController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetController_NativeFunction, "ReturnValue");
        GetAvailableRigVMStructs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAvailableRigVMStructs");
        GetAvailableRigVMStructs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAvailableRigVMStructs_NativeFunction);
        GetAvailableRigVMStructs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAvailableRigVMStructs_NativeFunction, "ReturnValue");
        GetAvailableRigVMStructs_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAvailableRigVMStructs_NativeFunction, "ReturnValue");
        GetAutoVMRecompile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAutoVMRecompile");
        GetAutoVMRecompile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAutoVMRecompile_NativeFunction);
        GetAutoVMRecompile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAutoVMRecompile_NativeFunction, "ReturnValue");
        GetAllModels_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllModels");
        GetAllModels_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllModels_NativeFunction);
        GetAllModels_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllModels_NativeFunction, "ReturnValue");
        GetAllModels_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllModels_NativeFunction, "ReturnValue");
        CreateRigVMHost_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateRigVMHost");
        CreateRigVMHost_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateRigVMHost_NativeFunction);
        CreateRigVMHost_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRigVMHost_NativeFunction, "ReturnValue");
        ChangeMemberVariableType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ChangeMemberVariableType");
        ChangeMemberVariableType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ChangeMemberVariableType_NativeFunction);
        ChangeMemberVariableType_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ChangeMemberVariableType_NativeFunction, "InName");
        ChangeMemberVariableType_InCPPType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ChangeMemberVariableType_NativeFunction, "InCPPType");
        ChangeMemberVariableType_bIsPublic_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ChangeMemberVariableType_NativeFunction, "bIsPublic");
        ChangeMemberVariableType_bIsReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ChangeMemberVariableType_NativeFunction, "bIsReadOnly");
        ChangeMemberVariableType_InDefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ChangeMemberVariableType_NativeFunction, "InDefaultValue");
        ChangeMemberVariableType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ChangeMemberVariableType_NativeFunction, "ReturnValue");
        AddModel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddModel");
        AddModel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddModel_NativeFunction);
        AddModel_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddModel_NativeFunction, "InName");
        AddModel_bSetupUndoRedo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddModel_NativeFunction, "bSetupUndoRedo");
        AddModel_bPrintPythonCommand_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddModel_NativeFunction, "bPrintPythonCommand");
        AddModel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddModel_NativeFunction, "ReturnValue");
        AddMemberVariable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddMemberVariable");
        AddMemberVariable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddMemberVariable_NativeFunction);
        AddMemberVariable_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMemberVariable_NativeFunction, "InName");
        AddMemberVariable_InCPPType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMemberVariable_NativeFunction, "InCPPType");
        AddMemberVariable_bIsPublic_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMemberVariable_NativeFunction, "bIsPublic");
        AddMemberVariable_bIsReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMemberVariable_NativeFunction, "bIsReadOnly");
        AddMemberVariable_InDefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMemberVariable_NativeFunction, "InDefaultValue");
        AddMemberVariable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMemberVariable_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RigVMBlueprint(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/RigVMDeveloper.RigVMBlueprint:VMCompileSettings
    static readonly int VMCompileSettings_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMCompileSettings VMCompileSettings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.RigVMDeveloper.RigVMCompileSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, VMCompileSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.RigVMDeveloper.RigVMCompileSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, VMCompileSettings_Offset), 0, this, value);
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:SuspendNotifications
    static readonly IntPtr SuspendNotifications_NativeFunction;
    static readonly int SuspendNotifications_ParamsSize;
    static readonly int SuspendNotifications_bSuspendNotifs_Offset;
    
    public void SuspendNotifications(bool bSuspendNotifs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SuspendNotifications_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SuspendNotifications_bSuspendNotifs_Offset), 0, null, bSuspendNotifs);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SuspendNotifications_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:SetAutoVMRecompile
    static readonly IntPtr SetAutoVMRecompile_NativeFunction;
    static readonly int SetAutoVMRecompile_ParamsSize;
    static readonly int SetAutoVMRecompile_bAutoRecompile_Offset;
    
    public void SetAutoVMRecompile(bool bAutoRecompile)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAutoVMRecompile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAutoVMRecompile_bAutoRecompile_Offset), 0, null, bAutoRecompile);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAutoVMRecompile_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:RequestRigVMInit
    static readonly IntPtr RequestRigVMInit_NativeFunction;
    
    public void RequestRigVMInit()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RequestRigVMInit_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:RequestAutoVMRecompilation
    static readonly IntPtr RequestAutoVMRecompilation_NativeFunction;
    
    public void RequestAutoVMRecompilation()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RequestAutoVMRecompilation_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:RenameMemberVariable
    static readonly IntPtr RenameMemberVariable_NativeFunction;
    static readonly int RenameMemberVariable_ParamsSize;
    static readonly int RenameMemberVariable_InOldName_Offset;
    static readonly int RenameMemberVariable_InNewName_Offset;
    static readonly int RenameMemberVariable_ReturnValue_Offset;
    
    public bool RenameMemberVariable(Name inOldName, Name inNewName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RenameMemberVariable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RenameMemberVariable_InOldName_Offset), 0, null, inOldName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RenameMemberVariable_InNewName_Offset), 0, null, inNewName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RenameMemberVariable_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RenameMemberVariable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:RemoveModel
    static readonly IntPtr RemoveModel_NativeFunction;
    static readonly int RemoveModel_ParamsSize;
    static readonly int RemoveModel_InName_Offset;
    static readonly int RemoveModel_bSetupUndoRedo_Offset;
    static readonly int RemoveModel_bPrintPythonCommand_Offset;
    static readonly int RemoveModel_ReturnValue_Offset;
    
    public bool RemoveModel(string inName = "Rig Graph", bool bSetupUndoRedo = true, bool bPrintPythonCommand = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveModel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InName_NativePtr = IntPtr.Add(ParamsBuffer,RemoveModel_InName_Offset);
            StringMarshaller.ToNative(InName_NativePtr,0,null,inName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, RemoveModel_bSetupUndoRedo_Offset), 0, null, bSetupUndoRedo);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, RemoveModel_bPrintPythonCommand_Offset), 0, null, bPrintPythonCommand);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveModel_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveModel_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:RemoveMemberVariable
    static readonly IntPtr RemoveMemberVariable_NativeFunction;
    static readonly int RemoveMemberVariable_ParamsSize;
    static readonly int RemoveMemberVariable_InName_Offset;
    static readonly int RemoveMemberVariable_ReturnValue_Offset;
    
    public bool RemoveMemberVariable(Name inName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveMemberVariable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveMemberVariable_InName_Offset), 0, null, inName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveMemberVariable_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveMemberVariable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:RecompileVMIfRequired
    static readonly IntPtr RecompileVMIfRequired_NativeFunction;
    
    public void RecompileVMIfRequired()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RecompileVMIfRequired_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:RecompileVM
    static readonly IntPtr RecompileVM_NativeFunction;
    
    public void RecompileVM()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RecompileVM_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:GetRigVMHostClass
    static readonly IntPtr GetRigVMHostClass_NativeFunction;
    static readonly int GetRigVMHostClass_ParamsSize;
    static readonly int GetRigVMHostClass_ReturnValue_Offset;
    
    public SubclassOf<UnrealSharp.CoreUObject.Object> GetRigVMHostClass()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRigVMHostClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRigVMHostClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetRigVMHostClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:GetOrCreateController
    static readonly IntPtr GetOrCreateController_NativeFunction;
    static readonly int GetOrCreateController_ParamsSize;
    static readonly int GetOrCreateController_InGraph_Offset;
    static readonly int GetOrCreateController_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMController GetOrCreateController(UnrealSharp.RigVMDeveloper.RigVMGraph inGraph = default(UnrealSharp.RigVMDeveloper.RigVMGraph))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOrCreateController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.ToNative(IntPtr.Add(ParamsBuffer, GetOrCreateController_InGraph_Offset), 0, null, inGraph);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOrCreateController_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMController>.FromNative(IntPtr.Add(ParamsBuffer, GetOrCreateController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:GetModel
    static readonly IntPtr GetModel_NativeFunction;
    static readonly int GetModel_ParamsSize;
    static readonly int GetModel_InEdGraph_Offset;
    static readonly int GetModel_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMGraph GetModel(UnrealSharp.Engine.EdGraph inEdGraph = default(UnrealSharp.Engine.EdGraph))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetModel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.EdGraph>.ToNative(IntPtr.Add(ParamsBuffer, GetModel_InEdGraph_Offset), 0, null, inEdGraph);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetModel_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMGraph returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.FromNative(IntPtr.Add(ParamsBuffer, GetModel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:GetMemberVariables
    static readonly IntPtr GetMemberVariables_NativeFunction;
    static readonly int GetMemberVariables_ParamsSize;
    static readonly int GetMemberVariables_ReturnValue_Offset;
    static readonly int GetMemberVariables_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> GetMemberVariables()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMemberVariables_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMemberVariables_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMemberVariables_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> (1, UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescriptionMarshaler.ToNative, UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescriptionMarshaler.FromNative, GetMemberVariables_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:GetLocalFunctionLibrary
    static readonly IntPtr GetLocalFunctionLibrary_NativeFunction;
    static readonly int GetLocalFunctionLibrary_ParamsSize;
    static readonly int GetLocalFunctionLibrary_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMFunctionLibrary GetLocalFunctionLibrary()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalFunctionLibrary_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocalFunctionLibrary_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMFunctionLibrary returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMFunctionLibrary>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalFunctionLibrary_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:GetFocusedModel
    static readonly IntPtr GetFocusedModel_NativeFunction;
    static readonly int GetFocusedModel_ParamsSize;
    static readonly int GetFocusedModel_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMGraph GetFocusedModel()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFocusedModel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFocusedModel_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMGraph returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.FromNative(IntPtr.Add(ParamsBuffer, GetFocusedModel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:GetDefaultModel
    static readonly IntPtr GetDefaultModel_NativeFunction;
    static readonly int GetDefaultModel_ParamsSize;
    static readonly int GetDefaultModel_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMGraph GetDefaultModel()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultModel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDefaultModel_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMGraph returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultModel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:GetControllerByName
    static readonly IntPtr GetControllerByName_NativeFunction;
    static readonly int GetControllerByName_ParamsSize;
    static readonly int GetControllerByName_InGraphName_Offset;
    static readonly int GetControllerByName_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMController GetControllerByName(string inGraphName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControllerByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InGraphName_NativePtr = IntPtr.Add(ParamsBuffer,GetControllerByName_InGraphName_Offset);
            StringMarshaller.ToNative(InGraphName_NativePtr,0,null,inGraphName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControllerByName_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMController>.FromNative(IntPtr.Add(ParamsBuffer, GetControllerByName_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InGraphName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:GetController
    static readonly IntPtr GetController_NativeFunction;
    static readonly int GetController_ParamsSize;
    static readonly int GetController_InGraph_Offset;
    static readonly int GetController_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMController GetController(UnrealSharp.RigVMDeveloper.RigVMGraph inGraph = default(UnrealSharp.RigVMDeveloper.RigVMGraph))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.ToNative(IntPtr.Add(ParamsBuffer, GetController_InGraph_Offset), 0, null, inGraph);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetController_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMController>.FromNative(IntPtr.Add(ParamsBuffer, GetController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:GetAvailableRigVMStructs
    static readonly IntPtr GetAvailableRigVMStructs_NativeFunction;
    static readonly int GetAvailableRigVMStructs_ParamsSize;
    static readonly int GetAvailableRigVMStructs_ReturnValue_Offset;
    static readonly int GetAvailableRigVMStructs_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.CoreUObject.Struct> GetAvailableRigVMStructs()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAvailableRigVMStructs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAvailableRigVMStructs_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.CoreUObject.Struct> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAvailableRigVMStructs_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Struct> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Struct> (1, ObjectMarshaller<UnrealSharp.CoreUObject.Struct>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Struct>.FromNative, GetAvailableRigVMStructs_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Struct>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:GetAutoVMRecompile
    static readonly IntPtr GetAutoVMRecompile_NativeFunction;
    static readonly int GetAutoVMRecompile_ParamsSize;
    static readonly int GetAutoVMRecompile_ReturnValue_Offset;
    
    public bool GetAutoVMRecompile()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAutoVMRecompile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAutoVMRecompile_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetAutoVMRecompile_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:GetAllModels
    static readonly IntPtr GetAllModels_NativeFunction;
    static readonly int GetAllModels_ParamsSize;
    static readonly int GetAllModels_ReturnValue_Offset;
    static readonly int GetAllModels_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraph> GetAllModels()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllModels_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAllModels_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraph> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllModels_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraph> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraph> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.FromNative, GetAllModels_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraph>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:CreateRigVMHost
    static readonly IntPtr CreateRigVMHost_NativeFunction;
    static readonly int CreateRigVMHost_ParamsSize;
    static readonly int CreateRigVMHost_ReturnValue_Offset;
    
    public UnrealSharp.RigVM.RigVMHost CreateRigVMHost()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateRigVMHost_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateRigVMHost_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVM.RigVMHost returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVM.RigVMHost>.FromNative(IntPtr.Add(ParamsBuffer, CreateRigVMHost_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:ChangeMemberVariableType
    static readonly IntPtr ChangeMemberVariableType_NativeFunction;
    static readonly int ChangeMemberVariableType_ParamsSize;
    static readonly int ChangeMemberVariableType_InName_Offset;
    static readonly int ChangeMemberVariableType_InCPPType_Offset;
    static readonly int ChangeMemberVariableType_bIsPublic_Offset;
    static readonly int ChangeMemberVariableType_bIsReadOnly_Offset;
    static readonly int ChangeMemberVariableType_InDefaultValue_Offset;
    static readonly int ChangeMemberVariableType_ReturnValue_Offset;
    
    public bool ChangeMemberVariableType(Name inName, string inCPPType, bool bIsPublic = false, bool bIsReadOnly = false, string inDefaultValue = "")
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ChangeMemberVariableType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ChangeMemberVariableType_InName_Offset), 0, null, inName);
            IntPtr InCPPType_NativePtr = IntPtr.Add(ParamsBuffer,ChangeMemberVariableType_InCPPType_Offset);
            StringMarshaller.ToNative(InCPPType_NativePtr,0,null,inCPPType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ChangeMemberVariableType_bIsPublic_Offset), 0, null, bIsPublic);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ChangeMemberVariableType_bIsReadOnly_Offset), 0, null, bIsReadOnly);
            IntPtr InDefaultValue_NativePtr = IntPtr.Add(ParamsBuffer,ChangeMemberVariableType_InDefaultValue_Offset);
            StringMarshaller.ToNative(InDefaultValue_NativePtr,0,null,inDefaultValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ChangeMemberVariableType_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ChangeMemberVariableType_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InCPPType_NativePtr, 0);
            StringMarshaller.DestructInstance(InDefaultValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:AddModel
    static readonly IntPtr AddModel_NativeFunction;
    static readonly int AddModel_ParamsSize;
    static readonly int AddModel_InName_Offset;
    static readonly int AddModel_bSetupUndoRedo_Offset;
    static readonly int AddModel_bPrintPythonCommand_Offset;
    static readonly int AddModel_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMGraph AddModel(string inName = "Rig Graph", bool bSetupUndoRedo = true, bool bPrintPythonCommand = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddModel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InName_NativePtr = IntPtr.Add(ParamsBuffer,AddModel_InName_Offset);
            StringMarshaller.ToNative(InName_NativePtr,0,null,inName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddModel_bSetupUndoRedo_Offset), 0, null, bSetupUndoRedo);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddModel_bPrintPythonCommand_Offset), 0, null, bPrintPythonCommand);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddModel_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMGraph returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.FromNative(IntPtr.Add(ParamsBuffer, AddModel_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMBlueprint:AddMemberVariable
    static readonly IntPtr AddMemberVariable_NativeFunction;
    static readonly int AddMemberVariable_ParamsSize;
    static readonly int AddMemberVariable_InName_Offset;
    static readonly int AddMemberVariable_InCPPType_Offset;
    static readonly int AddMemberVariable_bIsPublic_Offset;
    static readonly int AddMemberVariable_bIsReadOnly_Offset;
    static readonly int AddMemberVariable_InDefaultValue_Offset;
    static readonly int AddMemberVariable_ReturnValue_Offset;
    
    public Name AddMemberVariable(Name inName, string inCPPType, bool bIsPublic = false, bool bIsReadOnly = false, string inDefaultValue = "")
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddMemberVariable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddMemberVariable_InName_Offset), 0, null, inName);
            IntPtr InCPPType_NativePtr = IntPtr.Add(ParamsBuffer,AddMemberVariable_InCPPType_Offset);
            StringMarshaller.ToNative(InCPPType_NativePtr,0,null,inCPPType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddMemberVariable_bIsPublic_Offset), 0, null, bIsPublic);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddMemberVariable_bIsReadOnly_Offset), 0, null, bIsReadOnly);
            IntPtr InDefaultValue_NativePtr = IntPtr.Add(ParamsBuffer,AddMemberVariable_InDefaultValue_Offset);
            StringMarshaller.ToNative(InDefaultValue_NativePtr,0,null,inDefaultValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddMemberVariable_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, AddMemberVariable_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InCPPType_NativePtr, 0);
            StringMarshaller.DestructInstance(InDefaultValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
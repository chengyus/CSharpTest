// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.RigVMDeveloper;

[UClass]
public partial class RigVMCompiler : UnrealSharp.CoreUObject.Object
{
    
    static RigVMCompiler()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RigVMCompiler");
        
        Settings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Settings");
        
        CompileVM_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CompileVM");
        CompileVM_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CompileVM_NativeFunction);
        CompileVM_InGraphs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CompileVM_NativeFunction, "InGraphs");
        CompileVM_InGraphs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CompileVM_NativeFunction, "InGraphs");
        CompileVM_InController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CompileVM_NativeFunction, "InController");
        CompileVM_OutVM_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CompileVM_NativeFunction, "OutVM");
        CompileVM_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CompileVM_NativeFunction, "Context");
        CompileVM_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CompileVM_NativeFunction, "ReturnValue");
        Compile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Compile");
        Compile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Compile_NativeFunction);
        Compile_InGraphs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Compile_NativeFunction, "InGraphs");
        Compile_InGraphs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Compile_NativeFunction, "InGraphs");
        Compile_InController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Compile_NativeFunction, "InController");
        Compile_OutVM_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Compile_NativeFunction, "OutVM");
        Compile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Compile_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RigVMCompiler(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/RigVMDeveloper.RigVMCompiler:Settings
    static readonly int Settings_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMCompileSettings Settings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.RigVMDeveloper.RigVMCompileSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, Settings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.RigVMDeveloper.RigVMCompileSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, Settings_Offset), 0, this, value);
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMCompiler:CompileVM
    static readonly IntPtr CompileVM_NativeFunction;
    static readonly int CompileVM_ParamsSize;
    static readonly int CompileVM_InGraphs_Offset;
    static readonly int CompileVM_InGraphs_ElementSize;
    static readonly int CompileVM_InController_Offset;
    static readonly int CompileVM_OutVM_Offset;
    static readonly int CompileVM_Context_Offset;
    static readonly int CompileVM_ReturnValue_Offset;
    
    public bool CompileVM(System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraph> inGraphs, UnrealSharp.RigVMDeveloper.RigVMController inController, UnrealSharp.RigVM.RigVM outVM, out UnrealSharp.RigVM.RigVMExtendedExecuteContext context)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CompileVM_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InGraphs_NativeBuffer = IntPtr.Add(ParamsBuffer, CompileVM_InGraphs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraph> InGraphs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraph>(1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.FromNative, CompileVM_InGraphs_ElementSize);
            InGraphs_Marshaler.ToNative(InGraphs_NativeBuffer, 0, null, inGraphs);
            ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMController>.ToNative(IntPtr.Add(ParamsBuffer, CompileVM_InController_Offset), 0, null, inController);
            ObjectMarshaller<UnrealSharp.RigVM.RigVM>.ToNative(IntPtr.Add(ParamsBuffer, CompileVM_OutVM_Offset), 0, null, outVM);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CompileVM_NativeFunction, ParamsBuffer);
            
            context = UnrealSharp.RigVM.RigVMExtendedExecuteContextMarshaler.FromNative(IntPtr.Add(ParamsBuffer, CompileVM_Context_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CompileVM_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraph>.DestructInstance(InGraphs_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMCompiler:Compile
    static readonly IntPtr Compile_NativeFunction;
    static readonly int Compile_ParamsSize;
    static readonly int Compile_InGraphs_Offset;
    static readonly int Compile_InGraphs_ElementSize;
    static readonly int Compile_InController_Offset;
    static readonly int Compile_OutVM_Offset;
    static readonly int Compile_ReturnValue_Offset;
    
    [Obsolete("Compile is deprecated, use CompileVM with Context parameter.")]
    public bool Compile(System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraph> inGraphs, UnrealSharp.RigVMDeveloper.RigVMController inController, UnrealSharp.RigVM.RigVM outVM)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Compile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InGraphs_NativeBuffer = IntPtr.Add(ParamsBuffer, Compile_InGraphs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraph> InGraphs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraph>(1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.FromNative, Compile_InGraphs_ElementSize);
            InGraphs_Marshaler.ToNative(InGraphs_NativeBuffer, 0, null, inGraphs);
            ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMController>.ToNative(IntPtr.Add(ParamsBuffer, Compile_InController_Offset), 0, null, inController);
            ObjectMarshaller<UnrealSharp.RigVM.RigVM>.ToNative(IntPtr.Add(ParamsBuffer, Compile_OutVM_Offset), 0, null, outVM);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Compile_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Compile_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraph>.DestructInstance(InGraphs_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    
}
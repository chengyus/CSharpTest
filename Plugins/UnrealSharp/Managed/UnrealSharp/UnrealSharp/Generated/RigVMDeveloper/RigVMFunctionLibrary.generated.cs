// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.RigVMDeveloper;

[UClass]
public partial class RigVMFunctionLibrary : UnrealSharp.RigVMDeveloper.RigVMGraph
{
    
    static RigVMFunctionLibrary()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RigVMFunctionLibrary");
        
        
        GetReferencesForFunction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetReferencesForFunction");
        GetReferencesForFunction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetReferencesForFunction_NativeFunction);
        GetReferencesForFunction_InFunctionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetReferencesForFunction_NativeFunction, "InFunctionName");
        GetReferencesForFunction_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetReferencesForFunction_NativeFunction, "ReturnValue");
        GetReferencesForFunction_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetReferencesForFunction_NativeFunction, "ReturnValue");
        GetFunctions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFunctions");
        GetFunctions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFunctions_NativeFunction);
        GetFunctions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFunctions_NativeFunction, "ReturnValue");
        GetFunctions_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetFunctions_NativeFunction, "ReturnValue");
        FindFunctionForNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindFunctionForNode");
        FindFunctionForNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindFunctionForNode_NativeFunction);
        FindFunctionForNode_InNode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindFunctionForNode_NativeFunction, "InNode");
        FindFunctionForNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindFunctionForNode_NativeFunction, "ReturnValue");
        FindFunction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindFunction");
        FindFunction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindFunction_NativeFunction);
        FindFunction_InFunctionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindFunction_NativeFunction, "InFunctionName");
        FindFunction_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindFunction_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RigVMFunctionLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/RigVMDeveloper.RigVMFunctionLibrary:GetReferencesForFunction
    static readonly IntPtr GetReferencesForFunction_NativeFunction;
    static readonly int GetReferencesForFunction_ParamsSize;
    static readonly int GetReferencesForFunction_InFunctionName_Offset;
    static readonly int GetReferencesForFunction_ReturnValue_Offset;
    static readonly int GetReferencesForFunction_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<SoftObject<UnrealSharp.RigVMDeveloper.RigVMFunctionReferenceNode>> GetReferencesForFunction(Name inFunctionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetReferencesForFunction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetReferencesForFunction_InFunctionName_Offset), 0, null, inFunctionName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetReferencesForFunction_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<SoftObject<UnrealSharp.RigVMDeveloper.RigVMFunctionReferenceNode>> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetReferencesForFunction_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<SoftObject<UnrealSharp.RigVMDeveloper.RigVMFunctionReferenceNode>> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<SoftObject<UnrealSharp.RigVMDeveloper.RigVMFunctionReferenceNode>> (1, BlittableMarshaller<SoftObject<UnrealSharp.RigVMDeveloper.RigVMFunctionReferenceNode>>.ToNative, BlittableMarshaller<SoftObject<UnrealSharp.RigVMDeveloper.RigVMFunctionReferenceNode>>.FromNative, GetReferencesForFunction_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<SoftObject<UnrealSharp.RigVMDeveloper.RigVMFunctionReferenceNode>>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMFunctionLibrary:GetFunctions
    static readonly IntPtr GetFunctions_NativeFunction;
    static readonly int GetFunctions_ParamsSize;
    static readonly int GetFunctions_ReturnValue_Offset;
    static readonly int GetFunctions_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMLibraryNode> GetFunctions()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFunctions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFunctions_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMLibraryNode> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetFunctions_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLibraryNode> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLibraryNode> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLibraryNode>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLibraryNode>.FromNative, GetFunctions_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLibraryNode>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMFunctionLibrary:FindFunctionForNode
    static readonly IntPtr FindFunctionForNode_NativeFunction;
    static readonly int FindFunctionForNode_ParamsSize;
    static readonly int FindFunctionForNode_InNode_Offset;
    static readonly int FindFunctionForNode_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMLibraryNode FindFunctionForNode(UnrealSharp.RigVMDeveloper.RigVMNode inNode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindFunctionForNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMNode>.ToNative(IntPtr.Add(ParamsBuffer, FindFunctionForNode_InNode_Offset), 0, null, inNode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindFunctionForNode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMLibraryNode returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLibraryNode>.FromNative(IntPtr.Add(ParamsBuffer, FindFunctionForNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMFunctionLibrary:FindFunction
    static readonly IntPtr FindFunction_NativeFunction;
    static readonly int FindFunction_ParamsSize;
    static readonly int FindFunction_InFunctionName_Offset;
    static readonly int FindFunction_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMLibraryNode FindFunction(Name inFunctionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindFunction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindFunction_InFunctionName_Offset), 0, null, inFunctionName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindFunction_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMLibraryNode returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLibraryNode>.FromNative(IntPtr.Add(ParamsBuffer, FindFunction_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.RigVMDeveloper;

[UClass]
public partial class RigVMGraph : UnrealSharp.CoreUObject.Object
{
    
    static RigVMGraph()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RigVMGraph");
        
        
        SetDefaultFunctionLibrary_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultFunctionLibrary");
        SetDefaultFunctionLibrary_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultFunctionLibrary_NativeFunction);
        SetDefaultFunctionLibrary_InFunctionLibrary_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultFunctionLibrary_NativeFunction, "InFunctionLibrary");
        IsTopLevelGraph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsTopLevelGraph");
        IsTopLevelGraph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsTopLevelGraph_NativeFunction);
        IsTopLevelGraph_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsTopLevelGraph_NativeFunction, "ReturnValue");
        IsRootGraph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRootGraph");
        IsRootGraph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRootGraph_NativeFunction);
        IsRootGraph_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRootGraph_NativeFunction, "ReturnValue");
        IsNodeSelected_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsNodeSelected");
        IsNodeSelected_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsNodeSelected_NativeFunction);
        IsNodeSelected_InNodeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsNodeSelected_NativeFunction, "InNodeName");
        IsNodeSelected_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsNodeSelected_NativeFunction, "ReturnValue");
        GetVariableDescriptions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVariableDescriptions");
        GetVariableDescriptions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVariableDescriptions_NativeFunction);
        GetVariableDescriptions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVariableDescriptions_NativeFunction, "ReturnValue");
        GetVariableDescriptions_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetVariableDescriptions_NativeFunction, "ReturnValue");
        GetSelectNodes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectNodes");
        GetSelectNodes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectNodes_NativeFunction);
        GetSelectNodes_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectNodes_NativeFunction, "ReturnValue");
        GetSelectNodes_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSelectNodes_NativeFunction, "ReturnValue");
        GetRootGraph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRootGraph");
        GetRootGraph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRootGraph_NativeFunction);
        GetRootGraph_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRootGraph_NativeFunction, "ReturnValue");
        GetReturnNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetReturnNode");
        GetReturnNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetReturnNode_NativeFunction);
        GetReturnNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetReturnNode_NativeFunction, "ReturnValue");
        GetParentGraph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParentGraph");
        GetParentGraph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParentGraph_NativeFunction);
        GetParentGraph_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentGraph_NativeFunction, "ReturnValue");
        GetOutputArguments_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOutputArguments");
        GetOutputArguments_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOutputArguments_NativeFunction);
        GetOutputArguments_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOutputArguments_NativeFunction, "ReturnValue");
        GetOutputArguments_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetOutputArguments_NativeFunction, "ReturnValue");
        GetNodes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNodes");
        GetNodes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNodes_NativeFunction);
        GetNodes_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodes_NativeFunction, "ReturnValue");
        GetNodes_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetNodes_NativeFunction, "ReturnValue");
        GetNodePath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNodePath");
        GetNodePath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNodePath_NativeFunction);
        GetNodePath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodePath_NativeFunction, "ReturnValue");
        GetLocalVariables_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalVariables");
        GetLocalVariables_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalVariables_NativeFunction);
        GetLocalVariables_bIncludeInputArguments_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalVariables_NativeFunction, "bIncludeInputArguments");
        GetLocalVariables_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalVariables_NativeFunction, "ReturnValue");
        GetLocalVariables_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalVariables_NativeFunction, "ReturnValue");
        GetLinks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinks");
        GetLinks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinks_NativeFunction);
        GetLinks_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinks_NativeFunction, "ReturnValue");
        GetLinks_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLinks_NativeFunction, "ReturnValue");
        GetInputArguments_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputArguments");
        GetInputArguments_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputArguments_NativeFunction);
        GetInputArguments_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputArguments_NativeFunction, "ReturnValue");
        GetInputArguments_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetInputArguments_NativeFunction, "ReturnValue");
        GetGraphName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGraphName");
        GetGraphName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGraphName_NativeFunction);
        GetGraphName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGraphName_NativeFunction, "ReturnValue");
        GetGraphDepth_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGraphDepth");
        GetGraphDepth_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGraphDepth_NativeFunction);
        GetGraphDepth_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGraphDepth_NativeFunction, "ReturnValue");
        GetEventNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEventNames");
        GetEventNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEventNames_NativeFunction);
        GetEventNames_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEventNames_NativeFunction, "ReturnValue");
        GetEventNames_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetEventNames_NativeFunction, "ReturnValue");
        GetEntryNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEntryNode");
        GetEntryNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEntryNode_NativeFunction);
        GetEntryNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEntryNode_NativeFunction, "ReturnValue");
        GetDefaultFunctionLibrary_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultFunctionLibrary");
        GetDefaultFunctionLibrary_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultFunctionLibrary_NativeFunction);
        GetDefaultFunctionLibrary_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultFunctionLibrary_NativeFunction, "ReturnValue");
        GetContainedGraphs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetContainedGraphs");
        GetContainedGraphs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetContainedGraphs_NativeFunction);
        GetContainedGraphs_bRecursive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetContainedGraphs_NativeFunction, "bRecursive");
        GetContainedGraphs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetContainedGraphs_NativeFunction, "ReturnValue");
        GetContainedGraphs_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetContainedGraphs_NativeFunction, "ReturnValue");
        FindPin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindPin");
        FindPin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindPin_NativeFunction);
        FindPin_InPinPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindPin_NativeFunction, "InPinPath");
        FindPin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindPin_NativeFunction, "ReturnValue");
        FindNodeByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNodeByName");
        FindNodeByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNodeByName_NativeFunction);
        FindNodeByName_InNodeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeByName_NativeFunction, "InNodeName");
        FindNodeByName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNodeByName_NativeFunction, "ReturnValue");
        FindNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNode");
        FindNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNode_NativeFunction);
        FindNode_InNodePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNode_NativeFunction, "InNodePath");
        FindNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNode_NativeFunction, "ReturnValue");
        FindLink_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindLink");
        FindLink_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindLink_NativeFunction);
        FindLink_InLinkPinPathRepresentation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindLink_NativeFunction, "InLinkPinPathRepresentation");
        FindLink_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindLink_NativeFunction, "ReturnValue");
        ContainsLink_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ContainsLink");
        ContainsLink_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ContainsLink_NativeFunction);
        ContainsLink_InPinPathRepresentation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ContainsLink_NativeFunction, "InPinPathRepresentation");
        ContainsLink_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ContainsLink_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RigVMGraph(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/RigVMDeveloper.RigVMGraph:SetDefaultFunctionLibrary
    static readonly IntPtr SetDefaultFunctionLibrary_NativeFunction;
    static readonly int SetDefaultFunctionLibrary_ParamsSize;
    static readonly int SetDefaultFunctionLibrary_InFunctionLibrary_Offset;
    
    public void SetDefaultFunctionLibrary(UnrealSharp.RigVMDeveloper.RigVMFunctionLibrary inFunctionLibrary)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultFunctionLibrary_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMFunctionLibrary>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultFunctionLibrary_InFunctionLibrary_Offset), 0, null, inFunctionLibrary);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefaultFunctionLibrary_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:IsTopLevelGraph
    static readonly IntPtr IsTopLevelGraph_NativeFunction;
    static readonly int IsTopLevelGraph_ParamsSize;
    static readonly int IsTopLevelGraph_ReturnValue_Offset;
    
    public bool IsTopLevelGraph()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsTopLevelGraph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsTopLevelGraph_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsTopLevelGraph_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:IsRootGraph
    static readonly IntPtr IsRootGraph_NativeFunction;
    static readonly int IsRootGraph_ParamsSize;
    static readonly int IsRootGraph_ReturnValue_Offset;
    
    public bool IsRootGraph()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRootGraph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsRootGraph_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRootGraph_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:IsNodeSelected
    static readonly IntPtr IsNodeSelected_NativeFunction;
    static readonly int IsNodeSelected_ParamsSize;
    static readonly int IsNodeSelected_InNodeName_Offset;
    static readonly int IsNodeSelected_ReturnValue_Offset;
    
    public bool IsNodeSelected(Name inNodeName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsNodeSelected_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsNodeSelected_InNodeName_Offset), 0, null, inNodeName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsNodeSelected_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsNodeSelected_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetVariableDescriptions
    static readonly IntPtr GetVariableDescriptions_NativeFunction;
    static readonly int GetVariableDescriptions_ParamsSize;
    static readonly int GetVariableDescriptions_ReturnValue_Offset;
    static readonly int GetVariableDescriptions_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> GetVariableDescriptions()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVariableDescriptions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVariableDescriptions_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetVariableDescriptions_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> (1, UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescriptionMarshaler.ToNative, UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescriptionMarshaler.FromNative, GetVariableDescriptions_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetSelectNodes
    static readonly IntPtr GetSelectNodes_NativeFunction;
    static readonly int GetSelectNodes_ParamsSize;
    static readonly int GetSelectNodes_ReturnValue_Offset;
    static readonly int GetSelectNodes_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<Name> GetSelectNodes()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectNodes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSelectNodes_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSelectNodes_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetSelectNodes_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetRootGraph
    static readonly IntPtr GetRootGraph_NativeFunction;
    static readonly int GetRootGraph_ParamsSize;
    static readonly int GetRootGraph_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMGraph GetRootGraph()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRootGraph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRootGraph_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMGraph returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.FromNative(IntPtr.Add(ParamsBuffer, GetRootGraph_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetReturnNode
    static readonly IntPtr GetReturnNode_NativeFunction;
    static readonly int GetReturnNode_ParamsSize;
    static readonly int GetReturnNode_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMFunctionReturnNode GetReturnNode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetReturnNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetReturnNode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMFunctionReturnNode returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMFunctionReturnNode>.FromNative(IntPtr.Add(ParamsBuffer, GetReturnNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetParentGraph
    static readonly IntPtr GetParentGraph_NativeFunction;
    static readonly int GetParentGraph_ParamsSize;
    static readonly int GetParentGraph_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMGraph GetParentGraph()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParentGraph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParentGraph_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMGraph returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.FromNative(IntPtr.Add(ParamsBuffer, GetParentGraph_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetOutputArguments
    static readonly IntPtr GetOutputArguments_NativeFunction;
    static readonly int GetOutputArguments_ParamsSize;
    static readonly int GetOutputArguments_ReturnValue_Offset;
    static readonly int GetOutputArguments_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> GetOutputArguments()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOutputArguments_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOutputArguments_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetOutputArguments_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> (1, UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescriptionMarshaler.ToNative, UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescriptionMarshaler.FromNative, GetOutputArguments_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetNodes
    static readonly IntPtr GetNodes_NativeFunction;
    static readonly int GetNodes_ParamsSize;
    static readonly int GetNodes_ReturnValue_Offset;
    static readonly int GetNodes_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMNode> GetNodes()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNodes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNodes_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMNode> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetNodes_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMNode> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMNode> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMNode>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMNode>.FromNative, GetNodes_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMNode>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetNodePath
    static readonly IntPtr GetNodePath_NativeFunction;
    static readonly int GetNodePath_ParamsSize;
    static readonly int GetNodePath_ReturnValue_Offset;
    
    public string GetNodePath()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNodePath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNodePath_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetNodePath_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetLocalVariables
    static readonly IntPtr GetLocalVariables_NativeFunction;
    static readonly int GetLocalVariables_ParamsSize;
    static readonly int GetLocalVariables_bIncludeInputArguments_Offset;
    static readonly int GetLocalVariables_ReturnValue_Offset;
    static readonly int GetLocalVariables_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> GetLocalVariables(bool bIncludeInputArguments = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalVariables_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetLocalVariables_bIncludeInputArguments_Offset), 0, null, bIncludeInputArguments);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocalVariables_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalVariables_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> (1, UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescriptionMarshaler.ToNative, UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescriptionMarshaler.FromNative, GetLocalVariables_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetLinks
    static readonly IntPtr GetLinks_NativeFunction;
    static readonly int GetLinks_ParamsSize;
    static readonly int GetLinks_ReturnValue_Offset;
    static readonly int GetLinks_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMLink> GetLinks()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinks_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMLink> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLinks_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLink>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLink>.FromNative, GetLinks_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetInputArguments
    static readonly IntPtr GetInputArguments_NativeFunction;
    static readonly int GetInputArguments_ParamsSize;
    static readonly int GetInputArguments_ReturnValue_Offset;
    static readonly int GetInputArguments_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> GetInputArguments()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputArguments_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInputArguments_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetInputArguments_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription> (1, UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescriptionMarshaler.ToNative, UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescriptionMarshaler.FromNative, GetInputArguments_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraphVariableDescription>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetGraphName
    static readonly IntPtr GetGraphName_NativeFunction;
    static readonly int GetGraphName_ParamsSize;
    static readonly int GetGraphName_ReturnValue_Offset;
    
    public string GetGraphName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGraphName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGraphName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetGraphName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetGraphDepth
    static readonly IntPtr GetGraphDepth_NativeFunction;
    static readonly int GetGraphDepth_ParamsSize;
    static readonly int GetGraphDepth_ReturnValue_Offset;
    
    public int GetGraphDepth()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGraphDepth_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGraphDepth_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetGraphDepth_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetEventNames
    static readonly IntPtr GetEventNames_NativeFunction;
    static readonly int GetEventNames_ParamsSize;
    static readonly int GetEventNames_ReturnValue_Offset;
    static readonly int GetEventNames_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<Name> GetEventNames()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEventNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEventNames_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetEventNames_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetEventNames_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetEntryNode
    static readonly IntPtr GetEntryNode_NativeFunction;
    static readonly int GetEntryNode_ParamsSize;
    static readonly int GetEntryNode_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMFunctionEntryNode GetEntryNode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEntryNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEntryNode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMFunctionEntryNode returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMFunctionEntryNode>.FromNative(IntPtr.Add(ParamsBuffer, GetEntryNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetDefaultFunctionLibrary
    static readonly IntPtr GetDefaultFunctionLibrary_NativeFunction;
    static readonly int GetDefaultFunctionLibrary_ParamsSize;
    static readonly int GetDefaultFunctionLibrary_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMFunctionLibrary GetDefaultFunctionLibrary()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultFunctionLibrary_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDefaultFunctionLibrary_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMFunctionLibrary returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMFunctionLibrary>.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultFunctionLibrary_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:GetContainedGraphs
    static readonly IntPtr GetContainedGraphs_NativeFunction;
    static readonly int GetContainedGraphs_ParamsSize;
    static readonly int GetContainedGraphs_bRecursive_Offset;
    static readonly int GetContainedGraphs_ReturnValue_Offset;
    static readonly int GetContainedGraphs_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraph> GetContainedGraphs(bool bRecursive = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetContainedGraphs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetContainedGraphs_bRecursive_Offset), 0, null, bRecursive);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetContainedGraphs_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMGraph> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetContainedGraphs_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraph> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraph> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.FromNative, GetContainedGraphs_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMGraph>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:FindPin
    static readonly IntPtr FindPin_NativeFunction;
    static readonly int FindPin_ParamsSize;
    static readonly int FindPin_InPinPath_Offset;
    static readonly int FindPin_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMPin FindPin(string inPinPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindPin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InPinPath_NativePtr = IntPtr.Add(ParamsBuffer,FindPin_InPinPath_Offset);
            StringMarshaller.ToNative(InPinPath_NativePtr,0,null,inPinPath);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindPin_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMPin returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative(IntPtr.Add(ParamsBuffer, FindPin_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InPinPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:FindNodeByName
    static readonly IntPtr FindNodeByName_NativeFunction;
    static readonly int FindNodeByName_ParamsSize;
    static readonly int FindNodeByName_InNodeName_Offset;
    static readonly int FindNodeByName_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMNode FindNodeByName(Name inNodeName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNodeByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindNodeByName_InNodeName_Offset), 0, null, inNodeName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindNodeByName_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMNode returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMNode>.FromNative(IntPtr.Add(ParamsBuffer, FindNodeByName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:FindNode
    static readonly IntPtr FindNode_NativeFunction;
    static readonly int FindNode_ParamsSize;
    static readonly int FindNode_InNodePath_Offset;
    static readonly int FindNode_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMNode FindNode(string inNodePath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InNodePath_NativePtr = IntPtr.Add(ParamsBuffer,FindNode_InNodePath_Offset);
            StringMarshaller.ToNative(InNodePath_NativePtr,0,null,inNodePath);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindNode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMNode returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMNode>.FromNative(IntPtr.Add(ParamsBuffer, FindNode_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InNodePath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:FindLink
    static readonly IntPtr FindLink_NativeFunction;
    static readonly int FindLink_ParamsSize;
    static readonly int FindLink_InLinkPinPathRepresentation_Offset;
    static readonly int FindLink_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMLink FindLink(string inLinkPinPathRepresentation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindLink_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InLinkPinPathRepresentation_NativePtr = IntPtr.Add(ParamsBuffer,FindLink_InLinkPinPathRepresentation_Offset);
            StringMarshaller.ToNative(InLinkPinPathRepresentation_NativePtr,0,null,inLinkPinPathRepresentation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindLink_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMLink returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLink>.FromNative(IntPtr.Add(ParamsBuffer, FindLink_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InLinkPinPathRepresentation_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMGraph:ContainsLink
    static readonly IntPtr ContainsLink_NativeFunction;
    static readonly int ContainsLink_ParamsSize;
    static readonly int ContainsLink_InPinPathRepresentation_Offset;
    static readonly int ContainsLink_ReturnValue_Offset;
    
    public bool ContainsLink(string inPinPathRepresentation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ContainsLink_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InPinPathRepresentation_NativePtr = IntPtr.Add(ParamsBuffer,ContainsLink_InPinPathRepresentation_Offset);
            StringMarshaller.ToNative(InPinPathRepresentation_NativePtr,0,null,inPinPathRepresentation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ContainsLink_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ContainsLink_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InPinPathRepresentation_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.RigVMDeveloper;

[UClass]
public partial class RigVMNode : UnrealSharp.CoreUObject.Object
{
    
    static RigVMNode()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RigVMNode");
        
        
        SetHasBreakpoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetHasBreakpoint");
        SetHasBreakpoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetHasBreakpoint_NativeFunction);
        SetHasBreakpoint_bValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHasBreakpoint_NativeFunction, "bValue");
        SetExecutionIsHaltedAtThisNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetExecutionIsHaltedAtThisNode");
        SetExecutionIsHaltedAtThisNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetExecutionIsHaltedAtThisNode_NativeFunction);
        SetExecutionIsHaltedAtThisNode_bValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetExecutionIsHaltedAtThisNode_NativeFunction, "bValue");
        IsVisibleInUI_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsVisibleInUI");
        IsVisibleInUI_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsVisibleInUI_NativeFunction);
        IsVisibleInUI_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVisibleInUI_NativeFunction, "ReturnValue");
        IsSelected_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsSelected");
        IsSelected_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsSelected_NativeFunction);
        IsSelected_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSelected_NativeFunction, "ReturnValue");
        IsPure_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPure");
        IsPure_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPure_NativeFunction);
        IsPure_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPure_NativeFunction, "ReturnValue");
        IsMutable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsMutable");
        IsMutable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsMutable_NativeFunction);
        IsMutable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsMutable_NativeFunction, "ReturnValue");
        IsLoopNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLoopNode");
        IsLoopNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLoopNode_NativeFunction);
        IsLoopNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLoopNode_NativeFunction, "ReturnValue");
        IsLinkedTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLinkedTo");
        IsLinkedTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLinkedTo_NativeFunction);
        IsLinkedTo_InNode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLinkedTo_NativeFunction, "InNode");
        IsLinkedTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLinkedTo_NativeFunction, "ReturnValue");
        IsInputAggregate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsInputAggregate");
        IsInputAggregate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsInputAggregate_NativeFunction);
        IsInputAggregate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsInputAggregate_NativeFunction, "ReturnValue");
        IsInjected_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsInjected");
        IsInjected_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsInjected_NativeFunction);
        IsInjected_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsInjected_NativeFunction, "ReturnValue");
        IsEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsEvent");
        IsEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsEvent_NativeFunction);
        IsEvent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEvent_NativeFunction, "ReturnValue");
        IsDefinedAsVarying_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsDefinedAsVarying");
        IsDefinedAsVarying_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsDefinedAsVarying_NativeFunction);
        IsDefinedAsVarying_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDefinedAsVarying_NativeFunction, "ReturnValue");
        IsDefinedAsConstant_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsDefinedAsConstant");
        IsDefinedAsConstant_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsDefinedAsConstant_NativeFunction);
        IsDefinedAsConstant_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDefinedAsConstant_NativeFunction, "ReturnValue");
        IsDecoratorPin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsDecoratorPin");
        IsDecoratorPin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsDecoratorPin_NativeFunction);
        IsDecoratorPin_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDecoratorPin_NativeFunction, "InName");
        IsDecoratorPin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDecoratorPin_NativeFunction, "ReturnValue");
        IsControlFlowNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsControlFlowNode");
        IsControlFlowNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsControlFlowNode_NativeFunction);
        IsControlFlowNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsControlFlowNode_NativeFunction, "ReturnValue");
        IsAggregate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsAggregate");
        IsAggregate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsAggregate_NativeFunction);
        IsAggregate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAggregate_NativeFunction, "ReturnValue");
        HasPinOfDirection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasPinOfDirection");
        HasPinOfDirection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasPinOfDirection_NativeFunction);
        HasPinOfDirection_InDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasPinOfDirection_NativeFunction, "InDirection");
        HasPinOfDirection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasPinOfDirection_NativeFunction, "ReturnValue");
        HasOutputPin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasOutputPin");
        HasOutputPin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasOutputPin_NativeFunction);
        HasOutputPin_bIncludeIO_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasOutputPin_NativeFunction, "bIncludeIO");
        HasOutputPin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasOutputPin_NativeFunction, "ReturnValue");
        HasOrphanedPins_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasOrphanedPins");
        HasOrphanedPins_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasOrphanedPins_NativeFunction);
        HasOrphanedPins_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasOrphanedPins_NativeFunction, "ReturnValue");
        HasLazyPin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasLazyPin");
        HasLazyPin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasLazyPin_NativeFunction);
        HasLazyPin_bOnlyConsiderPinsWithLinks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasLazyPin_NativeFunction, "bOnlyConsiderPinsWithLinks");
        HasLazyPin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasLazyPin_NativeFunction, "ReturnValue");
        HasIOPin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasIOPin");
        HasIOPin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasIOPin_NativeFunction);
        HasIOPin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasIOPin_NativeFunction, "ReturnValue");
        HasInputPin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasInputPin");
        HasInputPin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasInputPin_NativeFunction);
        HasInputPin_bIncludeIO_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasInputPin_NativeFunction, "bIncludeIO");
        HasInputPin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasInputPin_NativeFunction, "ReturnValue");
        HasBreakpoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasBreakpoint");
        HasBreakpoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasBreakpoint_NativeFunction);
        HasBreakpoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasBreakpoint_NativeFunction, "ReturnValue");
        GetSupportedWorkflows_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSupportedWorkflows");
        GetSupportedWorkflows_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSupportedWorkflows_NativeFunction);
        GetSupportedWorkflows_InType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSupportedWorkflows_NativeFunction, "InType");
        GetSupportedWorkflows_InSubject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSupportedWorkflows_NativeFunction, "InSubject");
        GetSupportedWorkflows_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSupportedWorkflows_NativeFunction, "ReturnValue");
        GetSupportedWorkflows_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSupportedWorkflows_NativeFunction, "ReturnValue");
        GetSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSize");
        GetSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSize_NativeFunction);
        GetSize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSize_NativeFunction, "ReturnValue");
        GetSecondAggregatePin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSecondAggregatePin");
        GetSecondAggregatePin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSecondAggregatePin_NativeFunction);
        GetSecondAggregatePin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSecondAggregatePin_NativeFunction, "ReturnValue");
        GetRootGraph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRootGraph");
        GetRootGraph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRootGraph_NativeFunction);
        GetRootGraph_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRootGraph_NativeFunction, "ReturnValue");
        GetPreviousFName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPreviousFName");
        GetPreviousFName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPreviousFName_NativeFunction);
        GetPreviousFName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPreviousFName_NativeFunction, "ReturnValue");
        GetPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPosition");
        GetPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPosition_NativeFunction);
        GetPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPosition_NativeFunction, "ReturnValue");
        GetPins_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPins");
        GetPins_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPins_NativeFunction);
        GetPins_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPins_NativeFunction, "ReturnValue");
        GetPins_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPins_NativeFunction, "ReturnValue");
        GetOrphanedPins_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOrphanedPins");
        GetOrphanedPins_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOrphanedPins_NativeFunction);
        GetOrphanedPins_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOrphanedPins_NativeFunction, "ReturnValue");
        GetOrphanedPins_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetOrphanedPins_NativeFunction, "ReturnValue");
        GetOppositeAggregatePin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOppositeAggregatePin");
        GetOppositeAggregatePin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOppositeAggregatePin_NativeFunction);
        GetOppositeAggregatePin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOppositeAggregatePin_NativeFunction, "ReturnValue");
        GetNodeTitle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNodeTitle");
        GetNodeTitle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNodeTitle_NativeFunction);
        GetNodeTitle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeTitle_NativeFunction, "ReturnValue");
        GetNodePath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNodePath");
        GetNodePath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNodePath_NativeFunction);
        GetNodePath_bRecursive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodePath_NativeFunction, "bRecursive");
        GetNodePath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodePath_NativeFunction, "ReturnValue");
        GetNodeIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNodeIndex");
        GetNodeIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNodeIndex_NativeFunction);
        GetNodeIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeIndex_NativeFunction, "ReturnValue");
        GetNodeColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNodeColor");
        GetNodeColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNodeColor_NativeFunction);
        GetNodeColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeColor_NativeFunction, "ReturnValue");
        GetNextAggregateName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNextAggregateName");
        GetNextAggregateName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNextAggregateName_NativeFunction);
        GetNextAggregateName_InLastAggregatePinName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNextAggregateName_NativeFunction, "InLastAggregatePinName");
        GetNextAggregateName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNextAggregateName_NativeFunction, "ReturnValue");
        GetLinks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinks");
        GetLinks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinks_NativeFunction);
        GetLinks_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinks_NativeFunction, "ReturnValue");
        GetLinks_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLinks_NativeFunction, "ReturnValue");
        GetLinkedTargetNodes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinkedTargetNodes");
        GetLinkedTargetNodes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinkedTargetNodes_NativeFunction);
        GetLinkedTargetNodes_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedTargetNodes_NativeFunction, "ReturnValue");
        GetLinkedTargetNodes_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLinkedTargetNodes_NativeFunction, "ReturnValue");
        GetLinkedSourceNodes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinkedSourceNodes");
        GetLinkedSourceNodes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinkedSourceNodes_NativeFunction);
        GetLinkedSourceNodes_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedSourceNodes_NativeFunction, "ReturnValue");
        GetLinkedSourceNodes_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLinkedSourceNodes_NativeFunction, "ReturnValue");
        GetInjectionInfo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInjectionInfo");
        GetInjectionInfo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInjectionInfo_NativeFunction);
        GetInjectionInfo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInjectionInfo_NativeFunction, "ReturnValue");
        GetGraphDepth_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGraphDepth");
        GetGraphDepth_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGraphDepth_NativeFunction);
        GetGraphDepth_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGraphDepth_NativeFunction, "ReturnValue");
        GetGraph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGraph");
        GetGraph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGraph_NativeFunction);
        GetGraph_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGraph_NativeFunction, "ReturnValue");
        GetFirstAggregatePin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFirstAggregatePin");
        GetFirstAggregatePin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFirstAggregatePin_NativeFunction);
        GetFirstAggregatePin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFirstAggregatePin_NativeFunction, "ReturnValue");
        GetEventName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEventName");
        GetEventName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEventName_NativeFunction);
        GetEventName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEventName_NativeFunction, "ReturnValue");
        GetDecoratorPins_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDecoratorPins");
        GetDecoratorPins_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDecoratorPins_NativeFunction);
        GetDecoratorPins_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDecoratorPins_NativeFunction, "ReturnValue");
        GetDecoratorPins_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetDecoratorPins_NativeFunction, "ReturnValue");
        GetAllPinsRecursively_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllPinsRecursively");
        GetAllPinsRecursively_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllPinsRecursively_NativeFunction);
        GetAllPinsRecursively_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllPinsRecursively_NativeFunction, "ReturnValue");
        GetAllPinsRecursively_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllPinsRecursively_NativeFunction, "ReturnValue");
        GetAggregateOutputs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAggregateOutputs");
        GetAggregateOutputs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAggregateOutputs_NativeFunction);
        GetAggregateOutputs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAggregateOutputs_NativeFunction, "ReturnValue");
        GetAggregateOutputs_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAggregateOutputs_NativeFunction, "ReturnValue");
        GetAggregateInputs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAggregateInputs");
        GetAggregateInputs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAggregateInputs_NativeFunction);
        GetAggregateInputs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAggregateInputs_NativeFunction, "ReturnValue");
        GetAggregateInputs_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAggregateInputs_NativeFunction, "ReturnValue");
        FindPin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindPin");
        FindPin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindPin_NativeFunction);
        FindPin_InPinPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindPin_NativeFunction, "InPinPath");
        FindPin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindPin_NativeFunction, "ReturnValue");
        FindFunctionForNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindFunctionForNode");
        FindFunctionForNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindFunctionForNode_NativeFunction);
        FindFunctionForNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindFunctionForNode_NativeFunction, "ReturnValue");
        ExecutionIsHaltedAtThisNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ExecutionIsHaltedAtThisNode");
        ExecutionIsHaltedAtThisNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ExecutionIsHaltedAtThisNode_NativeFunction);
        ExecutionIsHaltedAtThisNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExecutionIsHaltedAtThisNode_NativeFunction, "ReturnValue");
        CanOnlyExistOnce_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanOnlyExistOnce");
        CanOnlyExistOnce_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanOnlyExistOnce_NativeFunction);
        CanOnlyExistOnce_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanOnlyExistOnce_NativeFunction, "ReturnValue");
        CanBeUpgraded_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanBeUpgraded");
        CanBeUpgraded_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanBeUpgraded_NativeFunction);
        CanBeUpgraded_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanBeUpgraded_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RigVMNode(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/RigVMDeveloper.RigVMNode:SetHasBreakpoint
    static readonly IntPtr SetHasBreakpoint_NativeFunction;
    static readonly int SetHasBreakpoint_ParamsSize;
    static readonly int SetHasBreakpoint_bValue_Offset;
    
    public void SetHasBreakpoint(bool bValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetHasBreakpoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetHasBreakpoint_bValue_Offset), 0, null, bValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetHasBreakpoint_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:SetExecutionIsHaltedAtThisNode
    static readonly IntPtr SetExecutionIsHaltedAtThisNode_NativeFunction;
    static readonly int SetExecutionIsHaltedAtThisNode_ParamsSize;
    static readonly int SetExecutionIsHaltedAtThisNode_bValue_Offset;
    
    public void SetExecutionIsHaltedAtThisNode(bool bValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetExecutionIsHaltedAtThisNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetExecutionIsHaltedAtThisNode_bValue_Offset), 0, null, bValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetExecutionIsHaltedAtThisNode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:IsVisibleInUI
    static readonly IntPtr IsVisibleInUI_NativeFunction;
    static readonly int IsVisibleInUI_ParamsSize;
    static readonly int IsVisibleInUI_ReturnValue_Offset;
    
    public bool IsVisibleInUI()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsVisibleInUI_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsVisibleInUI_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsVisibleInUI_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:IsSelected
    static readonly IntPtr IsSelected_NativeFunction;
    static readonly int IsSelected_ParamsSize;
    static readonly int IsSelected_ReturnValue_Offset;
    
    public bool IsSelected()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsSelected_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsSelected_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsSelected_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:IsPure
    static readonly IntPtr IsPure_NativeFunction;
    static readonly int IsPure_ParamsSize;
    static readonly int IsPure_ReturnValue_Offset;
    
    public bool IsPure()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPure_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPure_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPure_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:IsMutable
    static readonly IntPtr IsMutable_NativeFunction;
    static readonly int IsMutable_ParamsSize;
    static readonly int IsMutable_ReturnValue_Offset;
    
    public bool IsMutable()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsMutable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsMutable_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsMutable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:IsLoopNode
    static readonly IntPtr IsLoopNode_NativeFunction;
    static readonly int IsLoopNode_ParamsSize;
    static readonly int IsLoopNode_ReturnValue_Offset;
    
    public bool IsLoopNode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLoopNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLoopNode_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLoopNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:IsLinkedTo
    static readonly IntPtr IsLinkedTo_NativeFunction;
    static readonly int IsLinkedTo_ParamsSize;
    static readonly int IsLinkedTo_InNode_Offset;
    static readonly int IsLinkedTo_ReturnValue_Offset;
    
    public bool IsLinkedTo(UnrealSharp.RigVMDeveloper.RigVMNode inNode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLinkedTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMNode>.ToNative(IntPtr.Add(ParamsBuffer, IsLinkedTo_InNode_Offset), 0, null, inNode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLinkedTo_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLinkedTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:IsInputAggregate
    static readonly IntPtr IsInputAggregate_NativeFunction;
    static readonly int IsInputAggregate_ParamsSize;
    static readonly int IsInputAggregate_ReturnValue_Offset;
    
    public bool IsInputAggregate()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsInputAggregate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsInputAggregate_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsInputAggregate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:IsInjected
    static readonly IntPtr IsInjected_NativeFunction;
    static readonly int IsInjected_ParamsSize;
    static readonly int IsInjected_ReturnValue_Offset;
    
    public bool IsInjected()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsInjected_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsInjected_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsInjected_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:IsEvent
    static readonly IntPtr IsEvent_NativeFunction;
    static readonly int IsEvent_ParamsSize;
    static readonly int IsEvent_ReturnValue_Offset;
    
    public bool IsEvent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsEvent_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsEvent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:IsDefinedAsVarying
    static readonly IntPtr IsDefinedAsVarying_NativeFunction;
    static readonly int IsDefinedAsVarying_ParamsSize;
    static readonly int IsDefinedAsVarying_ReturnValue_Offset;
    
    public bool IsDefinedAsVarying()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsDefinedAsVarying_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsDefinedAsVarying_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsDefinedAsVarying_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:IsDefinedAsConstant
    static readonly IntPtr IsDefinedAsConstant_NativeFunction;
    static readonly int IsDefinedAsConstant_ParamsSize;
    static readonly int IsDefinedAsConstant_ReturnValue_Offset;
    
    public bool IsDefinedAsConstant()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsDefinedAsConstant_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsDefinedAsConstant_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsDefinedAsConstant_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:IsDecoratorPin
    static readonly IntPtr IsDecoratorPin_NativeFunction;
    static readonly int IsDecoratorPin_ParamsSize;
    static readonly int IsDecoratorPin_InName_Offset;
    static readonly int IsDecoratorPin_ReturnValue_Offset;
    
    public bool IsDecoratorPin(Name inName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsDecoratorPin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsDecoratorPin_InName_Offset), 0, null, inName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsDecoratorPin_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsDecoratorPin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:IsControlFlowNode
    static readonly IntPtr IsControlFlowNode_NativeFunction;
    static readonly int IsControlFlowNode_ParamsSize;
    static readonly int IsControlFlowNode_ReturnValue_Offset;
    
    public bool IsControlFlowNode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsControlFlowNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsControlFlowNode_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsControlFlowNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:IsAggregate
    static readonly IntPtr IsAggregate_NativeFunction;
    static readonly int IsAggregate_ParamsSize;
    static readonly int IsAggregate_ReturnValue_Offset;
    
    public bool IsAggregate()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsAggregate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsAggregate_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsAggregate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:HasPinOfDirection
    static readonly IntPtr HasPinOfDirection_NativeFunction;
    static readonly int HasPinOfDirection_ParamsSize;
    static readonly int HasPinOfDirection_InDirection_Offset;
    static readonly int HasPinOfDirection_ReturnValue_Offset;
    
    public bool HasPinOfDirection(UnrealSharp.RigVM.ERigVMPinDirection inDirection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasPinOfDirection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RigVM.ERigVMPinDirection>.ToNative(IntPtr.Add(ParamsBuffer, HasPinOfDirection_InDirection_Offset), 0, null, inDirection);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasPinOfDirection_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasPinOfDirection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:HasOutputPin
    static readonly IntPtr HasOutputPin_NativeFunction;
    static readonly int HasOutputPin_ParamsSize;
    static readonly int HasOutputPin_bIncludeIO_Offset;
    static readonly int HasOutputPin_ReturnValue_Offset;
    
    public bool HasOutputPin(bool bIncludeIO = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasOutputPin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, HasOutputPin_bIncludeIO_Offset), 0, null, bIncludeIO);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasOutputPin_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasOutputPin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:HasOrphanedPins
    static readonly IntPtr HasOrphanedPins_NativeFunction;
    static readonly int HasOrphanedPins_ParamsSize;
    static readonly int HasOrphanedPins_ReturnValue_Offset;
    
    public bool HasOrphanedPins()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasOrphanedPins_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasOrphanedPins_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasOrphanedPins_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:HasLazyPin
    static readonly IntPtr HasLazyPin_NativeFunction;
    static readonly int HasLazyPin_ParamsSize;
    static readonly int HasLazyPin_bOnlyConsiderPinsWithLinks_Offset;
    static readonly int HasLazyPin_ReturnValue_Offset;
    
    public bool HasLazyPin(bool bOnlyConsiderPinsWithLinks = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasLazyPin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, HasLazyPin_bOnlyConsiderPinsWithLinks_Offset), 0, null, bOnlyConsiderPinsWithLinks);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasLazyPin_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasLazyPin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:HasIOPin
    static readonly IntPtr HasIOPin_NativeFunction;
    static readonly int HasIOPin_ParamsSize;
    static readonly int HasIOPin_ReturnValue_Offset;
    
    public bool HasIOPin()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasIOPin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasIOPin_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasIOPin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:HasInputPin
    static readonly IntPtr HasInputPin_NativeFunction;
    static readonly int HasInputPin_ParamsSize;
    static readonly int HasInputPin_bIncludeIO_Offset;
    static readonly int HasInputPin_ReturnValue_Offset;
    
    public bool HasInputPin(bool bIncludeIO = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasInputPin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, HasInputPin_bIncludeIO_Offset), 0, null, bIncludeIO);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasInputPin_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasInputPin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:HasBreakpoint
    static readonly IntPtr HasBreakpoint_NativeFunction;
    static readonly int HasBreakpoint_ParamsSize;
    static readonly int HasBreakpoint_ReturnValue_Offset;
    
    public bool HasBreakpoint()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasBreakpoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasBreakpoint_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasBreakpoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetSupportedWorkflows
    static readonly IntPtr GetSupportedWorkflows_NativeFunction;
    static readonly int GetSupportedWorkflows_ParamsSize;
    static readonly int GetSupportedWorkflows_InType_Offset;
    static readonly int GetSupportedWorkflows_InSubject_Offset;
    static readonly int GetSupportedWorkflows_ReturnValue_Offset;
    static readonly int GetSupportedWorkflows_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVM.RigVMUserWorkflow> GetSupportedWorkflows(UnrealSharp.RigVM.ERigVMUserWorkflowType inType, UnrealSharp.CoreUObject.Object inSubject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSupportedWorkflows_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RigVM.ERigVMUserWorkflowType>.ToNative(IntPtr.Add(ParamsBuffer, GetSupportedWorkflows_InType_Offset), 0, null, inType);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetSupportedWorkflows_InSubject_Offset), 0, null, inSubject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSupportedWorkflows_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVM.RigVMUserWorkflow> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSupportedWorkflows_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVM.RigVMUserWorkflow> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVM.RigVMUserWorkflow> (1, UnrealSharp.RigVM.RigVMUserWorkflowMarshaler.ToNative, UnrealSharp.RigVM.RigVMUserWorkflowMarshaler.FromNative, GetSupportedWorkflows_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVM.RigVMUserWorkflow>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetSize
    static readonly IntPtr GetSize_NativeFunction;
    static readonly int GetSize_ParamsSize;
    static readonly int GetSize_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 GetSize()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSize_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetSize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetSecondAggregatePin
    static readonly IntPtr GetSecondAggregatePin_NativeFunction;
    static readonly int GetSecondAggregatePin_ParamsSize;
    static readonly int GetSecondAggregatePin_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMPin GetSecondAggregatePin()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSecondAggregatePin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSecondAggregatePin_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMPin returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative(IntPtr.Add(ParamsBuffer, GetSecondAggregatePin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetRootGraph
    static readonly IntPtr GetRootGraph_NativeFunction;
    static readonly int GetRootGraph_ParamsSize;
    static readonly int GetRootGraph_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMGraph GetRootGraph()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRootGraph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRootGraph_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMGraph returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.FromNative(IntPtr.Add(ParamsBuffer, GetRootGraph_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetPreviousFName
    static readonly IntPtr GetPreviousFName_NativeFunction;
    static readonly int GetPreviousFName_ParamsSize;
    static readonly int GetPreviousFName_ReturnValue_Offset;
    
    public Name GetPreviousFName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPreviousFName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPreviousFName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetPreviousFName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetPosition
    static readonly IntPtr GetPosition_NativeFunction;
    static readonly int GetPosition_ParamsSize;
    static readonly int GetPosition_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 GetPosition()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetPins
    static readonly IntPtr GetPins_NativeFunction;
    static readonly int GetPins_ParamsSize;
    static readonly int GetPins_ReturnValue_Offset;
    static readonly int GetPins_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> GetPins()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPins_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPins_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPins_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative, GetPins_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetOrphanedPins
    static readonly IntPtr GetOrphanedPins_NativeFunction;
    static readonly int GetOrphanedPins_ParamsSize;
    static readonly int GetOrphanedPins_ReturnValue_Offset;
    static readonly int GetOrphanedPins_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> GetOrphanedPins()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOrphanedPins_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOrphanedPins_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetOrphanedPins_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative, GetOrphanedPins_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetOppositeAggregatePin
    static readonly IntPtr GetOppositeAggregatePin_NativeFunction;
    static readonly int GetOppositeAggregatePin_ParamsSize;
    static readonly int GetOppositeAggregatePin_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMPin GetOppositeAggregatePin()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOppositeAggregatePin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOppositeAggregatePin_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMPin returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative(IntPtr.Add(ParamsBuffer, GetOppositeAggregatePin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetNodeTitle
    static readonly IntPtr GetNodeTitle_NativeFunction;
    static readonly int GetNodeTitle_ParamsSize;
    static readonly int GetNodeTitle_ReturnValue_Offset;
    
    public string GetNodeTitle()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNodeTitle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNodeTitle_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetNodeTitle_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetNodePath
    static readonly IntPtr GetNodePath_NativeFunction;
    static readonly int GetNodePath_ParamsSize;
    static readonly int GetNodePath_bRecursive_Offset;
    static readonly int GetNodePath_ReturnValue_Offset;
    
    public string GetNodePath(bool bRecursive = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNodePath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetNodePath_bRecursive_Offset), 0, null, bRecursive);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNodePath_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetNodePath_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetNodeIndex
    static readonly IntPtr GetNodeIndex_NativeFunction;
    static readonly int GetNodeIndex_ParamsSize;
    static readonly int GetNodeIndex_ReturnValue_Offset;
    
    public int GetNodeIndex()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNodeIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNodeIndex_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNodeIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetNodeColor
    static readonly IntPtr GetNodeColor_NativeFunction;
    static readonly int GetNodeColor_ParamsSize;
    static readonly int GetNodeColor_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor GetNodeColor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNodeColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNodeColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, GetNodeColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetNextAggregateName
    static readonly IntPtr GetNextAggregateName_NativeFunction;
    static readonly int GetNextAggregateName_ParamsSize;
    static readonly int GetNextAggregateName_InLastAggregatePinName_Offset;
    static readonly int GetNextAggregateName_ReturnValue_Offset;
    
    public Name GetNextAggregateName(Name inLastAggregatePinName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNextAggregateName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetNextAggregateName_InLastAggregatePinName_Offset), 0, null, inLastAggregatePinName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNextAggregateName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetNextAggregateName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetLinks
    static readonly IntPtr GetLinks_NativeFunction;
    static readonly int GetLinks_ParamsSize;
    static readonly int GetLinks_ReturnValue_Offset;
    static readonly int GetLinks_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMLink> GetLinks()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinks_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMLink> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLinks_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLink>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLink>.FromNative, GetLinks_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetLinkedTargetNodes
    static readonly IntPtr GetLinkedTargetNodes_NativeFunction;
    static readonly int GetLinkedTargetNodes_ParamsSize;
    static readonly int GetLinkedTargetNodes_ReturnValue_Offset;
    static readonly int GetLinkedTargetNodes_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMNode> GetLinkedTargetNodes()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinkedTargetNodes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinkedTargetNodes_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMNode> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLinkedTargetNodes_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMNode> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMNode> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMNode>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMNode>.FromNative, GetLinkedTargetNodes_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMNode>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetLinkedSourceNodes
    static readonly IntPtr GetLinkedSourceNodes_NativeFunction;
    static readonly int GetLinkedSourceNodes_ParamsSize;
    static readonly int GetLinkedSourceNodes_ReturnValue_Offset;
    static readonly int GetLinkedSourceNodes_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMNode> GetLinkedSourceNodes()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinkedSourceNodes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinkedSourceNodes_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMNode> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLinkedSourceNodes_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMNode> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMNode> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMNode>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMNode>.FromNative, GetLinkedSourceNodes_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMNode>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetInjectionInfo
    static readonly IntPtr GetInjectionInfo_NativeFunction;
    static readonly int GetInjectionInfo_ParamsSize;
    static readonly int GetInjectionInfo_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMInjectionInfo GetInjectionInfo()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInjectionInfo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInjectionInfo_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMInjectionInfo returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMInjectionInfo>.FromNative(IntPtr.Add(ParamsBuffer, GetInjectionInfo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetGraphDepth
    static readonly IntPtr GetGraphDepth_NativeFunction;
    static readonly int GetGraphDepth_ParamsSize;
    static readonly int GetGraphDepth_ReturnValue_Offset;
    
    public int GetGraphDepth()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGraphDepth_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGraphDepth_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetGraphDepth_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetGraph
    static readonly IntPtr GetGraph_NativeFunction;
    static readonly int GetGraph_ParamsSize;
    static readonly int GetGraph_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMGraph GetGraph()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGraph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGraph_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMGraph returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.FromNative(IntPtr.Add(ParamsBuffer, GetGraph_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetFirstAggregatePin
    static readonly IntPtr GetFirstAggregatePin_NativeFunction;
    static readonly int GetFirstAggregatePin_ParamsSize;
    static readonly int GetFirstAggregatePin_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMPin GetFirstAggregatePin()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFirstAggregatePin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFirstAggregatePin_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMPin returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative(IntPtr.Add(ParamsBuffer, GetFirstAggregatePin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetEventName
    static readonly IntPtr GetEventName_NativeFunction;
    static readonly int GetEventName_ParamsSize;
    static readonly int GetEventName_ReturnValue_Offset;
    
    public Name GetEventName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEventName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEventName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetEventName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetDecoratorPins
    static readonly IntPtr GetDecoratorPins_NativeFunction;
    static readonly int GetDecoratorPins_ParamsSize;
    static readonly int GetDecoratorPins_ReturnValue_Offset;
    static readonly int GetDecoratorPins_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> GetDecoratorPins()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDecoratorPins_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDecoratorPins_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetDecoratorPins_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative, GetDecoratorPins_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetAllPinsRecursively
    static readonly IntPtr GetAllPinsRecursively_NativeFunction;
    static readonly int GetAllPinsRecursively_ParamsSize;
    static readonly int GetAllPinsRecursively_ReturnValue_Offset;
    static readonly int GetAllPinsRecursively_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> GetAllPinsRecursively()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllPinsRecursively_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAllPinsRecursively_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllPinsRecursively_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative, GetAllPinsRecursively_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetAggregateOutputs
    static readonly IntPtr GetAggregateOutputs_NativeFunction;
    static readonly int GetAggregateOutputs_ParamsSize;
    static readonly int GetAggregateOutputs_ReturnValue_Offset;
    static readonly int GetAggregateOutputs_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> GetAggregateOutputs()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAggregateOutputs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAggregateOutputs_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAggregateOutputs_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative, GetAggregateOutputs_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:GetAggregateInputs
    static readonly IntPtr GetAggregateInputs_NativeFunction;
    static readonly int GetAggregateInputs_ParamsSize;
    static readonly int GetAggregateInputs_ReturnValue_Offset;
    static readonly int GetAggregateInputs_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> GetAggregateInputs()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAggregateInputs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAggregateInputs_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAggregateInputs_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative, GetAggregateInputs_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:FindPin
    static readonly IntPtr FindPin_NativeFunction;
    static readonly int FindPin_ParamsSize;
    static readonly int FindPin_InPinPath_Offset;
    static readonly int FindPin_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMPin FindPin(string inPinPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindPin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InPinPath_NativePtr = IntPtr.Add(ParamsBuffer,FindPin_InPinPath_Offset);
            StringMarshaller.ToNative(InPinPath_NativePtr,0,null,inPinPath);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindPin_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMPin returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative(IntPtr.Add(ParamsBuffer, FindPin_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InPinPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:FindFunctionForNode
    static readonly IntPtr FindFunctionForNode_NativeFunction;
    static readonly int FindFunctionForNode_ParamsSize;
    static readonly int FindFunctionForNode_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMLibraryNode FindFunctionForNode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindFunctionForNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindFunctionForNode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMLibraryNode returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLibraryNode>.FromNative(IntPtr.Add(ParamsBuffer, FindFunctionForNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:ExecutionIsHaltedAtThisNode
    static readonly IntPtr ExecutionIsHaltedAtThisNode_NativeFunction;
    static readonly int ExecutionIsHaltedAtThisNode_ParamsSize;
    static readonly int ExecutionIsHaltedAtThisNode_ReturnValue_Offset;
    
    public bool ExecutionIsHaltedAtThisNode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ExecutionIsHaltedAtThisNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ExecutionIsHaltedAtThisNode_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ExecutionIsHaltedAtThisNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:CanOnlyExistOnce
    static readonly IntPtr CanOnlyExistOnce_NativeFunction;
    static readonly int CanOnlyExistOnce_ParamsSize;
    static readonly int CanOnlyExistOnce_ReturnValue_Offset;
    
    public bool CanOnlyExistOnce()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanOnlyExistOnce_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanOnlyExistOnce_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanOnlyExistOnce_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMNode:CanBeUpgraded
    static readonly IntPtr CanBeUpgraded_NativeFunction;
    static readonly int CanBeUpgraded_ParamsSize;
    static readonly int CanBeUpgraded_ReturnValue_Offset;
    
    public bool CanBeUpgraded()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanBeUpgraded_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanBeUpgraded_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanBeUpgraded_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
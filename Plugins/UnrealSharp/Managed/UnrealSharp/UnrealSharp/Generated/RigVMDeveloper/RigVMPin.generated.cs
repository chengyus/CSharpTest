// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.RigVMDeveloper;

[UClass]
public partial class RigVMPin : UnrealSharp.CoreUObject.Object
{
    
    static RigVMPin()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RigVMPin");
        
        
        ShouldOnlyShowSubPins_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ShouldOnlyShowSubPins");
        ShouldOnlyShowSubPins_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ShouldOnlyShowSubPins_NativeFunction);
        ShouldOnlyShowSubPins_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShouldOnlyShowSubPins_NativeFunction, "ReturnValue");
        ShouldHideSubPins_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ShouldHideSubPins");
        ShouldHideSubPins_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ShouldHideSubPins_NativeFunction);
        ShouldHideSubPins_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShouldHideSubPins_NativeFunction, "ReturnValue");
        RequiresWatch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RequiresWatch");
        RequiresWatch_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RequiresWatch_NativeFunction);
        RequiresWatch_bCheckExposedPinChain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RequiresWatch_NativeFunction, "bCheckExposedPinChain");
        RequiresWatch_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RequiresWatch_NativeFunction, "ReturnValue");
        IsWildCard_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsWildCard");
        IsWildCard_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsWildCard_NativeFunction);
        IsWildCard_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsWildCard_NativeFunction, "ReturnValue");
        IsUObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsUObject");
        IsUObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsUObject_NativeFunction);
        IsUObject_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsUObject_NativeFunction, "ReturnValue");
        IsStructMember_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsStructMember");
        IsStructMember_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsStructMember_NativeFunction);
        IsStructMember_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStructMember_NativeFunction, "ReturnValue");
        IsStruct_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsStruct");
        IsStruct_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsStruct_NativeFunction);
        IsStruct_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStruct_NativeFunction, "ReturnValue");
        IsStringType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsStringType");
        IsStringType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsStringType_NativeFunction);
        IsStringType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStringType_NativeFunction, "ReturnValue");
        IsRootPin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRootPin");
        IsRootPin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRootPin_NativeFunction);
        IsRootPin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRootPin_NativeFunction, "ReturnValue");
        IsReferenceCountedContainer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsReferenceCountedContainer");
        IsReferenceCountedContainer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsReferenceCountedContainer_NativeFunction);
        IsReferenceCountedContainer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsReferenceCountedContainer_NativeFunction, "ReturnValue");
        IsLinkedTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLinkedTo");
        IsLinkedTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLinkedTo_NativeFunction);
        IsLinkedTo_InPin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLinkedTo_NativeFunction, "InPin");
        IsLinkedTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLinkedTo_NativeFunction, "ReturnValue");
        IsLazy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLazy");
        IsLazy_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLazy_NativeFunction);
        IsLazy_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLazy_NativeFunction, "ReturnValue");
        IsInterface_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsInterface");
        IsInterface_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsInterface_NativeFunction);
        IsInterface_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsInterface_NativeFunction, "ReturnValue");
        IsFixedSizeArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsFixedSizeArray");
        IsFixedSizeArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsFixedSizeArray_NativeFunction);
        IsFixedSizeArray_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsFixedSizeArray_NativeFunction, "ReturnValue");
        IsExpanded_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsExpanded");
        IsExpanded_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsExpanded_NativeFunction);
        IsExpanded_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsExpanded_NativeFunction, "ReturnValue");
        IsExecuteContext_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsExecuteContext");
        IsExecuteContext_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsExecuteContext_NativeFunction);
        IsExecuteContext_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsExecuteContext_NativeFunction, "ReturnValue");
        IsEnum_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsEnum");
        IsEnum_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsEnum_NativeFunction);
        IsEnum_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEnum_NativeFunction, "ReturnValue");
        IsDynamicArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsDynamicArray");
        IsDynamicArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsDynamicArray_NativeFunction);
        IsDynamicArray_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDynamicArray_NativeFunction, "ReturnValue");
        IsDefinedAsConstant_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsDefinedAsConstant");
        IsDefinedAsConstant_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsDefinedAsConstant_NativeFunction);
        IsDefinedAsConstant_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDefinedAsConstant_NativeFunction, "ReturnValue");
        IsDecoratorPin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsDecoratorPin");
        IsDecoratorPin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsDecoratorPin_NativeFunction);
        IsDecoratorPin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDecoratorPin_NativeFunction, "ReturnValue");
        IsArrayElement_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsArrayElement");
        IsArrayElement_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsArrayElement_NativeFunction);
        IsArrayElement_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsArrayElement_NativeFunction, "ReturnValue");
        IsArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsArray");
        IsArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsArray_NativeFunction);
        IsArray_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsArray_NativeFunction, "ReturnValue");
        GetTargetLinks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTargetLinks");
        GetTargetLinks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTargetLinks_NativeFunction);
        GetTargetLinks_bRecursive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTargetLinks_NativeFunction, "bRecursive");
        GetTargetLinks_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTargetLinks_NativeFunction, "ReturnValue");
        GetTargetLinks_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetTargetLinks_NativeFunction, "ReturnValue");
        GetSubPins_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSubPins");
        GetSubPins_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSubPins_NativeFunction);
        GetSubPins_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSubPins_NativeFunction, "ReturnValue");
        GetSubPins_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSubPins_NativeFunction, "ReturnValue");
        GetSubPinPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSubPinPath");
        GetSubPinPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSubPinPath_NativeFunction);
        GetSubPinPath_InParentPin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSubPinPath_NativeFunction, "InParentPin");
        GetSubPinPath_bIncludeParentPinName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSubPinPath_NativeFunction, "bIncludeParentPinName");
        GetSubPinPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSubPinPath_NativeFunction, "ReturnValue");
        GetSourceLinks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSourceLinks");
        GetSourceLinks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSourceLinks_NativeFunction);
        GetSourceLinks_bRecursive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSourceLinks_NativeFunction, "bRecursive");
        GetSourceLinks_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSourceLinks_NativeFunction, "ReturnValue");
        GetSourceLinks_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSourceLinks_NativeFunction, "ReturnValue");
        GetSegmentPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSegmentPath");
        GetSegmentPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSegmentPath_NativeFunction);
        GetSegmentPath_bIncludeRootPin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSegmentPath_NativeFunction, "bIncludeRootPin");
        GetSegmentPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSegmentPath_NativeFunction, "ReturnValue");
        GetScriptStruct_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetScriptStruct");
        GetScriptStruct_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetScriptStruct_NativeFunction);
        GetScriptStruct_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScriptStruct_NativeFunction, "ReturnValue");
        GetRootPin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRootPin");
        GetRootPin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRootPin_NativeFunction);
        GetRootPin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRootPin_NativeFunction, "ReturnValue");
        GetPinPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPinPath");
        GetPinPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPinPath_NativeFunction);
        GetPinPath_bUseNodePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPinPath_NativeFunction, "bUseNodePath");
        GetPinPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPinPath_NativeFunction, "ReturnValue");
        GetPinIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPinIndex");
        GetPinIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPinIndex_NativeFunction);
        GetPinIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPinIndex_NativeFunction, "ReturnValue");
        GetPinForLink_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPinForLink");
        GetPinForLink_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPinForLink_NativeFunction);
        GetPinForLink_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPinForLink_NativeFunction, "ReturnValue");
        GetParentPin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParentPin");
        GetParentPin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParentPin_NativeFunction);
        GetParentPin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentPin_NativeFunction, "ReturnValue");
        GetOriginalPinFromInjectedNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOriginalPinFromInjectedNode");
        GetOriginalPinFromInjectedNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOriginalPinFromInjectedNode_NativeFunction);
        GetOriginalPinFromInjectedNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOriginalPinFromInjectedNode_NativeFunction, "ReturnValue");
        GetNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNode");
        GetNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNode_NativeFunction);
        GetNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNode_NativeFunction, "ReturnValue");
        GetLinks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinks");
        GetLinks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinks_NativeFunction);
        GetLinks_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinks_NativeFunction, "ReturnValue");
        GetLinks_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLinks_NativeFunction, "ReturnValue");
        GetLinkedTargetPins_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinkedTargetPins");
        GetLinkedTargetPins_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinkedTargetPins_NativeFunction);
        GetLinkedTargetPins_bRecursive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedTargetPins_NativeFunction, "bRecursive");
        GetLinkedTargetPins_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedTargetPins_NativeFunction, "ReturnValue");
        GetLinkedTargetPins_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLinkedTargetPins_NativeFunction, "ReturnValue");
        GetLinkedSourcePins_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinkedSourcePins");
        GetLinkedSourcePins_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinkedSourcePins_NativeFunction);
        GetLinkedSourcePins_bRecursive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedSourcePins_NativeFunction, "bRecursive");
        GetLinkedSourcePins_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedSourcePins_NativeFunction, "ReturnValue");
        GetLinkedSourcePins_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLinkedSourcePins_NativeFunction, "ReturnValue");
        GetGraph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGraph");
        GetGraph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGraph_NativeFunction);
        GetGraph_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGraph_NativeFunction, "ReturnValue");
        GetEnum_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEnum");
        GetEnum_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEnum_NativeFunction);
        GetEnum_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEnum_NativeFunction, "ReturnValue");
        GetDisplayName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDisplayName");
        GetDisplayName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDisplayName_NativeFunction);
        GetDisplayName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDisplayName_NativeFunction, "ReturnValue");
        GetDirection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDirection");
        GetDirection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDirection_NativeFunction);
        GetDirection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirection_NativeFunction, "ReturnValue");
        GetDefaultValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultValue");
        GetDefaultValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultValue_NativeFunction);
        GetDefaultValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultValue_NativeFunction, "ReturnValue");
        GetCustomWidgetName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomWidgetName");
        GetCustomWidgetName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomWidgetName_NativeFunction);
        GetCustomWidgetName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomWidgetName_NativeFunction, "ReturnValue");
        GetCPPTypeObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCPPTypeObject");
        GetCPPTypeObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCPPTypeObject_NativeFunction);
        GetCPPTypeObject_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCPPTypeObject_NativeFunction, "ReturnValue");
        GetCPPType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCPPType");
        GetCPPType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCPPType_NativeFunction);
        GetCPPType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCPPType_NativeFunction, "ReturnValue");
        GetArraySize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetArraySize");
        GetArraySize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetArraySize_NativeFunction);
        GetArraySize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetArraySize_NativeFunction, "ReturnValue");
        GetArrayElementCppType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetArrayElementCppType");
        GetArrayElementCppType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetArrayElementCppType_NativeFunction);
        GetArrayElementCppType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetArrayElementCppType_NativeFunction, "ReturnValue");
        GetAbsolutePinIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAbsolutePinIndex");
        GetAbsolutePinIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAbsolutePinIndex_NativeFunction);
        GetAbsolutePinIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAbsolutePinIndex_NativeFunction, "ReturnValue");
        FindSubPin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindSubPin");
        FindSubPin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindSubPin_NativeFunction);
        FindSubPin_InPinPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindSubPin_NativeFunction, "InPinPath");
        FindSubPin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindSubPin_NativeFunction, "ReturnValue");
        FindLinkForPin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindLinkForPin");
        FindLinkForPin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindLinkForPin_NativeFunction);
        FindLinkForPin_InOtherPin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindLinkForPin_NativeFunction, "InOtherPin");
        FindLinkForPin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindLinkForPin_NativeFunction, "ReturnValue");
        ContainsWildCardSubPin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ContainsWildCardSubPin");
        ContainsWildCardSubPin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ContainsWildCardSubPin_NativeFunction);
        ContainsWildCardSubPin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ContainsWildCardSubPin_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RigVMPin(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/RigVMDeveloper.RigVMPin:ShouldOnlyShowSubPins
    static readonly IntPtr ShouldOnlyShowSubPins_NativeFunction;
    static readonly int ShouldOnlyShowSubPins_ParamsSize;
    static readonly int ShouldOnlyShowSubPins_ReturnValue_Offset;
    
    public bool ShouldOnlyShowSubPins()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ShouldOnlyShowSubPins_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ShouldOnlyShowSubPins_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ShouldOnlyShowSubPins_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:ShouldHideSubPins
    static readonly IntPtr ShouldHideSubPins_NativeFunction;
    static readonly int ShouldHideSubPins_ParamsSize;
    static readonly int ShouldHideSubPins_ReturnValue_Offset;
    
    public bool ShouldHideSubPins()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ShouldHideSubPins_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ShouldHideSubPins_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ShouldHideSubPins_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:RequiresWatch
    static readonly IntPtr RequiresWatch_NativeFunction;
    static readonly int RequiresWatch_ParamsSize;
    static readonly int RequiresWatch_bCheckExposedPinChain_Offset;
    static readonly int RequiresWatch_ReturnValue_Offset;
    
    public bool RequiresWatch(bool bCheckExposedPinChain = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RequiresWatch_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, RequiresWatch_bCheckExposedPinChain_Offset), 0, null, bCheckExposedPinChain);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RequiresWatch_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RequiresWatch_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsWildCard
    static readonly IntPtr IsWildCard_NativeFunction;
    static readonly int IsWildCard_ParamsSize;
    static readonly int IsWildCard_ReturnValue_Offset;
    
    public bool IsWildCard()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsWildCard_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsWildCard_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsWildCard_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsUObject
    static readonly IntPtr IsUObject_NativeFunction;
    static readonly int IsUObject_ParamsSize;
    static readonly int IsUObject_ReturnValue_Offset;
    
    public bool IsUObject()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsUObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsUObject_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsUObject_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsStructMember
    static readonly IntPtr IsStructMember_NativeFunction;
    static readonly int IsStructMember_ParamsSize;
    static readonly int IsStructMember_ReturnValue_Offset;
    
    public bool IsStructMember()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsStructMember_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsStructMember_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsStructMember_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsStruct
    static readonly IntPtr IsStruct_NativeFunction;
    static readonly int IsStruct_ParamsSize;
    static readonly int IsStruct_ReturnValue_Offset;
    
    public bool IsStruct()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsStruct_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsStruct_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsStruct_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsStringType
    static readonly IntPtr IsStringType_NativeFunction;
    static readonly int IsStringType_ParamsSize;
    static readonly int IsStringType_ReturnValue_Offset;
    
    public bool IsStringType()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsStringType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsStringType_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsStringType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsRootPin
    static readonly IntPtr IsRootPin_NativeFunction;
    static readonly int IsRootPin_ParamsSize;
    static readonly int IsRootPin_ReturnValue_Offset;
    
    public bool IsRootPin()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRootPin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsRootPin_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRootPin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsReferenceCountedContainer
    static readonly IntPtr IsReferenceCountedContainer_NativeFunction;
    static readonly int IsReferenceCountedContainer_ParamsSize;
    static readonly int IsReferenceCountedContainer_ReturnValue_Offset;
    
    public bool IsReferenceCountedContainer()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsReferenceCountedContainer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsReferenceCountedContainer_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsReferenceCountedContainer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsLinkedTo
    static readonly IntPtr IsLinkedTo_NativeFunction;
    static readonly int IsLinkedTo_ParamsSize;
    static readonly int IsLinkedTo_InPin_Offset;
    static readonly int IsLinkedTo_ReturnValue_Offset;
    
    public bool IsLinkedTo(UnrealSharp.RigVMDeveloper.RigVMPin inPin)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLinkedTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.ToNative(IntPtr.Add(ParamsBuffer, IsLinkedTo_InPin_Offset), 0, null, inPin);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLinkedTo_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLinkedTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsLazy
    static readonly IntPtr IsLazy_NativeFunction;
    static readonly int IsLazy_ParamsSize;
    static readonly int IsLazy_ReturnValue_Offset;
    
    public bool IsLazy()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLazy_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLazy_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLazy_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsInterface
    static readonly IntPtr IsInterface_NativeFunction;
    static readonly int IsInterface_ParamsSize;
    static readonly int IsInterface_ReturnValue_Offset;
    
    public bool IsInterface()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsInterface_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsInterface_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsInterface_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsFixedSizeArray
    static readonly IntPtr IsFixedSizeArray_NativeFunction;
    static readonly int IsFixedSizeArray_ParamsSize;
    static readonly int IsFixedSizeArray_ReturnValue_Offset;
    
    public bool IsFixedSizeArray()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsFixedSizeArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsFixedSizeArray_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsFixedSizeArray_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsExpanded
    static readonly IntPtr IsExpanded_NativeFunction;
    static readonly int IsExpanded_ParamsSize;
    static readonly int IsExpanded_ReturnValue_Offset;
    
    public bool IsExpanded()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsExpanded_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsExpanded_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsExpanded_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsExecuteContext
    static readonly IntPtr IsExecuteContext_NativeFunction;
    static readonly int IsExecuteContext_ParamsSize;
    static readonly int IsExecuteContext_ReturnValue_Offset;
    
    public bool IsExecuteContext()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsExecuteContext_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsExecuteContext_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsExecuteContext_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsEnum
    static readonly IntPtr IsEnum_NativeFunction;
    static readonly int IsEnum_ParamsSize;
    static readonly int IsEnum_ReturnValue_Offset;
    
    public bool IsEnum()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsEnum_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsEnum_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsEnum_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsDynamicArray
    static readonly IntPtr IsDynamicArray_NativeFunction;
    static readonly int IsDynamicArray_ParamsSize;
    static readonly int IsDynamicArray_ReturnValue_Offset;
    
    public bool IsDynamicArray()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsDynamicArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsDynamicArray_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsDynamicArray_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsDefinedAsConstant
    static readonly IntPtr IsDefinedAsConstant_NativeFunction;
    static readonly int IsDefinedAsConstant_ParamsSize;
    static readonly int IsDefinedAsConstant_ReturnValue_Offset;
    
    public bool IsDefinedAsConstant()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsDefinedAsConstant_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsDefinedAsConstant_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsDefinedAsConstant_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsDecoratorPin
    static readonly IntPtr IsDecoratorPin_NativeFunction;
    static readonly int IsDecoratorPin_ParamsSize;
    static readonly int IsDecoratorPin_ReturnValue_Offset;
    
    public bool IsDecoratorPin()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsDecoratorPin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsDecoratorPin_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsDecoratorPin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsArrayElement
    static readonly IntPtr IsArrayElement_NativeFunction;
    static readonly int IsArrayElement_ParamsSize;
    static readonly int IsArrayElement_ReturnValue_Offset;
    
    public bool IsArrayElement()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsArrayElement_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsArrayElement_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsArrayElement_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:IsArray
    static readonly IntPtr IsArray_NativeFunction;
    static readonly int IsArray_ParamsSize;
    static readonly int IsArray_ReturnValue_Offset;
    
    public bool IsArray()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsArray_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsArray_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetTargetLinks
    static readonly IntPtr GetTargetLinks_NativeFunction;
    static readonly int GetTargetLinks_ParamsSize;
    static readonly int GetTargetLinks_bRecursive_Offset;
    static readonly int GetTargetLinks_ReturnValue_Offset;
    static readonly int GetTargetLinks_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMLink> GetTargetLinks(bool bRecursive = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTargetLinks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetTargetLinks_bRecursive_Offset), 0, null, bRecursive);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTargetLinks_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMLink> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetTargetLinks_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLink>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLink>.FromNative, GetTargetLinks_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetSubPins
    static readonly IntPtr GetSubPins_NativeFunction;
    static readonly int GetSubPins_ParamsSize;
    static readonly int GetSubPins_ReturnValue_Offset;
    static readonly int GetSubPins_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> GetSubPins()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSubPins_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSubPins_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSubPins_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative, GetSubPins_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetSubPinPath
    static readonly IntPtr GetSubPinPath_NativeFunction;
    static readonly int GetSubPinPath_ParamsSize;
    static readonly int GetSubPinPath_InParentPin_Offset;
    static readonly int GetSubPinPath_bIncludeParentPinName_Offset;
    static readonly int GetSubPinPath_ReturnValue_Offset;
    
    public string GetSubPinPath(UnrealSharp.RigVMDeveloper.RigVMPin inParentPin, bool bIncludeParentPinName = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSubPinPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.ToNative(IntPtr.Add(ParamsBuffer, GetSubPinPath_InParentPin_Offset), 0, null, inParentPin);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetSubPinPath_bIncludeParentPinName_Offset), 0, null, bIncludeParentPinName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSubPinPath_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetSubPinPath_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetSourceLinks
    static readonly IntPtr GetSourceLinks_NativeFunction;
    static readonly int GetSourceLinks_ParamsSize;
    static readonly int GetSourceLinks_bRecursive_Offset;
    static readonly int GetSourceLinks_ReturnValue_Offset;
    static readonly int GetSourceLinks_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMLink> GetSourceLinks(bool bRecursive = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSourceLinks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetSourceLinks_bRecursive_Offset), 0, null, bRecursive);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSourceLinks_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMLink> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSourceLinks_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLink>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLink>.FromNative, GetSourceLinks_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetSegmentPath
    static readonly IntPtr GetSegmentPath_NativeFunction;
    static readonly int GetSegmentPath_ParamsSize;
    static readonly int GetSegmentPath_bIncludeRootPin_Offset;
    static readonly int GetSegmentPath_ReturnValue_Offset;
    
    public string GetSegmentPath(bool bIncludeRootPin = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSegmentPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetSegmentPath_bIncludeRootPin_Offset), 0, null, bIncludeRootPin);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSegmentPath_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetSegmentPath_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetScriptStruct
    static readonly IntPtr GetScriptStruct_NativeFunction;
    static readonly int GetScriptStruct_ParamsSize;
    static readonly int GetScriptStruct_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.ScriptStruct GetScriptStruct()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetScriptStruct_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetScriptStruct_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.ScriptStruct returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.ScriptStruct>.FromNative(IntPtr.Add(ParamsBuffer, GetScriptStruct_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetRootPin
    static readonly IntPtr GetRootPin_NativeFunction;
    static readonly int GetRootPin_ParamsSize;
    static readonly int GetRootPin_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMPin GetRootPin()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRootPin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRootPin_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMPin returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative(IntPtr.Add(ParamsBuffer, GetRootPin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetPinPath
    static readonly IntPtr GetPinPath_NativeFunction;
    static readonly int GetPinPath_ParamsSize;
    static readonly int GetPinPath_bUseNodePath_Offset;
    static readonly int GetPinPath_ReturnValue_Offset;
    
    public string GetPinPath(bool bUseNodePath = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPinPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetPinPath_bUseNodePath_Offset), 0, null, bUseNodePath);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPinPath_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetPinPath_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetPinIndex
    static readonly IntPtr GetPinIndex_NativeFunction;
    static readonly int GetPinIndex_ParamsSize;
    static readonly int GetPinIndex_ReturnValue_Offset;
    
    public int GetPinIndex()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPinIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPinIndex_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetPinIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetPinForLink
    static readonly IntPtr GetPinForLink_NativeFunction;
    static readonly int GetPinForLink_ParamsSize;
    static readonly int GetPinForLink_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMPin GetPinForLink()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPinForLink_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPinForLink_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMPin returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative(IntPtr.Add(ParamsBuffer, GetPinForLink_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetParentPin
    static readonly IntPtr GetParentPin_NativeFunction;
    static readonly int GetParentPin_ParamsSize;
    static readonly int GetParentPin_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMPin GetParentPin()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParentPin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParentPin_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMPin returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative(IntPtr.Add(ParamsBuffer, GetParentPin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetOriginalPinFromInjectedNode
    static readonly IntPtr GetOriginalPinFromInjectedNode_NativeFunction;
    static readonly int GetOriginalPinFromInjectedNode_ParamsSize;
    static readonly int GetOriginalPinFromInjectedNode_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMPin GetOriginalPinFromInjectedNode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOriginalPinFromInjectedNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOriginalPinFromInjectedNode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMPin returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative(IntPtr.Add(ParamsBuffer, GetOriginalPinFromInjectedNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetNode
    static readonly IntPtr GetNode_NativeFunction;
    static readonly int GetNode_ParamsSize;
    static readonly int GetNode_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMNode GetNode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMNode returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMNode>.FromNative(IntPtr.Add(ParamsBuffer, GetNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetLinks
    static readonly IntPtr GetLinks_NativeFunction;
    static readonly int GetLinks_ParamsSize;
    static readonly int GetLinks_ReturnValue_Offset;
    static readonly int GetLinks_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMLink> GetLinks()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinks_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMLink> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLinks_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLink>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLink>.FromNative, GetLinks_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMLink>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetLinkedTargetPins
    static readonly IntPtr GetLinkedTargetPins_NativeFunction;
    static readonly int GetLinkedTargetPins_ParamsSize;
    static readonly int GetLinkedTargetPins_bRecursive_Offset;
    static readonly int GetLinkedTargetPins_ReturnValue_Offset;
    static readonly int GetLinkedTargetPins_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> GetLinkedTargetPins(bool bRecursive = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinkedTargetPins_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetLinkedTargetPins_bRecursive_Offset), 0, null, bRecursive);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinkedTargetPins_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLinkedTargetPins_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative, GetLinkedTargetPins_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetLinkedSourcePins
    static readonly IntPtr GetLinkedSourcePins_NativeFunction;
    static readonly int GetLinkedSourcePins_ParamsSize;
    static readonly int GetLinkedSourcePins_bRecursive_Offset;
    static readonly int GetLinkedSourcePins_ReturnValue_Offset;
    static readonly int GetLinkedSourcePins_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> GetLinkedSourcePins(bool bRecursive = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinkedSourcePins_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetLinkedSourcePins_bRecursive_Offset), 0, null, bRecursive);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinkedSourcePins_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.RigVMDeveloper.RigVMPin> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLinkedSourcePins_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin> (1, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.ToNative, ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative, GetLinkedSourcePins_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.RigVMDeveloper.RigVMPin>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetGraph
    static readonly IntPtr GetGraph_NativeFunction;
    static readonly int GetGraph_ParamsSize;
    static readonly int GetGraph_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMGraph GetGraph()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGraph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGraph_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMGraph returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMGraph>.FromNative(IntPtr.Add(ParamsBuffer, GetGraph_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetEnum
    static readonly IntPtr GetEnum_NativeFunction;
    static readonly int GetEnum_ParamsSize;
    static readonly int GetEnum_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.Enum GetEnum()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEnum_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEnum_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Enum returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Enum>.FromNative(IntPtr.Add(ParamsBuffer, GetEnum_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetDisplayName
    static readonly IntPtr GetDisplayName_NativeFunction;
    static readonly int GetDisplayName_ParamsSize;
    static readonly int GetDisplayName_ReturnValue_Offset;
    
    public Name GetDisplayName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDisplayName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDisplayName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetDisplayName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetDirection
    static readonly IntPtr GetDirection_NativeFunction;
    static readonly int GetDirection_ParamsSize;
    static readonly int GetDirection_ReturnValue_Offset;
    
    public UnrealSharp.RigVM.ERigVMPinDirection GetDirection()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDirection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDirection_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVM.ERigVMPinDirection returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.RigVM.ERigVMPinDirection>.FromNative(IntPtr.Add(ParamsBuffer, GetDirection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetDefaultValue
    static readonly IntPtr GetDefaultValue_NativeFunction;
    static readonly int GetDefaultValue_ParamsSize;
    static readonly int GetDefaultValue_ReturnValue_Offset;
    
    public string GetDefaultValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDefaultValue_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetDefaultValue_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetCustomWidgetName
    static readonly IntPtr GetCustomWidgetName_NativeFunction;
    static readonly int GetCustomWidgetName_ParamsSize;
    static readonly int GetCustomWidgetName_ReturnValue_Offset;
    
    public Name GetCustomWidgetName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomWidgetName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomWidgetName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomWidgetName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetCPPTypeObject
    static readonly IntPtr GetCPPTypeObject_NativeFunction;
    static readonly int GetCPPTypeObject_ParamsSize;
    static readonly int GetCPPTypeObject_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.Object GetCPPTypeObject()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCPPTypeObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCPPTypeObject_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetCPPTypeObject_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetCPPType
    static readonly IntPtr GetCPPType_NativeFunction;
    static readonly int GetCPPType_ParamsSize;
    static readonly int GetCPPType_ReturnValue_Offset;
    
    public string GetCPPType()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCPPType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCPPType_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetCPPType_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetArraySize
    static readonly IntPtr GetArraySize_NativeFunction;
    static readonly int GetArraySize_ParamsSize;
    static readonly int GetArraySize_ReturnValue_Offset;
    
    public int GetArraySize()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetArraySize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetArraySize_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetArraySize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetArrayElementCppType
    static readonly IntPtr GetArrayElementCppType_NativeFunction;
    static readonly int GetArrayElementCppType_ParamsSize;
    static readonly int GetArrayElementCppType_ReturnValue_Offset;
    
    public string GetArrayElementCppType()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetArrayElementCppType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetArrayElementCppType_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetArrayElementCppType_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:GetAbsolutePinIndex
    static readonly IntPtr GetAbsolutePinIndex_NativeFunction;
    static readonly int GetAbsolutePinIndex_ParamsSize;
    static readonly int GetAbsolutePinIndex_ReturnValue_Offset;
    
    public int GetAbsolutePinIndex()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAbsolutePinIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAbsolutePinIndex_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetAbsolutePinIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:FindSubPin
    static readonly IntPtr FindSubPin_NativeFunction;
    static readonly int FindSubPin_ParamsSize;
    static readonly int FindSubPin_InPinPath_Offset;
    static readonly int FindSubPin_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMPin FindSubPin(string inPinPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindSubPin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InPinPath_NativePtr = IntPtr.Add(ParamsBuffer,FindSubPin_InPinPath_Offset);
            StringMarshaller.ToNative(InPinPath_NativePtr,0,null,inPinPath);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindSubPin_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMPin returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.FromNative(IntPtr.Add(ParamsBuffer, FindSubPin_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InPinPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:FindLinkForPin
    static readonly IntPtr FindLinkForPin_NativeFunction;
    static readonly int FindLinkForPin_ParamsSize;
    static readonly int FindLinkForPin_InOtherPin_Offset;
    static readonly int FindLinkForPin_ReturnValue_Offset;
    
    public UnrealSharp.RigVMDeveloper.RigVMLink FindLinkForPin(UnrealSharp.RigVMDeveloper.RigVMPin inOtherPin)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindLinkForPin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMPin>.ToNative(IntPtr.Add(ParamsBuffer, FindLinkForPin_InOtherPin_Offset), 0, null, inOtherPin);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindLinkForPin_NativeFunction, ParamsBuffer);
            
            UnrealSharp.RigVMDeveloper.RigVMLink returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.RigVMDeveloper.RigVMLink>.FromNative(IntPtr.Add(ParamsBuffer, FindLinkForPin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMPin:ContainsWildCardSubPin
    static readonly IntPtr ContainsWildCardSubPin_NativeFunction;
    static readonly int ContainsWildCardSubPin_ParamsSize;
    static readonly int ContainsWildCardSubPin_ReturnValue_Offset;
    
    public bool ContainsWildCardSubPin()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ContainsWildCardSubPin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ContainsWildCardSubPin_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ContainsWildCardSubPin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
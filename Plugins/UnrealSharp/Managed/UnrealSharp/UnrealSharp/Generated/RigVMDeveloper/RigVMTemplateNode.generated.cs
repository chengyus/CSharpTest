// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.RigVMDeveloper;

[UClass]
public partial class RigVMTemplateNode : UnrealSharp.RigVMDeveloper.RigVMNode
{
    
    static RigVMTemplateNode()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RigVMTemplateNode");
        
        
        IsSingleton_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsSingleton");
        IsSingleton_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsSingleton_NativeFunction);
        IsSingleton_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSingleton_NativeFunction, "ReturnValue");
        IsResolved_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsResolved");
        IsResolved_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsResolved_NativeFunction);
        IsResolved_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsResolved_NativeFunction, "ReturnValue");
        IsFullyUnresolved_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsFullyUnresolved");
        IsFullyUnresolved_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsFullyUnresolved_NativeFunction);
        IsFullyUnresolved_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsFullyUnresolved_NativeFunction, "ReturnValue");
        GetScriptStruct_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetScriptStruct");
        GetScriptStruct_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetScriptStruct_NativeFunction);
        GetScriptStruct_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScriptStruct_NativeFunction, "ReturnValue");
        GetNotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNotation");
        GetNotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNotation_NativeFunction);
        GetNotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNotation_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RigVMTemplateNode(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/RigVMDeveloper.RigVMTemplateNode:IsSingleton
    static readonly IntPtr IsSingleton_NativeFunction;
    static readonly int IsSingleton_ParamsSize;
    static readonly int IsSingleton_ReturnValue_Offset;
    
    public bool IsSingleton()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsSingleton_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsSingleton_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsSingleton_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMTemplateNode:IsResolved
    static readonly IntPtr IsResolved_NativeFunction;
    static readonly int IsResolved_ParamsSize;
    static readonly int IsResolved_ReturnValue_Offset;
    
    public bool IsResolved()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsResolved_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsResolved_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsResolved_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMTemplateNode:IsFullyUnresolved
    static readonly IntPtr IsFullyUnresolved_NativeFunction;
    static readonly int IsFullyUnresolved_ParamsSize;
    static readonly int IsFullyUnresolved_ReturnValue_Offset;
    
    public bool IsFullyUnresolved()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsFullyUnresolved_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsFullyUnresolved_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsFullyUnresolved_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMTemplateNode:GetScriptStruct
    static readonly IntPtr GetScriptStruct_NativeFunction;
    static readonly int GetScriptStruct_ParamsSize;
    static readonly int GetScriptStruct_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.ScriptStruct GetScriptStruct()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetScriptStruct_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetScriptStruct_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.ScriptStruct returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.ScriptStruct>.FromNative(IntPtr.Add(ParamsBuffer, GetScriptStruct_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/RigVMDeveloper.RigVMTemplateNode:GetNotation
    static readonly IntPtr GetNotation_NativeFunction;
    static readonly int GetNotation_ParamsSize;
    static readonly int GetNotation_ReturnValue_Offset;
    
    public Name GetNotation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNotation_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetNotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.SequenceRecorder;

[UClass]
public partial class SequenceRecorderLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static SequenceRecorderLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SequenceRecorderBlueprintLibrary");
        
        
        StopRecordingSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopRecordingSequence");
        StartRecordingSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartRecordingSequence");
        StartRecordingSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartRecordingSequence_NativeFunction);
        StartRecordingSequence_ActorsToRecord_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartRecordingSequence_NativeFunction, "ActorsToRecord");
        StartRecordingSequence_ActorsToRecord_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(StartRecordingSequence_NativeFunction, "ActorsToRecord");
        IsRecordingSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRecordingSequence");
        IsRecordingSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRecordingSequence_NativeFunction);
        IsRecordingSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRecordingSequence_NativeFunction, "ReturnValue");
        
        
    }
    
    protected SequenceRecorderLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/SequenceRecorder.SequenceRecorderBlueprintLibrary:StopRecordingSequence
    static readonly IntPtr StopRecordingSequence_NativeFunction;
    
    public static void StopRecordingSequence()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StopRecordingSequence_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/SequenceRecorder.SequenceRecorderBlueprintLibrary:StartRecordingSequence
    static readonly IntPtr StartRecordingSequence_NativeFunction;
    static readonly int StartRecordingSequence_ParamsSize;
    static readonly int StartRecordingSequence_ActorsToRecord_Offset;
    static readonly int StartRecordingSequence_ActorsToRecord_ElementSize;
    
    public static void StartRecordingSequence(System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToRecord)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartRecordingSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ActorsToRecord_NativeBuffer = IntPtr.Add(ParamsBuffer, StartRecordingSequence_ActorsToRecord_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToRecord_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, StartRecordingSequence_ActorsToRecord_ElementSize);
            ActorsToRecord_Marshaler.ToNative(ActorsToRecord_NativeBuffer, 0, null, actorsToRecord);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StartRecordingSequence_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/SequenceRecorder.SequenceRecorderBlueprintLibrary:IsRecordingSequence
    static readonly IntPtr IsRecordingSequence_NativeFunction;
    static readonly int IsRecordingSequence_ParamsSize;
    static readonly int IsRecordingSequence_ReturnValue_Offset;
    
    public static bool IsRecordingSequence()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRecordingSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsRecordingSequence_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRecordingSequence_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
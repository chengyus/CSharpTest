// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.SequencerCore;

[UClass]
public partial class SequencerOutlinerScriptingObject : UnrealSharp.CoreUObject.Object
{
    
    static SequencerOutlinerScriptingObject()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SequencerOutlinerScriptingObject");
        
        
        SetSelection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSelection");
        SetSelection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSelection_NativeFunction);
        SetSelection_InSelection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSelection_NativeFunction, "InSelection");
        SetSelection_InSelection_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetSelection_NativeFunction, "InSelection");
        GetSelection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelection");
        GetSelection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelection_NativeFunction);
        GetSelection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelection_NativeFunction, "ReturnValue");
        GetSelection_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSelection_NativeFunction, "ReturnValue");
        GetRootNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRootNode");
        GetRootNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRootNode_NativeFunction);
        GetRootNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRootNode_NativeFunction, "ReturnValue");
        GetChildren_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetChildren");
        GetChildren_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetChildren_NativeFunction);
        GetChildren_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildren_NativeFunction, "Node");
        GetChildren_TypeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildren_NativeFunction, "TypeName");
        GetChildren_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildren_NativeFunction, "ReturnValue");
        GetChildren_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetChildren_NativeFunction, "ReturnValue");
        
        
    }
    
    protected SequencerOutlinerScriptingObject(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/SequencerCore.SequencerOutlinerScriptingObject:SetSelection
    static readonly IntPtr SetSelection_NativeFunction;
    static readonly int SetSelection_ParamsSize;
    static readonly int SetSelection_InSelection_Offset;
    static readonly int SetSelection_InSelection_ElementSize;
    
    public void SetSelection(System.Collections.Generic.IList<UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct> inSelection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSelection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InSelection_NativeBuffer = IntPtr.Add(ParamsBuffer, SetSelection_InSelection_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct> InSelection_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct>(1, UnrealSharp.SequencerCore.SequencerViewModelScriptingStructMarshaler.ToNative, UnrealSharp.SequencerCore.SequencerViewModelScriptingStructMarshaler.FromNative, SetSelection_InSelection_ElementSize);
            InSelection_Marshaler.ToNative(InSelection_NativeBuffer, 0, null, inSelection);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSelection_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/SequencerCore.SequencerOutlinerScriptingObject:GetSelection
    static readonly IntPtr GetSelection_NativeFunction;
    static readonly int GetSelection_ParamsSize;
    static readonly int GetSelection_ReturnValue_Offset;
    static readonly int GetSelection_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct> GetSelection()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSelection_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSelection_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct> (1, UnrealSharp.SequencerCore.SequencerViewModelScriptingStructMarshaler.ToNative, UnrealSharp.SequencerCore.SequencerViewModelScriptingStructMarshaler.FromNative, GetSelection_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerCore.SequencerOutlinerScriptingObject:GetRootNode
    static readonly IntPtr GetRootNode_NativeFunction;
    static readonly int GetRootNode_ParamsSize;
    static readonly int GetRootNode_ReturnValue_Offset;
    
    public UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct GetRootNode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRootNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRootNode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct returnValue;
            returnValue = UnrealSharp.SequencerCore.SequencerViewModelScriptingStructMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetRootNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerCore.SequencerOutlinerScriptingObject:GetChildren
    static readonly IntPtr GetChildren_NativeFunction;
    static readonly int GetChildren_ParamsSize;
    static readonly int GetChildren_Node_Offset;
    static readonly int GetChildren_TypeName_Offset;
    static readonly int GetChildren_ReturnValue_Offset;
    static readonly int GetChildren_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct> GetChildren(UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct node, Name typeName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetChildren_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerCore.SequencerViewModelScriptingStructMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetChildren_Node_Offset), 0, null, node);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetChildren_TypeName_Offset), 0, null, typeName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetChildren_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetChildren_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct> (1, UnrealSharp.SequencerCore.SequencerViewModelScriptingStructMarshaler.ToNative, UnrealSharp.SequencerCore.SequencerViewModelScriptingStructMarshaler.FromNative, GetChildren_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.SequencerCore.SequencerViewModelScriptingStruct>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    
}
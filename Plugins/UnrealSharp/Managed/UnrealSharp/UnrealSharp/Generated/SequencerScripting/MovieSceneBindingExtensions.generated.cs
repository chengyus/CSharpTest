// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.SequencerScripting;

[UClass]
public partial class MovieSceneBindingExtensions : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static MovieSceneBindingExtensions()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MovieSceneBindingExtensions");
        
        
        SetSpawnableBindingID_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSpawnableBindingID");
        SetSpawnableBindingID_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSpawnableBindingID_NativeFunction);
        SetSpawnableBindingID_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSpawnableBindingID_NativeFunction, "InBinding");
        SetSpawnableBindingID_SpawnableBindingID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSpawnableBindingID_NativeFunction, "SpawnableBindingID");
        SetSortingOrder_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSortingOrder");
        SetSortingOrder_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSortingOrder_NativeFunction);
        SetSortingOrder_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSortingOrder_NativeFunction, "InBinding");
        SetSortingOrder_SortingOrder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSortingOrder_NativeFunction, "SortingOrder");
        SetParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetParent");
        SetParent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetParent_NativeFunction);
        SetParent_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParent_NativeFunction, "InBinding");
        SetParent_InParentBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParent_NativeFunction, "InParentBinding");
        SetName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetName");
        SetName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetName_NativeFunction);
        SetName_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetName_NativeFunction, "InBinding");
        SetName_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetName_NativeFunction, "InName");
        RemoveTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveTrack");
        RemoveTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveTrack_NativeFunction);
        RemoveTrack_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveTrack_NativeFunction, "InBinding");
        RemoveTrack_TrackToRemove_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveTrack_NativeFunction, "TrackToRemove");
        Remove_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Remove");
        Remove_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Remove_NativeFunction);
        Remove_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Remove_NativeFunction, "InBinding");
        MoveBindingContents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MoveBindingContents");
        MoveBindingContents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MoveBindingContents_NativeFunction);
        MoveBindingContents_SourceBindingId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveBindingContents_NativeFunction, "SourceBindingId");
        MoveBindingContents_DestinationBindingId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveBindingContents_NativeFunction, "DestinationBindingId");
        IsValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValid");
        IsValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValid_NativeFunction);
        IsValid_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValid_NativeFunction, "InBinding");
        IsValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValid_NativeFunction, "ReturnValue");
        GetTracks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTracks");
        GetTracks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTracks_NativeFunction);
        GetTracks_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTracks_NativeFunction, "InBinding");
        GetTracks_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTracks_NativeFunction, "ReturnValue");
        GetTracks_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetTracks_NativeFunction, "ReturnValue");
        GetSortingOrder_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSortingOrder");
        GetSortingOrder_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSortingOrder_NativeFunction);
        GetSortingOrder_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSortingOrder_NativeFunction, "InBinding");
        GetSortingOrder_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSortingOrder_NativeFunction, "ReturnValue");
        GetPossessedObjectClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPossessedObjectClass");
        GetPossessedObjectClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPossessedObjectClass_NativeFunction);
        GetPossessedObjectClass_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPossessedObjectClass_NativeFunction, "InBinding");
        GetPossessedObjectClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPossessedObjectClass_NativeFunction, "ReturnValue");
        GetParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParent");
        GetParent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParent_NativeFunction);
        GetParent_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParent_NativeFunction, "InBinding");
        GetParent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParent_NativeFunction, "ReturnValue");
        GetObjectTemplate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetObjectTemplate");
        GetObjectTemplate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetObjectTemplate_NativeFunction);
        GetObjectTemplate_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectTemplate_NativeFunction, "InBinding");
        GetObjectTemplate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectTemplate_NativeFunction, "ReturnValue");
        GetName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetName");
        GetName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetName_NativeFunction);
        GetName_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetName_NativeFunction, "InBinding");
        GetName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetName_NativeFunction, "ReturnValue");
        GetId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetId");
        GetId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetId_NativeFunction);
        GetId_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetId_NativeFunction, "InBinding");
        GetId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetId_NativeFunction, "ReturnValue");
        GetChildPossessables_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetChildPossessables");
        GetChildPossessables_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetChildPossessables_NativeFunction);
        GetChildPossessables_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildPossessables_NativeFunction, "InBinding");
        GetChildPossessables_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildPossessables_NativeFunction, "ReturnValue");
        GetChildPossessables_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetChildPossessables_NativeFunction, "ReturnValue");
        FindTracksByType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindTracksByType");
        FindTracksByType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindTracksByType_NativeFunction);
        FindTracksByType_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTracksByType_NativeFunction, "InBinding");
        FindTracksByType_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTracksByType_NativeFunction, "TrackType");
        FindTracksByType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTracksByType_NativeFunction, "ReturnValue");
        FindTracksByType_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindTracksByType_NativeFunction, "ReturnValue");
        FindTracksByExactType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindTracksByExactType");
        FindTracksByExactType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindTracksByExactType_NativeFunction);
        FindTracksByExactType_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTracksByExactType_NativeFunction, "InBinding");
        FindTracksByExactType_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTracksByExactType_NativeFunction, "TrackType");
        FindTracksByExactType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTracksByExactType_NativeFunction, "ReturnValue");
        FindTracksByExactType_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindTracksByExactType_NativeFunction, "ReturnValue");
        AddTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddTrack");
        AddTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddTrack_NativeFunction);
        AddTrack_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTrack_NativeFunction, "InBinding");
        AddTrack_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTrack_NativeFunction, "TrackType");
        AddTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTrack_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MovieSceneBindingExtensions(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:SetSpawnableBindingID
    static readonly IntPtr SetSpawnableBindingID_NativeFunction;
    static readonly int SetSpawnableBindingID_ParamsSize;
    static readonly int SetSpawnableBindingID_InBinding_Offset;
    static readonly int SetSpawnableBindingID_SpawnableBindingID_Offset;
    
    public static void SetSpawnableBindingID(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding, UnrealSharp.MovieScene.MovieSceneObjectBindingID spawnableBindingID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSpawnableBindingID_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetSpawnableBindingID_InBinding_Offset), 0, null, inBinding);
            UnrealSharp.MovieScene.MovieSceneObjectBindingIDMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetSpawnableBindingID_SpawnableBindingID_Offset), 0, null, spawnableBindingID);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSpawnableBindingID_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:SetSortingOrder
    static readonly IntPtr SetSortingOrder_NativeFunction;
    static readonly int SetSortingOrder_ParamsSize;
    static readonly int SetSortingOrder_InBinding_Offset;
    static readonly int SetSortingOrder_SortingOrder_Offset;
    
    public static void SetSortingOrder(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding, int sortingOrder)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSortingOrder_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetSortingOrder_InBinding_Offset), 0, null, inBinding);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetSortingOrder_SortingOrder_Offset), 0, null, sortingOrder);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSortingOrder_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:SetParent
    static readonly IntPtr SetParent_NativeFunction;
    static readonly int SetParent_ParamsSize;
    static readonly int SetParent_InBinding_Offset;
    static readonly int SetParent_InParentBinding_Offset;
    
    public static void SetParent(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding, UnrealSharp.MovieScene.MovieSceneBindingProxy inParentBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetParent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetParent_InBinding_Offset), 0, null, inBinding);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetParent_InParentBinding_Offset), 0, null, inParentBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetParent_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:SetName
    static readonly IntPtr SetName_NativeFunction;
    static readonly int SetName_ParamsSize;
    static readonly int SetName_InBinding_Offset;
    static readonly int SetName_InName_Offset;
    
    public static void SetName(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding, string inName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetName_InBinding_Offset), 0, null, inBinding);
            IntPtr InName_NativePtr = IntPtr.Add(ParamsBuffer,SetName_InName_Offset);
            StringMarshaller.ToNative(InName_NativePtr,0,null,inName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetName_NativeFunction, ParamsBuffer);
            
            
            StringMarshaller.DestructInstance(InName_NativePtr, 0);
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:RemoveTrack
    static readonly IntPtr RemoveTrack_NativeFunction;
    static readonly int RemoveTrack_ParamsSize;
    static readonly int RemoveTrack_InBinding_Offset;
    static readonly int RemoveTrack_TrackToRemove_Offset;
    
    public static void RemoveTrack(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding, UnrealSharp.MovieScene.MovieSceneTrack trackToRemove)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RemoveTrack_InBinding_Offset), 0, null, inBinding);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, RemoveTrack_TrackToRemove_Offset), 0, null, trackToRemove);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveTrack_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:Remove
    static readonly IntPtr Remove_NativeFunction;
    static readonly int Remove_ParamsSize;
    static readonly int Remove_InBinding_Offset;
    
    public static void Remove(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Remove_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Remove_InBinding_Offset), 0, null, inBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Remove_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:MoveBindingContents
    static readonly IntPtr MoveBindingContents_NativeFunction;
    static readonly int MoveBindingContents_ParamsSize;
    static readonly int MoveBindingContents_SourceBindingId_Offset;
    static readonly int MoveBindingContents_DestinationBindingId_Offset;
    
    public static void MoveBindingContents(UnrealSharp.MovieScene.MovieSceneBindingProxy sourceBindingId, UnrealSharp.MovieScene.MovieSceneBindingProxy destinationBindingId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MoveBindingContents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, MoveBindingContents_SourceBindingId_Offset), 0, null, sourceBindingId);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, MoveBindingContents_DestinationBindingId_Offset), 0, null, destinationBindingId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MoveBindingContents_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:IsValid
    static readonly IntPtr IsValid_NativeFunction;
    static readonly int IsValid_ParamsSize;
    static readonly int IsValid_InBinding_Offset;
    static readonly int IsValid_ReturnValue_Offset;
    
    public static bool IsValid(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsValid_InBinding_Offset), 0, null, inBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:GetTracks
    static readonly IntPtr GetTracks_NativeFunction;
    static readonly int GetTracks_ParamsSize;
    static readonly int GetTracks_InBinding_Offset;
    static readonly int GetTracks_ReturnValue_Offset;
    static readonly int GetTracks_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> GetTracks(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTracks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetTracks_InBinding_Offset), 0, null, inBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTracks_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetTracks_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, GetTracks_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:GetSortingOrder
    static readonly IntPtr GetSortingOrder_NativeFunction;
    static readonly int GetSortingOrder_ParamsSize;
    static readonly int GetSortingOrder_InBinding_Offset;
    static readonly int GetSortingOrder_ReturnValue_Offset;
    
    public static int GetSortingOrder(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSortingOrder_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetSortingOrder_InBinding_Offset), 0, null, inBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSortingOrder_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetSortingOrder_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:GetPossessedObjectClass
    static readonly IntPtr GetPossessedObjectClass_NativeFunction;
    static readonly int GetPossessedObjectClass_ParamsSize;
    static readonly int GetPossessedObjectClass_InBinding_Offset;
    static readonly int GetPossessedObjectClass_ReturnValue_Offset;
    
    public static SubclassOf<UnrealSharp.CoreUObject.Object> GetPossessedObjectClass(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPossessedObjectClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPossessedObjectClass_InBinding_Offset), 0, null, inBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPossessedObjectClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetPossessedObjectClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:GetParent
    static readonly IntPtr GetParent_NativeFunction;
    static readonly int GetParent_ParamsSize;
    static readonly int GetParent_InBinding_Offset;
    static readonly int GetParent_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneBindingProxy GetParent(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetParent_InBinding_Offset), 0, null, inBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetParent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneBindingProxy returnValue;
            returnValue = UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetParent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:GetObjectTemplate
    static readonly IntPtr GetObjectTemplate_NativeFunction;
    static readonly int GetObjectTemplate_ParamsSize;
    static readonly int GetObjectTemplate_InBinding_Offset;
    static readonly int GetObjectTemplate_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Object GetObjectTemplate(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetObjectTemplate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetObjectTemplate_InBinding_Offset), 0, null, inBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetObjectTemplate_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetObjectTemplate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:GetName
    static readonly IntPtr GetName_NativeFunction;
    static readonly int GetName_ParamsSize;
    static readonly int GetName_InBinding_Offset;
    static readonly int GetName_ReturnValue_Offset;
    
    public static string GetName(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetName_InBinding_Offset), 0, null, inBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:GetId
    static readonly IntPtr GetId_NativeFunction;
    static readonly int GetId_ParamsSize;
    static readonly int GetId_InBinding_Offset;
    static readonly int GetId_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Guid GetId(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetId_InBinding_Offset), 0, null, inBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetId_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Guid returnValue;
            returnValue = UnrealSharp.CoreUObject.GuidMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:GetChildPossessables
    static readonly IntPtr GetChildPossessables_NativeFunction;
    static readonly int GetChildPossessables_ParamsSize;
    static readonly int GetChildPossessables_InBinding_Offset;
    static readonly int GetChildPossessables_ReturnValue_Offset;
    static readonly int GetChildPossessables_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> GetChildPossessables(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetChildPossessables_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetChildPossessables_InBinding_Offset), 0, null, inBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetChildPossessables_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetChildPossessables_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> (1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, GetChildPossessables_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:FindTracksByType
    static readonly IntPtr FindTracksByType_NativeFunction;
    static readonly int FindTracksByType_ParamsSize;
    static readonly int FindTracksByType_InBinding_Offset;
    static readonly int FindTracksByType_TrackType_Offset;
    static readonly int FindTracksByType_ReturnValue_Offset;
    static readonly int FindTracksByType_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> FindTracksByType(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding, SubclassOf<UnrealSharp.MovieScene.MovieSceneTrack> trackType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindTracksByType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindTracksByType_InBinding_Offset), 0, null, inBinding);
            SubclassOfMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, FindTracksByType_TrackType_Offset), 0, null, trackType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindTracksByType_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindTracksByType_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, FindTracksByType_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:FindTracksByExactType
    static readonly IntPtr FindTracksByExactType_NativeFunction;
    static readonly int FindTracksByExactType_ParamsSize;
    static readonly int FindTracksByExactType_InBinding_Offset;
    static readonly int FindTracksByExactType_TrackType_Offset;
    static readonly int FindTracksByExactType_ReturnValue_Offset;
    static readonly int FindTracksByExactType_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> FindTracksByExactType(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding, SubclassOf<UnrealSharp.MovieScene.MovieSceneTrack> trackType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindTracksByExactType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindTracksByExactType_InBinding_Offset), 0, null, inBinding);
            SubclassOfMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, FindTracksByExactType_TrackType_Offset), 0, null, trackType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindTracksByExactType_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindTracksByExactType_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, FindTracksByExactType_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneBindingExtensions:AddTrack
    static readonly IntPtr AddTrack_NativeFunction;
    static readonly int AddTrack_ParamsSize;
    static readonly int AddTrack_InBinding_Offset;
    static readonly int AddTrack_TrackType_Offset;
    static readonly int AddTrack_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneTrack AddTrack(UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding, SubclassOf<UnrealSharp.MovieScene.MovieSceneTrack> trackType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AddTrack_InBinding_Offset), 0, null, inBinding);
            SubclassOfMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, AddTrack_TrackType_Offset), 0, null, trackType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddTrack_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneTrack returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative(IntPtr.Add(ParamsBuffer, AddTrack_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.SequencerScripting;

[UClass]
public partial class MovieSceneFolderExtensions : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static MovieSceneFolderExtensions()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MovieSceneFolderExtensions");
        
        
        SetFolderName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFolderName");
        SetFolderName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFolderName_NativeFunction);
        SetFolderName_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFolderName_NativeFunction, "Folder");
        SetFolderName_InFolderName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFolderName_NativeFunction, "InFolderName");
        SetFolderName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFolderName_NativeFunction, "ReturnValue");
        SetFolderColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFolderColor");
        SetFolderColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFolderColor_NativeFunction);
        SetFolderColor_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFolderColor_NativeFunction, "Folder");
        SetFolderColor_InFolderColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFolderColor_NativeFunction, "InFolderColor");
        SetFolderColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFolderColor_NativeFunction, "ReturnValue");
        RemoveChildTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveChildTrack");
        RemoveChildTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveChildTrack_NativeFunction);
        RemoveChildTrack_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveChildTrack_NativeFunction, "Folder");
        RemoveChildTrack_InTrack_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveChildTrack_NativeFunction, "InTrack");
        RemoveChildTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveChildTrack_NativeFunction, "ReturnValue");
        RemoveChildObjectBinding_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveChildObjectBinding");
        RemoveChildObjectBinding_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveChildObjectBinding_NativeFunction);
        RemoveChildObjectBinding_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveChildObjectBinding_NativeFunction, "Folder");
        RemoveChildObjectBinding_InObjectBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveChildObjectBinding_NativeFunction, "InObjectBinding");
        RemoveChildObjectBinding_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveChildObjectBinding_NativeFunction, "ReturnValue");
        RemoveChildMasterTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveChildMasterTrack");
        RemoveChildMasterTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveChildMasterTrack_NativeFunction);
        RemoveChildMasterTrack_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveChildMasterTrack_NativeFunction, "Folder");
        RemoveChildMasterTrack_InTrack_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveChildMasterTrack_NativeFunction, "InTrack");
        RemoveChildMasterTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveChildMasterTrack_NativeFunction, "ReturnValue");
        RemoveChildFolder_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveChildFolder");
        RemoveChildFolder_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveChildFolder_NativeFunction);
        RemoveChildFolder_TargetFolder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveChildFolder_NativeFunction, "TargetFolder");
        RemoveChildFolder_FolderToRemove_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveChildFolder_NativeFunction, "FolderToRemove");
        RemoveChildFolder_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveChildFolder_NativeFunction, "ReturnValue");
        GetFolderName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFolderName");
        GetFolderName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFolderName_NativeFunction);
        GetFolderName_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFolderName_NativeFunction, "Folder");
        GetFolderName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFolderName_NativeFunction, "ReturnValue");
        GetFolderColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFolderColor");
        GetFolderColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFolderColor_NativeFunction);
        GetFolderColor_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFolderColor_NativeFunction, "Folder");
        GetFolderColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFolderColor_NativeFunction, "ReturnValue");
        GetChildTracks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetChildTracks");
        GetChildTracks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetChildTracks_NativeFunction);
        GetChildTracks_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildTracks_NativeFunction, "Folder");
        GetChildTracks_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildTracks_NativeFunction, "ReturnValue");
        GetChildTracks_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetChildTracks_NativeFunction, "ReturnValue");
        GetChildObjectBindings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetChildObjectBindings");
        GetChildObjectBindings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetChildObjectBindings_NativeFunction);
        GetChildObjectBindings_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildObjectBindings_NativeFunction, "Folder");
        GetChildObjectBindings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildObjectBindings_NativeFunction, "ReturnValue");
        GetChildObjectBindings_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetChildObjectBindings_NativeFunction, "ReturnValue");
        GetChildMasterTracks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetChildMasterTracks");
        GetChildMasterTracks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetChildMasterTracks_NativeFunction);
        GetChildMasterTracks_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildMasterTracks_NativeFunction, "Folder");
        GetChildMasterTracks_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildMasterTracks_NativeFunction, "ReturnValue");
        GetChildMasterTracks_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetChildMasterTracks_NativeFunction, "ReturnValue");
        GetChildFolders_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetChildFolders");
        GetChildFolders_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetChildFolders_NativeFunction);
        GetChildFolders_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildFolders_NativeFunction, "Folder");
        GetChildFolders_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildFolders_NativeFunction, "ReturnValue");
        GetChildFolders_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetChildFolders_NativeFunction, "ReturnValue");
        AddChildTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddChildTrack");
        AddChildTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddChildTrack_NativeFunction);
        AddChildTrack_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddChildTrack_NativeFunction, "Folder");
        AddChildTrack_InTrack_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddChildTrack_NativeFunction, "InTrack");
        AddChildTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddChildTrack_NativeFunction, "ReturnValue");
        AddChildObjectBinding_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddChildObjectBinding");
        AddChildObjectBinding_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddChildObjectBinding_NativeFunction);
        AddChildObjectBinding_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddChildObjectBinding_NativeFunction, "Folder");
        AddChildObjectBinding_InObjectBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddChildObjectBinding_NativeFunction, "InObjectBinding");
        AddChildObjectBinding_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddChildObjectBinding_NativeFunction, "ReturnValue");
        AddChildMasterTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddChildMasterTrack");
        AddChildMasterTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddChildMasterTrack_NativeFunction);
        AddChildMasterTrack_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddChildMasterTrack_NativeFunction, "Folder");
        AddChildMasterTrack_InTrack_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddChildMasterTrack_NativeFunction, "InTrack");
        AddChildMasterTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddChildMasterTrack_NativeFunction, "ReturnValue");
        AddChildFolder_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddChildFolder");
        AddChildFolder_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddChildFolder_NativeFunction);
        AddChildFolder_TargetFolder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddChildFolder_NativeFunction, "TargetFolder");
        AddChildFolder_FolderToAdd_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddChildFolder_NativeFunction, "FolderToAdd");
        AddChildFolder_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddChildFolder_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MovieSceneFolderExtensions(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:SetFolderName
    static readonly IntPtr SetFolderName_NativeFunction;
    static readonly int SetFolderName_ParamsSize;
    static readonly int SetFolderName_Folder_Offset;
    static readonly int SetFolderName_InFolderName_Offset;
    static readonly int SetFolderName_ReturnValue_Offset;
    
    public static bool SetFolderName(UnrealSharp.MovieScene.MovieSceneFolder folder, Name inFolderName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFolderName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, SetFolderName_Folder_Offset), 0, null, folder);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetFolderName_InFolderName_Offset), 0, null, inFolderName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetFolderName_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetFolderName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:SetFolderColor
    static readonly IntPtr SetFolderColor_NativeFunction;
    static readonly int SetFolderColor_ParamsSize;
    static readonly int SetFolderColor_Folder_Offset;
    static readonly int SetFolderColor_InFolderColor_Offset;
    static readonly int SetFolderColor_ReturnValue_Offset;
    
    public static bool SetFolderColor(UnrealSharp.MovieScene.MovieSceneFolder folder, UnrealSharp.CoreUObject.Color inFolderColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFolderColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, SetFolderColor_Folder_Offset), 0, null, folder);
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, SetFolderColor_InFolderColor_Offset), 0, null, inFolderColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetFolderColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetFolderColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:RemoveChildTrack
    static readonly IntPtr RemoveChildTrack_NativeFunction;
    static readonly int RemoveChildTrack_ParamsSize;
    static readonly int RemoveChildTrack_Folder_Offset;
    static readonly int RemoveChildTrack_InTrack_Offset;
    static readonly int RemoveChildTrack_ReturnValue_Offset;
    
    public static bool RemoveChildTrack(UnrealSharp.MovieScene.MovieSceneFolder folder, UnrealSharp.MovieScene.MovieSceneTrack inTrack)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveChildTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, RemoveChildTrack_Folder_Offset), 0, null, folder);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, RemoveChildTrack_InTrack_Offset), 0, null, inTrack);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveChildTrack_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveChildTrack_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:RemoveChildObjectBinding
    static readonly IntPtr RemoveChildObjectBinding_NativeFunction;
    static readonly int RemoveChildObjectBinding_ParamsSize;
    static readonly int RemoveChildObjectBinding_Folder_Offset;
    static readonly int RemoveChildObjectBinding_InObjectBinding_Offset;
    static readonly int RemoveChildObjectBinding_ReturnValue_Offset;
    
    public static bool RemoveChildObjectBinding(UnrealSharp.MovieScene.MovieSceneFolder folder, UnrealSharp.MovieScene.MovieSceneBindingProxy inObjectBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveChildObjectBinding_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, RemoveChildObjectBinding_Folder_Offset), 0, null, folder);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RemoveChildObjectBinding_InObjectBinding_Offset), 0, null, inObjectBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveChildObjectBinding_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveChildObjectBinding_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:RemoveChildMasterTrack
    static readonly IntPtr RemoveChildMasterTrack_NativeFunction;
    static readonly int RemoveChildMasterTrack_ParamsSize;
    static readonly int RemoveChildMasterTrack_Folder_Offset;
    static readonly int RemoveChildMasterTrack_InTrack_Offset;
    static readonly int RemoveChildMasterTrack_ReturnValue_Offset;
    
    [Obsolete("RemoveChildMasterTrack is deprecated. Please use RemoveChildTrack instead")]
    public static bool RemoveChildMasterTrack(UnrealSharp.MovieScene.MovieSceneFolder folder, UnrealSharp.MovieScene.MovieSceneTrack inTrack)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveChildMasterTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, RemoveChildMasterTrack_Folder_Offset), 0, null, folder);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, RemoveChildMasterTrack_InTrack_Offset), 0, null, inTrack);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveChildMasterTrack_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveChildMasterTrack_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:RemoveChildFolder
    static readonly IntPtr RemoveChildFolder_NativeFunction;
    static readonly int RemoveChildFolder_ParamsSize;
    static readonly int RemoveChildFolder_TargetFolder_Offset;
    static readonly int RemoveChildFolder_FolderToRemove_Offset;
    static readonly int RemoveChildFolder_ReturnValue_Offset;
    
    public static bool RemoveChildFolder(UnrealSharp.MovieScene.MovieSceneFolder targetFolder, UnrealSharp.MovieScene.MovieSceneFolder folderToRemove)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveChildFolder_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, RemoveChildFolder_TargetFolder_Offset), 0, null, targetFolder);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, RemoveChildFolder_FolderToRemove_Offset), 0, null, folderToRemove);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveChildFolder_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveChildFolder_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:GetFolderName
    static readonly IntPtr GetFolderName_NativeFunction;
    static readonly int GetFolderName_ParamsSize;
    static readonly int GetFolderName_Folder_Offset;
    static readonly int GetFolderName_ReturnValue_Offset;
    
    public static Name GetFolderName(UnrealSharp.MovieScene.MovieSceneFolder folder)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFolderName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, GetFolderName_Folder_Offset), 0, null, folder);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetFolderName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetFolderName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:GetFolderColor
    static readonly IntPtr GetFolderColor_NativeFunction;
    static readonly int GetFolderColor_ParamsSize;
    static readonly int GetFolderColor_Folder_Offset;
    static readonly int GetFolderColor_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Color GetFolderColor(UnrealSharp.MovieScene.MovieSceneFolder folder)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFolderColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, GetFolderColor_Folder_Offset), 0, null, folder);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetFolderColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Color returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(ParamsBuffer, GetFolderColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:GetChildTracks
    static readonly IntPtr GetChildTracks_NativeFunction;
    static readonly int GetChildTracks_ParamsSize;
    static readonly int GetChildTracks_Folder_Offset;
    static readonly int GetChildTracks_ReturnValue_Offset;
    static readonly int GetChildTracks_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> GetChildTracks(UnrealSharp.MovieScene.MovieSceneFolder folder)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetChildTracks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, GetChildTracks_Folder_Offset), 0, null, folder);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetChildTracks_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetChildTracks_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, GetChildTracks_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:GetChildObjectBindings
    static readonly IntPtr GetChildObjectBindings_NativeFunction;
    static readonly int GetChildObjectBindings_ParamsSize;
    static readonly int GetChildObjectBindings_Folder_Offset;
    static readonly int GetChildObjectBindings_ReturnValue_Offset;
    static readonly int GetChildObjectBindings_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> GetChildObjectBindings(UnrealSharp.MovieScene.MovieSceneFolder folder)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetChildObjectBindings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, GetChildObjectBindings_Folder_Offset), 0, null, folder);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetChildObjectBindings_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetChildObjectBindings_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> (1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, GetChildObjectBindings_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:GetChildMasterTracks
    static readonly IntPtr GetChildMasterTracks_NativeFunction;
    static readonly int GetChildMasterTracks_ParamsSize;
    static readonly int GetChildMasterTracks_Folder_Offset;
    static readonly int GetChildMasterTracks_ReturnValue_Offset;
    static readonly int GetChildMasterTracks_ReturnValue_ElementSize;
    
    [Obsolete("GetChildMasterTracks is deprecated. Please use GetChildTracks instead")]
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> GetChildMasterTracks(UnrealSharp.MovieScene.MovieSceneFolder folder)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetChildMasterTracks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, GetChildMasterTracks_Folder_Offset), 0, null, folder);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetChildMasterTracks_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetChildMasterTracks_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, GetChildMasterTracks_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:GetChildFolders
    static readonly IntPtr GetChildFolders_NativeFunction;
    static readonly int GetChildFolders_ParamsSize;
    static readonly int GetChildFolders_Folder_Offset;
    static readonly int GetChildFolders_ReturnValue_Offset;
    static readonly int GetChildFolders_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneFolder> GetChildFolders(UnrealSharp.MovieScene.MovieSceneFolder folder)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetChildFolders_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, GetChildFolders_Folder_Offset), 0, null, folder);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetChildFolders_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneFolder> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetChildFolders_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.FromNative, GetChildFolders_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:AddChildTrack
    static readonly IntPtr AddChildTrack_NativeFunction;
    static readonly int AddChildTrack_ParamsSize;
    static readonly int AddChildTrack_Folder_Offset;
    static readonly int AddChildTrack_InTrack_Offset;
    static readonly int AddChildTrack_ReturnValue_Offset;
    
    public static bool AddChildTrack(UnrealSharp.MovieScene.MovieSceneFolder folder, UnrealSharp.MovieScene.MovieSceneTrack inTrack)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddChildTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, AddChildTrack_Folder_Offset), 0, null, folder);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, AddChildTrack_InTrack_Offset), 0, null, inTrack);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddChildTrack_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddChildTrack_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:AddChildObjectBinding
    static readonly IntPtr AddChildObjectBinding_NativeFunction;
    static readonly int AddChildObjectBinding_ParamsSize;
    static readonly int AddChildObjectBinding_Folder_Offset;
    static readonly int AddChildObjectBinding_InObjectBinding_Offset;
    static readonly int AddChildObjectBinding_ReturnValue_Offset;
    
    public static bool AddChildObjectBinding(UnrealSharp.MovieScene.MovieSceneFolder folder, UnrealSharp.MovieScene.MovieSceneBindingProxy inObjectBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddChildObjectBinding_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, AddChildObjectBinding_Folder_Offset), 0, null, folder);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AddChildObjectBinding_InObjectBinding_Offset), 0, null, inObjectBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddChildObjectBinding_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddChildObjectBinding_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:AddChildMasterTrack
    static readonly IntPtr AddChildMasterTrack_NativeFunction;
    static readonly int AddChildMasterTrack_ParamsSize;
    static readonly int AddChildMasterTrack_Folder_Offset;
    static readonly int AddChildMasterTrack_InTrack_Offset;
    static readonly int AddChildMasterTrack_ReturnValue_Offset;
    
    [Obsolete("AddChildMasterTrack is deprecated. Please use AddChildTrack instead")]
    public static bool AddChildMasterTrack(UnrealSharp.MovieScene.MovieSceneFolder folder, UnrealSharp.MovieScene.MovieSceneTrack inTrack)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddChildMasterTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, AddChildMasterTrack_Folder_Offset), 0, null, folder);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, AddChildMasterTrack_InTrack_Offset), 0, null, inTrack);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddChildMasterTrack_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddChildMasterTrack_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneFolderExtensions:AddChildFolder
    static readonly IntPtr AddChildFolder_NativeFunction;
    static readonly int AddChildFolder_ParamsSize;
    static readonly int AddChildFolder_TargetFolder_Offset;
    static readonly int AddChildFolder_FolderToAdd_Offset;
    static readonly int AddChildFolder_ReturnValue_Offset;
    
    public static bool AddChildFolder(UnrealSharp.MovieScene.MovieSceneFolder targetFolder, UnrealSharp.MovieScene.MovieSceneFolder folderToAdd)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddChildFolder_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, AddChildFolder_TargetFolder_Offset), 0, null, targetFolder);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, AddChildFolder_FolderToAdd_Offset), 0, null, folderToAdd);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddChildFolder_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddChildFolder_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.SequencerScripting;

[UClass]
public partial class MovieSceneMaterialTrackExtensions : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static MovieSceneMaterialTrackExtensions()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MovieSceneMaterialTrackExtensions");
        
        
        SetMaterialIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterialIndex");
        SetMaterialIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterialIndex_NativeFunction);
        SetMaterialIndex_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialIndex_NativeFunction, "Track");
        SetMaterialIndex_MaterialIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialIndex_NativeFunction, "MaterialIndex");
        GetMaterialIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialIndex");
        GetMaterialIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialIndex_NativeFunction);
        GetMaterialIndex_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialIndex_NativeFunction, "Track");
        GetMaterialIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialIndex_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MovieSceneMaterialTrackExtensions(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/SequencerScripting.MovieSceneMaterialTrackExtensions:SetMaterialIndex
    static readonly IntPtr SetMaterialIndex_NativeFunction;
    static readonly int SetMaterialIndex_ParamsSize;
    static readonly int SetMaterialIndex_Track_Offset;
    static readonly int SetMaterialIndex_MaterialIndex_Offset;
    
    public static void SetMaterialIndex(UnrealSharp.MovieSceneTracks.MovieSceneComponentMaterialTrack track, int materialIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterialIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieSceneTracks.MovieSceneComponentMaterialTrack>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialIndex_Track_Offset), 0, null, track);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialIndex_MaterialIndex_Offset), 0, null, materialIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMaterialIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneMaterialTrackExtensions:GetMaterialIndex
    static readonly IntPtr GetMaterialIndex_NativeFunction;
    static readonly int GetMaterialIndex_ParamsSize;
    static readonly int GetMaterialIndex_Track_Offset;
    static readonly int GetMaterialIndex_ReturnValue_Offset;
    
    public static int GetMaterialIndex(UnrealSharp.MovieSceneTracks.MovieSceneComponentMaterialTrack track)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieSceneTracks.MovieSceneComponentMaterialTrack>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialIndex_Track_Offset), 0, null, track);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialIndex_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.SequencerScripting;

[UClass]
public partial class MovieSceneScriptingFloatChannel : UnrealSharp.SequencerScripting.MovieSceneScriptingChannel
{
    
    static MovieSceneScriptingFloatChannel()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MovieSceneScriptingFloatChannel");
        
        
        SetPreInfinityExtrapolation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPreInfinityExtrapolation");
        SetPreInfinityExtrapolation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPreInfinityExtrapolation_NativeFunction);
        SetPreInfinityExtrapolation_InExtrapolation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPreInfinityExtrapolation_NativeFunction, "InExtrapolation");
        SetPostInfinityExtrapolation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPostInfinityExtrapolation");
        SetPostInfinityExtrapolation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPostInfinityExtrapolation_NativeFunction);
        SetPostInfinityExtrapolation_InExtrapolation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPostInfinityExtrapolation_NativeFunction, "InExtrapolation");
        SetDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefault");
        SetDefault_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefault_NativeFunction);
        SetDefault_InDefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefault_NativeFunction, "InDefaultValue");
        RemoveKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveKey");
        RemoveKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveKey_NativeFunction);
        RemoveKey_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveKey_NativeFunction, "Key");
        RemoveDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveDefault");
        HasDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasDefault");
        HasDefault_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasDefault_NativeFunction);
        HasDefault_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasDefault_NativeFunction, "ReturnValue");
        GetPreInfinityExtrapolation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPreInfinityExtrapolation");
        GetPreInfinityExtrapolation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPreInfinityExtrapolation_NativeFunction);
        GetPreInfinityExtrapolation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPreInfinityExtrapolation_NativeFunction, "ReturnValue");
        GetPostInfinityExtrapolation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPostInfinityExtrapolation");
        GetPostInfinityExtrapolation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPostInfinityExtrapolation_NativeFunction);
        GetPostInfinityExtrapolation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPostInfinityExtrapolation_NativeFunction, "ReturnValue");
        GetNumKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumKeys");
        GetNumKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumKeys_NativeFunction);
        GetNumKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumKeys_NativeFunction, "ReturnValue");
        GetKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetKeys");
        GetKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetKeys_NativeFunction);
        GetKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetKeys_NativeFunction, "ReturnValue");
        GetKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetKeys_NativeFunction, "ReturnValue");
        GetDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefault");
        GetDefault_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefault_NativeFunction);
        GetDefault_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefault_NativeFunction, "ReturnValue");
        EvaluateKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EvaluateKeys");
        EvaluateKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EvaluateKeys_NativeFunction);
        EvaluateKeys_Range_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateKeys_NativeFunction, "Range");
        EvaluateKeys_FrameRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateKeys_NativeFunction, "FrameRate");
        EvaluateKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateKeys_NativeFunction, "ReturnValue");
        EvaluateKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(EvaluateKeys_NativeFunction, "ReturnValue");
        ComputeEffectiveRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ComputeEffectiveRange");
        ComputeEffectiveRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ComputeEffectiveRange_NativeFunction);
        ComputeEffectiveRange_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComputeEffectiveRange_NativeFunction, "ReturnValue");
        AddKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddKey");
        AddKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddKey_NativeFunction);
        AddKey_InTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddKey_NativeFunction, "InTime");
        AddKey_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddKey_NativeFunction, "NewValue");
        AddKey_SubFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddKey_NativeFunction, "SubFrame");
        AddKey_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddKey_NativeFunction, "TimeUnit");
        AddKey_InInterpolation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddKey_NativeFunction, "InInterpolation");
        AddKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddKey_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MovieSceneScriptingFloatChannel(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/SequencerScripting.MovieSceneScriptingFloatChannel:SetPreInfinityExtrapolation
    static readonly IntPtr SetPreInfinityExtrapolation_NativeFunction;
    static readonly int SetPreInfinityExtrapolation_ParamsSize;
    static readonly int SetPreInfinityExtrapolation_InExtrapolation_Offset;
    
    public void SetPreInfinityExtrapolation(UnrealSharp.Engine.ERichCurveExtrapolation inExtrapolation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPreInfinityExtrapolation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ERichCurveExtrapolation>.ToNative(IntPtr.Add(ParamsBuffer, SetPreInfinityExtrapolation_InExtrapolation_Offset), 0, null, inExtrapolation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPreInfinityExtrapolation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneScriptingFloatChannel:SetPostInfinityExtrapolation
    static readonly IntPtr SetPostInfinityExtrapolation_NativeFunction;
    static readonly int SetPostInfinityExtrapolation_ParamsSize;
    static readonly int SetPostInfinityExtrapolation_InExtrapolation_Offset;
    
    public void SetPostInfinityExtrapolation(UnrealSharp.Engine.ERichCurveExtrapolation inExtrapolation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPostInfinityExtrapolation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ERichCurveExtrapolation>.ToNative(IntPtr.Add(ParamsBuffer, SetPostInfinityExtrapolation_InExtrapolation_Offset), 0, null, inExtrapolation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPostInfinityExtrapolation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneScriptingFloatChannel:SetDefault
    static readonly IntPtr SetDefault_NativeFunction;
    static readonly int SetDefault_ParamsSize;
    static readonly int SetDefault_InDefaultValue_Offset;
    
    public void SetDefault(float inDefaultValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefault_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDefault_InDefaultValue_Offset), 0, null, inDefaultValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefault_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneScriptingFloatChannel:RemoveKey
    static readonly IntPtr RemoveKey_NativeFunction;
    static readonly int RemoveKey_ParamsSize;
    static readonly int RemoveKey_Key_Offset;
    
    public void RemoveKey(UnrealSharp.SequencerScripting.MovieSceneScriptingKey key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.SequencerScripting.MovieSceneScriptingKey>.ToNative(IntPtr.Add(ParamsBuffer, RemoveKey_Key_Offset), 0, null, key);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveKey_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneScriptingFloatChannel:RemoveDefault
    static readonly IntPtr RemoveDefault_NativeFunction;
    
    public void RemoveDefault()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveDefault_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneScriptingFloatChannel:HasDefault
    static readonly IntPtr HasDefault_NativeFunction;
    static readonly int HasDefault_ParamsSize;
    static readonly int HasDefault_ReturnValue_Offset;
    
    public bool HasDefault()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasDefault_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasDefault_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasDefault_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneScriptingFloatChannel:GetPreInfinityExtrapolation
    static readonly IntPtr GetPreInfinityExtrapolation_NativeFunction;
    static readonly int GetPreInfinityExtrapolation_ParamsSize;
    static readonly int GetPreInfinityExtrapolation_ReturnValue_Offset;
    
    public UnrealSharp.Engine.ERichCurveExtrapolation GetPreInfinityExtrapolation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPreInfinityExtrapolation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPreInfinityExtrapolation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ERichCurveExtrapolation returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.ERichCurveExtrapolation>.FromNative(IntPtr.Add(ParamsBuffer, GetPreInfinityExtrapolation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneScriptingFloatChannel:GetPostInfinityExtrapolation
    static readonly IntPtr GetPostInfinityExtrapolation_NativeFunction;
    static readonly int GetPostInfinityExtrapolation_ParamsSize;
    static readonly int GetPostInfinityExtrapolation_ReturnValue_Offset;
    
    public UnrealSharp.Engine.ERichCurveExtrapolation GetPostInfinityExtrapolation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPostInfinityExtrapolation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPostInfinityExtrapolation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ERichCurveExtrapolation returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.ERichCurveExtrapolation>.FromNative(IntPtr.Add(ParamsBuffer, GetPostInfinityExtrapolation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneScriptingFloatChannel:GetNumKeys
    static readonly IntPtr GetNumKeys_NativeFunction;
    static readonly int GetNumKeys_ParamsSize;
    static readonly int GetNumKeys_ReturnValue_Offset;
    
    public int GetNumKeys()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumKeys_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumKeys_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneScriptingFloatChannel:GetKeys
    static readonly IntPtr GetKeys_NativeFunction;
    static readonly int GetKeys_ParamsSize;
    static readonly int GetKeys_ReturnValue_Offset;
    static readonly int GetKeys_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.SequencerScripting.MovieSceneScriptingKey> GetKeys()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.SequencerScripting.MovieSceneScriptingKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.SequencerScripting.MovieSceneScriptingKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.SequencerScripting.MovieSceneScriptingKey> (1, ObjectMarshaller<UnrealSharp.SequencerScripting.MovieSceneScriptingKey>.ToNative, ObjectMarshaller<UnrealSharp.SequencerScripting.MovieSceneScriptingKey>.FromNative, GetKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.SequencerScripting.MovieSceneScriptingKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneScriptingFloatChannel:GetDefault
    static readonly IntPtr GetDefault_NativeFunction;
    static readonly int GetDefault_ParamsSize;
    static readonly int GetDefault_ReturnValue_Offset;
    
    public float GetDefault()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefault_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDefault_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDefault_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneScriptingFloatChannel:EvaluateKeys
    static readonly IntPtr EvaluateKeys_NativeFunction;
    static readonly int EvaluateKeys_ParamsSize;
    static readonly int EvaluateKeys_Range_Offset;
    static readonly int EvaluateKeys_FrameRate_Offset;
    static readonly int EvaluateKeys_ReturnValue_Offset;
    static readonly int EvaluateKeys_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<float> EvaluateKeys(UnrealSharp.SequencerScripting.SequencerScriptingRange range, UnrealSharp.CoreUObject.FrameRate frameRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EvaluateKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, EvaluateKeys_Range_Offset), 0, null, range);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameRate>.ToNative(IntPtr.Add(ParamsBuffer, EvaluateKeys_FrameRate_Offset), 0, null, frameRate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EvaluateKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<float> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, EvaluateKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<float> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, EvaluateKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneScriptingFloatChannel:ComputeEffectiveRange
    static readonly IntPtr ComputeEffectiveRange_NativeFunction;
    static readonly int ComputeEffectiveRange_ParamsSize;
    static readonly int ComputeEffectiveRange_ReturnValue_Offset;
    
    public UnrealSharp.SequencerScripting.SequencerScriptingRange ComputeEffectiveRange()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ComputeEffectiveRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ComputeEffectiveRange_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SequencerScripting.SequencerScriptingRange returnValue;
            returnValue = UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ComputeEffectiveRange_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneScriptingFloatChannel:AddKey
    static readonly IntPtr AddKey_NativeFunction;
    static readonly int AddKey_ParamsSize;
    static readonly int AddKey_InTime_Offset;
    static readonly int AddKey_NewValue_Offset;
    static readonly int AddKey_SubFrame_Offset;
    static readonly int AddKey_TimeUnit_Offset;
    static readonly int AddKey_InInterpolation_Offset;
    static readonly int AddKey_ReturnValue_Offset;
    
    public UnrealSharp.SequencerScripting.MovieSceneScriptingFloatKey AddKey(UnrealSharp.CoreUObject.FrameNumber inTime, float newValue, float subFrame = 0.000000f, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, UnrealSharp.MovieScene.EMovieSceneKeyInterpolation inInterpolation = UnrealSharp.MovieScene.EMovieSceneKeyInterpolation.Auto)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, AddKey_InTime_Offset), 0, null, inTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddKey_NewValue_Offset), 0, null, newValue);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddKey_SubFrame_Offset), 0, null, subFrame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, AddKey_TimeUnit_Offset), 0, null, timeUnit);
            BlittableMarshaller<UnrealSharp.MovieScene.EMovieSceneKeyInterpolation>.ToNative(IntPtr.Add(ParamsBuffer, AddKey_InInterpolation_Offset), 0, null, inInterpolation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddKey_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SequencerScripting.MovieSceneScriptingFloatKey returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.SequencerScripting.MovieSceneScriptingFloatKey>.FromNative(IntPtr.Add(ParamsBuffer, AddKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.SequencerScripting;

[UClass]
public partial class MovieSceneSequenceExtensions : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static MovieSceneSequenceExtensions()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MovieSceneSequenceExtensions");
        
        
        SortMarkedFrames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SortMarkedFrames");
        SortMarkedFrames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SortMarkedFrames_NativeFunction);
        SortMarkedFrames_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SortMarkedFrames_NativeFunction, "Sequence");
        SetWorkRangeStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWorkRangeStart");
        SetWorkRangeStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWorkRangeStart_NativeFunction);
        SetWorkRangeStart_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWorkRangeStart_NativeFunction, "InSequence");
        SetWorkRangeStart_StartTimeInSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWorkRangeStart_NativeFunction, "StartTimeInSeconds");
        SetWorkRangeEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWorkRangeEnd");
        SetWorkRangeEnd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWorkRangeEnd_NativeFunction);
        SetWorkRangeEnd_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWorkRangeEnd_NativeFunction, "InSequence");
        SetWorkRangeEnd_EndTimeInSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWorkRangeEnd_NativeFunction, "EndTimeInSeconds");
        SetViewRangeStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetViewRangeStart");
        SetViewRangeStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetViewRangeStart_NativeFunction);
        SetViewRangeStart_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewRangeStart_NativeFunction, "InSequence");
        SetViewRangeStart_StartTimeInSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewRangeStart_NativeFunction, "StartTimeInSeconds");
        SetViewRangeEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetViewRangeEnd");
        SetViewRangeEnd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetViewRangeEnd_NativeFunction);
        SetViewRangeEnd_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewRangeEnd_NativeFunction, "InSequence");
        SetViewRangeEnd_EndTimeInSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewRangeEnd_NativeFunction, "EndTimeInSeconds");
        SetTickResolutionDirectly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTickResolutionDirectly");
        SetTickResolutionDirectly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTickResolutionDirectly_NativeFunction);
        SetTickResolutionDirectly_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTickResolutionDirectly_NativeFunction, "Sequence");
        SetTickResolutionDirectly_TickResolution_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTickResolutionDirectly_NativeFunction, "TickResolution");
        SetTickResolution_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTickResolution");
        SetTickResolution_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTickResolution_NativeFunction);
        SetTickResolution_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTickResolution_NativeFunction, "Sequence");
        SetTickResolution_TickResolution_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTickResolution_NativeFunction, "TickResolution");
        SetReadOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetReadOnly");
        SetReadOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetReadOnly_NativeFunction);
        SetReadOnly_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetReadOnly_NativeFunction, "Sequence");
        SetReadOnly_bInReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetReadOnly_NativeFunction, "bInReadOnly");
        SetPlaybackStartSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaybackStartSeconds");
        SetPlaybackStartSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaybackStartSeconds_NativeFunction);
        SetPlaybackStartSeconds_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackStartSeconds_NativeFunction, "Sequence");
        SetPlaybackStartSeconds_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackStartSeconds_NativeFunction, "StartTime");
        SetPlaybackStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaybackStart");
        SetPlaybackStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaybackStart_NativeFunction);
        SetPlaybackStart_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackStart_NativeFunction, "Sequence");
        SetPlaybackStart_StartFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackStart_NativeFunction, "StartFrame");
        SetPlaybackRangeLocked_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaybackRangeLocked");
        SetPlaybackRangeLocked_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaybackRangeLocked_NativeFunction);
        SetPlaybackRangeLocked_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackRangeLocked_NativeFunction, "Sequence");
        SetPlaybackRangeLocked_bInLocked_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackRangeLocked_NativeFunction, "bInLocked");
        SetPlaybackEndSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaybackEndSeconds");
        SetPlaybackEndSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaybackEndSeconds_NativeFunction);
        SetPlaybackEndSeconds_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackEndSeconds_NativeFunction, "Sequence");
        SetPlaybackEndSeconds_EndTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackEndSeconds_NativeFunction, "EndTime");
        SetPlaybackEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaybackEnd");
        SetPlaybackEnd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaybackEnd_NativeFunction);
        SetPlaybackEnd_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackEnd_NativeFunction, "Sequence");
        SetPlaybackEnd_EndFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackEnd_NativeFunction, "EndFrame");
        SetMarkedFramesLocked_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMarkedFramesLocked");
        SetMarkedFramesLocked_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMarkedFramesLocked_NativeFunction);
        SetMarkedFramesLocked_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMarkedFramesLocked_NativeFunction, "Sequence");
        SetMarkedFramesLocked_bInLocked_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMarkedFramesLocked_NativeFunction, "bInLocked");
        SetMarkedFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMarkedFrame");
        SetMarkedFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMarkedFrame_NativeFunction);
        SetMarkedFrame_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMarkedFrame_NativeFunction, "Sequence");
        SetMarkedFrame_InMarkIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMarkedFrame_NativeFunction, "InMarkIndex");
        SetMarkedFrame_InFrameNumber_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMarkedFrame_NativeFunction, "InFrameNumber");
        SetEvaluationType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEvaluationType");
        SetEvaluationType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEvaluationType_NativeFunction);
        SetEvaluationType_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEvaluationType_NativeFunction, "InSequence");
        SetEvaluationType_InEvaluationType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEvaluationType_NativeFunction, "InEvaluationType");
        SetDisplayRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDisplayRate");
        SetDisplayRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDisplayRate_NativeFunction);
        SetDisplayRate_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDisplayRate_NativeFunction, "Sequence");
        SetDisplayRate_DisplayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDisplayRate_NativeFunction, "DisplayRate");
        SetClockSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetClockSource");
        SetClockSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetClockSource_NativeFunction);
        SetClockSource_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetClockSource_NativeFunction, "InSequence");
        SetClockSource_InClockSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetClockSource_NativeFunction, "InClockSource");
        ResolveBindingID_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResolveBindingID");
        ResolveBindingID_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResolveBindingID_NativeFunction);
        ResolveBindingID_RootSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResolveBindingID_NativeFunction, "RootSequence");
        ResolveBindingID_InObjectBindingID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResolveBindingID_NativeFunction, "InObjectBindingID");
        ResolveBindingID_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResolveBindingID_NativeFunction, "ReturnValue");
        RemoveTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveTrack");
        RemoveTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveTrack_NativeFunction);
        RemoveTrack_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveTrack_NativeFunction, "Sequence");
        RemoveTrack_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveTrack_NativeFunction, "Track");
        RemoveTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveTrack_NativeFunction, "ReturnValue");
        RemoveRootFolderFromSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveRootFolderFromSequence");
        RemoveRootFolderFromSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveRootFolderFromSequence_NativeFunction);
        RemoveRootFolderFromSequence_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveRootFolderFromSequence_NativeFunction, "Sequence");
        RemoveRootFolderFromSequence_Folder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveRootFolderFromSequence_NativeFunction, "Folder");
        RemoveMasterTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveMasterTrack");
        RemoveMasterTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveMasterTrack_NativeFunction);
        RemoveMasterTrack_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMasterTrack_NativeFunction, "Sequence");
        RemoveMasterTrack_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMasterTrack_NativeFunction, "Track");
        RemoveMasterTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMasterTrack_NativeFunction, "ReturnValue");
        MakeRangeSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeRangeSeconds");
        MakeRangeSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeRangeSeconds_NativeFunction);
        MakeRangeSeconds_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRangeSeconds_NativeFunction, "Sequence");
        MakeRangeSeconds_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRangeSeconds_NativeFunction, "StartTime");
        MakeRangeSeconds_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRangeSeconds_NativeFunction, "Duration");
        MakeRangeSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRangeSeconds_NativeFunction, "ReturnValue");
        MakeRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeRange");
        MakeRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeRange_NativeFunction);
        MakeRange_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRange_NativeFunction, "Sequence");
        MakeRange_StartFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRange_NativeFunction, "StartFrame");
        MakeRange_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRange_NativeFunction, "Duration");
        MakeRange_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRange_NativeFunction, "ReturnValue");
        LocateBoundObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LocateBoundObjects");
        LocateBoundObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LocateBoundObjects_NativeFunction);
        LocateBoundObjects_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LocateBoundObjects_NativeFunction, "Sequence");
        LocateBoundObjects_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LocateBoundObjects_NativeFunction, "InBinding");
        LocateBoundObjects_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LocateBoundObjects_NativeFunction, "Context");
        LocateBoundObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LocateBoundObjects_NativeFunction, "ReturnValue");
        LocateBoundObjects_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(LocateBoundObjects_NativeFunction, "ReturnValue");
        IsReadOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsReadOnly");
        IsReadOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsReadOnly_NativeFunction);
        IsReadOnly_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsReadOnly_NativeFunction, "Sequence");
        IsReadOnly_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsReadOnly_NativeFunction, "ReturnValue");
        IsPlaybackRangeLocked_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPlaybackRangeLocked");
        IsPlaybackRangeLocked_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPlaybackRangeLocked_NativeFunction);
        IsPlaybackRangeLocked_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlaybackRangeLocked_NativeFunction, "Sequence");
        IsPlaybackRangeLocked_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlaybackRangeLocked_NativeFunction, "ReturnValue");
        GetWorkRangeStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorkRangeStart");
        GetWorkRangeStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorkRangeStart_NativeFunction);
        GetWorkRangeStart_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorkRangeStart_NativeFunction, "InSequence");
        GetWorkRangeStart_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorkRangeStart_NativeFunction, "ReturnValue");
        GetWorkRangeEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorkRangeEnd");
        GetWorkRangeEnd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorkRangeEnd_NativeFunction);
        GetWorkRangeEnd_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorkRangeEnd_NativeFunction, "InSequence");
        GetWorkRangeEnd_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorkRangeEnd_NativeFunction, "ReturnValue");
        GetViewRangeStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetViewRangeStart");
        GetViewRangeStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetViewRangeStart_NativeFunction);
        GetViewRangeStart_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewRangeStart_NativeFunction, "InSequence");
        GetViewRangeStart_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewRangeStart_NativeFunction, "ReturnValue");
        GetViewRangeEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetViewRangeEnd");
        GetViewRangeEnd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetViewRangeEnd_NativeFunction);
        GetViewRangeEnd_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewRangeEnd_NativeFunction, "InSequence");
        GetViewRangeEnd_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewRangeEnd_NativeFunction, "ReturnValue");
        GetTracks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTracks");
        GetTracks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTracks_NativeFunction);
        GetTracks_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTracks_NativeFunction, "Sequence");
        GetTracks_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTracks_NativeFunction, "ReturnValue");
        GetTracks_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetTracks_NativeFunction, "ReturnValue");
        GetTickResolution_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTickResolution");
        GetTickResolution_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTickResolution_NativeFunction);
        GetTickResolution_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTickResolution_NativeFunction, "Sequence");
        GetTickResolution_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTickResolution_NativeFunction, "ReturnValue");
        GetSpawnables_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSpawnables");
        GetSpawnables_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSpawnables_NativeFunction);
        GetSpawnables_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSpawnables_NativeFunction, "Sequence");
        GetSpawnables_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSpawnables_NativeFunction, "ReturnValue");
        GetSpawnables_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSpawnables_NativeFunction, "ReturnValue");
        GetRootFoldersInSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRootFoldersInSequence");
        GetRootFoldersInSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRootFoldersInSequence_NativeFunction);
        GetRootFoldersInSequence_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRootFoldersInSequence_NativeFunction, "Sequence");
        GetRootFoldersInSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRootFoldersInSequence_NativeFunction, "ReturnValue");
        GetRootFoldersInSequence_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetRootFoldersInSequence_NativeFunction, "ReturnValue");
        GetPossessables_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPossessables");
        GetPossessables_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPossessables_NativeFunction);
        GetPossessables_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPossessables_NativeFunction, "Sequence");
        GetPossessables_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPossessables_NativeFunction, "ReturnValue");
        GetPossessables_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPossessables_NativeFunction, "ReturnValue");
        GetPortableBindingID_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPortableBindingID");
        GetPortableBindingID_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPortableBindingID_NativeFunction);
        GetPortableBindingID_RootSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPortableBindingID_NativeFunction, "RootSequence");
        GetPortableBindingID_DestinationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPortableBindingID_NativeFunction, "DestinationSequence");
        GetPortableBindingID_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPortableBindingID_NativeFunction, "InBinding");
        GetPortableBindingID_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPortableBindingID_NativeFunction, "ReturnValue");
        GetPlaybackStartSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaybackStartSeconds");
        GetPlaybackStartSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaybackStartSeconds_NativeFunction);
        GetPlaybackStartSeconds_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackStartSeconds_NativeFunction, "Sequence");
        GetPlaybackStartSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackStartSeconds_NativeFunction, "ReturnValue");
        GetPlaybackStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaybackStart");
        GetPlaybackStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaybackStart_NativeFunction);
        GetPlaybackStart_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackStart_NativeFunction, "Sequence");
        GetPlaybackStart_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackStart_NativeFunction, "ReturnValue");
        GetPlaybackRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaybackRange");
        GetPlaybackRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaybackRange_NativeFunction);
        GetPlaybackRange_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackRange_NativeFunction, "Sequence");
        GetPlaybackRange_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackRange_NativeFunction, "ReturnValue");
        GetPlaybackEndSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaybackEndSeconds");
        GetPlaybackEndSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaybackEndSeconds_NativeFunction);
        GetPlaybackEndSeconds_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackEndSeconds_NativeFunction, "Sequence");
        GetPlaybackEndSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackEndSeconds_NativeFunction, "ReturnValue");
        GetPlaybackEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaybackEnd");
        GetPlaybackEnd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaybackEnd_NativeFunction);
        GetPlaybackEnd_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackEnd_NativeFunction, "Sequence");
        GetPlaybackEnd_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackEnd_NativeFunction, "ReturnValue");
        GetMovieScene_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMovieScene");
        GetMovieScene_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMovieScene_NativeFunction);
        GetMovieScene_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMovieScene_NativeFunction, "Sequence");
        GetMovieScene_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMovieScene_NativeFunction, "ReturnValue");
        GetMasterTracks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMasterTracks");
        GetMasterTracks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMasterTracks_NativeFunction);
        GetMasterTracks_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMasterTracks_NativeFunction, "Sequence");
        GetMasterTracks_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMasterTracks_NativeFunction, "ReturnValue");
        GetMasterTracks_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMasterTracks_NativeFunction, "ReturnValue");
        GetMarkedFrames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMarkedFrames");
        GetMarkedFrames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMarkedFrames_NativeFunction);
        GetMarkedFrames_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMarkedFrames_NativeFunction, "Sequence");
        GetMarkedFrames_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMarkedFrames_NativeFunction, "ReturnValue");
        GetMarkedFrames_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMarkedFrames_NativeFunction, "ReturnValue");
        GetEvaluationType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEvaluationType");
        GetEvaluationType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEvaluationType_NativeFunction);
        GetEvaluationType_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEvaluationType_NativeFunction, "InSequence");
        GetEvaluationType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEvaluationType_NativeFunction, "ReturnValue");
        GetDisplayRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDisplayRate");
        GetDisplayRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDisplayRate_NativeFunction);
        GetDisplayRate_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDisplayRate_NativeFunction, "Sequence");
        GetDisplayRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDisplayRate_NativeFunction, "ReturnValue");
        GetClockSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetClockSource");
        GetClockSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetClockSource_NativeFunction);
        GetClockSource_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClockSource_NativeFunction, "InSequence");
        GetClockSource_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClockSource_NativeFunction, "ReturnValue");
        GetBindings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBindings");
        GetBindings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBindings_NativeFunction);
        GetBindings_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBindings_NativeFunction, "Sequence");
        GetBindings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBindings_NativeFunction, "ReturnValue");
        GetBindings_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetBindings_NativeFunction, "ReturnValue");
        GetBindingID_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBindingID");
        GetBindingID_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBindingID_NativeFunction);
        GetBindingID_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBindingID_NativeFunction, "Sequence");
        GetBindingID_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBindingID_NativeFunction, "InBinding");
        GetBindingID_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBindingID_NativeFunction, "ReturnValue");
        FindTracksByType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindTracksByType");
        FindTracksByType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindTracksByType_NativeFunction);
        FindTracksByType_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTracksByType_NativeFunction, "Sequence");
        FindTracksByType_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTracksByType_NativeFunction, "TrackType");
        FindTracksByType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTracksByType_NativeFunction, "ReturnValue");
        FindTracksByType_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindTracksByType_NativeFunction, "ReturnValue");
        FindTracksByExactType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindTracksByExactType");
        FindTracksByExactType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindTracksByExactType_NativeFunction);
        FindTracksByExactType_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTracksByExactType_NativeFunction, "Sequence");
        FindTracksByExactType_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTracksByExactType_NativeFunction, "TrackType");
        FindTracksByExactType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTracksByExactType_NativeFunction, "ReturnValue");
        FindTracksByExactType_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindTracksByExactType_NativeFunction, "ReturnValue");
        FindNextMarkedFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNextMarkedFrame");
        FindNextMarkedFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNextMarkedFrame_NativeFunction);
        FindNextMarkedFrame_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNextMarkedFrame_NativeFunction, "Sequence");
        FindNextMarkedFrame_InFrameNumber_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNextMarkedFrame_NativeFunction, "InFrameNumber");
        FindNextMarkedFrame_bForward_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNextMarkedFrame_NativeFunction, "bForward");
        FindNextMarkedFrame_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNextMarkedFrame_NativeFunction, "ReturnValue");
        FindMasterTracksByType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindMasterTracksByType");
        FindMasterTracksByType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindMasterTracksByType_NativeFunction);
        FindMasterTracksByType_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindMasterTracksByType_NativeFunction, "Sequence");
        FindMasterTracksByType_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindMasterTracksByType_NativeFunction, "TrackType");
        FindMasterTracksByType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindMasterTracksByType_NativeFunction, "ReturnValue");
        FindMasterTracksByType_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindMasterTracksByType_NativeFunction, "ReturnValue");
        FindMasterTracksByExactType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindMasterTracksByExactType");
        FindMasterTracksByExactType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindMasterTracksByExactType_NativeFunction);
        FindMasterTracksByExactType_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindMasterTracksByExactType_NativeFunction, "Sequence");
        FindMasterTracksByExactType_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindMasterTracksByExactType_NativeFunction, "TrackType");
        FindMasterTracksByExactType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindMasterTracksByExactType_NativeFunction, "ReturnValue");
        FindMasterTracksByExactType_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindMasterTracksByExactType_NativeFunction, "ReturnValue");
        FindMarkedFrameByLabel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindMarkedFrameByLabel");
        FindMarkedFrameByLabel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindMarkedFrameByLabel_NativeFunction);
        FindMarkedFrameByLabel_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindMarkedFrameByLabel_NativeFunction, "Sequence");
        FindMarkedFrameByLabel_InLabel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindMarkedFrameByLabel_NativeFunction, "InLabel");
        FindMarkedFrameByLabel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindMarkedFrameByLabel_NativeFunction, "ReturnValue");
        FindMarkedFrameByFrameNumber_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindMarkedFrameByFrameNumber");
        FindMarkedFrameByFrameNumber_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindMarkedFrameByFrameNumber_NativeFunction);
        FindMarkedFrameByFrameNumber_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindMarkedFrameByFrameNumber_NativeFunction, "Sequence");
        FindMarkedFrameByFrameNumber_InFrameNumber_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindMarkedFrameByFrameNumber_NativeFunction, "InFrameNumber");
        FindMarkedFrameByFrameNumber_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindMarkedFrameByFrameNumber_NativeFunction, "ReturnValue");
        FindBindingByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindBindingByName");
        FindBindingByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindBindingByName_NativeFunction);
        FindBindingByName_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindBindingByName_NativeFunction, "Sequence");
        FindBindingByName_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindBindingByName_NativeFunction, "Name");
        FindBindingByName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindBindingByName_NativeFunction, "ReturnValue");
        FindBindingById_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindBindingById");
        FindBindingById_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindBindingById_NativeFunction);
        FindBindingById_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindBindingById_NativeFunction, "Sequence");
        FindBindingById_BindingId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindBindingById_NativeFunction, "BindingId");
        FindBindingById_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindBindingById_NativeFunction, "ReturnValue");
        DeleteMarkedFrames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteMarkedFrames");
        DeleteMarkedFrames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteMarkedFrames_NativeFunction);
        DeleteMarkedFrames_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteMarkedFrames_NativeFunction, "Sequence");
        DeleteMarkedFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteMarkedFrame");
        DeleteMarkedFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteMarkedFrame_NativeFunction);
        DeleteMarkedFrame_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteMarkedFrame_NativeFunction, "Sequence");
        DeleteMarkedFrame_DeleteIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteMarkedFrame_NativeFunction, "DeleteIndex");
        AreMarkedFramesLocked_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AreMarkedFramesLocked");
        AreMarkedFramesLocked_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AreMarkedFramesLocked_NativeFunction);
        AreMarkedFramesLocked_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AreMarkedFramesLocked_NativeFunction, "Sequence");
        AreMarkedFramesLocked_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AreMarkedFramesLocked_NativeFunction, "ReturnValue");
        AddTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddTrack");
        AddTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddTrack_NativeFunction);
        AddTrack_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTrack_NativeFunction, "Sequence");
        AddTrack_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTrack_NativeFunction, "TrackType");
        AddTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTrack_NativeFunction, "ReturnValue");
        AddSpawnableFromInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddSpawnableFromInstance");
        AddSpawnableFromInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddSpawnableFromInstance_NativeFunction);
        AddSpawnableFromInstance_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSpawnableFromInstance_NativeFunction, "Sequence");
        AddSpawnableFromInstance_ObjectToSpawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSpawnableFromInstance_NativeFunction, "ObjectToSpawn");
        AddSpawnableFromInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSpawnableFromInstance_NativeFunction, "ReturnValue");
        AddSpawnableFromClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddSpawnableFromClass");
        AddSpawnableFromClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddSpawnableFromClass_NativeFunction);
        AddSpawnableFromClass_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSpawnableFromClass_NativeFunction, "Sequence");
        AddSpawnableFromClass_ClassToSpawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSpawnableFromClass_NativeFunction, "ClassToSpawn");
        AddSpawnableFromClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSpawnableFromClass_NativeFunction, "ReturnValue");
        AddRootFolderToSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddRootFolderToSequence");
        AddRootFolderToSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddRootFolderToSequence_NativeFunction);
        AddRootFolderToSequence_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRootFolderToSequence_NativeFunction, "Sequence");
        AddRootFolderToSequence_NewFolderName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRootFolderToSequence_NativeFunction, "NewFolderName");
        AddRootFolderToSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRootFolderToSequence_NativeFunction, "ReturnValue");
        AddPossessable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddPossessable");
        AddPossessable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddPossessable_NativeFunction);
        AddPossessable_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddPossessable_NativeFunction, "Sequence");
        AddPossessable_ObjectToPossess_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddPossessable_NativeFunction, "ObjectToPossess");
        AddPossessable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddPossessable_NativeFunction, "ReturnValue");
        AddMasterTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddMasterTrack");
        AddMasterTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddMasterTrack_NativeFunction);
        AddMasterTrack_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMasterTrack_NativeFunction, "Sequence");
        AddMasterTrack_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMasterTrack_NativeFunction, "TrackType");
        AddMasterTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMasterTrack_NativeFunction, "ReturnValue");
        AddMarkedFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddMarkedFrame");
        AddMarkedFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddMarkedFrame_NativeFunction);
        AddMarkedFrame_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMarkedFrame_NativeFunction, "Sequence");
        AddMarkedFrame_InMarkedFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMarkedFrame_NativeFunction, "InMarkedFrame");
        AddMarkedFrame_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMarkedFrame_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MovieSceneSequenceExtensions(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SortMarkedFrames
    static readonly IntPtr SortMarkedFrames_NativeFunction;
    static readonly int SortMarkedFrames_ParamsSize;
    static readonly int SortMarkedFrames_Sequence_Offset;
    
    public static void SortMarkedFrames(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SortMarkedFrames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SortMarkedFrames_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SortMarkedFrames_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetWorkRangeStart
    static readonly IntPtr SetWorkRangeStart_NativeFunction;
    static readonly int SetWorkRangeStart_ParamsSize;
    static readonly int SetWorkRangeStart_InSequence_Offset;
    static readonly int SetWorkRangeStart_StartTimeInSeconds_Offset;
    
    public static void SetWorkRangeStart(UnrealSharp.MovieScene.MovieSceneSequence inSequence, float startTimeInSeconds)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWorkRangeStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetWorkRangeStart_InSequence_Offset), 0, null, inSequence);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetWorkRangeStart_StartTimeInSeconds_Offset), 0, null, startTimeInSeconds);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetWorkRangeStart_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetWorkRangeEnd
    static readonly IntPtr SetWorkRangeEnd_NativeFunction;
    static readonly int SetWorkRangeEnd_ParamsSize;
    static readonly int SetWorkRangeEnd_InSequence_Offset;
    static readonly int SetWorkRangeEnd_EndTimeInSeconds_Offset;
    
    public static void SetWorkRangeEnd(UnrealSharp.MovieScene.MovieSceneSequence inSequence, float endTimeInSeconds)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWorkRangeEnd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetWorkRangeEnd_InSequence_Offset), 0, null, inSequence);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetWorkRangeEnd_EndTimeInSeconds_Offset), 0, null, endTimeInSeconds);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetWorkRangeEnd_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetViewRangeStart
    static readonly IntPtr SetViewRangeStart_NativeFunction;
    static readonly int SetViewRangeStart_ParamsSize;
    static readonly int SetViewRangeStart_InSequence_Offset;
    static readonly int SetViewRangeStart_StartTimeInSeconds_Offset;
    
    public static void SetViewRangeStart(UnrealSharp.MovieScene.MovieSceneSequence inSequence, float startTimeInSeconds)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetViewRangeStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetViewRangeStart_InSequence_Offset), 0, null, inSequence);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetViewRangeStart_StartTimeInSeconds_Offset), 0, null, startTimeInSeconds);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetViewRangeStart_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetViewRangeEnd
    static readonly IntPtr SetViewRangeEnd_NativeFunction;
    static readonly int SetViewRangeEnd_ParamsSize;
    static readonly int SetViewRangeEnd_InSequence_Offset;
    static readonly int SetViewRangeEnd_EndTimeInSeconds_Offset;
    
    public static void SetViewRangeEnd(UnrealSharp.MovieScene.MovieSceneSequence inSequence, float endTimeInSeconds)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetViewRangeEnd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetViewRangeEnd_InSequence_Offset), 0, null, inSequence);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetViewRangeEnd_EndTimeInSeconds_Offset), 0, null, endTimeInSeconds);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetViewRangeEnd_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetTickResolutionDirectly
    static readonly IntPtr SetTickResolutionDirectly_NativeFunction;
    static readonly int SetTickResolutionDirectly_ParamsSize;
    static readonly int SetTickResolutionDirectly_Sequence_Offset;
    static readonly int SetTickResolutionDirectly_TickResolution_Offset;
    
    public static void SetTickResolutionDirectly(UnrealSharp.MovieScene.MovieSceneSequence sequence, UnrealSharp.CoreUObject.FrameRate tickResolution)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTickResolutionDirectly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetTickResolutionDirectly_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameRate>.ToNative(IntPtr.Add(ParamsBuffer, SetTickResolutionDirectly_TickResolution_Offset), 0, null, tickResolution);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetTickResolutionDirectly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetTickResolution
    static readonly IntPtr SetTickResolution_NativeFunction;
    static readonly int SetTickResolution_ParamsSize;
    static readonly int SetTickResolution_Sequence_Offset;
    static readonly int SetTickResolution_TickResolution_Offset;
    
    public static void SetTickResolution(UnrealSharp.MovieScene.MovieSceneSequence sequence, UnrealSharp.CoreUObject.FrameRate tickResolution)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTickResolution_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetTickResolution_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameRate>.ToNative(IntPtr.Add(ParamsBuffer, SetTickResolution_TickResolution_Offset), 0, null, tickResolution);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetTickResolution_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetReadOnly
    static readonly IntPtr SetReadOnly_NativeFunction;
    static readonly int SetReadOnly_ParamsSize;
    static readonly int SetReadOnly_Sequence_Offset;
    static readonly int SetReadOnly_bInReadOnly_Offset;
    
    public static void SetReadOnly(UnrealSharp.MovieScene.MovieSceneSequence sequence, bool bInReadOnly)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetReadOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetReadOnly_Sequence_Offset), 0, null, sequence);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetReadOnly_bInReadOnly_Offset), 0, null, bInReadOnly);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetReadOnly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetPlaybackStartSeconds
    static readonly IntPtr SetPlaybackStartSeconds_NativeFunction;
    static readonly int SetPlaybackStartSeconds_ParamsSize;
    static readonly int SetPlaybackStartSeconds_Sequence_Offset;
    static readonly int SetPlaybackStartSeconds_StartTime_Offset;
    
    public static void SetPlaybackStartSeconds(UnrealSharp.MovieScene.MovieSceneSequence sequence, float startTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaybackStartSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackStartSeconds_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackStartSeconds_StartTime_Offset), 0, null, startTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetPlaybackStartSeconds_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetPlaybackStart
    static readonly IntPtr SetPlaybackStart_NativeFunction;
    static readonly int SetPlaybackStart_ParamsSize;
    static readonly int SetPlaybackStart_Sequence_Offset;
    static readonly int SetPlaybackStart_StartFrame_Offset;
    
    public static void SetPlaybackStart(UnrealSharp.MovieScene.MovieSceneSequence sequence, int startFrame)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaybackStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackStart_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackStart_StartFrame_Offset), 0, null, startFrame);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetPlaybackStart_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetPlaybackRangeLocked
    static readonly IntPtr SetPlaybackRangeLocked_NativeFunction;
    static readonly int SetPlaybackRangeLocked_ParamsSize;
    static readonly int SetPlaybackRangeLocked_Sequence_Offset;
    static readonly int SetPlaybackRangeLocked_bInLocked_Offset;
    
    public static void SetPlaybackRangeLocked(UnrealSharp.MovieScene.MovieSceneSequence sequence, bool bInLocked)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaybackRangeLocked_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackRangeLocked_Sequence_Offset), 0, null, sequence);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackRangeLocked_bInLocked_Offset), 0, null, bInLocked);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetPlaybackRangeLocked_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetPlaybackEndSeconds
    static readonly IntPtr SetPlaybackEndSeconds_NativeFunction;
    static readonly int SetPlaybackEndSeconds_ParamsSize;
    static readonly int SetPlaybackEndSeconds_Sequence_Offset;
    static readonly int SetPlaybackEndSeconds_EndTime_Offset;
    
    public static void SetPlaybackEndSeconds(UnrealSharp.MovieScene.MovieSceneSequence sequence, float endTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaybackEndSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackEndSeconds_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackEndSeconds_EndTime_Offset), 0, null, endTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetPlaybackEndSeconds_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetPlaybackEnd
    static readonly IntPtr SetPlaybackEnd_NativeFunction;
    static readonly int SetPlaybackEnd_ParamsSize;
    static readonly int SetPlaybackEnd_Sequence_Offset;
    static readonly int SetPlaybackEnd_EndFrame_Offset;
    
    public static void SetPlaybackEnd(UnrealSharp.MovieScene.MovieSceneSequence sequence, int endFrame)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaybackEnd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackEnd_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackEnd_EndFrame_Offset), 0, null, endFrame);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetPlaybackEnd_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetMarkedFramesLocked
    static readonly IntPtr SetMarkedFramesLocked_NativeFunction;
    static readonly int SetMarkedFramesLocked_ParamsSize;
    static readonly int SetMarkedFramesLocked_Sequence_Offset;
    static readonly int SetMarkedFramesLocked_bInLocked_Offset;
    
    public static void SetMarkedFramesLocked(UnrealSharp.MovieScene.MovieSceneSequence sequence, bool bInLocked)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMarkedFramesLocked_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetMarkedFramesLocked_Sequence_Offset), 0, null, sequence);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetMarkedFramesLocked_bInLocked_Offset), 0, null, bInLocked);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMarkedFramesLocked_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetMarkedFrame
    static readonly IntPtr SetMarkedFrame_NativeFunction;
    static readonly int SetMarkedFrame_ParamsSize;
    static readonly int SetMarkedFrame_Sequence_Offset;
    static readonly int SetMarkedFrame_InMarkIndex_Offset;
    static readonly int SetMarkedFrame_InFrameNumber_Offset;
    
    public static void SetMarkedFrame(UnrealSharp.MovieScene.MovieSceneSequence sequence, int inMarkIndex, UnrealSharp.CoreUObject.FrameNumber inFrameNumber)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMarkedFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetMarkedFrame_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetMarkedFrame_InMarkIndex_Offset), 0, null, inMarkIndex);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SetMarkedFrame_InFrameNumber_Offset), 0, null, inFrameNumber);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMarkedFrame_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetEvaluationType
    static readonly IntPtr SetEvaluationType_NativeFunction;
    static readonly int SetEvaluationType_ParamsSize;
    static readonly int SetEvaluationType_InSequence_Offset;
    static readonly int SetEvaluationType_InEvaluationType_Offset;
    
    public static void SetEvaluationType(UnrealSharp.MovieScene.MovieSceneSequence inSequence, UnrealSharp.MovieScene.EMovieSceneEvaluationType inEvaluationType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEvaluationType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetEvaluationType_InSequence_Offset), 0, null, inSequence);
            BlittableMarshaller<UnrealSharp.MovieScene.EMovieSceneEvaluationType>.ToNative(IntPtr.Add(ParamsBuffer, SetEvaluationType_InEvaluationType_Offset), 0, null, inEvaluationType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetEvaluationType_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetDisplayRate
    static readonly IntPtr SetDisplayRate_NativeFunction;
    static readonly int SetDisplayRate_ParamsSize;
    static readonly int SetDisplayRate_Sequence_Offset;
    static readonly int SetDisplayRate_DisplayRate_Offset;
    
    public static void SetDisplayRate(UnrealSharp.MovieScene.MovieSceneSequence sequence, UnrealSharp.CoreUObject.FrameRate displayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDisplayRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetDisplayRate_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameRate>.ToNative(IntPtr.Add(ParamsBuffer, SetDisplayRate_DisplayRate_Offset), 0, null, displayRate);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetDisplayRate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:SetClockSource
    static readonly IntPtr SetClockSource_NativeFunction;
    static readonly int SetClockSource_ParamsSize;
    static readonly int SetClockSource_InSequence_Offset;
    static readonly int SetClockSource_InClockSource_Offset;
    
    public static void SetClockSource(UnrealSharp.MovieScene.MovieSceneSequence inSequence, UnrealSharp.MovieScene.EUpdateClockSource inClockSource)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetClockSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetClockSource_InSequence_Offset), 0, null, inSequence);
            BlittableMarshaller<UnrealSharp.MovieScene.EUpdateClockSource>.ToNative(IntPtr.Add(ParamsBuffer, SetClockSource_InClockSource_Offset), 0, null, inClockSource);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetClockSource_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:ResolveBindingID
    static readonly IntPtr ResolveBindingID_NativeFunction;
    static readonly int ResolveBindingID_ParamsSize;
    static readonly int ResolveBindingID_RootSequence_Offset;
    static readonly int ResolveBindingID_InObjectBindingID_Offset;
    static readonly int ResolveBindingID_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneBindingProxy ResolveBindingID(UnrealSharp.MovieScene.MovieSceneSequence rootSequence, UnrealSharp.MovieScene.MovieSceneObjectBindingID inObjectBindingID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResolveBindingID_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, ResolveBindingID_RootSequence_Offset), 0, null, rootSequence);
            UnrealSharp.MovieScene.MovieSceneObjectBindingIDMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ResolveBindingID_InObjectBindingID_Offset), 0, null, inObjectBindingID);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ResolveBindingID_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneBindingProxy returnValue;
            returnValue = UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ResolveBindingID_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:RemoveTrack
    static readonly IntPtr RemoveTrack_NativeFunction;
    static readonly int RemoveTrack_ParamsSize;
    static readonly int RemoveTrack_Sequence_Offset;
    static readonly int RemoveTrack_Track_Offset;
    static readonly int RemoveTrack_ReturnValue_Offset;
    
    public static bool RemoveTrack(UnrealSharp.MovieScene.MovieSceneSequence sequence, UnrealSharp.MovieScene.MovieSceneTrack track)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, RemoveTrack_Sequence_Offset), 0, null, sequence);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, RemoveTrack_Track_Offset), 0, null, track);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveTrack_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveTrack_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:RemoveRootFolderFromSequence
    static readonly IntPtr RemoveRootFolderFromSequence_NativeFunction;
    static readonly int RemoveRootFolderFromSequence_ParamsSize;
    static readonly int RemoveRootFolderFromSequence_Sequence_Offset;
    static readonly int RemoveRootFolderFromSequence_Folder_Offset;
    
    public static void RemoveRootFolderFromSequence(UnrealSharp.MovieScene.MovieSceneSequence sequence, UnrealSharp.MovieScene.MovieSceneFolder folder)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveRootFolderFromSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, RemoveRootFolderFromSequence_Sequence_Offset), 0, null, sequence);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative(IntPtr.Add(ParamsBuffer, RemoveRootFolderFromSequence_Folder_Offset), 0, null, folder);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveRootFolderFromSequence_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:RemoveMasterTrack
    static readonly IntPtr RemoveMasterTrack_NativeFunction;
    static readonly int RemoveMasterTrack_ParamsSize;
    static readonly int RemoveMasterTrack_Sequence_Offset;
    static readonly int RemoveMasterTrack_Track_Offset;
    static readonly int RemoveMasterTrack_ReturnValue_Offset;
    
    [Obsolete("RemoveMasterTrack is deprecated. Please use RemoveTrack instead")]
    public static bool RemoveMasterTrack(UnrealSharp.MovieScene.MovieSceneSequence sequence, UnrealSharp.MovieScene.MovieSceneTrack track)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveMasterTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, RemoveMasterTrack_Sequence_Offset), 0, null, sequence);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, RemoveMasterTrack_Track_Offset), 0, null, track);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveMasterTrack_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveMasterTrack_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:MakeRangeSeconds
    static readonly IntPtr MakeRangeSeconds_NativeFunction;
    static readonly int MakeRangeSeconds_ParamsSize;
    static readonly int MakeRangeSeconds_Sequence_Offset;
    static readonly int MakeRangeSeconds_StartTime_Offset;
    static readonly int MakeRangeSeconds_Duration_Offset;
    static readonly int MakeRangeSeconds_ReturnValue_Offset;
    
    public static UnrealSharp.SequencerScripting.SequencerScriptingRange MakeRangeSeconds(UnrealSharp.MovieScene.MovieSceneSequence sequence, float startTime, float duration)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeRangeSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, MakeRangeSeconds_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MakeRangeSeconds_StartTime_Offset), 0, null, startTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MakeRangeSeconds_Duration_Offset), 0, null, duration);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeRangeSeconds_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SequencerScripting.SequencerScriptingRange returnValue;
            returnValue = UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, MakeRangeSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:MakeRange
    static readonly IntPtr MakeRange_NativeFunction;
    static readonly int MakeRange_ParamsSize;
    static readonly int MakeRange_Sequence_Offset;
    static readonly int MakeRange_StartFrame_Offset;
    static readonly int MakeRange_Duration_Offset;
    static readonly int MakeRange_ReturnValue_Offset;
    
    public static UnrealSharp.SequencerScripting.SequencerScriptingRange MakeRange(UnrealSharp.MovieScene.MovieSceneSequence sequence, int startFrame, int duration)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, MakeRange_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeRange_StartFrame_Offset), 0, null, startFrame);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeRange_Duration_Offset), 0, null, duration);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeRange_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SequencerScripting.SequencerScriptingRange returnValue;
            returnValue = UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, MakeRange_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:LocateBoundObjects
    static readonly IntPtr LocateBoundObjects_NativeFunction;
    static readonly int LocateBoundObjects_ParamsSize;
    static readonly int LocateBoundObjects_Sequence_Offset;
    static readonly int LocateBoundObjects_InBinding_Offset;
    static readonly int LocateBoundObjects_Context_Offset;
    static readonly int LocateBoundObjects_ReturnValue_Offset;
    static readonly int LocateBoundObjects_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> LocateBoundObjects(UnrealSharp.MovieScene.MovieSceneSequence sequence, UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding, UnrealSharp.CoreUObject.Object context)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LocateBoundObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, LocateBoundObjects_Sequence_Offset), 0, null, sequence);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, LocateBoundObjects_InBinding_Offset), 0, null, inBinding);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, LocateBoundObjects_Context_Offset), 0, null, context);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LocateBoundObjects_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, LocateBoundObjects_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> (1, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative, LocateBoundObjects_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:IsReadOnly
    static readonly IntPtr IsReadOnly_NativeFunction;
    static readonly int IsReadOnly_ParamsSize;
    static readonly int IsReadOnly_Sequence_Offset;
    static readonly int IsReadOnly_ReturnValue_Offset;
    
    public static bool IsReadOnly(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsReadOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, IsReadOnly_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsReadOnly_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsReadOnly_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:IsPlaybackRangeLocked
    static readonly IntPtr IsPlaybackRangeLocked_NativeFunction;
    static readonly int IsPlaybackRangeLocked_ParamsSize;
    static readonly int IsPlaybackRangeLocked_Sequence_Offset;
    static readonly int IsPlaybackRangeLocked_ReturnValue_Offset;
    
    public static bool IsPlaybackRangeLocked(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPlaybackRangeLocked_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, IsPlaybackRangeLocked_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsPlaybackRangeLocked_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPlaybackRangeLocked_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetWorkRangeStart
    static readonly IntPtr GetWorkRangeStart_NativeFunction;
    static readonly int GetWorkRangeStart_ParamsSize;
    static readonly int GetWorkRangeStart_InSequence_Offset;
    static readonly int GetWorkRangeStart_ReturnValue_Offset;
    
    public static float GetWorkRangeStart(UnrealSharp.MovieScene.MovieSceneSequence inSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorkRangeStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetWorkRangeStart_InSequence_Offset), 0, null, inSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetWorkRangeStart_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetWorkRangeStart_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetWorkRangeEnd
    static readonly IntPtr GetWorkRangeEnd_NativeFunction;
    static readonly int GetWorkRangeEnd_ParamsSize;
    static readonly int GetWorkRangeEnd_InSequence_Offset;
    static readonly int GetWorkRangeEnd_ReturnValue_Offset;
    
    public static float GetWorkRangeEnd(UnrealSharp.MovieScene.MovieSceneSequence inSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorkRangeEnd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetWorkRangeEnd_InSequence_Offset), 0, null, inSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetWorkRangeEnd_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetWorkRangeEnd_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetViewRangeStart
    static readonly IntPtr GetViewRangeStart_NativeFunction;
    static readonly int GetViewRangeStart_ParamsSize;
    static readonly int GetViewRangeStart_InSequence_Offset;
    static readonly int GetViewRangeStart_ReturnValue_Offset;
    
    public static float GetViewRangeStart(UnrealSharp.MovieScene.MovieSceneSequence inSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetViewRangeStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetViewRangeStart_InSequence_Offset), 0, null, inSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetViewRangeStart_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetViewRangeStart_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetViewRangeEnd
    static readonly IntPtr GetViewRangeEnd_NativeFunction;
    static readonly int GetViewRangeEnd_ParamsSize;
    static readonly int GetViewRangeEnd_InSequence_Offset;
    static readonly int GetViewRangeEnd_ReturnValue_Offset;
    
    public static float GetViewRangeEnd(UnrealSharp.MovieScene.MovieSceneSequence inSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetViewRangeEnd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetViewRangeEnd_InSequence_Offset), 0, null, inSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetViewRangeEnd_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetViewRangeEnd_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetTracks
    static readonly IntPtr GetTracks_NativeFunction;
    static readonly int GetTracks_ParamsSize;
    static readonly int GetTracks_Sequence_Offset;
    static readonly int GetTracks_ReturnValue_Offset;
    static readonly int GetTracks_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> GetTracks(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTracks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetTracks_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTracks_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetTracks_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, GetTracks_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetTickResolution
    static readonly IntPtr GetTickResolution_NativeFunction;
    static readonly int GetTickResolution_ParamsSize;
    static readonly int GetTickResolution_Sequence_Offset;
    static readonly int GetTickResolution_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.FrameRate GetTickResolution(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTickResolution_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetTickResolution_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTickResolution_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.FrameRate returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.FrameRate>.FromNative(IntPtr.Add(ParamsBuffer, GetTickResolution_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetSpawnables
    static readonly IntPtr GetSpawnables_NativeFunction;
    static readonly int GetSpawnables_ParamsSize;
    static readonly int GetSpawnables_Sequence_Offset;
    static readonly int GetSpawnables_ReturnValue_Offset;
    static readonly int GetSpawnables_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> GetSpawnables(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSpawnables_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetSpawnables_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSpawnables_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSpawnables_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> (1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, GetSpawnables_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetRootFoldersInSequence
    static readonly IntPtr GetRootFoldersInSequence_NativeFunction;
    static readonly int GetRootFoldersInSequence_ParamsSize;
    static readonly int GetRootFoldersInSequence_Sequence_Offset;
    static readonly int GetRootFoldersInSequence_ReturnValue_Offset;
    static readonly int GetRootFoldersInSequence_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneFolder> GetRootFoldersInSequence(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRootFoldersInSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetRootFoldersInSequence_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRootFoldersInSequence_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneFolder> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetRootFoldersInSequence_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.FromNative, GetRootFoldersInSequence_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetPossessables
    static readonly IntPtr GetPossessables_NativeFunction;
    static readonly int GetPossessables_ParamsSize;
    static readonly int GetPossessables_Sequence_Offset;
    static readonly int GetPossessables_ReturnValue_Offset;
    static readonly int GetPossessables_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> GetPossessables(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPossessables_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetPossessables_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPossessables_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPossessables_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> (1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, GetPossessables_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetPortableBindingID
    static readonly IntPtr GetPortableBindingID_NativeFunction;
    static readonly int GetPortableBindingID_ParamsSize;
    static readonly int GetPortableBindingID_RootSequence_Offset;
    static readonly int GetPortableBindingID_DestinationSequence_Offset;
    static readonly int GetPortableBindingID_InBinding_Offset;
    static readonly int GetPortableBindingID_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneObjectBindingID GetPortableBindingID(UnrealSharp.MovieScene.MovieSceneSequence rootSequence, UnrealSharp.MovieScene.MovieSceneSequence destinationSequence, UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPortableBindingID_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetPortableBindingID_RootSequence_Offset), 0, null, rootSequence);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetPortableBindingID_DestinationSequence_Offset), 0, null, destinationSequence);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPortableBindingID_InBinding_Offset), 0, null, inBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPortableBindingID_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneObjectBindingID returnValue;
            returnValue = UnrealSharp.MovieScene.MovieSceneObjectBindingIDMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetPortableBindingID_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetPlaybackStartSeconds
    static readonly IntPtr GetPlaybackStartSeconds_NativeFunction;
    static readonly int GetPlaybackStartSeconds_ParamsSize;
    static readonly int GetPlaybackStartSeconds_Sequence_Offset;
    static readonly int GetPlaybackStartSeconds_ReturnValue_Offset;
    
    public static float GetPlaybackStartSeconds(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaybackStartSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetPlaybackStartSeconds_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlaybackStartSeconds_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPlaybackStartSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetPlaybackStart
    static readonly IntPtr GetPlaybackStart_NativeFunction;
    static readonly int GetPlaybackStart_ParamsSize;
    static readonly int GetPlaybackStart_Sequence_Offset;
    static readonly int GetPlaybackStart_ReturnValue_Offset;
    
    public static int GetPlaybackStart(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaybackStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetPlaybackStart_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlaybackStart_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetPlaybackStart_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetPlaybackRange
    static readonly IntPtr GetPlaybackRange_NativeFunction;
    static readonly int GetPlaybackRange_ParamsSize;
    static readonly int GetPlaybackRange_Sequence_Offset;
    static readonly int GetPlaybackRange_ReturnValue_Offset;
    
    public static UnrealSharp.SequencerScripting.SequencerScriptingRange GetPlaybackRange(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaybackRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetPlaybackRange_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlaybackRange_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SequencerScripting.SequencerScriptingRange returnValue;
            returnValue = UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetPlaybackRange_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetPlaybackEndSeconds
    static readonly IntPtr GetPlaybackEndSeconds_NativeFunction;
    static readonly int GetPlaybackEndSeconds_ParamsSize;
    static readonly int GetPlaybackEndSeconds_Sequence_Offset;
    static readonly int GetPlaybackEndSeconds_ReturnValue_Offset;
    
    public static float GetPlaybackEndSeconds(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaybackEndSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetPlaybackEndSeconds_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlaybackEndSeconds_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPlaybackEndSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetPlaybackEnd
    static readonly IntPtr GetPlaybackEnd_NativeFunction;
    static readonly int GetPlaybackEnd_ParamsSize;
    static readonly int GetPlaybackEnd_Sequence_Offset;
    static readonly int GetPlaybackEnd_ReturnValue_Offset;
    
    public static int GetPlaybackEnd(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaybackEnd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetPlaybackEnd_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlaybackEnd_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetPlaybackEnd_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetMovieScene
    static readonly IntPtr GetMovieScene_NativeFunction;
    static readonly int GetMovieScene_ParamsSize;
    static readonly int GetMovieScene_Sequence_Offset;
    static readonly int GetMovieScene_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieScene GetMovieScene(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMovieScene_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetMovieScene_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMovieScene_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieScene returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.MovieScene.MovieScene>.FromNative(IntPtr.Add(ParamsBuffer, GetMovieScene_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetMasterTracks
    static readonly IntPtr GetMasterTracks_NativeFunction;
    static readonly int GetMasterTracks_ParamsSize;
    static readonly int GetMasterTracks_Sequence_Offset;
    static readonly int GetMasterTracks_ReturnValue_Offset;
    static readonly int GetMasterTracks_ReturnValue_ElementSize;
    
    [Obsolete("GetMasterTracks is deprecated. Please use GetTracks instead")]
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> GetMasterTracks(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMasterTracks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetMasterTracks_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMasterTracks_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMasterTracks_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, GetMasterTracks_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetMarkedFrames
    static readonly IntPtr GetMarkedFrames_NativeFunction;
    static readonly int GetMarkedFrames_ParamsSize;
    static readonly int GetMarkedFrames_Sequence_Offset;
    static readonly int GetMarkedFrames_ReturnValue_Offset;
    static readonly int GetMarkedFrames_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneMarkedFrame> GetMarkedFrames(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMarkedFrames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetMarkedFrames_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMarkedFrames_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneMarkedFrame> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMarkedFrames_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneMarkedFrame> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneMarkedFrame> (1, UnrealSharp.MovieScene.MovieSceneMarkedFrameMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneMarkedFrameMarshaler.FromNative, GetMarkedFrames_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneMarkedFrame>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetEvaluationType
    static readonly IntPtr GetEvaluationType_NativeFunction;
    static readonly int GetEvaluationType_ParamsSize;
    static readonly int GetEvaluationType_InSequence_Offset;
    static readonly int GetEvaluationType_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.EMovieSceneEvaluationType GetEvaluationType(UnrealSharp.MovieScene.MovieSceneSequence inSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEvaluationType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetEvaluationType_InSequence_Offset), 0, null, inSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetEvaluationType_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.EMovieSceneEvaluationType returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MovieScene.EMovieSceneEvaluationType>.FromNative(IntPtr.Add(ParamsBuffer, GetEvaluationType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetDisplayRate
    static readonly IntPtr GetDisplayRate_NativeFunction;
    static readonly int GetDisplayRate_ParamsSize;
    static readonly int GetDisplayRate_Sequence_Offset;
    static readonly int GetDisplayRate_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.FrameRate GetDisplayRate(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDisplayRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetDisplayRate_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDisplayRate_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.FrameRate returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.FrameRate>.FromNative(IntPtr.Add(ParamsBuffer, GetDisplayRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetClockSource
    static readonly IntPtr GetClockSource_NativeFunction;
    static readonly int GetClockSource_ParamsSize;
    static readonly int GetClockSource_InSequence_Offset;
    static readonly int GetClockSource_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.EUpdateClockSource GetClockSource(UnrealSharp.MovieScene.MovieSceneSequence inSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetClockSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetClockSource_InSequence_Offset), 0, null, inSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetClockSource_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.EUpdateClockSource returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MovieScene.EUpdateClockSource>.FromNative(IntPtr.Add(ParamsBuffer, GetClockSource_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetBindings
    static readonly IntPtr GetBindings_NativeFunction;
    static readonly int GetBindings_ParamsSize;
    static readonly int GetBindings_Sequence_Offset;
    static readonly int GetBindings_ReturnValue_Offset;
    static readonly int GetBindings_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> GetBindings(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBindings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetBindings_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBindings_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetBindings_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> (1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, GetBindings_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:GetBindingID
    static readonly IntPtr GetBindingID_NativeFunction;
    static readonly int GetBindingID_ParamsSize;
    static readonly int GetBindingID_Sequence_Offset;
    static readonly int GetBindingID_InBinding_Offset;
    static readonly int GetBindingID_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneObjectBindingID GetBindingID(UnrealSharp.MovieScene.MovieSceneSequence sequence, UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBindingID_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetBindingID_Sequence_Offset), 0, null, sequence);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetBindingID_InBinding_Offset), 0, null, inBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBindingID_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneObjectBindingID returnValue;
            returnValue = UnrealSharp.MovieScene.MovieSceneObjectBindingIDMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetBindingID_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:FindTracksByType
    static readonly IntPtr FindTracksByType_NativeFunction;
    static readonly int FindTracksByType_ParamsSize;
    static readonly int FindTracksByType_Sequence_Offset;
    static readonly int FindTracksByType_TrackType_Offset;
    static readonly int FindTracksByType_ReturnValue_Offset;
    static readonly int FindTracksByType_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> FindTracksByType(UnrealSharp.MovieScene.MovieSceneSequence sequence, SubclassOf<UnrealSharp.MovieScene.MovieSceneTrack> trackType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindTracksByType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, FindTracksByType_Sequence_Offset), 0, null, sequence);
            SubclassOfMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, FindTracksByType_TrackType_Offset), 0, null, trackType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindTracksByType_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindTracksByType_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, FindTracksByType_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:FindTracksByExactType
    static readonly IntPtr FindTracksByExactType_NativeFunction;
    static readonly int FindTracksByExactType_ParamsSize;
    static readonly int FindTracksByExactType_Sequence_Offset;
    static readonly int FindTracksByExactType_TrackType_Offset;
    static readonly int FindTracksByExactType_ReturnValue_Offset;
    static readonly int FindTracksByExactType_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> FindTracksByExactType(UnrealSharp.MovieScene.MovieSceneSequence sequence, SubclassOf<UnrealSharp.MovieScene.MovieSceneTrack> trackType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindTracksByExactType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, FindTracksByExactType_Sequence_Offset), 0, null, sequence);
            SubclassOfMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, FindTracksByExactType_TrackType_Offset), 0, null, trackType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindTracksByExactType_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindTracksByExactType_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, FindTracksByExactType_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:FindNextMarkedFrame
    static readonly IntPtr FindNextMarkedFrame_NativeFunction;
    static readonly int FindNextMarkedFrame_ParamsSize;
    static readonly int FindNextMarkedFrame_Sequence_Offset;
    static readonly int FindNextMarkedFrame_InFrameNumber_Offset;
    static readonly int FindNextMarkedFrame_bForward_Offset;
    static readonly int FindNextMarkedFrame_ReturnValue_Offset;
    
    public static int FindNextMarkedFrame(UnrealSharp.MovieScene.MovieSceneSequence sequence, UnrealSharp.CoreUObject.FrameNumber inFrameNumber, bool bForward)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNextMarkedFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, FindNextMarkedFrame_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, FindNextMarkedFrame_InFrameNumber_Offset), 0, null, inFrameNumber);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, FindNextMarkedFrame_bForward_Offset), 0, null, bForward);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindNextMarkedFrame_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, FindNextMarkedFrame_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:FindMasterTracksByType
    static readonly IntPtr FindMasterTracksByType_NativeFunction;
    static readonly int FindMasterTracksByType_ParamsSize;
    static readonly int FindMasterTracksByType_Sequence_Offset;
    static readonly int FindMasterTracksByType_TrackType_Offset;
    static readonly int FindMasterTracksByType_ReturnValue_Offset;
    static readonly int FindMasterTracksByType_ReturnValue_ElementSize;
    
    [Obsolete("FindMasterTracksByType is deprecated. Please use FindTracksByType instead")]
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> FindMasterTracksByType(UnrealSharp.MovieScene.MovieSceneSequence sequence, SubclassOf<UnrealSharp.MovieScene.MovieSceneTrack> trackType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindMasterTracksByType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, FindMasterTracksByType_Sequence_Offset), 0, null, sequence);
            SubclassOfMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, FindMasterTracksByType_TrackType_Offset), 0, null, trackType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindMasterTracksByType_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindMasterTracksByType_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, FindMasterTracksByType_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:FindMasterTracksByExactType
    static readonly IntPtr FindMasterTracksByExactType_NativeFunction;
    static readonly int FindMasterTracksByExactType_ParamsSize;
    static readonly int FindMasterTracksByExactType_Sequence_Offset;
    static readonly int FindMasterTracksByExactType_TrackType_Offset;
    static readonly int FindMasterTracksByExactType_ReturnValue_Offset;
    static readonly int FindMasterTracksByExactType_ReturnValue_ElementSize;
    
    [Obsolete("FindMasterTracksByExactType is deprecated. Please use FindTracksByExactType instead")]
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> FindMasterTracksByExactType(UnrealSharp.MovieScene.MovieSceneSequence sequence, SubclassOf<UnrealSharp.MovieScene.MovieSceneTrack> trackType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindMasterTracksByExactType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, FindMasterTracksByExactType_Sequence_Offset), 0, null, sequence);
            SubclassOfMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, FindMasterTracksByExactType_TrackType_Offset), 0, null, trackType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindMasterTracksByExactType_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindMasterTracksByExactType_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, FindMasterTracksByExactType_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:FindMarkedFrameByLabel
    static readonly IntPtr FindMarkedFrameByLabel_NativeFunction;
    static readonly int FindMarkedFrameByLabel_ParamsSize;
    static readonly int FindMarkedFrameByLabel_Sequence_Offset;
    static readonly int FindMarkedFrameByLabel_InLabel_Offset;
    static readonly int FindMarkedFrameByLabel_ReturnValue_Offset;
    
    public static int FindMarkedFrameByLabel(UnrealSharp.MovieScene.MovieSceneSequence sequence, string inLabel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindMarkedFrameByLabel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, FindMarkedFrameByLabel_Sequence_Offset), 0, null, sequence);
            IntPtr InLabel_NativePtr = IntPtr.Add(ParamsBuffer,FindMarkedFrameByLabel_InLabel_Offset);
            StringMarshaller.ToNative(InLabel_NativePtr,0,null,inLabel);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindMarkedFrameByLabel_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, FindMarkedFrameByLabel_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InLabel_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:FindMarkedFrameByFrameNumber
    static readonly IntPtr FindMarkedFrameByFrameNumber_NativeFunction;
    static readonly int FindMarkedFrameByFrameNumber_ParamsSize;
    static readonly int FindMarkedFrameByFrameNumber_Sequence_Offset;
    static readonly int FindMarkedFrameByFrameNumber_InFrameNumber_Offset;
    static readonly int FindMarkedFrameByFrameNumber_ReturnValue_Offset;
    
    public static int FindMarkedFrameByFrameNumber(UnrealSharp.MovieScene.MovieSceneSequence sequence, UnrealSharp.CoreUObject.FrameNumber inFrameNumber)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindMarkedFrameByFrameNumber_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, FindMarkedFrameByFrameNumber_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, FindMarkedFrameByFrameNumber_InFrameNumber_Offset), 0, null, inFrameNumber);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindMarkedFrameByFrameNumber_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, FindMarkedFrameByFrameNumber_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:FindBindingByName
    static readonly IntPtr FindBindingByName_NativeFunction;
    static readonly int FindBindingByName_ParamsSize;
    static readonly int FindBindingByName_Sequence_Offset;
    static readonly int FindBindingByName_Name_Offset;
    static readonly int FindBindingByName_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneBindingProxy FindBindingByName(UnrealSharp.MovieScene.MovieSceneSequence sequence, string name)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindBindingByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, FindBindingByName_Sequence_Offset), 0, null, sequence);
            IntPtr Name_NativePtr = IntPtr.Add(ParamsBuffer,FindBindingByName_Name_Offset);
            StringMarshaller.ToNative(Name_NativePtr,0,null,name);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindBindingByName_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneBindingProxy returnValue;
            returnValue = UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FindBindingByName_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Name_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:FindBindingById
    static readonly IntPtr FindBindingById_NativeFunction;
    static readonly int FindBindingById_ParamsSize;
    static readonly int FindBindingById_Sequence_Offset;
    static readonly int FindBindingById_BindingId_Offset;
    static readonly int FindBindingById_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneBindingProxy FindBindingById(UnrealSharp.MovieScene.MovieSceneSequence sequence, UnrealSharp.CoreUObject.Guid bindingId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindBindingById_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, FindBindingById_Sequence_Offset), 0, null, sequence);
            UnrealSharp.CoreUObject.GuidMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindBindingById_BindingId_Offset), 0, null, bindingId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindBindingById_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneBindingProxy returnValue;
            returnValue = UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FindBindingById_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:DeleteMarkedFrames
    static readonly IntPtr DeleteMarkedFrames_NativeFunction;
    static readonly int DeleteMarkedFrames_ParamsSize;
    static readonly int DeleteMarkedFrames_Sequence_Offset;
    
    public static void DeleteMarkedFrames(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteMarkedFrames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, DeleteMarkedFrames_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteMarkedFrames_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:DeleteMarkedFrame
    static readonly IntPtr DeleteMarkedFrame_NativeFunction;
    static readonly int DeleteMarkedFrame_ParamsSize;
    static readonly int DeleteMarkedFrame_Sequence_Offset;
    static readonly int DeleteMarkedFrame_DeleteIndex_Offset;
    
    public static void DeleteMarkedFrame(UnrealSharp.MovieScene.MovieSceneSequence sequence, int deleteIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteMarkedFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, DeleteMarkedFrame_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, DeleteMarkedFrame_DeleteIndex_Offset), 0, null, deleteIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteMarkedFrame_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:AreMarkedFramesLocked
    static readonly IntPtr AreMarkedFramesLocked_NativeFunction;
    static readonly int AreMarkedFramesLocked_ParamsSize;
    static readonly int AreMarkedFramesLocked_Sequence_Offset;
    static readonly int AreMarkedFramesLocked_ReturnValue_Offset;
    
    public static bool AreMarkedFramesLocked(UnrealSharp.MovieScene.MovieSceneSequence sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AreMarkedFramesLocked_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, AreMarkedFramesLocked_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AreMarkedFramesLocked_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AreMarkedFramesLocked_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:AddTrack
    static readonly IntPtr AddTrack_NativeFunction;
    static readonly int AddTrack_ParamsSize;
    static readonly int AddTrack_Sequence_Offset;
    static readonly int AddTrack_TrackType_Offset;
    static readonly int AddTrack_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneTrack AddTrack(UnrealSharp.MovieScene.MovieSceneSequence sequence, SubclassOf<UnrealSharp.MovieScene.MovieSceneTrack> trackType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddTrack_Sequence_Offset), 0, null, sequence);
            SubclassOfMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, AddTrack_TrackType_Offset), 0, null, trackType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddTrack_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneTrack returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative(IntPtr.Add(ParamsBuffer, AddTrack_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:AddSpawnableFromInstance
    static readonly IntPtr AddSpawnableFromInstance_NativeFunction;
    static readonly int AddSpawnableFromInstance_ParamsSize;
    static readonly int AddSpawnableFromInstance_Sequence_Offset;
    static readonly int AddSpawnableFromInstance_ObjectToSpawn_Offset;
    static readonly int AddSpawnableFromInstance_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneBindingProxy AddSpawnableFromInstance(UnrealSharp.MovieScene.MovieSceneSequence sequence, UnrealSharp.CoreUObject.Object objectToSpawn)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddSpawnableFromInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddSpawnableFromInstance_Sequence_Offset), 0, null, sequence);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AddSpawnableFromInstance_ObjectToSpawn_Offset), 0, null, objectToSpawn);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddSpawnableFromInstance_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneBindingProxy returnValue;
            returnValue = UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, AddSpawnableFromInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:AddSpawnableFromClass
    static readonly IntPtr AddSpawnableFromClass_NativeFunction;
    static readonly int AddSpawnableFromClass_ParamsSize;
    static readonly int AddSpawnableFromClass_Sequence_Offset;
    static readonly int AddSpawnableFromClass_ClassToSpawn_Offset;
    static readonly int AddSpawnableFromClass_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneBindingProxy AddSpawnableFromClass(UnrealSharp.MovieScene.MovieSceneSequence sequence, SubclassOf<UnrealSharp.CoreUObject.Object> classToSpawn)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddSpawnableFromClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddSpawnableFromClass_Sequence_Offset), 0, null, sequence);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AddSpawnableFromClass_ClassToSpawn_Offset), 0, null, classToSpawn);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddSpawnableFromClass_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneBindingProxy returnValue;
            returnValue = UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, AddSpawnableFromClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:AddRootFolderToSequence
    static readonly IntPtr AddRootFolderToSequence_NativeFunction;
    static readonly int AddRootFolderToSequence_ParamsSize;
    static readonly int AddRootFolderToSequence_Sequence_Offset;
    static readonly int AddRootFolderToSequence_NewFolderName_Offset;
    static readonly int AddRootFolderToSequence_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneFolder AddRootFolderToSequence(UnrealSharp.MovieScene.MovieSceneSequence sequence, string newFolderName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddRootFolderToSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddRootFolderToSequence_Sequence_Offset), 0, null, sequence);
            IntPtr NewFolderName_NativePtr = IntPtr.Add(ParamsBuffer,AddRootFolderToSequence_NewFolderName_Offset);
            StringMarshaller.ToNative(NewFolderName_NativePtr,0,null,newFolderName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddRootFolderToSequence_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneFolder returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.FromNative(IntPtr.Add(ParamsBuffer, AddRootFolderToSequence_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NewFolderName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:AddPossessable
    static readonly IntPtr AddPossessable_NativeFunction;
    static readonly int AddPossessable_ParamsSize;
    static readonly int AddPossessable_Sequence_Offset;
    static readonly int AddPossessable_ObjectToPossess_Offset;
    static readonly int AddPossessable_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneBindingProxy AddPossessable(UnrealSharp.MovieScene.MovieSceneSequence sequence, UnrealSharp.CoreUObject.Object objectToPossess)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddPossessable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddPossessable_Sequence_Offset), 0, null, sequence);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AddPossessable_ObjectToPossess_Offset), 0, null, objectToPossess);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddPossessable_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneBindingProxy returnValue;
            returnValue = UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, AddPossessable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:AddMasterTrack
    static readonly IntPtr AddMasterTrack_NativeFunction;
    static readonly int AddMasterTrack_ParamsSize;
    static readonly int AddMasterTrack_Sequence_Offset;
    static readonly int AddMasterTrack_TrackType_Offset;
    static readonly int AddMasterTrack_ReturnValue_Offset;
    
    [Obsolete("AddMasterTrack is deprecated. Please use AddTrack instead")]
    public static UnrealSharp.MovieScene.MovieSceneTrack AddMasterTrack(UnrealSharp.MovieScene.MovieSceneSequence sequence, SubclassOf<UnrealSharp.MovieScene.MovieSceneTrack> trackType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddMasterTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddMasterTrack_Sequence_Offset), 0, null, sequence);
            SubclassOfMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, AddMasterTrack_TrackType_Offset), 0, null, trackType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddMasterTrack_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneTrack returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative(IntPtr.Add(ParamsBuffer, AddMasterTrack_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneSequenceExtensions:AddMarkedFrame
    static readonly IntPtr AddMarkedFrame_NativeFunction;
    static readonly int AddMarkedFrame_ParamsSize;
    static readonly int AddMarkedFrame_Sequence_Offset;
    static readonly int AddMarkedFrame_InMarkedFrame_Offset;
    static readonly int AddMarkedFrame_ReturnValue_Offset;
    
    public static int AddMarkedFrame(UnrealSharp.MovieScene.MovieSceneSequence sequence, UnrealSharp.MovieScene.MovieSceneMarkedFrame inMarkedFrame)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddMarkedFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddMarkedFrame_Sequence_Offset), 0, null, sequence);
            UnrealSharp.MovieScene.MovieSceneMarkedFrameMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AddMarkedFrame_InMarkedFrame_Offset), 0, null, inMarkedFrame);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddMarkedFrame_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, AddMarkedFrame_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.SequencerScripting;

[UClass]
public partial class MovieSceneTrackExtensions : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static MovieSceneTrackExtensions()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MovieSceneTrackExtensions");
        
        
        SetSortingOrder_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSortingOrder");
        SetSortingOrder_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSortingOrder_NativeFunction);
        SetSortingOrder_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSortingOrder_NativeFunction, "Track");
        SetSortingOrder_SortingOrder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSortingOrder_NativeFunction, "SortingOrder");
        SetSectionToKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSectionToKey");
        SetSectionToKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSectionToKey_NativeFunction);
        SetSectionToKey_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSectionToKey_NativeFunction, "Track");
        SetSectionToKey_Section_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSectionToKey_NativeFunction, "Section");
        SetColorTint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetColorTint");
        SetColorTint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetColorTint_NativeFunction);
        SetColorTint_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetColorTint_NativeFunction, "Track");
        SetColorTint_ColorTint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetColorTint_NativeFunction, "ColorTint");
        RemoveSection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveSection");
        RemoveSection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveSection_NativeFunction);
        RemoveSection_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSection_NativeFunction, "Track");
        RemoveSection_Section_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSection_NativeFunction, "Section");
        GetSortingOrder_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSortingOrder");
        GetSortingOrder_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSortingOrder_NativeFunction);
        GetSortingOrder_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSortingOrder_NativeFunction, "Track");
        GetSortingOrder_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSortingOrder_NativeFunction, "ReturnValue");
        GetSectionToKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSectionToKey");
        GetSectionToKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSectionToKey_NativeFunction);
        GetSectionToKey_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionToKey_NativeFunction, "Track");
        GetSectionToKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionToKey_NativeFunction, "ReturnValue");
        GetSections_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSections");
        GetSections_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSections_NativeFunction);
        GetSections_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSections_NativeFunction, "Track");
        GetSections_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSections_NativeFunction, "ReturnValue");
        GetSections_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSections_NativeFunction, "ReturnValue");
        GetColorTint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetColorTint");
        GetColorTint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetColorTint_NativeFunction);
        GetColorTint_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetColorTint_NativeFunction, "Track");
        GetColorTint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetColorTint_NativeFunction, "ReturnValue");
        AddSection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddSection");
        AddSection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddSection_NativeFunction);
        AddSection_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSection_NativeFunction, "Track");
        AddSection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSection_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MovieSceneTrackExtensions(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/SequencerScripting.MovieSceneTrackExtensions:SetSortingOrder
    static readonly IntPtr SetSortingOrder_NativeFunction;
    static readonly int SetSortingOrder_ParamsSize;
    static readonly int SetSortingOrder_Track_Offset;
    static readonly int SetSortingOrder_SortingOrder_Offset;
    
    public static void SetSortingOrder(UnrealSharp.MovieScene.MovieSceneTrack track, int sortingOrder)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSortingOrder_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, SetSortingOrder_Track_Offset), 0, null, track);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetSortingOrder_SortingOrder_Offset), 0, null, sortingOrder);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSortingOrder_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneTrackExtensions:SetSectionToKey
    static readonly IntPtr SetSectionToKey_NativeFunction;
    static readonly int SetSectionToKey_ParamsSize;
    static readonly int SetSectionToKey_Track_Offset;
    static readonly int SetSectionToKey_Section_Offset;
    
    public static void SetSectionToKey(UnrealSharp.MovieScene.MovieSceneTrack track, UnrealSharp.MovieScene.MovieSceneSection section)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSectionToKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, SetSectionToKey_Track_Offset), 0, null, track);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative(IntPtr.Add(ParamsBuffer, SetSectionToKey_Section_Offset), 0, null, section);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSectionToKey_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneTrackExtensions:SetColorTint
    static readonly IntPtr SetColorTint_NativeFunction;
    static readonly int SetColorTint_ParamsSize;
    static readonly int SetColorTint_Track_Offset;
    static readonly int SetColorTint_ColorTint_Offset;
    
    public static void SetColorTint(UnrealSharp.MovieScene.MovieSceneTrack track, UnrealSharp.CoreUObject.Color colorTint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetColorTint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, SetColorTint_Track_Offset), 0, null, track);
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, SetColorTint_ColorTint_Offset), 0, null, colorTint);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetColorTint_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneTrackExtensions:RemoveSection
    static readonly IntPtr RemoveSection_NativeFunction;
    static readonly int RemoveSection_ParamsSize;
    static readonly int RemoveSection_Track_Offset;
    static readonly int RemoveSection_Section_Offset;
    
    public static void RemoveSection(UnrealSharp.MovieScene.MovieSceneTrack track, UnrealSharp.MovieScene.MovieSceneSection section)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveSection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSection_Track_Offset), 0, null, track);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSection_Section_Offset), 0, null, section);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveSection_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneTrackExtensions:GetSortingOrder
    static readonly IntPtr GetSortingOrder_NativeFunction;
    static readonly int GetSortingOrder_ParamsSize;
    static readonly int GetSortingOrder_Track_Offset;
    static readonly int GetSortingOrder_ReturnValue_Offset;
    
    public static int GetSortingOrder(UnrealSharp.MovieScene.MovieSceneTrack track)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSortingOrder_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, GetSortingOrder_Track_Offset), 0, null, track);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSortingOrder_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetSortingOrder_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneTrackExtensions:GetSectionToKey
    static readonly IntPtr GetSectionToKey_NativeFunction;
    static readonly int GetSectionToKey_ParamsSize;
    static readonly int GetSectionToKey_Track_Offset;
    static readonly int GetSectionToKey_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneSection GetSectionToKey(UnrealSharp.MovieScene.MovieSceneTrack track)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSectionToKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, GetSectionToKey_Track_Offset), 0, null, track);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSectionToKey_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneSection returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.FromNative(IntPtr.Add(ParamsBuffer, GetSectionToKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneTrackExtensions:GetSections
    static readonly IntPtr GetSections_NativeFunction;
    static readonly int GetSections_ParamsSize;
    static readonly int GetSections_Track_Offset;
    static readonly int GetSections_ReturnValue_Offset;
    static readonly int GetSections_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneSection> GetSections(UnrealSharp.MovieScene.MovieSceneTrack track)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSections_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, GetSections_Track_Offset), 0, null, track);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSections_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneSection> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSections_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.FromNative, GetSections_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneTrackExtensions:GetColorTint
    static readonly IntPtr GetColorTint_NativeFunction;
    static readonly int GetColorTint_ParamsSize;
    static readonly int GetColorTint_Track_Offset;
    static readonly int GetColorTint_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Color GetColorTint(UnrealSharp.MovieScene.MovieSceneTrack track)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetColorTint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, GetColorTint_Track_Offset), 0, null, track);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetColorTint_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Color returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(ParamsBuffer, GetColorTint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.MovieSceneTrackExtensions:AddSection
    static readonly IntPtr AddSection_NativeFunction;
    static readonly int AddSection_ParamsSize;
    static readonly int AddSection_Track_Offset;
    static readonly int AddSection_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneSection AddSection(UnrealSharp.MovieScene.MovieSceneTrack track)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddSection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative(IntPtr.Add(ParamsBuffer, AddSection_Track_Offset), 0, null, track);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddSection_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneSection returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.FromNative(IntPtr.Add(ParamsBuffer, AddSection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
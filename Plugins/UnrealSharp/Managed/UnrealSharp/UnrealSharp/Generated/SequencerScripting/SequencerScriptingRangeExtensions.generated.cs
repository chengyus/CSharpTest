// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.SequencerScripting;

[UClass]
public partial class SequencerScriptingRangeExtensions : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static SequencerScriptingRangeExtensions()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SequencerScriptingRangeExtensions");
        
        
        SetStartSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetStartSeconds");
        SetStartSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetStartSeconds_NativeFunction);
        SetStartSeconds_Range_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStartSeconds_NativeFunction, "Range");
        SetStartSeconds_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStartSeconds_NativeFunction, "Start");
        SetStartFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetStartFrame");
        SetStartFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetStartFrame_NativeFunction);
        SetStartFrame_Range_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStartFrame_NativeFunction, "Range");
        SetStartFrame_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStartFrame_NativeFunction, "Start");
        SetEndSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEndSeconds");
        SetEndSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEndSeconds_NativeFunction);
        SetEndSeconds_Range_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEndSeconds_NativeFunction, "Range");
        SetEndSeconds_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEndSeconds_NativeFunction, "End");
        SetEndFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEndFrame");
        SetEndFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEndFrame_NativeFunction);
        SetEndFrame_Range_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEndFrame_NativeFunction, "Range");
        SetEndFrame_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEndFrame_NativeFunction, "End");
        RemoveStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveStart");
        RemoveStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveStart_NativeFunction);
        RemoveStart_Range_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveStart_NativeFunction, "Range");
        RemoveEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveEnd");
        RemoveEnd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveEnd_NativeFunction);
        RemoveEnd_Range_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveEnd_NativeFunction, "Range");
        HasStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasStart");
        HasStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasStart_NativeFunction);
        HasStart_Range_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasStart_NativeFunction, "Range");
        HasStart_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasStart_NativeFunction, "ReturnValue");
        HasEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasEnd");
        HasEnd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasEnd_NativeFunction);
        HasEnd_Range_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasEnd_NativeFunction, "Range");
        HasEnd_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasEnd_NativeFunction, "ReturnValue");
        GetStartSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStartSeconds");
        GetStartSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStartSeconds_NativeFunction);
        GetStartSeconds_Range_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStartSeconds_NativeFunction, "Range");
        GetStartSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStartSeconds_NativeFunction, "ReturnValue");
        GetStartFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStartFrame");
        GetStartFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStartFrame_NativeFunction);
        GetStartFrame_Range_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStartFrame_NativeFunction, "Range");
        GetStartFrame_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStartFrame_NativeFunction, "ReturnValue");
        GetEndSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEndSeconds");
        GetEndSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEndSeconds_NativeFunction);
        GetEndSeconds_Range_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEndSeconds_NativeFunction, "Range");
        GetEndSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEndSeconds_NativeFunction, "ReturnValue");
        GetEndFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEndFrame");
        GetEndFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEndFrame_NativeFunction);
        GetEndFrame_Range_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEndFrame_NativeFunction, "Range");
        GetEndFrame_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEndFrame_NativeFunction, "ReturnValue");
        
        
    }
    
    protected SequencerScriptingRangeExtensions(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/SequencerScripting.SequencerScriptingRangeExtensions:SetStartSeconds
    static readonly IntPtr SetStartSeconds_NativeFunction;
    static readonly int SetStartSeconds_ParamsSize;
    static readonly int SetStartSeconds_Range_Offset;
    static readonly int SetStartSeconds_Start_Offset;
    
    public static void SetStartSeconds(ref UnrealSharp.SequencerScripting.SequencerScriptingRange range, float start)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetStartSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetStartSeconds_Range_Offset), 0, null, range);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetStartSeconds_Start_Offset), 0, null, start);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetStartSeconds_NativeFunction, ParamsBuffer);
            
            range = UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetStartSeconds_Range_Offset), 0, null);
            
        }
    }
    
    // Function /Script/SequencerScripting.SequencerScriptingRangeExtensions:SetStartFrame
    static readonly IntPtr SetStartFrame_NativeFunction;
    static readonly int SetStartFrame_ParamsSize;
    static readonly int SetStartFrame_Range_Offset;
    static readonly int SetStartFrame_Start_Offset;
    
    public static void SetStartFrame(ref UnrealSharp.SequencerScripting.SequencerScriptingRange range, int start)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetStartFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetStartFrame_Range_Offset), 0, null, range);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetStartFrame_Start_Offset), 0, null, start);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetStartFrame_NativeFunction, ParamsBuffer);
            
            range = UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetStartFrame_Range_Offset), 0, null);
            
        }
    }
    
    // Function /Script/SequencerScripting.SequencerScriptingRangeExtensions:SetEndSeconds
    static readonly IntPtr SetEndSeconds_NativeFunction;
    static readonly int SetEndSeconds_ParamsSize;
    static readonly int SetEndSeconds_Range_Offset;
    static readonly int SetEndSeconds_End_Offset;
    
    public static void SetEndSeconds(ref UnrealSharp.SequencerScripting.SequencerScriptingRange range, float end)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEndSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetEndSeconds_Range_Offset), 0, null, range);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetEndSeconds_End_Offset), 0, null, end);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetEndSeconds_NativeFunction, ParamsBuffer);
            
            range = UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetEndSeconds_Range_Offset), 0, null);
            
        }
    }
    
    // Function /Script/SequencerScripting.SequencerScriptingRangeExtensions:SetEndFrame
    static readonly IntPtr SetEndFrame_NativeFunction;
    static readonly int SetEndFrame_ParamsSize;
    static readonly int SetEndFrame_Range_Offset;
    static readonly int SetEndFrame_End_Offset;
    
    public static void SetEndFrame(ref UnrealSharp.SequencerScripting.SequencerScriptingRange range, int end)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEndFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetEndFrame_Range_Offset), 0, null, range);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetEndFrame_End_Offset), 0, null, end);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetEndFrame_NativeFunction, ParamsBuffer);
            
            range = UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetEndFrame_Range_Offset), 0, null);
            
        }
    }
    
    // Function /Script/SequencerScripting.SequencerScriptingRangeExtensions:RemoveStart
    static readonly IntPtr RemoveStart_NativeFunction;
    static readonly int RemoveStart_ParamsSize;
    static readonly int RemoveStart_Range_Offset;
    
    public static void RemoveStart(ref UnrealSharp.SequencerScripting.SequencerScriptingRange range)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RemoveStart_Range_Offset), 0, null, range);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveStart_NativeFunction, ParamsBuffer);
            
            range = UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, RemoveStart_Range_Offset), 0, null);
            
        }
    }
    
    // Function /Script/SequencerScripting.SequencerScriptingRangeExtensions:RemoveEnd
    static readonly IntPtr RemoveEnd_NativeFunction;
    static readonly int RemoveEnd_ParamsSize;
    static readonly int RemoveEnd_Range_Offset;
    
    public static void RemoveEnd(ref UnrealSharp.SequencerScripting.SequencerScriptingRange range)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveEnd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RemoveEnd_Range_Offset), 0, null, range);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveEnd_NativeFunction, ParamsBuffer);
            
            range = UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, RemoveEnd_Range_Offset), 0, null);
            
        }
    }
    
    // Function /Script/SequencerScripting.SequencerScriptingRangeExtensions:HasStart
    static readonly IntPtr HasStart_NativeFunction;
    static readonly int HasStart_ParamsSize;
    static readonly int HasStart_Range_Offset;
    static readonly int HasStart_ReturnValue_Offset;
    
    public static bool HasStart(UnrealSharp.SequencerScripting.SequencerScriptingRange range)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, HasStart_Range_Offset), 0, null, range);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, HasStart_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasStart_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.SequencerScriptingRangeExtensions:HasEnd
    static readonly IntPtr HasEnd_NativeFunction;
    static readonly int HasEnd_ParamsSize;
    static readonly int HasEnd_Range_Offset;
    static readonly int HasEnd_ReturnValue_Offset;
    
    public static bool HasEnd(UnrealSharp.SequencerScripting.SequencerScriptingRange range)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasEnd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, HasEnd_Range_Offset), 0, null, range);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, HasEnd_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasEnd_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.SequencerScriptingRangeExtensions:GetStartSeconds
    static readonly IntPtr GetStartSeconds_NativeFunction;
    static readonly int GetStartSeconds_ParamsSize;
    static readonly int GetStartSeconds_Range_Offset;
    static readonly int GetStartSeconds_ReturnValue_Offset;
    
    public static float GetStartSeconds(UnrealSharp.SequencerScripting.SequencerScriptingRange range)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStartSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetStartSeconds_Range_Offset), 0, null, range);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStartSeconds_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetStartSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.SequencerScriptingRangeExtensions:GetStartFrame
    static readonly IntPtr GetStartFrame_NativeFunction;
    static readonly int GetStartFrame_ParamsSize;
    static readonly int GetStartFrame_Range_Offset;
    static readonly int GetStartFrame_ReturnValue_Offset;
    
    public static int GetStartFrame(UnrealSharp.SequencerScripting.SequencerScriptingRange range)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStartFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetStartFrame_Range_Offset), 0, null, range);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStartFrame_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetStartFrame_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.SequencerScriptingRangeExtensions:GetEndSeconds
    static readonly IntPtr GetEndSeconds_NativeFunction;
    static readonly int GetEndSeconds_ParamsSize;
    static readonly int GetEndSeconds_Range_Offset;
    static readonly int GetEndSeconds_ReturnValue_Offset;
    
    public static float GetEndSeconds(UnrealSharp.SequencerScripting.SequencerScriptingRange range)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEndSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetEndSeconds_Range_Offset), 0, null, range);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetEndSeconds_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetEndSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScripting.SequencerScriptingRangeExtensions:GetEndFrame
    static readonly IntPtr GetEndFrame_NativeFunction;
    static readonly int GetEndFrame_ParamsSize;
    static readonly int GetEndFrame_Range_Offset;
    static readonly int GetEndFrame_ReturnValue_Offset;
    
    public static int GetEndFrame(UnrealSharp.SequencerScripting.SequencerScriptingRange range)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEndFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetEndFrame_Range_Offset), 0, null, range);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetEndFrame_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetEndFrame_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
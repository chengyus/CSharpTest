// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.SequencerScriptingEditor;

[UClass]
public partial class SequencerTools : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static SequencerTools()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SequencerToolsFunctionLibrary");
        
        
        LinkAnimSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinkAnimSequence");
        LinkAnimSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinkAnimSequence_NativeFunction);
        LinkAnimSequence_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinkAnimSequence_NativeFunction, "Sequence");
        LinkAnimSequence_AnimSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinkAnimSequence_NativeFunction, "AnimSequence");
        LinkAnimSequence_ExportOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinkAnimSequence_NativeFunction, "ExportOptions");
        LinkAnimSequence_Binding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinkAnimSequence_NativeFunction, "Binding");
        LinkAnimSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinkAnimSequence_NativeFunction, "ReturnValue");
        IsRenderingMovie_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRenderingMovie");
        IsRenderingMovie_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRenderingMovie_NativeFunction);
        IsRenderingMovie_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRenderingMovie_NativeFunction, "ReturnValue");
        IsEventEndpointValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsEventEndpointValid");
        IsEventEndpointValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsEventEndpointValid_NativeFunction);
        IsEventEndpointValid_InEndpoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEventEndpointValid_NativeFunction, "InEndpoint");
        IsEventEndpointValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEventEndpointValid_NativeFunction, "ReturnValue");
        ImportLevelSequenceFBX_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ImportLevelSequenceFBX");
        ImportLevelSequenceFBX_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ImportLevelSequenceFBX_NativeFunction);
        ImportLevelSequenceFBX_InWorld_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportLevelSequenceFBX_NativeFunction, "InWorld");
        ImportLevelSequenceFBX_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportLevelSequenceFBX_NativeFunction, "InSequence");
        ImportLevelSequenceFBX_InBindings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportLevelSequenceFBX_NativeFunction, "InBindings");
        ImportLevelSequenceFBX_InBindings_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ImportLevelSequenceFBX_NativeFunction, "InBindings");
        ImportLevelSequenceFBX_InImportFBXSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportLevelSequenceFBX_NativeFunction, "InImportFBXSettings");
        ImportLevelSequenceFBX_InImportFilename_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportLevelSequenceFBX_NativeFunction, "InImportFilename");
        ImportLevelSequenceFBX_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportLevelSequenceFBX_NativeFunction, "ReturnValue");
        GetObjectBindings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetObjectBindings");
        GetObjectBindings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetObjectBindings_NativeFunction);
        GetObjectBindings_InWorld_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectBindings_NativeFunction, "InWorld");
        GetObjectBindings_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectBindings_NativeFunction, "InSequence");
        GetObjectBindings_InObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectBindings_NativeFunction, "InObject");
        GetObjectBindings_InObject_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetObjectBindings_NativeFunction, "InObject");
        GetObjectBindings_InRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectBindings_NativeFunction, "InRange");
        GetObjectBindings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectBindings_NativeFunction, "ReturnValue");
        GetObjectBindings_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetObjectBindings_NativeFunction, "ReturnValue");
        GetLevelSequenceLinkFromAnimSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLevelSequenceLinkFromAnimSequence");
        GetLevelSequenceLinkFromAnimSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLevelSequenceLinkFromAnimSequence_NativeFunction);
        GetLevelSequenceLinkFromAnimSequence_InAnimSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLevelSequenceLinkFromAnimSequence_NativeFunction, "InAnimSequence");
        GetLevelSequenceLinkFromAnimSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLevelSequenceLinkFromAnimSequence_NativeFunction, "ReturnValue");
        GetBoundObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBoundObjects");
        GetBoundObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBoundObjects_NativeFunction);
        GetBoundObjects_InWorld_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoundObjects_NativeFunction, "InWorld");
        GetBoundObjects_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoundObjects_NativeFunction, "InSequence");
        GetBoundObjects_InBindings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoundObjects_NativeFunction, "InBindings");
        GetBoundObjects_InBindings_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetBoundObjects_NativeFunction, "InBindings");
        GetBoundObjects_InRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoundObjects_NativeFunction, "InRange");
        GetBoundObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoundObjects_NativeFunction, "ReturnValue");
        GetBoundObjects_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetBoundObjects_NativeFunction, "ReturnValue");
        GetAnimSequenceLinkFromLevelSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimSequenceLinkFromLevelSequence");
        GetAnimSequenceLinkFromLevelSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimSequenceLinkFromLevelSequence_NativeFunction);
        GetAnimSequenceLinkFromLevelSequence_InLevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimSequenceLinkFromLevelSequence_NativeFunction, "InLevelSequence");
        GetAnimSequenceLinkFromLevelSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimSequenceLinkFromLevelSequence_NativeFunction, "ReturnValue");
        ExportLevelSequenceFBX_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ExportLevelSequenceFBX");
        ExportLevelSequenceFBX_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ExportLevelSequenceFBX_NativeFunction);
        ExportLevelSequenceFBX_InParams_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportLevelSequenceFBX_NativeFunction, "InParams");
        ExportLevelSequenceFBX_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportLevelSequenceFBX_NativeFunction, "ReturnValue");
        ExportFBXFromControlRig_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ExportFBXFromControlRig");
        ExportFBXFromControlRig_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ExportFBXFromControlRig_NativeFunction);
        ExportFBXFromControlRig_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportFBXFromControlRig_NativeFunction, "Sequence");
        ExportFBXFromControlRig_ActorWithControlRigTrack_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportFBXFromControlRig_NativeFunction, "ActorWithControlRigTrack");
        ExportFBXFromControlRig_ExportFBXControlRigSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportFBXFromControlRig_NativeFunction, "ExportFBXControlRigSettings");
        ExportFBXFromControlRig_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportFBXFromControlRig_NativeFunction, "ReturnValue");
        ExportAnimSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ExportAnimSequence");
        ExportAnimSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ExportAnimSequence_NativeFunction);
        ExportAnimSequence_World_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportAnimSequence_NativeFunction, "World");
        ExportAnimSequence_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportAnimSequence_NativeFunction, "Sequence");
        ExportAnimSequence_AnimSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportAnimSequence_NativeFunction, "AnimSequence");
        ExportAnimSequence_ExportOption_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportAnimSequence_NativeFunction, "ExportOption");
        ExportAnimSequence_Binding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportAnimSequence_NativeFunction, "Binding");
        ExportAnimSequence_bCreateLink_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportAnimSequence_NativeFunction, "bCreateLink");
        ExportAnimSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportAnimSequence_NativeFunction, "ReturnValue");
        CreateQuickBinding_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateQuickBinding");
        CreateQuickBinding_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateQuickBinding_NativeFunction);
        CreateQuickBinding_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateQuickBinding_NativeFunction, "InSequence");
        CreateQuickBinding_InObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateQuickBinding_NativeFunction, "InObject");
        CreateQuickBinding_InFunctionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateQuickBinding_NativeFunction, "InFunctionName");
        CreateQuickBinding_bCallInEditor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateQuickBinding_NativeFunction, "bCallInEditor");
        CreateQuickBinding_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateQuickBinding_NativeFunction, "ReturnValue");
        ClearLinkedAnimSequences_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearLinkedAnimSequences");
        ClearLinkedAnimSequences_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearLinkedAnimSequences_NativeFunction);
        ClearLinkedAnimSequences_InLevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearLinkedAnimSequences_NativeFunction, "InLevelSequence");
        CancelMovieRender_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CancelMovieRender");
        
        
    }
    
    protected SequencerTools(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/SequencerScriptingEditor.SequencerToolsFunctionLibrary:LinkAnimSequence
    static readonly IntPtr LinkAnimSequence_NativeFunction;
    static readonly int LinkAnimSequence_ParamsSize;
    static readonly int LinkAnimSequence_Sequence_Offset;
    static readonly int LinkAnimSequence_AnimSequence_Offset;
    static readonly int LinkAnimSequence_ExportOptions_Offset;
    static readonly int LinkAnimSequence_Binding_Offset;
    static readonly int LinkAnimSequence_ReturnValue_Offset;
    
    public static bool LinkAnimSequence(UnrealSharp.LevelSequence.LevelSequence sequence, UnrealSharp.Engine.AnimSequence animSequence, UnrealSharp.UnrealEd.AnimSeqExportOption exportOptions, UnrealSharp.MovieScene.MovieSceneBindingProxy binding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinkAnimSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, LinkAnimSequence_Sequence_Offset), 0, null, sequence);
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, LinkAnimSequence_AnimSequence_Offset), 0, null, animSequence);
            ObjectMarshaller<UnrealSharp.UnrealEd.AnimSeqExportOption>.ToNative(IntPtr.Add(ParamsBuffer, LinkAnimSequence_ExportOptions_Offset), 0, null, exportOptions);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, LinkAnimSequence_Binding_Offset), 0, null, binding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinkAnimSequence_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LinkAnimSequence_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScriptingEditor.SequencerToolsFunctionLibrary:IsRenderingMovie
    static readonly IntPtr IsRenderingMovie_NativeFunction;
    static readonly int IsRenderingMovie_ParamsSize;
    static readonly int IsRenderingMovie_ReturnValue_Offset;
    
    [Obsolete("This function is obsolete")]
    public static bool IsRenderingMovie()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRenderingMovie_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsRenderingMovie_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRenderingMovie_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScriptingEditor.SequencerToolsFunctionLibrary:IsEventEndpointValid
    static readonly IntPtr IsEventEndpointValid_NativeFunction;
    static readonly int IsEventEndpointValid_ParamsSize;
    static readonly int IsEventEndpointValid_InEndpoint_Offset;
    static readonly int IsEventEndpointValid_ReturnValue_Offset;
    
    public static bool IsEventEndpointValid(UnrealSharp.SequencerScriptingEditor.SequencerQuickBindingResult inEndpoint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsEventEndpointValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScriptingEditor.SequencerQuickBindingResultMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsEventEndpointValid_InEndpoint_Offset), 0, null, inEndpoint);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsEventEndpointValid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsEventEndpointValid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScriptingEditor.SequencerToolsFunctionLibrary:ImportLevelSequenceFBX
    static readonly IntPtr ImportLevelSequenceFBX_NativeFunction;
    static readonly int ImportLevelSequenceFBX_ParamsSize;
    static readonly int ImportLevelSequenceFBX_InWorld_Offset;
    static readonly int ImportLevelSequenceFBX_InSequence_Offset;
    static readonly int ImportLevelSequenceFBX_InBindings_Offset;
    static readonly int ImportLevelSequenceFBX_InBindings_ElementSize;
    static readonly int ImportLevelSequenceFBX_InImportFBXSettings_Offset;
    static readonly int ImportLevelSequenceFBX_InImportFilename_Offset;
    static readonly int ImportLevelSequenceFBX_ReturnValue_Offset;
    
    public static bool ImportLevelSequenceFBX(UnrealSharp.Engine.World inWorld, UnrealSharp.LevelSequence.LevelSequence inSequence, System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> inBindings, UnrealSharp.MovieSceneTools.MovieSceneUserImportFBXSettings inImportFBXSettings, string inImportFilename)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ImportLevelSequenceFBX_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.World>.ToNative(IntPtr.Add(ParamsBuffer, ImportLevelSequenceFBX_InWorld_Offset), 0, null, inWorld);
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, ImportLevelSequenceFBX_InSequence_Offset), 0, null, inSequence);
            IntPtr InBindings_NativeBuffer = IntPtr.Add(ParamsBuffer, ImportLevelSequenceFBX_InBindings_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> InBindings_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>(1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, ImportLevelSequenceFBX_InBindings_ElementSize);
            InBindings_Marshaler.ToNative(InBindings_NativeBuffer, 0, null, inBindings);
            ObjectMarshaller<UnrealSharp.MovieSceneTools.MovieSceneUserImportFBXSettings>.ToNative(IntPtr.Add(ParamsBuffer, ImportLevelSequenceFBX_InImportFBXSettings_Offset), 0, null, inImportFBXSettings);
            IntPtr InImportFilename_NativePtr = IntPtr.Add(ParamsBuffer,ImportLevelSequenceFBX_InImportFilename_Offset);
            StringMarshaller.ToNative(InImportFilename_NativePtr,0,null,inImportFilename);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ImportLevelSequenceFBX_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ImportLevelSequenceFBX_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InImportFilename_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScriptingEditor.SequencerToolsFunctionLibrary:GetObjectBindings
    static readonly IntPtr GetObjectBindings_NativeFunction;
    static readonly int GetObjectBindings_ParamsSize;
    static readonly int GetObjectBindings_InWorld_Offset;
    static readonly int GetObjectBindings_InSequence_Offset;
    static readonly int GetObjectBindings_InObject_Offset;
    static readonly int GetObjectBindings_InObject_ElementSize;
    static readonly int GetObjectBindings_InRange_Offset;
    static readonly int GetObjectBindings_ReturnValue_Offset;
    static readonly int GetObjectBindings_ReturnValue_ElementSize;
    
    [Obsolete("This function is obsolete")]
    public static System.Collections.Generic.IList<UnrealSharp.SequencerScriptingEditor.SequencerBoundObjects> GetObjectBindings(UnrealSharp.Engine.World inWorld, UnrealSharp.LevelSequence.LevelSequence inSequence, System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> inObject, UnrealSharp.SequencerScripting.SequencerScriptingRange inRange)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetObjectBindings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.World>.ToNative(IntPtr.Add(ParamsBuffer, GetObjectBindings_InWorld_Offset), 0, null, inWorld);
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetObjectBindings_InSequence_Offset), 0, null, inSequence);
            IntPtr InObject_NativeBuffer = IntPtr.Add(ParamsBuffer, GetObjectBindings_InObject_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> InObject_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object>(1, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative, GetObjectBindings_InObject_ElementSize);
            InObject_Marshaler.ToNative(InObject_NativeBuffer, 0, null, inObject);
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetObjectBindings_InRange_Offset), 0, null, inRange);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetObjectBindings_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.SequencerScriptingEditor.SequencerBoundObjects> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetObjectBindings_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.SequencerScriptingEditor.SequencerBoundObjects> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.SequencerScriptingEditor.SequencerBoundObjects> (1, UnrealSharp.SequencerScriptingEditor.SequencerBoundObjectsMarshaler.ToNative, UnrealSharp.SequencerScriptingEditor.SequencerBoundObjectsMarshaler.FromNative, GetObjectBindings_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.SequencerScriptingEditor.SequencerBoundObjects>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScriptingEditor.SequencerToolsFunctionLibrary:GetLevelSequenceLinkFromAnimSequence
    static readonly IntPtr GetLevelSequenceLinkFromAnimSequence_NativeFunction;
    static readonly int GetLevelSequenceLinkFromAnimSequence_ParamsSize;
    static readonly int GetLevelSequenceLinkFromAnimSequence_InAnimSequence_Offset;
    static readonly int GetLevelSequenceLinkFromAnimSequence_ReturnValue_Offset;
    
    public static UnrealSharp.LevelSequence.AnimSequenceLevelSequenceLink GetLevelSequenceLinkFromAnimSequence(UnrealSharp.Engine.AnimSequence inAnimSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLevelSequenceLinkFromAnimSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLevelSequenceLinkFromAnimSequence_InAnimSequence_Offset), 0, null, inAnimSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLevelSequenceLinkFromAnimSequence_NativeFunction, ParamsBuffer);
            
            UnrealSharp.LevelSequence.AnimSequenceLevelSequenceLink returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.LevelSequence.AnimSequenceLevelSequenceLink>.FromNative(IntPtr.Add(ParamsBuffer, GetLevelSequenceLinkFromAnimSequence_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScriptingEditor.SequencerToolsFunctionLibrary:GetBoundObjects
    static readonly IntPtr GetBoundObjects_NativeFunction;
    static readonly int GetBoundObjects_ParamsSize;
    static readonly int GetBoundObjects_InWorld_Offset;
    static readonly int GetBoundObjects_InSequence_Offset;
    static readonly int GetBoundObjects_InBindings_Offset;
    static readonly int GetBoundObjects_InBindings_ElementSize;
    static readonly int GetBoundObjects_InRange_Offset;
    static readonly int GetBoundObjects_ReturnValue_Offset;
    static readonly int GetBoundObjects_ReturnValue_ElementSize;
    
    [Obsolete("This function is obsolete")]
    public static System.Collections.Generic.IList<UnrealSharp.SequencerScriptingEditor.SequencerBoundObjects> GetBoundObjects(UnrealSharp.Engine.World inWorld, UnrealSharp.LevelSequence.LevelSequence inSequence, System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> inBindings, UnrealSharp.SequencerScripting.SequencerScriptingRange inRange)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBoundObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.World>.ToNative(IntPtr.Add(ParamsBuffer, GetBoundObjects_InWorld_Offset), 0, null, inWorld);
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetBoundObjects_InSequence_Offset), 0, null, inSequence);
            IntPtr InBindings_NativeBuffer = IntPtr.Add(ParamsBuffer, GetBoundObjects_InBindings_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> InBindings_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>(1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, GetBoundObjects_InBindings_ElementSize);
            InBindings_Marshaler.ToNative(InBindings_NativeBuffer, 0, null, inBindings);
            UnrealSharp.SequencerScripting.SequencerScriptingRangeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetBoundObjects_InRange_Offset), 0, null, inRange);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBoundObjects_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.SequencerScriptingEditor.SequencerBoundObjects> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetBoundObjects_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.SequencerScriptingEditor.SequencerBoundObjects> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.SequencerScriptingEditor.SequencerBoundObjects> (1, UnrealSharp.SequencerScriptingEditor.SequencerBoundObjectsMarshaler.ToNative, UnrealSharp.SequencerScriptingEditor.SequencerBoundObjectsMarshaler.FromNative, GetBoundObjects_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.SequencerScriptingEditor.SequencerBoundObjects>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScriptingEditor.SequencerToolsFunctionLibrary:GetAnimSequenceLinkFromLevelSequence
    static readonly IntPtr GetAnimSequenceLinkFromLevelSequence_NativeFunction;
    static readonly int GetAnimSequenceLinkFromLevelSequence_ParamsSize;
    static readonly int GetAnimSequenceLinkFromLevelSequence_InLevelSequence_Offset;
    static readonly int GetAnimSequenceLinkFromLevelSequence_ReturnValue_Offset;
    
    public static UnrealSharp.LevelSequence.LevelSequenceAnimSequenceLink GetAnimSequenceLinkFromLevelSequence(UnrealSharp.LevelSequence.LevelSequence inLevelSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimSequenceLinkFromLevelSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimSequenceLinkFromLevelSequence_InLevelSequence_Offset), 0, null, inLevelSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimSequenceLinkFromLevelSequence_NativeFunction, ParamsBuffer);
            
            UnrealSharp.LevelSequence.LevelSequenceAnimSequenceLink returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequenceAnimSequenceLink>.FromNative(IntPtr.Add(ParamsBuffer, GetAnimSequenceLinkFromLevelSequence_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScriptingEditor.SequencerToolsFunctionLibrary:ExportLevelSequenceFBX
    static readonly IntPtr ExportLevelSequenceFBX_NativeFunction;
    static readonly int ExportLevelSequenceFBX_ParamsSize;
    static readonly int ExportLevelSequenceFBX_InParams_Offset;
    static readonly int ExportLevelSequenceFBX_ReturnValue_Offset;
    
    public static bool ExportLevelSequenceFBX(UnrealSharp.SequencerScriptingEditor.SequencerExportFBXParams inParams)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ExportLevelSequenceFBX_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SequencerScriptingEditor.SequencerExportFBXParamsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ExportLevelSequenceFBX_InParams_Offset), 0, null, inParams);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ExportLevelSequenceFBX_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ExportLevelSequenceFBX_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScriptingEditor.SequencerToolsFunctionLibrary:ExportFBXFromControlRig
    static readonly IntPtr ExportFBXFromControlRig_NativeFunction;
    static readonly int ExportFBXFromControlRig_ParamsSize;
    static readonly int ExportFBXFromControlRig_Sequence_Offset;
    static readonly int ExportFBXFromControlRig_ActorWithControlRigTrack_Offset;
    static readonly int ExportFBXFromControlRig_ExportFBXControlRigSettings_Offset;
    static readonly int ExportFBXFromControlRig_ReturnValue_Offset;
    
    public static bool ExportFBXFromControlRig(UnrealSharp.LevelSequence.LevelSequence sequence, string actorWithControlRigTrack, UnrealSharp.MovieSceneTools.MovieSceneUserExportFBXControlRigSettings exportFBXControlRigSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ExportFBXFromControlRig_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, ExportFBXFromControlRig_Sequence_Offset), 0, null, sequence);
            IntPtr ActorWithControlRigTrack_NativePtr = IntPtr.Add(ParamsBuffer,ExportFBXFromControlRig_ActorWithControlRigTrack_Offset);
            StringMarshaller.ToNative(ActorWithControlRigTrack_NativePtr,0,null,actorWithControlRigTrack);
            ObjectMarshaller<UnrealSharp.MovieSceneTools.MovieSceneUserExportFBXControlRigSettings>.ToNative(IntPtr.Add(ParamsBuffer, ExportFBXFromControlRig_ExportFBXControlRigSettings_Offset), 0, null, exportFBXControlRigSettings);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ExportFBXFromControlRig_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ExportFBXFromControlRig_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ActorWithControlRigTrack_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScriptingEditor.SequencerToolsFunctionLibrary:ExportAnimSequence
    static readonly IntPtr ExportAnimSequence_NativeFunction;
    static readonly int ExportAnimSequence_ParamsSize;
    static readonly int ExportAnimSequence_World_Offset;
    static readonly int ExportAnimSequence_Sequence_Offset;
    static readonly int ExportAnimSequence_AnimSequence_Offset;
    static readonly int ExportAnimSequence_ExportOption_Offset;
    static readonly int ExportAnimSequence_Binding_Offset;
    static readonly int ExportAnimSequence_bCreateLink_Offset;
    static readonly int ExportAnimSequence_ReturnValue_Offset;
    
    public static bool ExportAnimSequence(UnrealSharp.Engine.World world, UnrealSharp.LevelSequence.LevelSequence sequence, UnrealSharp.Engine.AnimSequence animSequence, UnrealSharp.UnrealEd.AnimSeqExportOption exportOption, UnrealSharp.MovieScene.MovieSceneBindingProxy binding, bool bCreateLink)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ExportAnimSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.World>.ToNative(IntPtr.Add(ParamsBuffer, ExportAnimSequence_World_Offset), 0, null, world);
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, ExportAnimSequence_Sequence_Offset), 0, null, sequence);
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, ExportAnimSequence_AnimSequence_Offset), 0, null, animSequence);
            ObjectMarshaller<UnrealSharp.UnrealEd.AnimSeqExportOption>.ToNative(IntPtr.Add(ParamsBuffer, ExportAnimSequence_ExportOption_Offset), 0, null, exportOption);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ExportAnimSequence_Binding_Offset), 0, null, binding);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ExportAnimSequence_bCreateLink_Offset), 0, null, bCreateLink);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ExportAnimSequence_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ExportAnimSequence_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScriptingEditor.SequencerToolsFunctionLibrary:CreateQuickBinding
    static readonly IntPtr CreateQuickBinding_NativeFunction;
    static readonly int CreateQuickBinding_ParamsSize;
    static readonly int CreateQuickBinding_InSequence_Offset;
    static readonly int CreateQuickBinding_InObject_Offset;
    static readonly int CreateQuickBinding_InFunctionName_Offset;
    static readonly int CreateQuickBinding_bCallInEditor_Offset;
    static readonly int CreateQuickBinding_ReturnValue_Offset;
    
    public static UnrealSharp.SequencerScriptingEditor.SequencerQuickBindingResult CreateQuickBinding(UnrealSharp.MovieScene.MovieSceneSequence inSequence, UnrealSharp.CoreUObject.Object inObject, string inFunctionName, bool bCallInEditor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateQuickBinding_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSequence>.ToNative(IntPtr.Add(ParamsBuffer, CreateQuickBinding_InSequence_Offset), 0, null, inSequence);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CreateQuickBinding_InObject_Offset), 0, null, inObject);
            IntPtr InFunctionName_NativePtr = IntPtr.Add(ParamsBuffer,CreateQuickBinding_InFunctionName_Offset);
            StringMarshaller.ToNative(InFunctionName_NativePtr,0,null,inFunctionName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateQuickBinding_bCallInEditor_Offset), 0, null, bCallInEditor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateQuickBinding_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SequencerScriptingEditor.SequencerQuickBindingResult returnValue;
            returnValue = UnrealSharp.SequencerScriptingEditor.SequencerQuickBindingResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, CreateQuickBinding_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InFunctionName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/SequencerScriptingEditor.SequencerToolsFunctionLibrary:ClearLinkedAnimSequences
    static readonly IntPtr ClearLinkedAnimSequences_NativeFunction;
    static readonly int ClearLinkedAnimSequences_ParamsSize;
    static readonly int ClearLinkedAnimSequences_InLevelSequence_Offset;
    
    public static void ClearLinkedAnimSequences(UnrealSharp.LevelSequence.LevelSequence inLevelSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearLinkedAnimSequences_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, ClearLinkedAnimSequences_InLevelSequence_Offset), 0, null, inLevelSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClearLinkedAnimSequences_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/SequencerScriptingEditor.SequencerToolsFunctionLibrary:CancelMovieRender
    static readonly IntPtr CancelMovieRender_NativeFunction;
    
    [Obsolete("This function is obsolete")]
    public static void CancelMovieRender()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CancelMovieRender_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
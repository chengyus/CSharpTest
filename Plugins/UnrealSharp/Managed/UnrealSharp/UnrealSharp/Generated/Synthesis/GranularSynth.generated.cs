// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Synthesis;

[UClass]
public partial class GranularSynth : UnrealSharp.AudioMixer.SynthComponent
{
    
    static GranularSynth()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("GranularSynth");
        
        
        SetSustainGain_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSustainGain");
        SetSustainGain_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSustainGain_NativeFunction);
        SetSustainGain_SustainGain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSustainGain_NativeFunction, "SustainGain");
        SetSoundWave_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSoundWave");
        SetSoundWave_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSoundWave_NativeFunction);
        SetSoundWave_InSoundWave_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSoundWave_NativeFunction, "InSoundWave");
        SetScrubMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetScrubMode");
        SetScrubMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetScrubMode_NativeFunction);
        SetScrubMode_bScrubMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetScrubMode_NativeFunction, "bScrubMode");
        SetReleaseTimeMsec_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetReleaseTimeMsec");
        SetReleaseTimeMsec_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetReleaseTimeMsec_NativeFunction);
        SetReleaseTimeMsec_ReleaseTimeMsec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetReleaseTimeMsec_NativeFunction, "ReleaseTimeMsec");
        SetPlayheadTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlayheadTime");
        SetPlayheadTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlayheadTime_NativeFunction);
        SetPlayheadTime_InPositionSec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayheadTime_NativeFunction, "InPositionSec");
        SetPlayheadTime_LerpTimeSec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayheadTime_NativeFunction, "LerpTimeSec");
        SetPlayheadTime_SeekType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayheadTime_NativeFunction, "SeekType");
        SetPlaybackSpeed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaybackSpeed");
        SetPlaybackSpeed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaybackSpeed_NativeFunction);
        SetPlaybackSpeed_InPlayheadRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackSpeed_NativeFunction, "InPlayheadRate");
        SetGrainVolume_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGrainVolume");
        SetGrainVolume_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGrainVolume_NativeFunction);
        SetGrainVolume_BaseVolume_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGrainVolume_NativeFunction, "BaseVolume");
        SetGrainVolume_VolumeRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGrainVolume_NativeFunction, "VolumeRange");
        SetGrainsPerSecond_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGrainsPerSecond");
        SetGrainsPerSecond_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGrainsPerSecond_NativeFunction);
        SetGrainsPerSecond_InGrainsPerSecond_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGrainsPerSecond_NativeFunction, "InGrainsPerSecond");
        SetGrainProbability_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGrainProbability");
        SetGrainProbability_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGrainProbability_NativeFunction);
        SetGrainProbability_InGrainProbability_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGrainProbability_NativeFunction, "InGrainProbability");
        SetGrainPitch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGrainPitch");
        SetGrainPitch_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGrainPitch_NativeFunction);
        SetGrainPitch_BasePitch_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGrainPitch_NativeFunction, "BasePitch");
        SetGrainPitch_PitchRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGrainPitch_NativeFunction, "PitchRange");
        SetGrainPan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGrainPan");
        SetGrainPan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGrainPan_NativeFunction);
        SetGrainPan_BasePan_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGrainPan_NativeFunction, "BasePan");
        SetGrainPan_PanRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGrainPan_NativeFunction, "PanRange");
        SetGrainEnvelopeType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGrainEnvelopeType");
        SetGrainEnvelopeType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGrainEnvelopeType_NativeFunction);
        SetGrainEnvelopeType_EnvelopeType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGrainEnvelopeType_NativeFunction, "EnvelopeType");
        SetGrainDuration_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGrainDuration");
        SetGrainDuration_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGrainDuration_NativeFunction);
        SetGrainDuration_BaseDurationMsec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGrainDuration_NativeFunction, "BaseDurationMsec");
        SetGrainDuration_DurationRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGrainDuration_NativeFunction, "DurationRange");
        SetDecayTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDecayTime");
        SetDecayTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDecayTime_NativeFunction);
        SetDecayTime_DecayTimeMsec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDecayTime_NativeFunction, "DecayTimeMsec");
        SetAttackTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAttackTime");
        SetAttackTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAttackTime_NativeFunction);
        SetAttackTime_AttackTimeMsec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAttackTime_NativeFunction, "AttackTimeMsec");
        NoteOn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NoteOn");
        NoteOn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NoteOn_NativeFunction);
        NoteOn_Note_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NoteOn_NativeFunction, "Note");
        NoteOn_Velocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NoteOn_NativeFunction, "Velocity");
        NoteOn_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NoteOn_NativeFunction, "Duration");
        NoteOff_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NoteOff");
        NoteOff_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NoteOff_NativeFunction);
        NoteOff_Note_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NoteOff_NativeFunction, "Note");
        NoteOff_bKill_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NoteOff_NativeFunction, "bKill");
        IsLoaded_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLoaded");
        IsLoaded_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLoaded_NativeFunction);
        IsLoaded_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLoaded_NativeFunction, "ReturnValue");
        GetSampleDuration_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSampleDuration");
        GetSampleDuration_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSampleDuration_NativeFunction);
        GetSampleDuration_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSampleDuration_NativeFunction, "ReturnValue");
        GetCurrentPlayheadTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentPlayheadTime");
        GetCurrentPlayheadTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentPlayheadTime_NativeFunction);
        GetCurrentPlayheadTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentPlayheadTime_NativeFunction, "ReturnValue");
        
        
    }
    
    protected GranularSynth(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Synthesis.GranularSynth:SetSustainGain
    static readonly IntPtr SetSustainGain_NativeFunction;
    static readonly int SetSustainGain_ParamsSize;
    static readonly int SetSustainGain_SustainGain_Offset;
    
    public void SetSustainGain(float sustainGain)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSustainGain_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSustainGain_SustainGain_Offset), 0, null, sustainGain);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSustainGain_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:SetSoundWave
    static readonly IntPtr SetSoundWave_NativeFunction;
    static readonly int SetSoundWave_ParamsSize;
    static readonly int SetSoundWave_InSoundWave_Offset;
    
    public void SetSoundWave(UnrealSharp.Engine.SoundWave inSoundWave)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSoundWave_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundWave>.ToNative(IntPtr.Add(ParamsBuffer, SetSoundWave_InSoundWave_Offset), 0, null, inSoundWave);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSoundWave_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:SetScrubMode
    static readonly IntPtr SetScrubMode_NativeFunction;
    static readonly int SetScrubMode_ParamsSize;
    static readonly int SetScrubMode_bScrubMode_Offset;
    
    public void SetScrubMode(bool bScrubMode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetScrubMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetScrubMode_bScrubMode_Offset), 0, null, bScrubMode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetScrubMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:SetReleaseTimeMsec
    static readonly IntPtr SetReleaseTimeMsec_NativeFunction;
    static readonly int SetReleaseTimeMsec_ParamsSize;
    static readonly int SetReleaseTimeMsec_ReleaseTimeMsec_Offset;
    
    public void SetReleaseTimeMsec(float releaseTimeMsec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetReleaseTimeMsec_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetReleaseTimeMsec_ReleaseTimeMsec_Offset), 0, null, releaseTimeMsec);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetReleaseTimeMsec_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:SetPlayheadTime
    static readonly IntPtr SetPlayheadTime_NativeFunction;
    static readonly int SetPlayheadTime_ParamsSize;
    static readonly int SetPlayheadTime_InPositionSec_Offset;
    static readonly int SetPlayheadTime_LerpTimeSec_Offset;
    static readonly int SetPlayheadTime_SeekType_Offset;
    
    public void SetPlayheadTime(float inPositionSec, float lerpTimeSec = 0.000000f, UnrealSharp.Synthesis.EGranularSynthSeekType seekType = UnrealSharp.Synthesis.EGranularSynthSeekType.FromBeginning)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlayheadTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlayheadTime_InPositionSec_Offset), 0, null, inPositionSec);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlayheadTime_LerpTimeSec_Offset), 0, null, lerpTimeSec);
            BlittableMarshaller<UnrealSharp.Synthesis.EGranularSynthSeekType>.ToNative(IntPtr.Add(ParamsBuffer, SetPlayheadTime_SeekType_Offset), 0, null, seekType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlayheadTime_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:SetPlaybackSpeed
    static readonly IntPtr SetPlaybackSpeed_NativeFunction;
    static readonly int SetPlaybackSpeed_ParamsSize;
    static readonly int SetPlaybackSpeed_InPlayheadRate_Offset;
    
    public void SetPlaybackSpeed(float inPlayheadRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaybackSpeed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackSpeed_InPlayheadRate_Offset), 0, null, inPlayheadRate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlaybackSpeed_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:SetGrainVolume
    static readonly IntPtr SetGrainVolume_NativeFunction;
    static readonly int SetGrainVolume_ParamsSize;
    static readonly int SetGrainVolume_BaseVolume_Offset;
    static readonly int SetGrainVolume_VolumeRange_Offset;
    
    public void SetGrainVolume(float baseVolume, System.DoubleNumerics.Vector2 volumeRange)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGrainVolume_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGrainVolume_BaseVolume_Offset), 0, null, baseVolume);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetGrainVolume_VolumeRange_Offset), 0, null, volumeRange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGrainVolume_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:SetGrainsPerSecond
    static readonly IntPtr SetGrainsPerSecond_NativeFunction;
    static readonly int SetGrainsPerSecond_ParamsSize;
    static readonly int SetGrainsPerSecond_InGrainsPerSecond_Offset;
    
    public void SetGrainsPerSecond(float inGrainsPerSecond)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGrainsPerSecond_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGrainsPerSecond_InGrainsPerSecond_Offset), 0, null, inGrainsPerSecond);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGrainsPerSecond_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:SetGrainProbability
    static readonly IntPtr SetGrainProbability_NativeFunction;
    static readonly int SetGrainProbability_ParamsSize;
    static readonly int SetGrainProbability_InGrainProbability_Offset;
    
    public void SetGrainProbability(float inGrainProbability)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGrainProbability_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGrainProbability_InGrainProbability_Offset), 0, null, inGrainProbability);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGrainProbability_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:SetGrainPitch
    static readonly IntPtr SetGrainPitch_NativeFunction;
    static readonly int SetGrainPitch_ParamsSize;
    static readonly int SetGrainPitch_BasePitch_Offset;
    static readonly int SetGrainPitch_PitchRange_Offset;
    
    public void SetGrainPitch(float basePitch, System.DoubleNumerics.Vector2 pitchRange)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGrainPitch_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGrainPitch_BasePitch_Offset), 0, null, basePitch);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetGrainPitch_PitchRange_Offset), 0, null, pitchRange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGrainPitch_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:SetGrainPan
    static readonly IntPtr SetGrainPan_NativeFunction;
    static readonly int SetGrainPan_ParamsSize;
    static readonly int SetGrainPan_BasePan_Offset;
    static readonly int SetGrainPan_PanRange_Offset;
    
    public void SetGrainPan(float basePan, System.DoubleNumerics.Vector2 panRange)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGrainPan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGrainPan_BasePan_Offset), 0, null, basePan);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetGrainPan_PanRange_Offset), 0, null, panRange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGrainPan_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:SetGrainEnvelopeType
    static readonly IntPtr SetGrainEnvelopeType_NativeFunction;
    static readonly int SetGrainEnvelopeType_ParamsSize;
    static readonly int SetGrainEnvelopeType_EnvelopeType_Offset;
    
    public void SetGrainEnvelopeType(UnrealSharp.Synthesis.EGranularSynthEnvelopeType envelopeType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGrainEnvelopeType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Synthesis.EGranularSynthEnvelopeType>.ToNative(IntPtr.Add(ParamsBuffer, SetGrainEnvelopeType_EnvelopeType_Offset), 0, null, envelopeType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGrainEnvelopeType_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:SetGrainDuration
    static readonly IntPtr SetGrainDuration_NativeFunction;
    static readonly int SetGrainDuration_ParamsSize;
    static readonly int SetGrainDuration_BaseDurationMsec_Offset;
    static readonly int SetGrainDuration_DurationRange_Offset;
    
    public void SetGrainDuration(float baseDurationMsec, System.DoubleNumerics.Vector2 durationRange)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGrainDuration_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGrainDuration_BaseDurationMsec_Offset), 0, null, baseDurationMsec);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetGrainDuration_DurationRange_Offset), 0, null, durationRange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGrainDuration_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:SetDecayTime
    static readonly IntPtr SetDecayTime_NativeFunction;
    static readonly int SetDecayTime_ParamsSize;
    static readonly int SetDecayTime_DecayTimeMsec_Offset;
    
    public void SetDecayTime(float decayTimeMsec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDecayTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDecayTime_DecayTimeMsec_Offset), 0, null, decayTimeMsec);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDecayTime_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:SetAttackTime
    static readonly IntPtr SetAttackTime_NativeFunction;
    static readonly int SetAttackTime_ParamsSize;
    static readonly int SetAttackTime_AttackTimeMsec_Offset;
    
    public void SetAttackTime(float attackTimeMsec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAttackTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAttackTime_AttackTimeMsec_Offset), 0, null, attackTimeMsec);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAttackTime_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:NoteOn
    static readonly IntPtr NoteOn_NativeFunction;
    static readonly int NoteOn_ParamsSize;
    static readonly int NoteOn_Note_Offset;
    static readonly int NoteOn_Velocity_Offset;
    static readonly int NoteOn_Duration_Offset;
    
    public void NoteOn(float note, int velocity, float duration = -1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NoteOn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, NoteOn_Note_Offset), 0, null, note);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, NoteOn_Velocity_Offset), 0, null, velocity);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, NoteOn_Duration_Offset), 0, null, duration);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, NoteOn_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:NoteOff
    static readonly IntPtr NoteOff_NativeFunction;
    static readonly int NoteOff_ParamsSize;
    static readonly int NoteOff_Note_Offset;
    static readonly int NoteOff_bKill_Offset;
    
    public void NoteOff(float note, bool bKill = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NoteOff_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, NoteOff_Note_Offset), 0, null, note);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, NoteOff_bKill_Offset), 0, null, bKill);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, NoteOff_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:IsLoaded
    static readonly IntPtr IsLoaded_NativeFunction;
    static readonly int IsLoaded_ParamsSize;
    static readonly int IsLoaded_ReturnValue_Offset;
    
    public bool IsLoaded()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLoaded_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLoaded_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLoaded_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:GetSampleDuration
    static readonly IntPtr GetSampleDuration_NativeFunction;
    static readonly int GetSampleDuration_ParamsSize;
    static readonly int GetSampleDuration_ReturnValue_Offset;
    
    public float GetSampleDuration()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSampleDuration_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSampleDuration_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetSampleDuration_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Synthesis.GranularSynth:GetCurrentPlayheadTime
    static readonly IntPtr GetCurrentPlayheadTime_NativeFunction;
    static readonly int GetCurrentPlayheadTime_ParamsSize;
    static readonly int GetCurrentPlayheadTime_ReturnValue_Offset;
    
    public float GetCurrentPlayheadTime()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentPlayheadTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentPlayheadTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentPlayheadTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
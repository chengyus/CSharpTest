// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Synthesis;

[UClass]
public partial class MonoWaveTableSynthPreset : UnrealSharp.CoreUObject.Object
{
    
    static MonoWaveTableSynthPreset()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MonoWaveTableSynthPreset");
        
        PresetName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PresetName");
        PresetName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "PresetName");
        bLockKeyframesToGridBool_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bLockKeyframesToGridBool");
        bLockKeyframesToGridBool_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bLockKeyframesToGridBool");
        LockKeyframesToGrid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LockKeyframesToGrid");
        WaveTableResolution_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WaveTableResolution");
        WaveTable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WaveTable");
        WaveTable_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "WaveTable");
        bNormalizeWaveTables_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNormalizeWaveTables");
        bNormalizeWaveTables_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bNormalizeWaveTables");
        
        
        
    }
    
    protected MonoWaveTableSynthPreset(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StrProperty /Script/Synthesis.MonoWaveTableSynthPreset:PresetName
    static readonly int PresetName_Offset;
    static readonly IntPtr PresetName_NativeProperty;
    
    public string PresetName
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,PresetName_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,PresetName_Offset),0,this,value);
        }
    }
    
    // BoolProperty /Script/Synthesis.MonoWaveTableSynthPreset:bLockKeyframesToGridBool
    static readonly int bLockKeyframesToGridBool_Offset;
    static readonly IntPtr bLockKeyframesToGridBool_NativeProperty;
    
    public bool bLockKeyframesToGridBool
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bLockKeyframesToGridBool_NativeProperty, bLockKeyframesToGridBool_Offset);
        }
    }
    
    // IntProperty /Script/Synthesis.MonoWaveTableSynthPreset:LockKeyframesToGrid
    static readonly int LockKeyframesToGrid_Offset;
    
    public int LockKeyframesToGrid
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, LockKeyframesToGrid_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Synthesis.MonoWaveTableSynthPreset:WaveTableResolution
    static readonly int WaveTableResolution_Offset;
    
    public int WaveTableResolution
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, WaveTableResolution_Offset), 0, this);
        }
    }
    
    // ArrayProperty /Script/Synthesis.MonoWaveTableSynthPreset:WaveTable
    static readonly int WaveTable_Offset;
    static readonly IntPtr WaveTable_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.RuntimeFloatCurve> WaveTable_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.RuntimeFloatCurve> WaveTable
    {
        get
        {
            if(WaveTable_Wrapper == null)
            {
                WaveTable_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.RuntimeFloatCurve>(1, WaveTable_NativeProperty, UnrealSharp.Engine.RuntimeFloatCurveMarshaler.ToNative, UnrealSharp.Engine.RuntimeFloatCurveMarshaler.FromNative);
            }
            
            return WaveTable_Wrapper.FromNative(IntPtr.Add(NativeObject,WaveTable_Offset),0,this);
        }
    }
    
    // BoolProperty /Script/Synthesis.MonoWaveTableSynthPreset:bNormalizeWaveTables
    static readonly int bNormalizeWaveTables_Offset;
    static readonly IntPtr bNormalizeWaveTables_NativeProperty;
    
    public bool bNormalizeWaveTables
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bNormalizeWaveTables_NativeProperty, bNormalizeWaveTables_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bNormalizeWaveTables_NativeProperty, bNormalizeWaveTables_Offset, value);
        }
    }
    
    
}
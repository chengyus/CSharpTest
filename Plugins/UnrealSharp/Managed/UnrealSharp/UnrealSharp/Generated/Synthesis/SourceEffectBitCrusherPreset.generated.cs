// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Synthesis;

[UClass]
public partial class SourceEffectBitCrusherPreset : UnrealSharp.Engine.SoundEffectSourcePreset
{
    
    static SourceEffectBitCrusherPreset()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SourceEffectBitCrusherPreset");
        
        Settings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Settings");
        
        SetSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSettings");
        SetSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSettings_NativeFunction);
        SetSettings_Settings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSettings_NativeFunction, "Settings");
        SetSampleRateModulator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSampleRateModulator");
        SetSampleRateModulator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSampleRateModulator_NativeFunction);
        SetSampleRateModulator_Modulator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSampleRateModulator_NativeFunction, "Modulator");
        SetSampleRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSampleRate");
        SetSampleRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSampleRate_NativeFunction);
        SetSampleRate_SampleRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSampleRate_NativeFunction, "SampleRate");
        SetModulationSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetModulationSettings");
        SetModulationSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetModulationSettings_NativeFunction);
        SetModulationSettings_ModulationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetModulationSettings_NativeFunction, "ModulationSettings");
        SetBits_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBits");
        SetBits_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBits_NativeFunction);
        SetBits_Bits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBits_NativeFunction, "Bits");
        SetBitModulator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBitModulator");
        SetBitModulator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBitModulator_NativeFunction);
        SetBitModulator_Modulator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBitModulator_NativeFunction, "Modulator");
        
        
    }
    
    protected SourceEffectBitCrusherPreset(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/Synthesis.SourceEffectBitCrusherPreset:Settings
    static readonly int Settings_Offset;
    
    public UnrealSharp.Synthesis.SourceEffectBitCrusherSettings Settings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Synthesis.SourceEffectBitCrusherSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, Settings_Offset), 0, this);
        }
    }
    
    // Function /Script/Synthesis.SourceEffectBitCrusherPreset:SetSettings
    static readonly IntPtr SetSettings_NativeFunction;
    static readonly int SetSettings_ParamsSize;
    static readonly int SetSettings_Settings_Offset;
    
    public void SetSettings(UnrealSharp.Synthesis.SourceEffectBitCrusherBaseSettings settings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Synthesis.SourceEffectBitCrusherBaseSettings>.ToNative(IntPtr.Add(ParamsBuffer, SetSettings_Settings_Offset), 0, null, settings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSettings_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectBitCrusherPreset:SetSampleRateModulator
    static readonly IntPtr SetSampleRateModulator_NativeFunction;
    static readonly int SetSampleRateModulator_ParamsSize;
    static readonly int SetSampleRateModulator_Modulator_Offset;
    
    public void SetSampleRateModulator(UnrealSharp.AudioExtensions.SoundModulatorBase modulator)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSampleRateModulator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AudioExtensions.SoundModulatorBase>.ToNative(IntPtr.Add(ParamsBuffer, SetSampleRateModulator_Modulator_Offset), 0, null, modulator);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSampleRateModulator_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectBitCrusherPreset:SetSampleRate
    static readonly IntPtr SetSampleRate_NativeFunction;
    static readonly int SetSampleRate_ParamsSize;
    static readonly int SetSampleRate_SampleRate_Offset;
    
    public void SetSampleRate(float sampleRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSampleRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSampleRate_SampleRate_Offset), 0, null, sampleRate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSampleRate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectBitCrusherPreset:SetModulationSettings
    static readonly IntPtr SetModulationSettings_NativeFunction;
    static readonly int SetModulationSettings_ParamsSize;
    static readonly int SetModulationSettings_ModulationSettings_Offset;
    
    public void SetModulationSettings(UnrealSharp.Synthesis.SourceEffectBitCrusherSettings modulationSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetModulationSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Synthesis.SourceEffectBitCrusherSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetModulationSettings_ModulationSettings_Offset), 0, null, modulationSettings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetModulationSettings_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectBitCrusherPreset:SetBits
    static readonly IntPtr SetBits_NativeFunction;
    static readonly int SetBits_ParamsSize;
    static readonly int SetBits_Bits_Offset;
    
    public void SetBits(float bits)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBits_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetBits_Bits_Offset), 0, null, bits);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBits_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectBitCrusherPreset:SetBitModulator
    static readonly IntPtr SetBitModulator_NativeFunction;
    static readonly int SetBitModulator_ParamsSize;
    static readonly int SetBitModulator_Modulator_Offset;
    
    public void SetBitModulator(UnrealSharp.AudioExtensions.SoundModulatorBase modulator)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBitModulator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AudioExtensions.SoundModulatorBase>.ToNative(IntPtr.Add(ParamsBuffer, SetBitModulator_Modulator_Offset), 0, null, modulator);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBitModulator_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
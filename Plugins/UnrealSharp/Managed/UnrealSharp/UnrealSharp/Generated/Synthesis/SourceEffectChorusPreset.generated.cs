// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Synthesis;

[UClass]
public partial class SourceEffectChorusPreset : UnrealSharp.Engine.SoundEffectSourcePreset
{
    
    static SourceEffectChorusPreset()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SourceEffectChorusPreset");
        
        Settings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Settings");
        
        SetWetModulator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWetModulator");
        SetWetModulator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWetModulator_NativeFunction);
        SetWetModulator_Modulator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWetModulator_NativeFunction, "Modulator");
        SetWet_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWet");
        SetWet_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWet_NativeFunction);
        SetWet_WetAmount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWet_NativeFunction, "WetAmount");
        SetSpreadModulator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSpreadModulator");
        SetSpreadModulator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSpreadModulator_NativeFunction);
        SetSpreadModulator_Modulator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSpreadModulator_NativeFunction, "Modulator");
        SetSpread_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSpread");
        SetSpread_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSpread_NativeFunction);
        SetSpread_Spread_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSpread_NativeFunction, "Spread");
        SetSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSettings");
        SetSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSettings_NativeFunction);
        SetSettings_Settings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSettings_NativeFunction, "Settings");
        SetModulationSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetModulationSettings");
        SetModulationSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetModulationSettings_NativeFunction);
        SetModulationSettings_ModulationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetModulationSettings_NativeFunction, "ModulationSettings");
        SetFrequencyModulator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFrequencyModulator");
        SetFrequencyModulator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFrequencyModulator_NativeFunction);
        SetFrequencyModulator_Modulator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFrequencyModulator_NativeFunction, "Modulator");
        SetFrequency_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFrequency");
        SetFrequency_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFrequency_NativeFunction);
        SetFrequency_Frequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFrequency_NativeFunction, "Frequency");
        SetFeedbackModulator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFeedbackModulator");
        SetFeedbackModulator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFeedbackModulator_NativeFunction);
        SetFeedbackModulator_Modulator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFeedbackModulator_NativeFunction, "Modulator");
        SetFeedback_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFeedback");
        SetFeedback_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFeedback_NativeFunction);
        SetFeedback_Feedback_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFeedback_NativeFunction, "Feedback");
        SetDryModulator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDryModulator");
        SetDryModulator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDryModulator_NativeFunction);
        SetDryModulator_Modulator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDryModulator_NativeFunction, "Modulator");
        SetDry_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDry");
        SetDry_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDry_NativeFunction);
        SetDry_DryAmount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDry_NativeFunction, "DryAmount");
        SetDepthModulator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDepthModulator");
        SetDepthModulator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDepthModulator_NativeFunction);
        SetDepthModulator_Modulator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDepthModulator_NativeFunction, "Modulator");
        SetDepth_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDepth");
        SetDepth_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDepth_NativeFunction);
        SetDepth_Depth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDepth_NativeFunction, "Depth");
        
        
    }
    
    protected SourceEffectChorusPreset(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/Synthesis.SourceEffectChorusPreset:Settings
    static readonly int Settings_Offset;
    
    public UnrealSharp.Synthesis.SourceEffectChorusSettings Settings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Synthesis.SourceEffectChorusSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, Settings_Offset), 0, this);
        }
    }
    
    // Function /Script/Synthesis.SourceEffectChorusPreset:SetWetModulator
    static readonly IntPtr SetWetModulator_NativeFunction;
    static readonly int SetWetModulator_ParamsSize;
    static readonly int SetWetModulator_Modulator_Offset;
    
    public void SetWetModulator(UnrealSharp.AudioExtensions.SoundModulatorBase modulator)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWetModulator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AudioExtensions.SoundModulatorBase>.ToNative(IntPtr.Add(ParamsBuffer, SetWetModulator_Modulator_Offset), 0, null, modulator);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWetModulator_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectChorusPreset:SetWet
    static readonly IntPtr SetWet_NativeFunction;
    static readonly int SetWet_ParamsSize;
    static readonly int SetWet_WetAmount_Offset;
    
    public void SetWet(float wetAmount)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWet_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetWet_WetAmount_Offset), 0, null, wetAmount);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWet_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectChorusPreset:SetSpreadModulator
    static readonly IntPtr SetSpreadModulator_NativeFunction;
    static readonly int SetSpreadModulator_ParamsSize;
    static readonly int SetSpreadModulator_Modulator_Offset;
    
    public void SetSpreadModulator(UnrealSharp.AudioExtensions.SoundModulatorBase modulator)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSpreadModulator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AudioExtensions.SoundModulatorBase>.ToNative(IntPtr.Add(ParamsBuffer, SetSpreadModulator_Modulator_Offset), 0, null, modulator);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSpreadModulator_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectChorusPreset:SetSpread
    static readonly IntPtr SetSpread_NativeFunction;
    static readonly int SetSpread_ParamsSize;
    static readonly int SetSpread_Spread_Offset;
    
    public void SetSpread(float spread)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSpread_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSpread_Spread_Offset), 0, null, spread);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSpread_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectChorusPreset:SetSettings
    static readonly IntPtr SetSettings_NativeFunction;
    static readonly int SetSettings_ParamsSize;
    static readonly int SetSettings_Settings_Offset;
    
    public void SetSettings(UnrealSharp.Synthesis.SourceEffectChorusBaseSettings settings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Synthesis.SourceEffectChorusBaseSettings>.ToNative(IntPtr.Add(ParamsBuffer, SetSettings_Settings_Offset), 0, null, settings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSettings_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectChorusPreset:SetModulationSettings
    static readonly IntPtr SetModulationSettings_NativeFunction;
    static readonly int SetModulationSettings_ParamsSize;
    static readonly int SetModulationSettings_ModulationSettings_Offset;
    
    public void SetModulationSettings(UnrealSharp.Synthesis.SourceEffectChorusSettings modulationSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetModulationSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Synthesis.SourceEffectChorusSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetModulationSettings_ModulationSettings_Offset), 0, null, modulationSettings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetModulationSettings_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectChorusPreset:SetFrequencyModulator
    static readonly IntPtr SetFrequencyModulator_NativeFunction;
    static readonly int SetFrequencyModulator_ParamsSize;
    static readonly int SetFrequencyModulator_Modulator_Offset;
    
    public void SetFrequencyModulator(UnrealSharp.AudioExtensions.SoundModulatorBase modulator)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFrequencyModulator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AudioExtensions.SoundModulatorBase>.ToNative(IntPtr.Add(ParamsBuffer, SetFrequencyModulator_Modulator_Offset), 0, null, modulator);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFrequencyModulator_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectChorusPreset:SetFrequency
    static readonly IntPtr SetFrequency_NativeFunction;
    static readonly int SetFrequency_ParamsSize;
    static readonly int SetFrequency_Frequency_Offset;
    
    public void SetFrequency(float frequency)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFrequency_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFrequency_Frequency_Offset), 0, null, frequency);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFrequency_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectChorusPreset:SetFeedbackModulator
    static readonly IntPtr SetFeedbackModulator_NativeFunction;
    static readonly int SetFeedbackModulator_ParamsSize;
    static readonly int SetFeedbackModulator_Modulator_Offset;
    
    public void SetFeedbackModulator(UnrealSharp.AudioExtensions.SoundModulatorBase modulator)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFeedbackModulator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AudioExtensions.SoundModulatorBase>.ToNative(IntPtr.Add(ParamsBuffer, SetFeedbackModulator_Modulator_Offset), 0, null, modulator);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFeedbackModulator_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectChorusPreset:SetFeedback
    static readonly IntPtr SetFeedback_NativeFunction;
    static readonly int SetFeedback_ParamsSize;
    static readonly int SetFeedback_Feedback_Offset;
    
    public void SetFeedback(float feedback)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFeedback_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFeedback_Feedback_Offset), 0, null, feedback);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFeedback_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectChorusPreset:SetDryModulator
    static readonly IntPtr SetDryModulator_NativeFunction;
    static readonly int SetDryModulator_ParamsSize;
    static readonly int SetDryModulator_Modulator_Offset;
    
    public void SetDryModulator(UnrealSharp.AudioExtensions.SoundModulatorBase modulator)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDryModulator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AudioExtensions.SoundModulatorBase>.ToNative(IntPtr.Add(ParamsBuffer, SetDryModulator_Modulator_Offset), 0, null, modulator);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDryModulator_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectChorusPreset:SetDry
    static readonly IntPtr SetDry_NativeFunction;
    static readonly int SetDry_ParamsSize;
    static readonly int SetDry_DryAmount_Offset;
    
    public void SetDry(float dryAmount)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDry_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDry_DryAmount_Offset), 0, null, dryAmount);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDry_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectChorusPreset:SetDepthModulator
    static readonly IntPtr SetDepthModulator_NativeFunction;
    static readonly int SetDepthModulator_ParamsSize;
    static readonly int SetDepthModulator_Modulator_Offset;
    
    public void SetDepthModulator(UnrealSharp.AudioExtensions.SoundModulatorBase modulator)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDepthModulator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AudioExtensions.SoundModulatorBase>.ToNative(IntPtr.Add(ParamsBuffer, SetDepthModulator_Modulator_Offset), 0, null, modulator);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDepthModulator_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SourceEffectChorusPreset:SetDepth
    static readonly IntPtr SetDepth_NativeFunction;
    static readonly int SetDepth_ParamsSize;
    static readonly int SetDepth_Depth_Offset;
    
    public void SetDepth(float depth)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDepth_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDepth_Depth_Offset), 0, null, depth);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDepth_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
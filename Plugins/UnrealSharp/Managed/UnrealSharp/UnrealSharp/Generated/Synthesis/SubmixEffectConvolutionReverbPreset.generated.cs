// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Synthesis;

[UClass]
public partial class SubmixEffectConvolutionReverbPreset : UnrealSharp.Engine.SoundEffectSubmixPreset
{
    
    static SubmixEffectConvolutionReverbPreset()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SubmixEffectConvolutionReverbPreset");
        
        ImpulseResponse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ImpulseResponse");
        Settings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Settings");
        BlockSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BlockSize");
        bEnableHardwareAcceleration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableHardwareAcceleration");
        
        SetSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSettings");
        SetSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSettings_NativeFunction);
        SetSettings_InSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSettings_NativeFunction, "InSettings");
        
        
    }
    
    protected SubmixEffectConvolutionReverbPreset(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Synthesis.SubmixEffectConvolutionReverbPreset:ImpulseResponse
    static readonly int ImpulseResponse_Offset;
    
    public UnrealSharp.Synthesis.AudioImpulseResponse ImpulseResponse
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Synthesis.AudioImpulseResponse>.FromNative(IntPtr.Add(NativeObject, ImpulseResponse_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Synthesis.AudioImpulseResponse>.ToNative(IntPtr.Add(NativeObject, ImpulseResponse_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Synthesis.SubmixEffectConvolutionReverbPreset:Settings
    static readonly int Settings_Offset;
    
    public UnrealSharp.Synthesis.SubmixEffectConvolutionReverbSettings Settings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Synthesis.SubmixEffectConvolutionReverbSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, Settings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Synthesis.SubmixEffectConvolutionReverbSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, Settings_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/Synthesis.SubmixEffectConvolutionReverbPreset:BlockSize
    static readonly int BlockSize_Offset;
    
    public UnrealSharp.Synthesis.ESubmixEffectConvolutionReverbBlockSize BlockSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Synthesis.ESubmixEffectConvolutionReverbBlockSize>.FromNative(IntPtr.Add(NativeObject, BlockSize_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Synthesis.SubmixEffectConvolutionReverbPreset:bEnableHardwareAcceleration
    static readonly int bEnableHardwareAcceleration_Offset;
    
    public bool bEnableHardwareAcceleration
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnableHardwareAcceleration_Offset), 0, this);
        }
    }
    
    // Function /Script/Synthesis.SubmixEffectConvolutionReverbPreset:SetSettings
    static readonly IntPtr SetSettings_NativeFunction;
    static readonly int SetSettings_ParamsSize;
    static readonly int SetSettings_InSettings_Offset;
    
    public void SetSettings(UnrealSharp.Synthesis.SubmixEffectConvolutionReverbSettings inSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Synthesis.SubmixEffectConvolutionReverbSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetSettings_InSettings_Offset), 0, null, inSettings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSettings_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    
}
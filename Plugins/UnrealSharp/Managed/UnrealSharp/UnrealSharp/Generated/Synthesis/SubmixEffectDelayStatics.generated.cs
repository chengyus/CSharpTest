// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Synthesis;

[UClass]
public partial class SubmixEffectDelayStatics : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static SubmixEffectDelayStatics()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SubmixEffectDelayStatics");
        
        
        SetMaximumDelayLength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaximumDelayLength");
        SetMaximumDelayLength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaximumDelayLength_NativeFunction);
        SetMaximumDelayLength_DelaySettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaximumDelayLength_NativeFunction, "DelaySettings");
        SetMaximumDelayLength_MaximumDelayLength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaximumDelayLength_NativeFunction, "MaximumDelayLength");
        SetMaximumDelayLength_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaximumDelayLength_NativeFunction, "ReturnValue");
        SetInterpolationTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInterpolationTime");
        SetInterpolationTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInterpolationTime_NativeFunction);
        SetInterpolationTime_DelaySettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInterpolationTime_NativeFunction, "DelaySettings");
        SetInterpolationTime_InterpolationTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInterpolationTime_NativeFunction, "InterpolationTime");
        SetInterpolationTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInterpolationTime_NativeFunction, "ReturnValue");
        SetDelayLength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDelayLength");
        SetDelayLength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDelayLength_NativeFunction);
        SetDelayLength_DelaySettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDelayLength_NativeFunction, "DelaySettings");
        SetDelayLength_DelayLength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDelayLength_NativeFunction, "DelayLength");
        SetDelayLength_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDelayLength_NativeFunction, "ReturnValue");
        
        
    }
    
    protected SubmixEffectDelayStatics(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Synthesis.SubmixEffectDelayStatics:SetMaximumDelayLength
    static readonly IntPtr SetMaximumDelayLength_NativeFunction;
    static readonly int SetMaximumDelayLength_ParamsSize;
    static readonly int SetMaximumDelayLength_DelaySettings_Offset;
    static readonly int SetMaximumDelayLength_MaximumDelayLength_Offset;
    static readonly int SetMaximumDelayLength_ReturnValue_Offset;
    
    public static UnrealSharp.Synthesis.SubmixEffectDelaySettings SetMaximumDelayLength(ref UnrealSharp.Synthesis.SubmixEffectDelaySettings delaySettings, float maximumDelayLength)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaximumDelayLength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Synthesis.SubmixEffectDelaySettings>.ToNative(IntPtr.Add(ParamsBuffer, SetMaximumDelayLength_DelaySettings_Offset), 0, null, delaySettings);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMaximumDelayLength_MaximumDelayLength_Offset), 0, null, maximumDelayLength);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMaximumDelayLength_NativeFunction, ParamsBuffer);
            
            delaySettings = BlittableMarshaller<UnrealSharp.Synthesis.SubmixEffectDelaySettings>.FromNative(IntPtr.Add(ParamsBuffer, SetMaximumDelayLength_DelaySettings_Offset), 0, null);
            UnrealSharp.Synthesis.SubmixEffectDelaySettings returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Synthesis.SubmixEffectDelaySettings>.FromNative(IntPtr.Add(ParamsBuffer, SetMaximumDelayLength_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Synthesis.SubmixEffectDelayStatics:SetInterpolationTime
    static readonly IntPtr SetInterpolationTime_NativeFunction;
    static readonly int SetInterpolationTime_ParamsSize;
    static readonly int SetInterpolationTime_DelaySettings_Offset;
    static readonly int SetInterpolationTime_InterpolationTime_Offset;
    static readonly int SetInterpolationTime_ReturnValue_Offset;
    
    public static UnrealSharp.Synthesis.SubmixEffectDelaySettings SetInterpolationTime(ref UnrealSharp.Synthesis.SubmixEffectDelaySettings delaySettings, float interpolationTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInterpolationTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Synthesis.SubmixEffectDelaySettings>.ToNative(IntPtr.Add(ParamsBuffer, SetInterpolationTime_DelaySettings_Offset), 0, null, delaySettings);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetInterpolationTime_InterpolationTime_Offset), 0, null, interpolationTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetInterpolationTime_NativeFunction, ParamsBuffer);
            
            delaySettings = BlittableMarshaller<UnrealSharp.Synthesis.SubmixEffectDelaySettings>.FromNative(IntPtr.Add(ParamsBuffer, SetInterpolationTime_DelaySettings_Offset), 0, null);
            UnrealSharp.Synthesis.SubmixEffectDelaySettings returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Synthesis.SubmixEffectDelaySettings>.FromNative(IntPtr.Add(ParamsBuffer, SetInterpolationTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Synthesis.SubmixEffectDelayStatics:SetDelayLength
    static readonly IntPtr SetDelayLength_NativeFunction;
    static readonly int SetDelayLength_ParamsSize;
    static readonly int SetDelayLength_DelaySettings_Offset;
    static readonly int SetDelayLength_DelayLength_Offset;
    static readonly int SetDelayLength_ReturnValue_Offset;
    
    public static UnrealSharp.Synthesis.SubmixEffectDelaySettings SetDelayLength(ref UnrealSharp.Synthesis.SubmixEffectDelaySettings delaySettings, float delayLength)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDelayLength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Synthesis.SubmixEffectDelaySettings>.ToNative(IntPtr.Add(ParamsBuffer, SetDelayLength_DelaySettings_Offset), 0, null, delaySettings);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDelayLength_DelayLength_Offset), 0, null, delayLength);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetDelayLength_NativeFunction, ParamsBuffer);
            
            delaySettings = BlittableMarshaller<UnrealSharp.Synthesis.SubmixEffectDelaySettings>.FromNative(IntPtr.Add(ParamsBuffer, SetDelayLength_DelaySettings_Offset), 0, null);
            UnrealSharp.Synthesis.SubmixEffectDelaySettings returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Synthesis.SubmixEffectDelaySettings>.FromNative(IntPtr.Add(ParamsBuffer, SetDelayLength_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
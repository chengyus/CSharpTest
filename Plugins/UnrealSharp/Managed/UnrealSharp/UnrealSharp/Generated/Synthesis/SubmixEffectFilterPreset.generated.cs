// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Synthesis;

[UClass]
public partial class SubmixEffectFilterPreset : UnrealSharp.Engine.SoundEffectSubmixPreset
{
    
    static SubmixEffectFilterPreset()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SubmixEffectFilterPreset");
        
        Settings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Settings");
        
        SetSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSettings");
        SetSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSettings_NativeFunction);
        SetSettings_InSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSettings_NativeFunction, "InSettings");
        SetFilterType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFilterType");
        SetFilterType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFilterType_NativeFunction);
        SetFilterType_InType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFilterType_NativeFunction, "InType");
        SetFilterQMod_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFilterQMod");
        SetFilterQMod_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFilterQMod_NativeFunction);
        SetFilterQMod_InQ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFilterQMod_NativeFunction, "InQ");
        SetFilterQ_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFilterQ");
        SetFilterQ_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFilterQ_NativeFunction);
        SetFilterQ_InQ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFilterQ_NativeFunction, "InQ");
        SetFilterCutoffFrequencyMod_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFilterCutoffFrequencyMod");
        SetFilterCutoffFrequencyMod_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFilterCutoffFrequencyMod_NativeFunction);
        SetFilterCutoffFrequencyMod_InFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFilterCutoffFrequencyMod_NativeFunction, "InFrequency");
        SetFilterCutoffFrequency_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFilterCutoffFrequency");
        SetFilterCutoffFrequency_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFilterCutoffFrequency_NativeFunction);
        SetFilterCutoffFrequency_InFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFilterCutoffFrequency_NativeFunction, "InFrequency");
        SetFilterAlgorithm_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFilterAlgorithm");
        SetFilterAlgorithm_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFilterAlgorithm_NativeFunction);
        SetFilterAlgorithm_InAlgorithm_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFilterAlgorithm_NativeFunction, "InAlgorithm");
        
        
    }
    
    protected SubmixEffectFilterPreset(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/Synthesis.SubmixEffectFilterPreset:Settings
    static readonly int Settings_Offset;
    
    public UnrealSharp.Synthesis.SubmixEffectFilterSettings Settings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Synthesis.SubmixEffectFilterSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, Settings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Synthesis.SubmixEffectFilterSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, Settings_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Synthesis.SubmixEffectFilterPreset:SetSettings
    static readonly IntPtr SetSettings_NativeFunction;
    static readonly int SetSettings_ParamsSize;
    static readonly int SetSettings_InSettings_Offset;
    
    public void SetSettings(UnrealSharp.Synthesis.SubmixEffectFilterSettings inSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Synthesis.SubmixEffectFilterSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetSettings_InSettings_Offset), 0, null, inSettings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSettings_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Synthesis.SubmixEffectFilterPreset:SetFilterType
    static readonly IntPtr SetFilterType_NativeFunction;
    static readonly int SetFilterType_ParamsSize;
    static readonly int SetFilterType_InType_Offset;
    
    public void SetFilterType(UnrealSharp.Synthesis.ESubmixFilterType inType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFilterType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Synthesis.ESubmixFilterType>.ToNative(IntPtr.Add(ParamsBuffer, SetFilterType_InType_Offset), 0, null, inType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFilterType_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SubmixEffectFilterPreset:SetFilterQMod
    static readonly IntPtr SetFilterQMod_NativeFunction;
    static readonly int SetFilterQMod_ParamsSize;
    static readonly int SetFilterQMod_InQ_Offset;
    
    public void SetFilterQMod(float inQ)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFilterQMod_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFilterQMod_InQ_Offset), 0, null, inQ);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFilterQMod_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SubmixEffectFilterPreset:SetFilterQ
    static readonly IntPtr SetFilterQ_NativeFunction;
    static readonly int SetFilterQ_ParamsSize;
    static readonly int SetFilterQ_InQ_Offset;
    
    public void SetFilterQ(float inQ)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFilterQ_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFilterQ_InQ_Offset), 0, null, inQ);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFilterQ_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SubmixEffectFilterPreset:SetFilterCutoffFrequencyMod
    static readonly IntPtr SetFilterCutoffFrequencyMod_NativeFunction;
    static readonly int SetFilterCutoffFrequencyMod_ParamsSize;
    static readonly int SetFilterCutoffFrequencyMod_InFrequency_Offset;
    
    public void SetFilterCutoffFrequencyMod(float inFrequency)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFilterCutoffFrequencyMod_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFilterCutoffFrequencyMod_InFrequency_Offset), 0, null, inFrequency);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFilterCutoffFrequencyMod_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SubmixEffectFilterPreset:SetFilterCutoffFrequency
    static readonly IntPtr SetFilterCutoffFrequency_NativeFunction;
    static readonly int SetFilterCutoffFrequency_ParamsSize;
    static readonly int SetFilterCutoffFrequency_InFrequency_Offset;
    
    public void SetFilterCutoffFrequency(float inFrequency)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFilterCutoffFrequency_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFilterCutoffFrequency_InFrequency_Offset), 0, null, inFrequency);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFilterCutoffFrequency_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SubmixEffectFilterPreset:SetFilterAlgorithm
    static readonly IntPtr SetFilterAlgorithm_NativeFunction;
    static readonly int SetFilterAlgorithm_ParamsSize;
    static readonly int SetFilterAlgorithm_InAlgorithm_Offset;
    
    public void SetFilterAlgorithm(UnrealSharp.Synthesis.ESubmixFilterAlgorithm inAlgorithm)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFilterAlgorithm_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Synthesis.ESubmixFilterAlgorithm>.ToNative(IntPtr.Add(ParamsBuffer, SetFilterAlgorithm_InAlgorithm_Offset), 0, null, inAlgorithm);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFilterAlgorithm_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
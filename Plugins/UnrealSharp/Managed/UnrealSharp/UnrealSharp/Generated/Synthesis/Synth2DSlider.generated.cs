// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Synthesis;

[UClass]
public partial class Synth2DSlider : UnrealSharp.UMG.Widget
{
    
    static Synth2DSlider()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Synth2DSlider");
        
        WidgetStyle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WidgetStyle");
        SliderHandleColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SliderHandleColor");
        IndentHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IndentHandle");
        Locked_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Locked");
        StepSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StepSize");
        IsFocusable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IsFocusable");
        
        SetValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValue");
        SetValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValue_NativeFunction);
        SetValue_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValue_NativeFunction, "InValue");
        SetStepSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetStepSize");
        SetStepSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetStepSize_NativeFunction);
        SetStepSize_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStepSize_NativeFunction, "InValue");
        SetSliderHandleColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSliderHandleColor");
        SetSliderHandleColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSliderHandleColor_NativeFunction);
        SetSliderHandleColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSliderHandleColor_NativeFunction, "InValue");
        SetLocked_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocked");
        SetLocked_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocked_NativeFunction);
        SetLocked_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocked_NativeFunction, "InValue");
        SetIndentHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIndentHandle");
        SetIndentHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIndentHandle_NativeFunction);
        SetIndentHandle_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIndentHandle_NativeFunction, "InValue");
        GetValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValue");
        GetValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValue_NativeFunction);
        GetValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValue_NativeFunction, "ReturnValue");
        
        
    }
    
    protected Synth2DSlider(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/Synthesis.Synth2DSlider:WidgetStyle
    static readonly int WidgetStyle_Offset;
    
    public UnrealSharp.Synthesis.Synth2DSliderStyle WidgetStyle
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Synthesis.Synth2DSliderStyleMarshaler.FromNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Synthesis.Synth2DSliderStyleMarshaler.ToNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Synthesis.Synth2DSlider:SliderHandleColor
    static readonly int SliderHandleColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor SliderHandleColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, SliderHandleColor_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Synthesis.Synth2DSlider:IndentHandle
    static readonly int IndentHandle_Offset;
    
    public bool IndentHandle
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, IndentHandle_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Synthesis.Synth2DSlider:Locked
    static readonly int Locked_Offset;
    
    public bool Locked
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, Locked_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Synthesis.Synth2DSlider:StepSize
    static readonly int StepSize_Offset;
    
    public float StepSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, StepSize_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Synthesis.Synth2DSlider:IsFocusable
    static readonly int IsFocusable_Offset;
    
    public bool IsFocusable
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, IsFocusable_Offset), 0, this);
        }
    }
    
    // Function /Script/Synthesis.Synth2DSlider:SetValue
    static readonly IntPtr SetValue_NativeFunction;
    static readonly int SetValue_ParamsSize;
    static readonly int SetValue_InValue_Offset;
    
    public void SetValue(System.DoubleNumerics.Vector2 inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetValue_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.Synth2DSlider:SetStepSize
    static readonly IntPtr SetStepSize_NativeFunction;
    static readonly int SetStepSize_ParamsSize;
    static readonly int SetStepSize_InValue_Offset;
    
    public void SetStepSize(float inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetStepSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetStepSize_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetStepSize_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.Synth2DSlider:SetSliderHandleColor
    static readonly IntPtr SetSliderHandleColor_NativeFunction;
    static readonly int SetSliderHandleColor_ParamsSize;
    static readonly int SetSliderHandleColor_InValue_Offset;
    
    public void SetSliderHandleColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSliderHandleColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetSliderHandleColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSliderHandleColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.Synth2DSlider:SetLocked
    static readonly IntPtr SetLocked_NativeFunction;
    static readonly int SetLocked_ParamsSize;
    static readonly int SetLocked_InValue_Offset;
    
    public void SetLocked(bool inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocked_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocked_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLocked_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.Synth2DSlider:SetIndentHandle
    static readonly IntPtr SetIndentHandle_NativeFunction;
    static readonly int SetIndentHandle_ParamsSize;
    static readonly int SetIndentHandle_InValue_Offset;
    
    public void SetIndentHandle(bool inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIndentHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIndentHandle_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIndentHandle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.Synth2DSlider:GetValue
    static readonly IntPtr GetValue_NativeFunction;
    static readonly int GetValue_ParamsSize;
    static readonly int GetValue_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 GetValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValue_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
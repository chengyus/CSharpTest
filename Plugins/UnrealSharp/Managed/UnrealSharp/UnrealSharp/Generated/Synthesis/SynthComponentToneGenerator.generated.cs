// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Synthesis;

[UClass]
public partial class SynthComponentToneGenerator : UnrealSharp.AudioMixer.SynthComponent
{
    
    static SynthComponentToneGenerator()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SynthComponentToneGenerator");
        
        Frequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Frequency");
        Volume_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Volume");
        DistanceAttenuationCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DistanceAttenuationCurve");
        DistanceRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DistanceRange");
        AttenuationDbAtMaxRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AttenuationDbAtMaxRange");
        
        SetVolume_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVolume");
        SetVolume_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVolume_NativeFunction);
        SetVolume_InVolume_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVolume_NativeFunction, "InVolume");
        SetFrequency_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFrequency");
        SetFrequency_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFrequency_NativeFunction);
        SetFrequency_InFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFrequency_NativeFunction, "InFrequency");
        
        
    }
    
    protected SynthComponentToneGenerator(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Synthesis.SynthComponentToneGenerator:Frequency
    static readonly int Frequency_Offset;
    
    public float Frequency
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Frequency_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Synthesis.SynthComponentToneGenerator:Volume
    static readonly int Volume_Offset;
    
    public float Volume
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Volume_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Synthesis.SynthComponentToneGenerator:DistanceAttenuationCurve
    static readonly int DistanceAttenuationCurve_Offset;
    
    public UnrealSharp.Engine.RuntimeFloatCurve DistanceAttenuationCurve
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.RuntimeFloatCurveMarshaler.FromNative(IntPtr.Add(NativeObject, DistanceAttenuationCurve_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.RuntimeFloatCurveMarshaler.ToNative(IntPtr.Add(NativeObject, DistanceAttenuationCurve_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Synthesis.SynthComponentToneGenerator:DistanceRange
    static readonly int DistanceRange_Offset;
    
    public System.DoubleNumerics.Vector2 DistanceRange
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, DistanceRange_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(NativeObject, DistanceRange_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Synthesis.SynthComponentToneGenerator:AttenuationDbAtMaxRange
    static readonly int AttenuationDbAtMaxRange_Offset;
    
    public float AttenuationDbAtMaxRange
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AttenuationDbAtMaxRange_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AttenuationDbAtMaxRange_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Synthesis.SynthComponentToneGenerator:SetVolume
    static readonly IntPtr SetVolume_NativeFunction;
    static readonly int SetVolume_ParamsSize;
    static readonly int SetVolume_InVolume_Offset;
    
    public void SetVolume(float inVolume)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVolume_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetVolume_InVolume_Offset), 0, null, inVolume);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVolume_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SynthComponentToneGenerator:SetFrequency
    static readonly IntPtr SetFrequency_NativeFunction;
    static readonly int SetFrequency_ParamsSize;
    static readonly int SetFrequency_InFrequency_Offset;
    
    public void SetFrequency(float inFrequency)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFrequency_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFrequency_InFrequency_Offset), 0, null, inFrequency);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFrequency_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
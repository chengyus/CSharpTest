// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Synthesis;

[UClass]
public partial class SynthSamplePlayer : UnrealSharp.AudioMixer.SynthComponent
{
    
    static SynthSamplePlayer()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SynthSamplePlayer");
        
        SoundWave_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SoundWave");
        
        SetSoundWave_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSoundWave");
        SetSoundWave_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSoundWave_NativeFunction);
        SetSoundWave_InSoundWave_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSoundWave_NativeFunction, "InSoundWave");
        SetScrubTimeWidth_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetScrubTimeWidth");
        SetScrubTimeWidth_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetScrubTimeWidth_NativeFunction);
        SetScrubTimeWidth_InScrubTimeWidthSec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetScrubTimeWidth_NativeFunction, "InScrubTimeWidthSec");
        SetScrubMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetScrubMode");
        SetScrubMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetScrubMode_NativeFunction);
        SetScrubMode_bScrubMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetScrubMode_NativeFunction, "bScrubMode");
        SetPitch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPitch");
        SetPitch_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPitch_NativeFunction);
        SetPitch_InPitch_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPitch_NativeFunction, "InPitch");
        SetPitch_TimeSec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPitch_NativeFunction, "TimeSec");
        SeekToTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SeekToTime");
        SeekToTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SeekToTime_NativeFunction);
        SeekToTime_TimeSec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SeekToTime_NativeFunction, "TimeSec");
        SeekToTime_SeekType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SeekToTime_NativeFunction, "SeekType");
        SeekToTime_bWrap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SeekToTime_NativeFunction, "bWrap");
        IsLoaded_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLoaded");
        IsLoaded_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLoaded_NativeFunction);
        IsLoaded_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLoaded_NativeFunction, "ReturnValue");
        GetSampleDuration_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSampleDuration");
        GetSampleDuration_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSampleDuration_NativeFunction);
        GetSampleDuration_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSampleDuration_NativeFunction, "ReturnValue");
        GetCurrentPlaybackProgressTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentPlaybackProgressTime");
        GetCurrentPlaybackProgressTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentPlaybackProgressTime_NativeFunction);
        GetCurrentPlaybackProgressTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentPlaybackProgressTime_NativeFunction, "ReturnValue");
        GetCurrentPlaybackProgressPercent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentPlaybackProgressPercent");
        GetCurrentPlaybackProgressPercent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentPlaybackProgressPercent_NativeFunction);
        GetCurrentPlaybackProgressPercent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentPlaybackProgressPercent_NativeFunction, "ReturnValue");
        
        
    }
    
    protected SynthSamplePlayer(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Synthesis.SynthSamplePlayer:SoundWave
    static readonly int SoundWave_Offset;
    
    public UnrealSharp.Engine.SoundWave SoundWave
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SoundWave>.FromNative(IntPtr.Add(NativeObject, SoundWave_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.SoundWave>.ToNative(IntPtr.Add(NativeObject, SoundWave_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Synthesis.SynthSamplePlayer:SetSoundWave
    static readonly IntPtr SetSoundWave_NativeFunction;
    static readonly int SetSoundWave_ParamsSize;
    static readonly int SetSoundWave_InSoundWave_Offset;
    
    public void SetSoundWave(UnrealSharp.Engine.SoundWave inSoundWave)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSoundWave_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundWave>.ToNative(IntPtr.Add(ParamsBuffer, SetSoundWave_InSoundWave_Offset), 0, null, inSoundWave);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSoundWave_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SynthSamplePlayer:SetScrubTimeWidth
    static readonly IntPtr SetScrubTimeWidth_NativeFunction;
    static readonly int SetScrubTimeWidth_ParamsSize;
    static readonly int SetScrubTimeWidth_InScrubTimeWidthSec_Offset;
    
    public void SetScrubTimeWidth(float inScrubTimeWidthSec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetScrubTimeWidth_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetScrubTimeWidth_InScrubTimeWidthSec_Offset), 0, null, inScrubTimeWidthSec);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetScrubTimeWidth_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SynthSamplePlayer:SetScrubMode
    static readonly IntPtr SetScrubMode_NativeFunction;
    static readonly int SetScrubMode_ParamsSize;
    static readonly int SetScrubMode_bScrubMode_Offset;
    
    public void SetScrubMode(bool bScrubMode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetScrubMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetScrubMode_bScrubMode_Offset), 0, null, bScrubMode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetScrubMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SynthSamplePlayer:SetPitch
    static readonly IntPtr SetPitch_NativeFunction;
    static readonly int SetPitch_ParamsSize;
    static readonly int SetPitch_InPitch_Offset;
    static readonly int SetPitch_TimeSec_Offset;
    
    public void SetPitch(float inPitch, float timeSec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPitch_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPitch_InPitch_Offset), 0, null, inPitch);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPitch_TimeSec_Offset), 0, null, timeSec);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPitch_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SynthSamplePlayer:SeekToTime
    static readonly IntPtr SeekToTime_NativeFunction;
    static readonly int SeekToTime_ParamsSize;
    static readonly int SeekToTime_TimeSec_Offset;
    static readonly int SeekToTime_SeekType_Offset;
    static readonly int SeekToTime_bWrap_Offset;
    
    public void SeekToTime(float timeSec, UnrealSharp.Synthesis.ESamplePlayerSeekType seekType, bool bWrap = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SeekToTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SeekToTime_TimeSec_Offset), 0, null, timeSec);
            BlittableMarshaller<UnrealSharp.Synthesis.ESamplePlayerSeekType>.ToNative(IntPtr.Add(ParamsBuffer, SeekToTime_SeekType_Offset), 0, null, seekType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SeekToTime_bWrap_Offset), 0, null, bWrap);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SeekToTime_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Synthesis.SynthSamplePlayer:IsLoaded
    static readonly IntPtr IsLoaded_NativeFunction;
    static readonly int IsLoaded_ParamsSize;
    static readonly int IsLoaded_ReturnValue_Offset;
    
    public bool IsLoaded()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLoaded_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLoaded_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLoaded_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Synthesis.SynthSamplePlayer:GetSampleDuration
    static readonly IntPtr GetSampleDuration_NativeFunction;
    static readonly int GetSampleDuration_ParamsSize;
    static readonly int GetSampleDuration_ReturnValue_Offset;
    
    public float GetSampleDuration()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSampleDuration_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSampleDuration_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetSampleDuration_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Synthesis.SynthSamplePlayer:GetCurrentPlaybackProgressTime
    static readonly IntPtr GetCurrentPlaybackProgressTime_NativeFunction;
    static readonly int GetCurrentPlaybackProgressTime_ParamsSize;
    static readonly int GetCurrentPlaybackProgressTime_ReturnValue_Offset;
    
    public float GetCurrentPlaybackProgressTime()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentPlaybackProgressTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentPlaybackProgressTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentPlaybackProgressTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Synthesis.SynthSamplePlayer:GetCurrentPlaybackProgressPercent
    static readonly IntPtr GetCurrentPlaybackProgressPercent_NativeFunction;
    static readonly int GetCurrentPlaybackProgressPercent_ParamsSize;
    static readonly int GetCurrentPlaybackProgressPercent_ReturnValue_Offset;
    
    public float GetCurrentPlaybackProgressPercent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentPlaybackProgressPercent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentPlaybackProgressPercent_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentPlaybackProgressPercent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
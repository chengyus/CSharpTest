// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.TakeRecorder;

[UClass]
public partial class TakeRecorderBlueprintLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static TakeRecorderBlueprintLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TakeRecorderBlueprintLibrary");
        
        
        StopRecording_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopRecording");
        StartRecording_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartRecording");
        StartRecording_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartRecording_NativeFunction);
        StartRecording_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartRecording_NativeFunction, "LevelSequence");
        StartRecording_Sources_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartRecording_NativeFunction, "Sources");
        StartRecording_MetaData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartRecording_NativeFunction, "MetaData");
        StartRecording_Parameters_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartRecording_NativeFunction, "Parameters");
        StartRecording_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartRecording_NativeFunction, "ReturnValue");
        SetDefaultParameters_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultParameters");
        SetDefaultParameters_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultParameters_NativeFunction);
        SetDefaultParameters_DefaultParameters_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultParameters_NativeFunction, "DefaultParameters");
        OpenTakeRecorderPanel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OpenTakeRecorderPanel");
        OpenTakeRecorderPanel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OpenTakeRecorderPanel_NativeFunction);
        OpenTakeRecorderPanel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenTakeRecorderPanel_NativeFunction, "ReturnValue");
        IsTakeRecorderEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsTakeRecorderEnabled");
        IsTakeRecorderEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsTakeRecorderEnabled_NativeFunction);
        IsTakeRecorderEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsTakeRecorderEnabled_NativeFunction, "ReturnValue");
        IsRecording_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRecording");
        IsRecording_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRecording_NativeFunction);
        IsRecording_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRecording_NativeFunction, "ReturnValue");
        GetTakeRecorderPanel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTakeRecorderPanel");
        GetTakeRecorderPanel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTakeRecorderPanel_NativeFunction);
        GetTakeRecorderPanel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTakeRecorderPanel_NativeFunction, "ReturnValue");
        GetDefaultParameters_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultParameters");
        GetDefaultParameters_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultParameters_NativeFunction);
        GetDefaultParameters_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultParameters_NativeFunction, "ReturnValue");
        GetActiveRecorder_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActiveRecorder");
        GetActiveRecorder_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActiveRecorder_NativeFunction);
        GetActiveRecorder_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActiveRecorder_NativeFunction, "ReturnValue");
        CancelRecording_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CancelRecording");
        
        
    }
    
    protected TakeRecorderBlueprintLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/TakeRecorder.TakeRecorderBlueprintLibrary:StopRecording
    static readonly IntPtr StopRecording_NativeFunction;
    
    public static void StopRecording()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StopRecording_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderBlueprintLibrary:StartRecording
    static readonly IntPtr StartRecording_NativeFunction;
    static readonly int StartRecording_ParamsSize;
    static readonly int StartRecording_LevelSequence_Offset;
    static readonly int StartRecording_Sources_Offset;
    static readonly int StartRecording_MetaData_Offset;
    static readonly int StartRecording_Parameters_Offset;
    static readonly int StartRecording_ReturnValue_Offset;
    
    public static UnrealSharp.TakeRecorder.TakeRecorder StartRecording(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.TakesCore.TakeRecorderSources sources, UnrealSharp.TakesCore.TakeMetaData metaData, UnrealSharp.TakeRecorder.TakeRecorderParameters parameters)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartRecording_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, StartRecording_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.TakesCore.TakeRecorderSources>.ToNative(IntPtr.Add(ParamsBuffer, StartRecording_Sources_Offset), 0, null, sources);
            ObjectMarshaller<UnrealSharp.TakesCore.TakeMetaData>.ToNative(IntPtr.Add(ParamsBuffer, StartRecording_MetaData_Offset), 0, null, metaData);
            UnrealSharp.TakeRecorder.TakeRecorderParametersMarshaler.ToNative(IntPtr.Add(ParamsBuffer, StartRecording_Parameters_Offset), 0, null, parameters);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StartRecording_NativeFunction, ParamsBuffer);
            
            UnrealSharp.TakeRecorder.TakeRecorder returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.TakeRecorder.TakeRecorder>.FromNative(IntPtr.Add(ParamsBuffer, StartRecording_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderBlueprintLibrary:SetDefaultParameters
    static readonly IntPtr SetDefaultParameters_NativeFunction;
    static readonly int SetDefaultParameters_ParamsSize;
    static readonly int SetDefaultParameters_DefaultParameters_Offset;
    
    public static void SetDefaultParameters(UnrealSharp.TakeRecorder.TakeRecorderParameters defaultParameters)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultParameters_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.TakeRecorder.TakeRecorderParametersMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultParameters_DefaultParameters_Offset), 0, null, defaultParameters);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetDefaultParameters_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderBlueprintLibrary:OpenTakeRecorderPanel
    static readonly IntPtr OpenTakeRecorderPanel_NativeFunction;
    static readonly int OpenTakeRecorderPanel_ParamsSize;
    static readonly int OpenTakeRecorderPanel_ReturnValue_Offset;
    
    public static UnrealSharp.TakeRecorder.TakeRecorderPanel OpenTakeRecorderPanel()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[OpenTakeRecorderPanel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, OpenTakeRecorderPanel_NativeFunction, ParamsBuffer);
            
            UnrealSharp.TakeRecorder.TakeRecorderPanel returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.TakeRecorder.TakeRecorderPanel>.FromNative(IntPtr.Add(ParamsBuffer, OpenTakeRecorderPanel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderBlueprintLibrary:IsTakeRecorderEnabled
    static readonly IntPtr IsTakeRecorderEnabled_NativeFunction;
    static readonly int IsTakeRecorderEnabled_ParamsSize;
    static readonly int IsTakeRecorderEnabled_ReturnValue_Offset;
    
    public static bool IsTakeRecorderEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsTakeRecorderEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsTakeRecorderEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsTakeRecorderEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderBlueprintLibrary:IsRecording
    static readonly IntPtr IsRecording_NativeFunction;
    static readonly int IsRecording_ParamsSize;
    static readonly int IsRecording_ReturnValue_Offset;
    
    public static bool IsRecording()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRecording_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsRecording_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRecording_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderBlueprintLibrary:GetTakeRecorderPanel
    static readonly IntPtr GetTakeRecorderPanel_NativeFunction;
    static readonly int GetTakeRecorderPanel_ParamsSize;
    static readonly int GetTakeRecorderPanel_ReturnValue_Offset;
    
    public static UnrealSharp.TakeRecorder.TakeRecorderPanel GetTakeRecorderPanel()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTakeRecorderPanel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTakeRecorderPanel_NativeFunction, ParamsBuffer);
            
            UnrealSharp.TakeRecorder.TakeRecorderPanel returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.TakeRecorder.TakeRecorderPanel>.FromNative(IntPtr.Add(ParamsBuffer, GetTakeRecorderPanel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderBlueprintLibrary:GetDefaultParameters
    static readonly IntPtr GetDefaultParameters_NativeFunction;
    static readonly int GetDefaultParameters_ParamsSize;
    static readonly int GetDefaultParameters_ReturnValue_Offset;
    
    public static UnrealSharp.TakeRecorder.TakeRecorderParameters GetDefaultParameters()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultParameters_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDefaultParameters_NativeFunction, ParamsBuffer);
            
            UnrealSharp.TakeRecorder.TakeRecorderParameters returnValue;
            returnValue = UnrealSharp.TakeRecorder.TakeRecorderParametersMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultParameters_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderBlueprintLibrary:GetActiveRecorder
    static readonly IntPtr GetActiveRecorder_NativeFunction;
    static readonly int GetActiveRecorder_ParamsSize;
    static readonly int GetActiveRecorder_ReturnValue_Offset;
    
    public static UnrealSharp.TakeRecorder.TakeRecorder GetActiveRecorder()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActiveRecorder_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetActiveRecorder_NativeFunction, ParamsBuffer);
            
            UnrealSharp.TakeRecorder.TakeRecorder returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.TakeRecorder.TakeRecorder>.FromNative(IntPtr.Add(ParamsBuffer, GetActiveRecorder_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderBlueprintLibrary:CancelRecording
    static readonly IntPtr CancelRecording_NativeFunction;
    
    public static void CancelRecording()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CancelRecording_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
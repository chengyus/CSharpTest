// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.TakeRecorder;

[UClass]
public partial class TakeRecorderPanel : UnrealSharp.CoreUObject.Object
{
    
    static TakeRecorderPanel()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TakeRecorderPanel");
        
        
        StopRecording_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopRecording");
        StartRecording_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartRecording");
        SetupForViewing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetupForViewing");
        SetupForViewing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetupForViewing_NativeFunction);
        SetupForViewing_LevelSequenceAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetupForViewing_NativeFunction, "LevelSequenceAsset");
        SetupForRecordingInto_LevelSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetupForRecordingInto_LevelSequence");
        SetupForRecordingInto_LevelSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetupForRecordingInto_LevelSequence_NativeFunction);
        SetupForRecordingInto_LevelSequence_LevelSequenceAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetupForRecordingInto_LevelSequence_NativeFunction, "LevelSequenceAsset");
        SetupForRecording_TakePreset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetupForRecording_TakePreset");
        SetupForRecording_TakePreset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetupForRecording_TakePreset_NativeFunction);
        SetupForRecording_TakePreset_TakePresetAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetupForRecording_TakePreset_NativeFunction, "TakePresetAsset");
        SetupForRecording_LevelSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetupForRecording_LevelSequence");
        SetupForRecording_LevelSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetupForRecording_LevelSequence_NativeFunction);
        SetupForRecording_LevelSequence_LevelSequenceAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetupForRecording_LevelSequence_NativeFunction, "LevelSequenceAsset");
        SetupForEditing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetupForEditing");
        SetupForEditing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetupForEditing_NativeFunction);
        SetupForEditing_TakePreset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetupForEditing_NativeFunction, "TakePreset");
        SetFrameRateFromTimecode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFrameRateFromTimecode");
        SetFrameRateFromTimecode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFrameRateFromTimecode_NativeFunction);
        SetFrameRateFromTimecode_bInFromTimecode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFrameRateFromTimecode_NativeFunction, "bInFromTimecode");
        SetFrameRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFrameRate");
        SetFrameRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFrameRate_NativeFunction);
        SetFrameRate_InFrameRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFrameRate_NativeFunction, "InFrameRate");
        NewTake_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NewTake");
        GetTakeMetaData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTakeMetaData");
        GetTakeMetaData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTakeMetaData_NativeFunction);
        GetTakeMetaData_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTakeMetaData_NativeFunction, "ReturnValue");
        GetSources_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSources");
        GetSources_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSources_NativeFunction);
        GetSources_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSources_NativeFunction, "ReturnValue");
        GetMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMode");
        GetMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMode_NativeFunction);
        GetMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMode_NativeFunction, "ReturnValue");
        GetLevelSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLevelSequence");
        GetLevelSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLevelSequence_NativeFunction);
        GetLevelSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLevelSequence_NativeFunction, "ReturnValue");
        GetLastRecordedLevelSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLastRecordedLevelSequence");
        GetLastRecordedLevelSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLastRecordedLevelSequence_NativeFunction);
        GetLastRecordedLevelSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLastRecordedLevelSequence_NativeFunction, "ReturnValue");
        GetFrameRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFrameRate");
        GetFrameRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFrameRate_NativeFunction);
        GetFrameRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFrameRate_NativeFunction, "ReturnValue");
        ClearPendingTake_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearPendingTake");
        
        
    }
    
    protected TakeRecorderPanel(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/TakeRecorder.TakeRecorderPanel:StopRecording
    static readonly IntPtr StopRecording_NativeFunction;
    
    public void StopRecording()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopRecording_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:StartRecording
    static readonly IntPtr StartRecording_NativeFunction;
    
    public void StartRecording()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StartRecording_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:SetupForViewing
    static readonly IntPtr SetupForViewing_NativeFunction;
    static readonly int SetupForViewing_ParamsSize;
    static readonly int SetupForViewing_LevelSequenceAsset_Offset;
    
    public void SetupForViewing(UnrealSharp.LevelSequence.LevelSequence levelSequenceAsset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetupForViewing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetupForViewing_LevelSequenceAsset_Offset), 0, null, levelSequenceAsset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetupForViewing_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:SetupForRecordingInto_LevelSequence
    static readonly IntPtr SetupForRecordingInto_LevelSequence_NativeFunction;
    static readonly int SetupForRecordingInto_LevelSequence_ParamsSize;
    static readonly int SetupForRecordingInto_LevelSequence_LevelSequenceAsset_Offset;
    
    public void SetupForRecordingInto_LevelSequence(UnrealSharp.LevelSequence.LevelSequence levelSequenceAsset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetupForRecordingInto_LevelSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetupForRecordingInto_LevelSequence_LevelSequenceAsset_Offset), 0, null, levelSequenceAsset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetupForRecordingInto_LevelSequence_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:SetupForRecording_TakePreset
    static readonly IntPtr SetupForRecording_TakePreset_NativeFunction;
    static readonly int SetupForRecording_TakePreset_ParamsSize;
    static readonly int SetupForRecording_TakePreset_TakePresetAsset_Offset;
    
    public void SetupForRecording_TakePreset(UnrealSharp.TakesCore.TakePreset takePresetAsset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetupForRecording_TakePreset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.TakesCore.TakePreset>.ToNative(IntPtr.Add(ParamsBuffer, SetupForRecording_TakePreset_TakePresetAsset_Offset), 0, null, takePresetAsset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetupForRecording_TakePreset_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:SetupForRecording_LevelSequence
    static readonly IntPtr SetupForRecording_LevelSequence_NativeFunction;
    static readonly int SetupForRecording_LevelSequence_ParamsSize;
    static readonly int SetupForRecording_LevelSequence_LevelSequenceAsset_Offset;
    
    public void SetupForRecording_LevelSequence(UnrealSharp.LevelSequence.LevelSequence levelSequenceAsset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetupForRecording_LevelSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetupForRecording_LevelSequence_LevelSequenceAsset_Offset), 0, null, levelSequenceAsset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetupForRecording_LevelSequence_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:SetupForEditing
    static readonly IntPtr SetupForEditing_NativeFunction;
    static readonly int SetupForEditing_ParamsSize;
    static readonly int SetupForEditing_TakePreset_Offset;
    
    public void SetupForEditing(UnrealSharp.TakesCore.TakePreset takePreset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetupForEditing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.TakesCore.TakePreset>.ToNative(IntPtr.Add(ParamsBuffer, SetupForEditing_TakePreset_Offset), 0, null, takePreset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetupForEditing_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:SetFrameRateFromTimecode
    static readonly IntPtr SetFrameRateFromTimecode_NativeFunction;
    static readonly int SetFrameRateFromTimecode_ParamsSize;
    static readonly int SetFrameRateFromTimecode_bInFromTimecode_Offset;
    
    public void SetFrameRateFromTimecode(bool bInFromTimecode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFrameRateFromTimecode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetFrameRateFromTimecode_bInFromTimecode_Offset), 0, null, bInFromTimecode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFrameRateFromTimecode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:SetFrameRate
    static readonly IntPtr SetFrameRate_NativeFunction;
    static readonly int SetFrameRate_ParamsSize;
    static readonly int SetFrameRate_InFrameRate_Offset;
    
    public void SetFrameRate(UnrealSharp.CoreUObject.FrameRate inFrameRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFrameRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameRate>.ToNative(IntPtr.Add(ParamsBuffer, SetFrameRate_InFrameRate_Offset), 0, null, inFrameRate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFrameRate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:NewTake
    static readonly IntPtr NewTake_NativeFunction;
    
    [Obsolete("Please use ClearPendingTake instead")]
    public void NewTake()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, NewTake_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:GetTakeMetaData
    static readonly IntPtr GetTakeMetaData_NativeFunction;
    static readonly int GetTakeMetaData_ParamsSize;
    static readonly int GetTakeMetaData_ReturnValue_Offset;
    
    public UnrealSharp.TakesCore.TakeMetaData GetTakeMetaData()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTakeMetaData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTakeMetaData_NativeFunction, ParamsBuffer);
            
            UnrealSharp.TakesCore.TakeMetaData returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.TakesCore.TakeMetaData>.FromNative(IntPtr.Add(ParamsBuffer, GetTakeMetaData_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:GetSources
    static readonly IntPtr GetSources_NativeFunction;
    static readonly int GetSources_ParamsSize;
    static readonly int GetSources_ReturnValue_Offset;
    
    public UnrealSharp.TakesCore.TakeRecorderSources GetSources()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSources_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSources_NativeFunction, ParamsBuffer);
            
            UnrealSharp.TakesCore.TakeRecorderSources returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.TakesCore.TakeRecorderSources>.FromNative(IntPtr.Add(ParamsBuffer, GetSources_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:GetMode
    static readonly IntPtr GetMode_NativeFunction;
    static readonly int GetMode_ParamsSize;
    static readonly int GetMode_ReturnValue_Offset;
    
    public UnrealSharp.TakeRecorder.ETakeRecorderPanelMode GetMode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.TakeRecorder.ETakeRecorderPanelMode returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.TakeRecorder.ETakeRecorderPanelMode>.FromNative(IntPtr.Add(ParamsBuffer, GetMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:GetLevelSequence
    static readonly IntPtr GetLevelSequence_NativeFunction;
    static readonly int GetLevelSequence_ParamsSize;
    static readonly int GetLevelSequence_ReturnValue_Offset;
    
    public UnrealSharp.LevelSequence.LevelSequence GetLevelSequence()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLevelSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLevelSequence_NativeFunction, ParamsBuffer);
            
            UnrealSharp.LevelSequence.LevelSequence returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.FromNative(IntPtr.Add(ParamsBuffer, GetLevelSequence_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:GetLastRecordedLevelSequence
    static readonly IntPtr GetLastRecordedLevelSequence_NativeFunction;
    static readonly int GetLastRecordedLevelSequence_ParamsSize;
    static readonly int GetLastRecordedLevelSequence_ReturnValue_Offset;
    
    public UnrealSharp.LevelSequence.LevelSequence GetLastRecordedLevelSequence()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLastRecordedLevelSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLastRecordedLevelSequence_NativeFunction, ParamsBuffer);
            
            UnrealSharp.LevelSequence.LevelSequence returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.FromNative(IntPtr.Add(ParamsBuffer, GetLastRecordedLevelSequence_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:GetFrameRate
    static readonly IntPtr GetFrameRate_NativeFunction;
    static readonly int GetFrameRate_ParamsSize;
    static readonly int GetFrameRate_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.FrameRate GetFrameRate()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFrameRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFrameRate_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.FrameRate returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.FrameRate>.FromNative(IntPtr.Add(ParamsBuffer, GetFrameRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TakeRecorder.TakeRecorderPanel:ClearPendingTake
    static readonly IntPtr ClearPendingTake_NativeFunction;
    
    public void ClearPendingTake()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearPendingTake_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
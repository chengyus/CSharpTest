// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.TakeRecorderSources;

[UClass]
public partial class TakeRecorderLevelSequenceSource : UnrealSharp.TakesCore.TakeRecorderSource
{
    
    static TakeRecorderLevelSequenceSource()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TakeRecorderLevelSequenceSource");
        
        LevelSequencesToTrigger_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LevelSequencesToTrigger");
        LevelSequencesToTrigger_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "LevelSequencesToTrigger");
        
        
        
    }
    
    protected TakeRecorderLevelSequenceSource(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ArrayProperty /Script/TakeRecorderSources.TakeRecorderLevelSequenceSource:LevelSequencesToTrigger
    static readonly int LevelSequencesToTrigger_Offset;
    static readonly IntPtr LevelSequencesToTrigger_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.LevelSequence.LevelSequence> LevelSequencesToTrigger_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.LevelSequence.LevelSequence> LevelSequencesToTrigger
    {
        get
        {
            if(LevelSequencesToTrigger_Wrapper == null)
            {
                LevelSequencesToTrigger_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.LevelSequence.LevelSequence>(1, LevelSequencesToTrigger_NativeProperty, ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative, ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.FromNative);
            }
            
            return LevelSequencesToTrigger_Wrapper.FromNative(IntPtr.Add(NativeObject,LevelSequencesToTrigger_Offset),0,this);
        }
    }
    
    
}
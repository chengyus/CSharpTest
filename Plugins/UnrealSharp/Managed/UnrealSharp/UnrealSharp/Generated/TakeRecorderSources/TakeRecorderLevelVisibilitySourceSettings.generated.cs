// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.TakeRecorderSources;

[UClass]
abstract public partial class TakeRecorderLevelVisibilitySourceSettings : UnrealSharp.TakesCore.TakeRecorderSource
{
    
    static TakeRecorderLevelVisibilitySourceSettings()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TakeRecorderLevelVisibilitySourceSettings");
        
        LevelVisibilityTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LevelVisibilityTrackName");
        LevelVisibilityTrackName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "LevelVisibilityTrackName");
        
        
        
    }
    
    protected TakeRecorderLevelVisibilitySourceSettings(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // TextProperty /Script/TakeRecorderSources.TakeRecorderLevelVisibilitySourceSettings:LevelVisibilityTrackName
    static readonly int LevelVisibilityTrackName_Offset;
    static readonly IntPtr LevelVisibilityTrackName_NativeProperty;
    TextMarshaller LevelVisibilityTrackName_Wrapper;
    
    public Text LevelVisibilityTrackName
    {
        get
        {
            if (LevelVisibilityTrackName_Wrapper == null)
            {
                LevelVisibilityTrackName_Wrapper  = new TextMarshaller(1);
            }
            return LevelVisibilityTrackName_Wrapper.FromNative(this.NativeObject + LevelVisibilityTrackName_Offset, 0, this);
        }
    }
    
    
}
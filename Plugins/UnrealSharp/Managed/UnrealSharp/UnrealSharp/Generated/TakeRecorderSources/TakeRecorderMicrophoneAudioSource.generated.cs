// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.TakeRecorderSources;

[UClass]
public partial class TakeRecorderMicrophoneAudioSource : UnrealSharp.TakeRecorderSources.TakeRecorderMicrophoneAudioSourceSettings
{
    
    static TakeRecorderMicrophoneAudioSource()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TakeRecorderMicrophoneAudioSource");
        
        AudioGain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AudioGain");
        bReplaceRecordedAudio_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReplaceRecordedAudio");
        AudioChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AudioChannel");
        
        
        
    }
    
    protected TakeRecorderMicrophoneAudioSource(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/TakeRecorderSources.TakeRecorderMicrophoneAudioSource:AudioGain
    static readonly int AudioGain_Offset;
    
    public float AudioGain
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AudioGain_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AudioGain_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/TakeRecorderSources.TakeRecorderMicrophoneAudioSource:bReplaceRecordedAudio
    static readonly int bReplaceRecordedAudio_Offset;
    
    public bool bReplaceRecordedAudio
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bReplaceRecordedAudio_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bReplaceRecordedAudio_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/TakeRecorderSources.TakeRecorderMicrophoneAudioSource:AudioChannel
    static readonly int AudioChannel_Offset;
    
    public UnrealSharp.TakesCore.AudioInputDeviceChannelProperty AudioChannel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.TakesCore.AudioInputDeviceChannelProperty>.FromNative(IntPtr.Add(NativeObject, AudioChannel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.TakesCore.AudioInputDeviceChannelProperty>.ToNative(IntPtr.Add(NativeObject, AudioChannel_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.TakeRecorderSources;

[UClass]
abstract public partial class TakeRecorderMicrophoneAudioSourceSettings : UnrealSharp.TakesCore.TakeRecorderSource
{
    
    static TakeRecorderMicrophoneAudioSourceSettings()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TakeRecorderMicrophoneAudioSourceSettings");
        
        AudioSourceName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AudioSourceName");
        AudioSourceName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AudioSourceName");
        AudioTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AudioTrackName");
        AudioTrackName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AudioTrackName");
        AudioAssetName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AudioAssetName");
        AudioAssetName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AudioAssetName");
        AudioSubDirectory_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AudioSubDirectory");
        AudioSubDirectory_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AudioSubDirectory");
        
        
        
    }
    
    protected TakeRecorderMicrophoneAudioSourceSettings(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // TextProperty /Script/TakeRecorderSources.TakeRecorderMicrophoneAudioSourceSettings:AudioSourceName
    static readonly int AudioSourceName_Offset;
    static readonly IntPtr AudioSourceName_NativeProperty;
    TextMarshaller AudioSourceName_Wrapper;
    
    public Text AudioSourceName
    {
        get
        {
            if (AudioSourceName_Wrapper == null)
            {
                AudioSourceName_Wrapper  = new TextMarshaller(1);
            }
            return AudioSourceName_Wrapper.FromNative(this.NativeObject + AudioSourceName_Offset, 0, this);
        }
    }
    
    // TextProperty /Script/TakeRecorderSources.TakeRecorderMicrophoneAudioSourceSettings:AudioTrackName
    static readonly int AudioTrackName_Offset;
    static readonly IntPtr AudioTrackName_NativeProperty;
    TextMarshaller AudioTrackName_Wrapper;
    
    public Text AudioTrackName
    {
        get
        {
            if (AudioTrackName_Wrapper == null)
            {
                AudioTrackName_Wrapper  = new TextMarshaller(1);
            }
            return AudioTrackName_Wrapper.FromNative(this.NativeObject + AudioTrackName_Offset, 0, this);
        }
    }
    
    // StrProperty /Script/TakeRecorderSources.TakeRecorderMicrophoneAudioSourceSettings:AudioAssetName
    static readonly int AudioAssetName_Offset;
    static readonly IntPtr AudioAssetName_NativeProperty;
    
    public string AudioAssetName
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,AudioAssetName_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,AudioAssetName_Offset),0,this,value);
        }
    }
    
    // StrProperty /Script/TakeRecorderSources.TakeRecorderMicrophoneAudioSourceSettings:AudioSubDirectory
    static readonly int AudioSubDirectory_Offset;
    static readonly IntPtr AudioSubDirectory_NativeProperty;
    
    public string AudioSubDirectory
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,AudioSubDirectory_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,AudioSubDirectory_Offset),0,this,value);
        }
    }
    
    
}
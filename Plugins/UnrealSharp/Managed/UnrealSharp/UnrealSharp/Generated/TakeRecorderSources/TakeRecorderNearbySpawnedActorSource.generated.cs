// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.TakeRecorderSources;

[UClass]
public partial class TakeRecorderNearbySpawnedActorSource : UnrealSharp.TakesCore.TakeRecorderSource
{
    
    static TakeRecorderNearbySpawnedActorSource()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TakeRecorderNearbySpawnedActorSource");
        
        Proximity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Proximity");
        bFilterSpawnedActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bFilterSpawnedActors");
        FilterTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FilterTypes");
        FilterTypes_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "FilterTypes");
        
        
        
    }
    
    protected TakeRecorderNearbySpawnedActorSource(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/TakeRecorderSources.TakeRecorderNearbySpawnedActorSource:Proximity
    static readonly int Proximity_Offset;
    
    public float Proximity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Proximity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Proximity_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/TakeRecorderSources.TakeRecorderNearbySpawnedActorSource:bFilterSpawnedActors
    static readonly int bFilterSpawnedActors_Offset;
    
    public bool bFilterSpawnedActors
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bFilterSpawnedActors_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bFilterSpawnedActors_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/TakeRecorderSources.TakeRecorderNearbySpawnedActorSource:FilterTypes
    static readonly int FilterTypes_Offset;
    static readonly IntPtr FilterTypes_NativeProperty;
    UnrealArrayReadWriteMarshaler<SubclassOf<UnrealSharp.Engine.Actor>> FilterTypes_Wrapper = null;
    
    public System.Collections.Generic.IList<SubclassOf<UnrealSharp.Engine.Actor>> FilterTypes
    {
        get
        {
            if(FilterTypes_Wrapper == null)
            {
                FilterTypes_Wrapper = new UnrealArrayReadWriteMarshaler<SubclassOf<UnrealSharp.Engine.Actor>>(1, FilterTypes_NativeProperty, SubclassOfMarshaller<UnrealSharp.Engine.Actor>.ToNative, SubclassOfMarshaller<UnrealSharp.Engine.Actor>.FromNative);
            }
            
            return FilterTypes_Wrapper.FromNative(IntPtr.Add(NativeObject,FilterTypes_Offset),0,this);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.TakeRecorderSources;

[UClass]
abstract public partial class TakeRecorderWorldSourceSettings : UnrealSharp.TakesCore.TakeRecorderSource
{
    
    static TakeRecorderWorldSourceSettings()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TakeRecorderWorldSourceSettings");
        
        bRecordWorldSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRecordWorldSettings");
        bAutotrackActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutotrackActors");
        
        
        
    }
    
    protected TakeRecorderWorldSourceSettings(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/TakeRecorderSources.TakeRecorderWorldSourceSettings:bRecordWorldSettings
    static readonly int bRecordWorldSettings_Offset;
    
    public bool bRecordWorldSettings
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bRecordWorldSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bRecordWorldSettings_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/TakeRecorderSources.TakeRecorderWorldSourceSettings:bAutotrackActors
    static readonly int bAutotrackActors_Offset;
    
    public bool bAutotrackActors
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAutotrackActors_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAutotrackActors_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.TakeTrackRecorders;

[UClass]
abstract public partial class MovieSceneAnimationTrackRecorderEditorSettings : UnrealSharp.TakeTrackRecorders.MovieSceneTrackRecorderSettings
{
    
    static MovieSceneAnimationTrackRecorderEditorSettings()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MovieSceneAnimationTrackRecorderEditorSettings");
        
        AnimationTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AnimationTrackName");
        AnimationTrackName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AnimationTrackName");
        AnimationAssetName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AnimationAssetName");
        AnimationAssetName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AnimationAssetName");
        AnimationSubDirectory_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AnimationSubDirectory");
        AnimationSubDirectory_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AnimationSubDirectory");
        bRemoveRootAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRemoveRootAnimation");
        TimecodeBoneMethod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TimecodeBoneMethod");
        
        
        
    }
    
    protected MovieSceneAnimationTrackRecorderEditorSettings(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // TextProperty /Script/TakeTrackRecorders.MovieSceneAnimationTrackRecorderEditorSettings:AnimationTrackName
    static readonly int AnimationTrackName_Offset;
    static readonly IntPtr AnimationTrackName_NativeProperty;
    TextMarshaller AnimationTrackName_Wrapper;
    
    public Text AnimationTrackName
    {
        get
        {
            if (AnimationTrackName_Wrapper == null)
            {
                AnimationTrackName_Wrapper  = new TextMarshaller(1);
            }
            return AnimationTrackName_Wrapper.FromNative(this.NativeObject + AnimationTrackName_Offset, 0, this);
        }
    }
    
    // StrProperty /Script/TakeTrackRecorders.MovieSceneAnimationTrackRecorderEditorSettings:AnimationAssetName
    static readonly int AnimationAssetName_Offset;
    static readonly IntPtr AnimationAssetName_NativeProperty;
    
    public string AnimationAssetName
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,AnimationAssetName_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,AnimationAssetName_Offset),0,this,value);
        }
    }
    
    // StrProperty /Script/TakeTrackRecorders.MovieSceneAnimationTrackRecorderEditorSettings:AnimationSubDirectory
    static readonly int AnimationSubDirectory_Offset;
    static readonly IntPtr AnimationSubDirectory_NativeProperty;
    
    public string AnimationSubDirectory
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,AnimationSubDirectory_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,AnimationSubDirectory_Offset),0,this,value);
        }
    }
    
    // BoolProperty /Script/TakeTrackRecorders.MovieSceneAnimationTrackRecorderEditorSettings:bRemoveRootAnimation
    static readonly int bRemoveRootAnimation_Offset;
    
    public bool bRemoveRootAnimation
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bRemoveRootAnimation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bRemoveRootAnimation_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/TakeTrackRecorders.MovieSceneAnimationTrackRecorderEditorSettings:TimecodeBoneMethod
    static readonly int TimecodeBoneMethod_Offset;
    
    public UnrealSharp.SequenceRecorder.TimecodeBoneMethod TimecodeBoneMethod
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SequenceRecorder.TimecodeBoneMethodMarshaler.FromNative(IntPtr.Add(NativeObject, TimecodeBoneMethod_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SequenceRecorder.TimecodeBoneMethodMarshaler.ToNative(IntPtr.Add(NativeObject, TimecodeBoneMethod_Offset), 0, this, value);
        }
    }
    
    
}
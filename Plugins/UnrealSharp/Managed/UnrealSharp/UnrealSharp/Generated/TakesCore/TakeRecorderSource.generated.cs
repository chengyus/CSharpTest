// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.TakesCore;

[UClass]
abstract public partial class TakeRecorderSource : UnrealSharp.CoreUObject.Object
{
    
    static TakeRecorderSource()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TakeRecorderSource");
        
        bEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnabled");
        TakeNumber_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TakeNumber");
        TrackTint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TrackTint");
        
        
        
    }
    
    protected TakeRecorderSource(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/TakesCore.TakeRecorderSource:bEnabled
    static readonly int bEnabled_Offset;
    
    public bool bEnabled
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnabled_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bEnabled_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/TakesCore.TakeRecorderSource:TakeNumber
    static readonly int TakeNumber_Offset;
    
    public int TakeNumber
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, TakeNumber_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, TakeNumber_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/TakesCore.TakeRecorderSource:TrackTint
    static readonly int TrackTint_Offset;
    
    public UnrealSharp.CoreUObject.Color TrackTint
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, TrackTint_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(NativeObject, TrackTint_Offset), 0, this, value);
        }
    }
    
    
}
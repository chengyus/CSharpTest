// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.TakesCore;

[UClass]
public partial class TakeRecorderSources : UnrealSharp.CoreUObject.Object
{
    
    static TakeRecorderSources()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TakeRecorderSources");
        
        
        StartRecordingSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartRecordingSource");
        StartRecordingSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartRecordingSource_NativeFunction);
        StartRecordingSource_InSources_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartRecordingSource_NativeFunction, "InSources");
        StartRecordingSource_InSources_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(StartRecordingSource_NativeFunction, "InSources");
        StartRecordingSource_CurrentFrameTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartRecordingSource_NativeFunction, "CurrentFrameTime");
        RemoveSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveSource");
        RemoveSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveSource_NativeFunction);
        RemoveSource_InSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSource_NativeFunction, "InSource");
        GetSourcesCopy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSourcesCopy");
        GetSourcesCopy_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSourcesCopy_NativeFunction);
        GetSourcesCopy_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSourcesCopy_NativeFunction, "ReturnValue");
        GetSourcesCopy_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSourcesCopy_NativeFunction, "ReturnValue");
        AddSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddSource");
        AddSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddSource_NativeFunction);
        AddSource_InSourceType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSource_NativeFunction, "InSourceType");
        AddSource_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSource_NativeFunction, "ReturnValue");
        
        
    }
    
    protected TakeRecorderSources(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/TakesCore.TakeRecorderSources:StartRecordingSource
    static readonly IntPtr StartRecordingSource_NativeFunction;
    static readonly int StartRecordingSource_ParamsSize;
    static readonly int StartRecordingSource_InSources_Offset;
    static readonly int StartRecordingSource_InSources_ElementSize;
    static readonly int StartRecordingSource_CurrentFrameTime_Offset;
    
    public void StartRecordingSource(System.Collections.Generic.IList<UnrealSharp.TakesCore.TakeRecorderSource> inSources, UnrealSharp.CoreUObject.QualifiedTime currentFrameTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartRecordingSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InSources_NativeBuffer = IntPtr.Add(ParamsBuffer, StartRecordingSource_InSources_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.TakesCore.TakeRecorderSource> InSources_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.TakesCore.TakeRecorderSource>(1, ObjectMarshaller<UnrealSharp.TakesCore.TakeRecorderSource>.ToNative, ObjectMarshaller<UnrealSharp.TakesCore.TakeRecorderSource>.FromNative, StartRecordingSource_InSources_ElementSize);
            InSources_Marshaler.ToNative(InSources_NativeBuffer, 0, null, inSources);
            BlittableMarshaller<UnrealSharp.CoreUObject.QualifiedTime>.ToNative(IntPtr.Add(ParamsBuffer, StartRecordingSource_CurrentFrameTime_Offset), 0, null, currentFrameTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StartRecordingSource_NativeFunction, ParamsBuffer);
            
            
            UnrealArrayCopyMarshaler<UnrealSharp.TakesCore.TakeRecorderSource>.DestructInstance(InSources_NativeBuffer, 0);
        }
    }
    
    // Function /Script/TakesCore.TakeRecorderSources:RemoveSource
    static readonly IntPtr RemoveSource_NativeFunction;
    static readonly int RemoveSource_ParamsSize;
    static readonly int RemoveSource_InSource_Offset;
    
    public void RemoveSource(UnrealSharp.TakesCore.TakeRecorderSource inSource)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.TakesCore.TakeRecorderSource>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSource_InSource_Offset), 0, null, inSource);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveSource_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/TakesCore.TakeRecorderSources:GetSourcesCopy
    static readonly IntPtr GetSourcesCopy_NativeFunction;
    static readonly int GetSourcesCopy_ParamsSize;
    static readonly int GetSourcesCopy_ReturnValue_Offset;
    static readonly int GetSourcesCopy_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.TakesCore.TakeRecorderSource> GetSourcesCopy()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSourcesCopy_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSourcesCopy_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.TakesCore.TakeRecorderSource> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSourcesCopy_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.TakesCore.TakeRecorderSource> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.TakesCore.TakeRecorderSource> (1, ObjectMarshaller<UnrealSharp.TakesCore.TakeRecorderSource>.ToNative, ObjectMarshaller<UnrealSharp.TakesCore.TakeRecorderSource>.FromNative, GetSourcesCopy_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.TakesCore.TakeRecorderSource>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/TakesCore.TakeRecorderSources:AddSource
    static readonly IntPtr AddSource_NativeFunction;
    static readonly int AddSource_ParamsSize;
    static readonly int AddSource_InSourceType_Offset;
    static readonly int AddSource_ReturnValue_Offset;
    
    public UnrealSharp.TakesCore.TakeRecorderSource AddSource(SubclassOf<UnrealSharp.TakesCore.TakeRecorderSource> inSourceType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.TakesCore.TakeRecorderSource>.ToNative(IntPtr.Add(ParamsBuffer, AddSource_InSourceType_Offset), 0, null, inSourceType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddSource_NativeFunction, ParamsBuffer);
            
            UnrealSharp.TakesCore.TakeRecorderSource returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.TakesCore.TakeRecorderSource>.FromNative(IntPtr.Add(ParamsBuffer, AddSource_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
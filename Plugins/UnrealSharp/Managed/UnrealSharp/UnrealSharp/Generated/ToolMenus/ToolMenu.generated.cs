// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ToolMenus;

[UClass]
public partial class ToolMenu : UnrealSharp.Slate.ToolMenuBase
{
    
    static ToolMenu()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ToolMenu");
        
        MenuName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MenuName");
        MenuParent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MenuParent");
        StyleName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StyleName");
        TutorialHighlightName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TutorialHighlightName");
        MenuType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MenuType");
        bShouldCloseWindowAfterMenuSelection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShouldCloseWindowAfterMenuSelection");
        bCloseSelfOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCloseSelfOnly");
        bSearchable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSearchable");
        bToolBarIsFocusable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bToolBarIsFocusable");
        bToolBarForceSmallIcons_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bToolBarForceSmallIcons");
        bPreventCustomization_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPreventCustomization");
        MenuOwner_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MenuOwner");
        
        InitMenu_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InitMenu");
        InitMenu_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InitMenu_NativeFunction);
        InitMenu_Owner_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitMenu_NativeFunction, "Owner");
        InitMenu_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitMenu_NativeFunction, "Name");
        InitMenu_Parent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitMenu_NativeFunction, "Parent");
        InitMenu_Type_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitMenu_NativeFunction, "Type");
        AddMenuEntryObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddMenuEntryObject");
        AddMenuEntryObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddMenuEntryObject_NativeFunction);
        AddMenuEntryObject_InObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMenuEntryObject_NativeFunction, "InObject");
        AddMenuEntry_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddMenuEntry");
        AddMenuEntry_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddMenuEntry_NativeFunction);
        AddMenuEntry_SectionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMenuEntry_NativeFunction, "SectionName");
        AddMenuEntry_Args_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMenuEntry_NativeFunction, "Args");
        AddDynamicSectionScript_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddDynamicSectionScript");
        AddDynamicSectionScript_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddDynamicSectionScript_NativeFunction);
        AddDynamicSectionScript_SectionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddDynamicSectionScript_NativeFunction, "SectionName");
        AddDynamicSectionScript_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddDynamicSectionScript_NativeFunction, "Object");
        
        
    }
    
    protected ToolMenu(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // NameProperty /Script/ToolMenus.ToolMenu:MenuName
    static readonly int MenuName_Offset;
    
    public Name MenuName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, MenuName_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, MenuName_Offset), 0, this, value);
        }
    }
    
    // NameProperty /Script/ToolMenus.ToolMenu:MenuParent
    static readonly int MenuParent_Offset;
    
    public Name MenuParent
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, MenuParent_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, MenuParent_Offset), 0, this, value);
        }
    }
    
    // NameProperty /Script/ToolMenus.ToolMenu:StyleName
    static readonly int StyleName_Offset;
    
    public Name StyleName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, StyleName_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, StyleName_Offset), 0, this, value);
        }
    }
    
    // NameProperty /Script/ToolMenus.ToolMenu:TutorialHighlightName
    static readonly int TutorialHighlightName_Offset;
    
    public Name TutorialHighlightName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, TutorialHighlightName_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, TutorialHighlightName_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/ToolMenus.ToolMenu:MenuType
    static readonly int MenuType_Offset;
    
    public UnrealSharp.Slate.EMultiBoxType MenuType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Slate.EMultiBoxType>.FromNative(IntPtr.Add(NativeObject, MenuType_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Slate.EMultiBoxType>.ToNative(IntPtr.Add(NativeObject, MenuType_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/ToolMenus.ToolMenu:bShouldCloseWindowAfterMenuSelection
    static readonly int bShouldCloseWindowAfterMenuSelection_Offset;
    
    public bool bShouldCloseWindowAfterMenuSelection
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bShouldCloseWindowAfterMenuSelection_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bShouldCloseWindowAfterMenuSelection_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/ToolMenus.ToolMenu:bCloseSelfOnly
    static readonly int bCloseSelfOnly_Offset;
    
    public bool bCloseSelfOnly
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bCloseSelfOnly_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bCloseSelfOnly_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/ToolMenus.ToolMenu:bSearchable
    static readonly int bSearchable_Offset;
    
    public bool bSearchable
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSearchable_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bSearchable_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/ToolMenus.ToolMenu:bToolBarIsFocusable
    static readonly int bToolBarIsFocusable_Offset;
    
    public bool bToolBarIsFocusable
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bToolBarIsFocusable_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bToolBarIsFocusable_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/ToolMenus.ToolMenu:bToolBarForceSmallIcons
    static readonly int bToolBarForceSmallIcons_Offset;
    
    public bool bToolBarForceSmallIcons
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bToolBarForceSmallIcons_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bToolBarForceSmallIcons_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/ToolMenus.ToolMenu:bPreventCustomization
    static readonly int bPreventCustomization_Offset;
    
    public bool bPreventCustomization
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bPreventCustomization_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bPreventCustomization_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/ToolMenus.ToolMenu:MenuOwner
    static readonly int MenuOwner_Offset;
    
    public UnrealSharp.ToolMenus.ToolMenuOwner MenuOwner
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.ToolMenus.ToolMenuOwnerMarshaler.FromNative(IntPtr.Add(NativeObject, MenuOwner_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.ToolMenus.ToolMenuOwnerMarshaler.ToNative(IntPtr.Add(NativeObject, MenuOwner_Offset), 0, this, value);
        }
    }
    
    // Function /Script/ToolMenus.ToolMenu:InitMenu
    static readonly IntPtr InitMenu_NativeFunction;
    static readonly int InitMenu_ParamsSize;
    static readonly int InitMenu_Owner_Offset;
    static readonly int InitMenu_Name_Offset;
    static readonly int InitMenu_Parent_Offset;
    static readonly int InitMenu_Type_Offset;
    
    public void InitMenu(UnrealSharp.ToolMenus.ToolMenuOwner owner, Name name, Name parent = default(Name), UnrealSharp.Slate.EMultiBoxType type = UnrealSharp.Slate.EMultiBoxType.Menu)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[InitMenu_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ToolMenus.ToolMenuOwnerMarshaler.ToNative(IntPtr.Add(ParamsBuffer, InitMenu_Owner_Offset), 0, null, owner);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, InitMenu_Name_Offset), 0, null, name);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, InitMenu_Parent_Offset), 0, null, parent);
            BlittableMarshaller<UnrealSharp.Slate.EMultiBoxType>.ToNative(IntPtr.Add(ParamsBuffer, InitMenu_Type_Offset), 0, null, type);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, InitMenu_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ToolMenus.ToolMenu:AddMenuEntryObject
    static readonly IntPtr AddMenuEntryObject_NativeFunction;
    static readonly int AddMenuEntryObject_ParamsSize;
    static readonly int AddMenuEntryObject_InObject_Offset;
    
    public void AddMenuEntryObject(UnrealSharp.ToolMenus.ToolMenuEntryScript inObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddMenuEntryObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ToolMenus.ToolMenuEntryScript>.ToNative(IntPtr.Add(ParamsBuffer, AddMenuEntryObject_InObject_Offset), 0, null, inObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddMenuEntryObject_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ToolMenus.ToolMenu:AddMenuEntry
    static readonly IntPtr AddMenuEntry_NativeFunction;
    static readonly int AddMenuEntry_ParamsSize;
    static readonly int AddMenuEntry_SectionName_Offset;
    static readonly int AddMenuEntry_Args_Offset;
    
    public void AddMenuEntry(Name sectionName, UnrealSharp.ToolMenus.ToolMenuEntry args)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddMenuEntry_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddMenuEntry_SectionName_Offset), 0, null, sectionName);
            UnrealSharp.ToolMenus.ToolMenuEntryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AddMenuEntry_Args_Offset), 0, null, args);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddMenuEntry_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ToolMenus.ToolMenu:AddDynamicSectionScript
    static readonly IntPtr AddDynamicSectionScript_NativeFunction;
    static readonly int AddDynamicSectionScript_ParamsSize;
    static readonly int AddDynamicSectionScript_SectionName_Offset;
    static readonly int AddDynamicSectionScript_Object_Offset;
    
    public void AddDynamicSection(Name sectionName, UnrealSharp.ToolMenus.ToolMenuSectionDynamic @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddDynamicSectionScript_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddDynamicSectionScript_SectionName_Offset), 0, null, sectionName);
            ObjectMarshaller<UnrealSharp.ToolMenus.ToolMenuSectionDynamic>.ToNative(IntPtr.Add(ParamsBuffer, AddDynamicSectionScript_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddDynamicSectionScript_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ToolMenus;

[UClass]
abstract public partial class ToolMenuEntryScript : UnrealSharp.CoreUObject.Object
{
    
    static ToolMenuEntryScript()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ToolMenuEntryScript");
        
        Data_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Data");
        
        RegisterMenuEntry_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RegisterMenuEntry");
        
        IntPtr IsVisible_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsVisible");
        IsVisible_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsVisible_NativeFunction);
        IsVisible_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVisible_NativeFunction, "Context");
        IsVisible_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVisible_NativeFunction, "ReturnValue");
        
        IntPtr GetIcon_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetIcon");
        GetIcon_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetIcon_NativeFunction);
        GetIcon_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIcon_NativeFunction, "Context");
        GetIcon_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIcon_NativeFunction, "ReturnValue");
        
        IntPtr GetCheckState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCheckState");
        GetCheckState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCheckState_NativeFunction);
        GetCheckState_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCheckState_NativeFunction, "Context");
        GetCheckState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCheckState_NativeFunction, "ReturnValue");
        
        IntPtr Execute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Execute");
        Execute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Execute_NativeFunction);
        Execute_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Execute_NativeFunction, "Context");
        
        IntPtr ConstructMenuEntry_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConstructMenuEntry");
        ConstructMenuEntry_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConstructMenuEntry_NativeFunction);
        ConstructMenuEntry_Menu_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConstructMenuEntry_NativeFunction, "Menu");
        ConstructMenuEntry_SectionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConstructMenuEntry_NativeFunction, "SectionName");
        ConstructMenuEntry_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConstructMenuEntry_NativeFunction, "Context");
        
        IntPtr CanExecute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanExecute");
        CanExecute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanExecute_NativeFunction);
        CanExecute_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanExecute_NativeFunction, "Context");
        CanExecute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanExecute_NativeFunction, "ReturnValue");
        
        
    }
    
    protected ToolMenuEntryScript(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/ToolMenus.ToolMenuEntryScript:Data
    static readonly int Data_Offset;
    
    public UnrealSharp.ToolMenus.ToolMenuEntryScriptData Data
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.ToolMenus.ToolMenuEntryScriptDataMarshaler.FromNative(IntPtr.Add(NativeObject, Data_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.ToolMenus.ToolMenuEntryScriptDataMarshaler.ToNative(IntPtr.Add(NativeObject, Data_Offset), 0, this, value);
        }
    }
    
    // Function /Script/ToolMenus.ToolMenuEntryScript:RegisterMenuEntry
    static readonly IntPtr RegisterMenuEntry_NativeFunction;
    
    public void RegisterMenuEntry()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RegisterMenuEntry_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/ToolMenus.ToolMenuEntryScript:IsVisible
    IntPtr IsVisible_NativeFunction;
    static readonly int IsVisible_ParamsSize;
    static readonly int IsVisible_Context_Offset;
    static readonly int IsVisible_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool IsVisible(UnrealSharp.ToolMenus.ToolMenuContext context)
    {
        unsafe
        {
            if (IsVisible_NativeFunction == IntPtr.Zero)
            {
                IsVisible_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "IsVisible");
            }
            byte* ParamsBufferAllocation = stackalloc byte[IsVisible_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ToolMenus.ToolMenuContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsVisible_Context_Offset), 0, null, context);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsVisible_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsVisible_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool IsVisible_Implementation(UnrealSharp.ToolMenus.ToolMenuContext context)
    {
        return default(bool);
    }
    void Invoke_IsVisible(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ToolMenus.ToolMenuContext context = UnrealSharp.ToolMenus.ToolMenuContextMarshaler.FromNative(IntPtr.Add(buffer, IsVisible_Context_Offset), 0, null);
            bool returnValue = IsVisible_Implementation(context);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/ToolMenus.ToolMenuEntryScript:GetIcon
    IntPtr GetIcon_NativeFunction;
    static readonly int GetIcon_ParamsSize;
    static readonly int GetIcon_Context_Offset;
    static readonly int GetIcon_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.ToolMenus.ScriptSlateIcon GetIcon(UnrealSharp.ToolMenus.ToolMenuContext context)
    {
        unsafe
        {
            if (GetIcon_NativeFunction == IntPtr.Zero)
            {
                GetIcon_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetIcon");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetIcon_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ToolMenus.ToolMenuContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetIcon_Context_Offset), 0, null, context);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetIcon_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ToolMenus.ScriptSlateIcon returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.ToolMenus.ScriptSlateIcon>.FromNative(IntPtr.Add(ParamsBuffer, GetIcon_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.ToolMenus.ScriptSlateIcon GetIcon_Implementation(UnrealSharp.ToolMenus.ToolMenuContext context)
    {
        return default(UnrealSharp.ToolMenus.ScriptSlateIcon);
    }
    void Invoke_GetIcon(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ToolMenus.ToolMenuContext context = UnrealSharp.ToolMenus.ToolMenuContextMarshaler.FromNative(IntPtr.Add(buffer, GetIcon_Context_Offset), 0, null);
            UnrealSharp.ToolMenus.ScriptSlateIcon returnValue = GetIcon_Implementation(context);
            BlittableMarshaller<UnrealSharp.ToolMenus.ScriptSlateIcon>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/ToolMenus.ToolMenuEntryScript:GetCheckState
    IntPtr GetCheckState_NativeFunction;
    static readonly int GetCheckState_ParamsSize;
    static readonly int GetCheckState_Context_Offset;
    static readonly int GetCheckState_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.SlateCore.ECheckBoxState GetCheckState(UnrealSharp.ToolMenus.ToolMenuContext context)
    {
        unsafe
        {
            if (GetCheckState_NativeFunction == IntPtr.Zero)
            {
                GetCheckState_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetCheckState");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetCheckState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ToolMenus.ToolMenuContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetCheckState_Context_Offset), 0, null, context);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCheckState_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.ECheckBoxState returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.SlateCore.ECheckBoxState>.FromNative(IntPtr.Add(ParamsBuffer, GetCheckState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.SlateCore.ECheckBoxState GetCheckState_Implementation(UnrealSharp.ToolMenus.ToolMenuContext context)
    {
        return default(UnrealSharp.SlateCore.ECheckBoxState);
    }
    void Invoke_GetCheckState(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ToolMenus.ToolMenuContext context = UnrealSharp.ToolMenus.ToolMenuContextMarshaler.FromNative(IntPtr.Add(buffer, GetCheckState_Context_Offset), 0, null);
            UnrealSharp.SlateCore.ECheckBoxState returnValue = GetCheckState_Implementation(context);
            BlittableMarshaller<UnrealSharp.SlateCore.ECheckBoxState>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/ToolMenus.ToolMenuEntryScript:Execute
    IntPtr Execute_NativeFunction;
    static readonly int Execute_ParamsSize;
    static readonly int Execute_Context_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void Execute(UnrealSharp.ToolMenus.ToolMenuContext context)
    {
        unsafe
        {
            if (Execute_NativeFunction == IntPtr.Zero)
            {
                Execute_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Execute");
            }
            byte* ParamsBufferAllocation = stackalloc byte[Execute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ToolMenus.ToolMenuContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Execute_Context_Offset), 0, null, context);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Execute_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void Execute_Implementation(UnrealSharp.ToolMenus.ToolMenuContext context)
    {
    }
    void Invoke_Execute(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ToolMenus.ToolMenuContext context = UnrealSharp.ToolMenus.ToolMenuContextMarshaler.FromNative(IntPtr.Add(buffer, Execute_Context_Offset), 0, null);
            Execute_Implementation(context);
        }
    }
    
    // Function /Script/ToolMenus.ToolMenuEntryScript:ConstructMenuEntry
    IntPtr ConstructMenuEntry_NativeFunction;
    static readonly int ConstructMenuEntry_ParamsSize;
    static readonly int ConstructMenuEntry_Menu_Offset;
    static readonly int ConstructMenuEntry_SectionName_Offset;
    static readonly int ConstructMenuEntry_Context_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ConstructMenuEntry(UnrealSharp.ToolMenus.ToolMenu menu, Name sectionName, UnrealSharp.ToolMenus.ToolMenuContext context)
    {
        unsafe
        {
            if (ConstructMenuEntry_NativeFunction == IntPtr.Zero)
            {
                ConstructMenuEntry_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ConstructMenuEntry");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ConstructMenuEntry_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ToolMenus.ToolMenu>.ToNative(IntPtr.Add(ParamsBuffer, ConstructMenuEntry_Menu_Offset), 0, null, menu);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ConstructMenuEntry_SectionName_Offset), 0, null, sectionName);
            UnrealSharp.ToolMenus.ToolMenuContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConstructMenuEntry_Context_Offset), 0, null, context);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConstructMenuEntry_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ConstructMenuEntry_Implementation(UnrealSharp.ToolMenus.ToolMenu menu, Name sectionName, UnrealSharp.ToolMenus.ToolMenuContext context)
    {
    }
    void Invoke_ConstructMenuEntry(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ToolMenus.ToolMenu menu = ObjectMarshaller<UnrealSharp.ToolMenus.ToolMenu>.FromNative(IntPtr.Add(buffer, ConstructMenuEntry_Menu_Offset), 0, null);
            Name sectionName = BlittableMarshaller<Name>.FromNative(IntPtr.Add(buffer, ConstructMenuEntry_SectionName_Offset), 0, null);
            UnrealSharp.ToolMenus.ToolMenuContext context = UnrealSharp.ToolMenus.ToolMenuContextMarshaler.FromNative(IntPtr.Add(buffer, ConstructMenuEntry_Context_Offset), 0, null);
            ConstructMenuEntry_Implementation(menu, sectionName, context);
        }
    }
    
    // Function /Script/ToolMenus.ToolMenuEntryScript:CanExecute
    IntPtr CanExecute_NativeFunction;
    static readonly int CanExecute_ParamsSize;
    static readonly int CanExecute_Context_Offset;
    static readonly int CanExecute_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool CanExecute(UnrealSharp.ToolMenus.ToolMenuContext context)
    {
        unsafe
        {
            if (CanExecute_NativeFunction == IntPtr.Zero)
            {
                CanExecute_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "CanExecute");
            }
            byte* ParamsBufferAllocation = stackalloc byte[CanExecute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ToolMenus.ToolMenuContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, CanExecute_Context_Offset), 0, null, context);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanExecute_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanExecute_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool CanExecute_Implementation(UnrealSharp.ToolMenus.ToolMenuContext context)
    {
        return default(bool);
    }
    void Invoke_CanExecute(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ToolMenus.ToolMenuContext context = UnrealSharp.ToolMenus.ToolMenuContextMarshaler.FromNative(IntPtr.Add(buffer, CanExecute_Context_Offset), 0, null);
            bool returnValue = CanExecute_Implementation(context);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.TypedElementRuntime;

[UClass]
public partial class TypedElementSelectionSet : UnrealSharp.CoreUObject.Object
{
    
    static TypedElementSelectionSet()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TypedElementSelectionSet");
        
        
        SetSelection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSelection");
        SetSelection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSelection_NativeFunction);
        SetSelection_InElementHandles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSelection_NativeFunction, "InElementHandles");
        SetSelection_InElementHandles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetSelection_NativeFunction, "InElementHandles");
        SetSelection_InSelectionOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSelection_NativeFunction, "InSelectionOptions");
        SetSelection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSelection_NativeFunction, "ReturnValue");
        SelectElements_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectElements");
        SelectElements_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectElements_NativeFunction);
        SelectElements_InElementHandles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectElements_NativeFunction, "InElementHandles");
        SelectElements_InElementHandles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SelectElements_NativeFunction, "InElementHandles");
        SelectElements_InSelectionOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectElements_NativeFunction, "InSelectionOptions");
        SelectElements_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectElements_NativeFunction, "ReturnValue");
        SelectElement_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectElement");
        SelectElement_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectElement_NativeFunction);
        SelectElement_InElementHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectElement_NativeFunction, "InElementHandle");
        SelectElement_InSelectionOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectElement_NativeFunction, "InSelectionOptions");
        SelectElement_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectElement_NativeFunction, "ReturnValue");
        RestoreSelectionState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RestoreSelectionState");
        RestoreSelectionState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RestoreSelectionState_NativeFunction);
        RestoreSelectionState_InSelectionState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RestoreSelectionState_NativeFunction, "InSelectionState");
        K2_GetSelectedElementHandles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetSelectedElementHandles");
        K2_GetSelectedElementHandles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetSelectedElementHandles_NativeFunction);
        K2_GetSelectedElementHandles_InBaseInterfaceType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetSelectedElementHandles_NativeFunction, "InBaseInterfaceType");
        K2_GetSelectedElementHandles_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetSelectedElementHandles_NativeFunction, "ReturnValue");
        K2_GetSelectedElementHandles_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(K2_GetSelectedElementHandles_NativeFunction, "ReturnValue");
        IsElementSelected_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsElementSelected");
        IsElementSelected_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsElementSelected_NativeFunction);
        IsElementSelected_InElementHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsElementSelected_NativeFunction, "InElementHandle");
        IsElementSelected_InSelectionOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsElementSelected_NativeFunction, "InSelectionOptions");
        IsElementSelected_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsElementSelected_NativeFunction, "ReturnValue");
        HasSelectedObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasSelectedObjects");
        HasSelectedObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasSelectedObjects_NativeFunction);
        HasSelectedObjects_InRequiredClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasSelectedObjects_NativeFunction, "InRequiredClass");
        HasSelectedObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasSelectedObjects_NativeFunction, "ReturnValue");
        HasSelectedElements_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasSelectedElements");
        HasSelectedElements_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasSelectedElements_NativeFunction);
        HasSelectedElements_InBaseInterfaceType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasSelectedElements_NativeFunction, "InBaseInterfaceType");
        HasSelectedElements_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasSelectedElements_NativeFunction, "ReturnValue");
        GetTopSelectedObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTopSelectedObject");
        GetTopSelectedObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTopSelectedObject_NativeFunction);
        GetTopSelectedObject_InRequiredClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTopSelectedObject_NativeFunction, "InRequiredClass");
        GetTopSelectedObject_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTopSelectedObject_NativeFunction, "ReturnValue");
        GetSelectionElement_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectionElement");
        GetSelectionElement_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectionElement_NativeFunction);
        GetSelectionElement_InElementHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectionElement_NativeFunction, "InElementHandle");
        GetSelectionElement_InSelectionMethod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectionElement_NativeFunction, "InSelectionMethod");
        GetSelectionElement_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectionElement_NativeFunction, "ReturnValue");
        GetSelectedObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectedObjects");
        GetSelectedObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectedObjects_NativeFunction);
        GetSelectedObjects_InRequiredClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectedObjects_NativeFunction, "InRequiredClass");
        GetSelectedObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectedObjects_NativeFunction, "ReturnValue");
        GetSelectedObjects_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSelectedObjects_NativeFunction, "ReturnValue");
        GetNumSelectedElements_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumSelectedElements");
        GetNumSelectedElements_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumSelectedElements_NativeFunction);
        GetNumSelectedElements_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumSelectedElements_NativeFunction, "ReturnValue");
        GetCurrentSelectionState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentSelectionState");
        GetCurrentSelectionState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentSelectionState_NativeFunction);
        GetCurrentSelectionState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentSelectionState_NativeFunction, "ReturnValue");
        GetBottomSelectedObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBottomSelectedObject");
        GetBottomSelectedObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBottomSelectedObject_NativeFunction);
        GetBottomSelectedObject_InRequiredClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBottomSelectedObject_NativeFunction, "InRequiredClass");
        GetBottomSelectedObject_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBottomSelectedObject_NativeFunction, "ReturnValue");
        DeselectElements_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeselectElements");
        DeselectElements_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeselectElements_NativeFunction);
        DeselectElements_InElementHandles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeselectElements_NativeFunction, "InElementHandles");
        DeselectElements_InElementHandles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DeselectElements_NativeFunction, "InElementHandles");
        DeselectElements_InSelectionOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeselectElements_NativeFunction, "InSelectionOptions");
        DeselectElements_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeselectElements_NativeFunction, "ReturnValue");
        DeselectElement_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeselectElement");
        DeselectElement_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeselectElement_NativeFunction);
        DeselectElement_InElementHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeselectElement_NativeFunction, "InElementHandle");
        DeselectElement_InSelectionOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeselectElement_NativeFunction, "InSelectionOptions");
        DeselectElement_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeselectElement_NativeFunction, "ReturnValue");
        CountSelectedObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CountSelectedObjects");
        CountSelectedObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CountSelectedObjects_NativeFunction);
        CountSelectedObjects_InRequiredClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CountSelectedObjects_NativeFunction, "InRequiredClass");
        CountSelectedObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CountSelectedObjects_NativeFunction, "ReturnValue");
        CountSelectedElements_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CountSelectedElements");
        CountSelectedElements_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CountSelectedElements_NativeFunction);
        CountSelectedElements_InBaseInterfaceType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CountSelectedElements_NativeFunction, "InBaseInterfaceType");
        CountSelectedElements_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CountSelectedElements_NativeFunction, "ReturnValue");
        ClearSelection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearSelection");
        ClearSelection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearSelection_NativeFunction);
        ClearSelection_InSelectionOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearSelection_NativeFunction, "InSelectionOptions");
        ClearSelection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearSelection_NativeFunction, "ReturnValue");
        CanSelectElement_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanSelectElement");
        CanSelectElement_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanSelectElement_NativeFunction);
        CanSelectElement_InElementHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanSelectElement_NativeFunction, "InElementHandle");
        CanSelectElement_InSelectionOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanSelectElement_NativeFunction, "InSelectionOptions");
        CanSelectElement_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanSelectElement_NativeFunction, "ReturnValue");
        CanDeselectElement_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanDeselectElement");
        CanDeselectElement_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanDeselectElement_NativeFunction);
        CanDeselectElement_InElementHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanDeselectElement_NativeFunction, "InElementHandle");
        CanDeselectElement_InSelectionOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanDeselectElement_NativeFunction, "InSelectionOptions");
        CanDeselectElement_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanDeselectElement_NativeFunction, "ReturnValue");
        AllowSelectionModifiers_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AllowSelectionModifiers");
        AllowSelectionModifiers_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AllowSelectionModifiers_NativeFunction);
        AllowSelectionModifiers_InElementHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AllowSelectionModifiers_NativeFunction, "InElementHandle");
        AllowSelectionModifiers_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AllowSelectionModifiers_NativeFunction, "ReturnValue");
        
        
    }
    
    protected TypedElementSelectionSet(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:SetSelection
    static readonly IntPtr SetSelection_NativeFunction;
    static readonly int SetSelection_ParamsSize;
    static readonly int SetSelection_InElementHandles_Offset;
    static readonly int SetSelection_InElementHandles_ElementSize;
    static readonly int SetSelection_InSelectionOptions_Offset;
    static readonly int SetSelection_ReturnValue_Offset;
    
    public bool SetSelection(System.Collections.Generic.IList<UnrealSharp.TypedElementFramework.ScriptTypedElementHandle> inElementHandles, UnrealSharp.TypedElementRuntime.TypedElementSelectionOptions inSelectionOptions)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSelection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InElementHandles_NativeBuffer = IntPtr.Add(ParamsBuffer, SetSelection_InElementHandles_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.TypedElementFramework.ScriptTypedElementHandle> InElementHandles_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.TypedElementFramework.ScriptTypedElementHandle>(1, UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.ToNative, UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.FromNative, SetSelection_InElementHandles_ElementSize);
            InElementHandles_Marshaler.ToNative(InElementHandles_NativeBuffer, 0, null, inElementHandles);
            UnrealSharp.TypedElementRuntime.TypedElementSelectionOptionsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetSelection_InSelectionOptions_Offset), 0, null, inSelectionOptions);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSelection_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetSelection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:SelectElements
    static readonly IntPtr SelectElements_NativeFunction;
    static readonly int SelectElements_ParamsSize;
    static readonly int SelectElements_InElementHandles_Offset;
    static readonly int SelectElements_InElementHandles_ElementSize;
    static readonly int SelectElements_InSelectionOptions_Offset;
    static readonly int SelectElements_ReturnValue_Offset;
    
    public bool SelectElements(System.Collections.Generic.IList<UnrealSharp.TypedElementFramework.ScriptTypedElementHandle> inElementHandles, UnrealSharp.TypedElementRuntime.TypedElementSelectionOptions inSelectionOptions)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectElements_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InElementHandles_NativeBuffer = IntPtr.Add(ParamsBuffer, SelectElements_InElementHandles_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.TypedElementFramework.ScriptTypedElementHandle> InElementHandles_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.TypedElementFramework.ScriptTypedElementHandle>(1, UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.ToNative, UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.FromNative, SelectElements_InElementHandles_ElementSize);
            InElementHandles_Marshaler.ToNative(InElementHandles_NativeBuffer, 0, null, inElementHandles);
            UnrealSharp.TypedElementRuntime.TypedElementSelectionOptionsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SelectElements_InSelectionOptions_Offset), 0, null, inSelectionOptions);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SelectElements_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SelectElements_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:SelectElement
    static readonly IntPtr SelectElement_NativeFunction;
    static readonly int SelectElement_ParamsSize;
    static readonly int SelectElement_InElementHandle_Offset;
    static readonly int SelectElement_InSelectionOptions_Offset;
    static readonly int SelectElement_ReturnValue_Offset;
    
    public bool SelectElement(UnrealSharp.TypedElementFramework.ScriptTypedElementHandle inElementHandle, UnrealSharp.TypedElementRuntime.TypedElementSelectionOptions inSelectionOptions)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectElement_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SelectElement_InElementHandle_Offset), 0, null, inElementHandle);
            UnrealSharp.TypedElementRuntime.TypedElementSelectionOptionsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SelectElement_InSelectionOptions_Offset), 0, null, inSelectionOptions);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SelectElement_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SelectElement_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:RestoreSelectionState
    static readonly IntPtr RestoreSelectionState_NativeFunction;
    static readonly int RestoreSelectionState_ParamsSize;
    static readonly int RestoreSelectionState_InSelectionState_Offset;
    
    public void RestoreSelectionState(UnrealSharp.TypedElementRuntime.TypedElementSelectionSetState inSelectionState)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RestoreSelectionState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.TypedElementRuntime.TypedElementSelectionSetStateMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RestoreSelectionState_InSelectionState_Offset), 0, null, inSelectionState);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RestoreSelectionState_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:K2_GetSelectedElementHandles
    static readonly IntPtr K2_GetSelectedElementHandles_NativeFunction;
    static readonly int K2_GetSelectedElementHandles_ParamsSize;
    static readonly int K2_GetSelectedElementHandles_InBaseInterfaceType_Offset;
    static readonly int K2_GetSelectedElementHandles_ReturnValue_Offset;
    static readonly int K2_GetSelectedElementHandles_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.TypedElementFramework.ScriptTypedElementHandle> GetSelectedElementHandles(SubclassOf<UnrealSharp.CoreUObject.IInterface> inBaseInterfaceType = default(SubclassOf<UnrealSharp.CoreUObject.IInterface>))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetSelectedElementHandles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.IInterface>.ToNative(IntPtr.Add(ParamsBuffer, K2_GetSelectedElementHandles_InBaseInterfaceType_Offset), 0, null, inBaseInterfaceType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_GetSelectedElementHandles_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.TypedElementFramework.ScriptTypedElementHandle> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, K2_GetSelectedElementHandles_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.TypedElementFramework.ScriptTypedElementHandle> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.TypedElementFramework.ScriptTypedElementHandle> (1, UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.ToNative, UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.FromNative, K2_GetSelectedElementHandles_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.TypedElementFramework.ScriptTypedElementHandle>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:IsElementSelected
    static readonly IntPtr IsElementSelected_NativeFunction;
    static readonly int IsElementSelected_ParamsSize;
    static readonly int IsElementSelected_InElementHandle_Offset;
    static readonly int IsElementSelected_InSelectionOptions_Offset;
    static readonly int IsElementSelected_ReturnValue_Offset;
    
    public bool IsElementSelected(UnrealSharp.TypedElementFramework.ScriptTypedElementHandle inElementHandle, UnrealSharp.TypedElementRuntime.TypedElementIsSelectedOptions inSelectionOptions)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsElementSelected_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsElementSelected_InElementHandle_Offset), 0, null, inElementHandle);
            UnrealSharp.TypedElementRuntime.TypedElementIsSelectedOptionsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsElementSelected_InSelectionOptions_Offset), 0, null, inSelectionOptions);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsElementSelected_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsElementSelected_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:HasSelectedObjects
    static readonly IntPtr HasSelectedObjects_NativeFunction;
    static readonly int HasSelectedObjects_ParamsSize;
    static readonly int HasSelectedObjects_InRequiredClass_Offset;
    static readonly int HasSelectedObjects_ReturnValue_Offset;
    
    public bool HasSelectedObjects(SubclassOf<UnrealSharp.CoreUObject.Object> inRequiredClass = default(SubclassOf<UnrealSharp.CoreUObject.Object>))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasSelectedObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, HasSelectedObjects_InRequiredClass_Offset), 0, null, inRequiredClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasSelectedObjects_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasSelectedObjects_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:HasSelectedElements
    static readonly IntPtr HasSelectedElements_NativeFunction;
    static readonly int HasSelectedElements_ParamsSize;
    static readonly int HasSelectedElements_InBaseInterfaceType_Offset;
    static readonly int HasSelectedElements_ReturnValue_Offset;
    
    public bool HasSelectedElements(SubclassOf<UnrealSharp.CoreUObject.IInterface> inBaseInterfaceType = default(SubclassOf<UnrealSharp.CoreUObject.IInterface>))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasSelectedElements_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.IInterface>.ToNative(IntPtr.Add(ParamsBuffer, HasSelectedElements_InBaseInterfaceType_Offset), 0, null, inBaseInterfaceType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasSelectedElements_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasSelectedElements_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:GetTopSelectedObject
    static readonly IntPtr GetTopSelectedObject_NativeFunction;
    static readonly int GetTopSelectedObject_ParamsSize;
    static readonly int GetTopSelectedObject_InRequiredClass_Offset;
    static readonly int GetTopSelectedObject_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.Object GetTopSelectedObject(SubclassOf<UnrealSharp.CoreUObject.Object> inRequiredClass = default(SubclassOf<UnrealSharp.CoreUObject.Object>))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTopSelectedObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetTopSelectedObject_InRequiredClass_Offset), 0, null, inRequiredClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTopSelectedObject_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetTopSelectedObject_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:GetSelectionElement
    static readonly IntPtr GetSelectionElement_NativeFunction;
    static readonly int GetSelectionElement_ParamsSize;
    static readonly int GetSelectionElement_InElementHandle_Offset;
    static readonly int GetSelectionElement_InSelectionMethod_Offset;
    static readonly int GetSelectionElement_ReturnValue_Offset;
    
    public UnrealSharp.TypedElementFramework.ScriptTypedElementHandle GetSelectionElement(UnrealSharp.TypedElementFramework.ScriptTypedElementHandle inElementHandle, UnrealSharp.TypedElementRuntime.ETypedElementSelectionMethod inSelectionMethod)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectionElement_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetSelectionElement_InElementHandle_Offset), 0, null, inElementHandle);
            BlittableMarshaller<UnrealSharp.TypedElementRuntime.ETypedElementSelectionMethod>.ToNative(IntPtr.Add(ParamsBuffer, GetSelectionElement_InSelectionMethod_Offset), 0, null, inSelectionMethod);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSelectionElement_NativeFunction, ParamsBuffer);
            
            UnrealSharp.TypedElementFramework.ScriptTypedElementHandle returnValue;
            returnValue = UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetSelectionElement_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:GetSelectedObjects
    static readonly IntPtr GetSelectedObjects_NativeFunction;
    static readonly int GetSelectedObjects_ParamsSize;
    static readonly int GetSelectedObjects_InRequiredClass_Offset;
    static readonly int GetSelectedObjects_ReturnValue_Offset;
    static readonly int GetSelectedObjects_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> GetSelectedObjects(SubclassOf<UnrealSharp.CoreUObject.Object> inRequiredClass = default(SubclassOf<UnrealSharp.CoreUObject.Object>))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectedObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetSelectedObjects_InRequiredClass_Offset), 0, null, inRequiredClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSelectedObjects_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSelectedObjects_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> (1, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative, GetSelectedObjects_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:GetNumSelectedElements
    static readonly IntPtr GetNumSelectedElements_NativeFunction;
    static readonly int GetNumSelectedElements_ParamsSize;
    static readonly int GetNumSelectedElements_ReturnValue_Offset;
    
    public int GetNumSelectedElements()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumSelectedElements_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumSelectedElements_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumSelectedElements_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:GetCurrentSelectionState
    static readonly IntPtr GetCurrentSelectionState_NativeFunction;
    static readonly int GetCurrentSelectionState_ParamsSize;
    static readonly int GetCurrentSelectionState_ReturnValue_Offset;
    
    public UnrealSharp.TypedElementRuntime.TypedElementSelectionSetState GetCurrentSelectionState()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentSelectionState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentSelectionState_NativeFunction, ParamsBuffer);
            
            UnrealSharp.TypedElementRuntime.TypedElementSelectionSetState returnValue;
            returnValue = UnrealSharp.TypedElementRuntime.TypedElementSelectionSetStateMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentSelectionState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:GetBottomSelectedObject
    static readonly IntPtr GetBottomSelectedObject_NativeFunction;
    static readonly int GetBottomSelectedObject_ParamsSize;
    static readonly int GetBottomSelectedObject_InRequiredClass_Offset;
    static readonly int GetBottomSelectedObject_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.Object GetBottomSelectedObject(SubclassOf<UnrealSharp.CoreUObject.Object> inRequiredClass = default(SubclassOf<UnrealSharp.CoreUObject.Object>))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBottomSelectedObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetBottomSelectedObject_InRequiredClass_Offset), 0, null, inRequiredClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBottomSelectedObject_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetBottomSelectedObject_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:DeselectElements
    static readonly IntPtr DeselectElements_NativeFunction;
    static readonly int DeselectElements_ParamsSize;
    static readonly int DeselectElements_InElementHandles_Offset;
    static readonly int DeselectElements_InElementHandles_ElementSize;
    static readonly int DeselectElements_InSelectionOptions_Offset;
    static readonly int DeselectElements_ReturnValue_Offset;
    
    public bool DeselectElements(System.Collections.Generic.IList<UnrealSharp.TypedElementFramework.ScriptTypedElementHandle> inElementHandles, UnrealSharp.TypedElementRuntime.TypedElementSelectionOptions inSelectionOptions)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeselectElements_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InElementHandles_NativeBuffer = IntPtr.Add(ParamsBuffer, DeselectElements_InElementHandles_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.TypedElementFramework.ScriptTypedElementHandle> InElementHandles_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.TypedElementFramework.ScriptTypedElementHandle>(1, UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.ToNative, UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.FromNative, DeselectElements_InElementHandles_ElementSize);
            InElementHandles_Marshaler.ToNative(InElementHandles_NativeBuffer, 0, null, inElementHandles);
            UnrealSharp.TypedElementRuntime.TypedElementSelectionOptionsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DeselectElements_InSelectionOptions_Offset), 0, null, inSelectionOptions);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DeselectElements_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DeselectElements_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:DeselectElement
    static readonly IntPtr DeselectElement_NativeFunction;
    static readonly int DeselectElement_ParamsSize;
    static readonly int DeselectElement_InElementHandle_Offset;
    static readonly int DeselectElement_InSelectionOptions_Offset;
    static readonly int DeselectElement_ReturnValue_Offset;
    
    public bool DeselectElement(UnrealSharp.TypedElementFramework.ScriptTypedElementHandle inElementHandle, UnrealSharp.TypedElementRuntime.TypedElementSelectionOptions inSelectionOptions)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeselectElement_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DeselectElement_InElementHandle_Offset), 0, null, inElementHandle);
            UnrealSharp.TypedElementRuntime.TypedElementSelectionOptionsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DeselectElement_InSelectionOptions_Offset), 0, null, inSelectionOptions);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DeselectElement_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DeselectElement_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:CountSelectedObjects
    static readonly IntPtr CountSelectedObjects_NativeFunction;
    static readonly int CountSelectedObjects_ParamsSize;
    static readonly int CountSelectedObjects_InRequiredClass_Offset;
    static readonly int CountSelectedObjects_ReturnValue_Offset;
    
    public int CountSelectedObjects(SubclassOf<UnrealSharp.CoreUObject.Object> inRequiredClass = default(SubclassOf<UnrealSharp.CoreUObject.Object>))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CountSelectedObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CountSelectedObjects_InRequiredClass_Offset), 0, null, inRequiredClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CountSelectedObjects_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, CountSelectedObjects_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:CountSelectedElements
    static readonly IntPtr CountSelectedElements_NativeFunction;
    static readonly int CountSelectedElements_ParamsSize;
    static readonly int CountSelectedElements_InBaseInterfaceType_Offset;
    static readonly int CountSelectedElements_ReturnValue_Offset;
    
    public int CountSelectedElements(SubclassOf<UnrealSharp.CoreUObject.IInterface> inBaseInterfaceType = default(SubclassOf<UnrealSharp.CoreUObject.IInterface>))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CountSelectedElements_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.IInterface>.ToNative(IntPtr.Add(ParamsBuffer, CountSelectedElements_InBaseInterfaceType_Offset), 0, null, inBaseInterfaceType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CountSelectedElements_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, CountSelectedElements_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:ClearSelection
    static readonly IntPtr ClearSelection_NativeFunction;
    static readonly int ClearSelection_ParamsSize;
    static readonly int ClearSelection_InSelectionOptions_Offset;
    static readonly int ClearSelection_ReturnValue_Offset;
    
    public bool ClearSelection(UnrealSharp.TypedElementRuntime.TypedElementSelectionOptions inSelectionOptions)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearSelection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.TypedElementRuntime.TypedElementSelectionOptionsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ClearSelection_InSelectionOptions_Offset), 0, null, inSelectionOptions);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearSelection_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ClearSelection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:CanSelectElement
    static readonly IntPtr CanSelectElement_NativeFunction;
    static readonly int CanSelectElement_ParamsSize;
    static readonly int CanSelectElement_InElementHandle_Offset;
    static readonly int CanSelectElement_InSelectionOptions_Offset;
    static readonly int CanSelectElement_ReturnValue_Offset;
    
    public bool CanSelectElement(UnrealSharp.TypedElementFramework.ScriptTypedElementHandle inElementHandle, UnrealSharp.TypedElementRuntime.TypedElementSelectionOptions inSelectionOptions)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanSelectElement_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, CanSelectElement_InElementHandle_Offset), 0, null, inElementHandle);
            UnrealSharp.TypedElementRuntime.TypedElementSelectionOptionsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, CanSelectElement_InSelectionOptions_Offset), 0, null, inSelectionOptions);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanSelectElement_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanSelectElement_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:CanDeselectElement
    static readonly IntPtr CanDeselectElement_NativeFunction;
    static readonly int CanDeselectElement_ParamsSize;
    static readonly int CanDeselectElement_InElementHandle_Offset;
    static readonly int CanDeselectElement_InSelectionOptions_Offset;
    static readonly int CanDeselectElement_ReturnValue_Offset;
    
    public bool CanDeselectElement(UnrealSharp.TypedElementFramework.ScriptTypedElementHandle inElementHandle, UnrealSharp.TypedElementRuntime.TypedElementSelectionOptions inSelectionOptions)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanDeselectElement_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, CanDeselectElement_InElementHandle_Offset), 0, null, inElementHandle);
            UnrealSharp.TypedElementRuntime.TypedElementSelectionOptionsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, CanDeselectElement_InSelectionOptions_Offset), 0, null, inSelectionOptions);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanDeselectElement_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanDeselectElement_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/TypedElementRuntime.TypedElementSelectionSet:AllowSelectionModifiers
    static readonly IntPtr AllowSelectionModifiers_NativeFunction;
    static readonly int AllowSelectionModifiers_ParamsSize;
    static readonly int AllowSelectionModifiers_InElementHandle_Offset;
    static readonly int AllowSelectionModifiers_ReturnValue_Offset;
    
    public bool AllowSelectionModifiers(UnrealSharp.TypedElementFramework.ScriptTypedElementHandle inElementHandle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AllowSelectionModifiers_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.TypedElementFramework.ScriptTypedElementHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AllowSelectionModifiers_InElementHandle_Offset), 0, null, inElementHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AllowSelectionModifiers_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AllowSelectionModifiers_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class Border : UnrealSharp.UMG.ContentWidget
{
    
    static Border()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Border");
        
        HorizontalAlignment_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HorizontalAlignment");
        VerticalAlignment_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VerticalAlignment");
        bShowEffectWhenDisabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShowEffectWhenDisabled");
        bShowEffectWhenDisabled_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bShowEffectWhenDisabled");
        ContentColorAndOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ContentColorAndOpacity");
        Padding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Padding");
        Background_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Background");
        BrushColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BrushColor");
        DesiredSizeScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DesiredSizeScale");
        
        SetVerticalAlignment_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVerticalAlignment");
        SetVerticalAlignment_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVerticalAlignment_NativeFunction);
        SetVerticalAlignment_InVerticalAlignment_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVerticalAlignment_NativeFunction, "InVerticalAlignment");
        SetShowEffectWhenDisabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShowEffectWhenDisabled");
        SetShowEffectWhenDisabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShowEffectWhenDisabled_NativeFunction);
        SetShowEffectWhenDisabled_bInShowEffectWhenDisabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShowEffectWhenDisabled_NativeFunction, "bInShowEffectWhenDisabled");
        SetPadding_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPadding");
        SetPadding_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPadding_NativeFunction);
        SetPadding_InPadding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPadding_NativeFunction, "InPadding");
        SetHorizontalAlignment_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetHorizontalAlignment");
        SetHorizontalAlignment_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetHorizontalAlignment_NativeFunction);
        SetHorizontalAlignment_InHorizontalAlignment_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHorizontalAlignment_NativeFunction, "InHorizontalAlignment");
        SetDesiredSizeScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDesiredSizeScale");
        SetDesiredSizeScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDesiredSizeScale_NativeFunction);
        SetDesiredSizeScale_InScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDesiredSizeScale_NativeFunction, "InScale");
        SetContentColorAndOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetContentColorAndOpacity");
        SetContentColorAndOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetContentColorAndOpacity_NativeFunction);
        SetContentColorAndOpacity_InContentColorAndOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetContentColorAndOpacity_NativeFunction, "InContentColorAndOpacity");
        SetBrushFromTexture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrushFromTexture");
        SetBrushFromTexture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrushFromTexture_NativeFunction);
        SetBrushFromTexture_Texture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushFromTexture_NativeFunction, "Texture");
        SetBrushFromMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrushFromMaterial");
        SetBrushFromMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrushFromMaterial_NativeFunction);
        SetBrushFromMaterial_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushFromMaterial_NativeFunction, "Material");
        SetBrushFromAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrushFromAsset");
        SetBrushFromAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrushFromAsset_NativeFunction);
        SetBrushFromAsset_Asset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushFromAsset_NativeFunction, "Asset");
        SetBrushColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrushColor");
        SetBrushColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrushColor_NativeFunction);
        SetBrushColor_InBrushColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushColor_NativeFunction, "InBrushColor");
        SetBrush_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrush");
        SetBrush_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrush_NativeFunction);
        SetBrush_InBrush_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrush_NativeFunction, "InBrush");
        GetDynamicMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDynamicMaterial");
        GetDynamicMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDynamicMaterial_NativeFunction);
        GetDynamicMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDynamicMaterial_NativeFunction, "ReturnValue");
        
        
    }
    
    protected Border(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ByteProperty /Script/UMG.Border:HorizontalAlignment
    static readonly int HorizontalAlignment_Offset;
    
    public UnrealSharp.SlateCore.EHorizontalAlignment HorizontalAlignment
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.EHorizontalAlignment>.FromNative(IntPtr.Add(NativeObject, HorizontalAlignment_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.EHorizontalAlignment>.ToNative(IntPtr.Add(NativeObject, HorizontalAlignment_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/UMG.Border:VerticalAlignment
    static readonly int VerticalAlignment_Offset;
    
    public UnrealSharp.SlateCore.EVerticalAlignment VerticalAlignment
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.EVerticalAlignment>.FromNative(IntPtr.Add(NativeObject, VerticalAlignment_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.EVerticalAlignment>.ToNative(IntPtr.Add(NativeObject, VerticalAlignment_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.Border:bShowEffectWhenDisabled
    static readonly int bShowEffectWhenDisabled_Offset;
    static readonly IntPtr bShowEffectWhenDisabled_NativeProperty;
    
    public bool bShowEffectWhenDisabled
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bShowEffectWhenDisabled_NativeProperty, bShowEffectWhenDisabled_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bShowEffectWhenDisabled_NativeProperty, bShowEffectWhenDisabled_Offset, value);
        }
    }
    
    // StructProperty /Script/UMG.Border:ContentColorAndOpacity
    static readonly int ContentColorAndOpacity_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor ContentColorAndOpacity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, ContentColorAndOpacity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(NativeObject, ContentColorAndOpacity_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.Border:Padding
    static readonly int Padding_Offset;
    
    public UnrealSharp.SlateCore.Margin Padding
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.Margin>.FromNative(IntPtr.Add(NativeObject, Padding_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.Margin>.ToNative(IntPtr.Add(NativeObject, Padding_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.Border:Background
    static readonly int Background_Offset;
    
    public UnrealSharp.SlateCore.SlateBrush Background
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.SlateBrushMarshaler.FromNative(IntPtr.Add(NativeObject, Background_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/UMG.Border:BrushColor
    static readonly int BrushColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor BrushColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, BrushColor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(NativeObject, BrushColor_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.Border:DesiredSizeScale
    static readonly int DesiredSizeScale_Offset;
    
    public System.DoubleNumerics.Vector2 DesiredSizeScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, DesiredSizeScale_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(NativeObject, DesiredSizeScale_Offset), 0, this, value);
        }
    }
    
    // Function /Script/UMG.Border:SetVerticalAlignment
    static readonly IntPtr SetVerticalAlignment_NativeFunction;
    static readonly int SetVerticalAlignment_ParamsSize;
    static readonly int SetVerticalAlignment_InVerticalAlignment_Offset;
    
    public void SetVerticalAlignment(UnrealSharp.SlateCore.EVerticalAlignment inVerticalAlignment)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVerticalAlignment_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.EVerticalAlignment>.ToNative(IntPtr.Add(ParamsBuffer, SetVerticalAlignment_InVerticalAlignment_Offset), 0, null, inVerticalAlignment);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVerticalAlignment_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Border:SetShowEffectWhenDisabled
    static readonly IntPtr SetShowEffectWhenDisabled_NativeFunction;
    static readonly int SetShowEffectWhenDisabled_ParamsSize;
    static readonly int SetShowEffectWhenDisabled_bInShowEffectWhenDisabled_Offset;
    
    public void SetShowEffectWhenDisabled(bool bInShowEffectWhenDisabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShowEffectWhenDisabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetShowEffectWhenDisabled_bInShowEffectWhenDisabled_Offset), 0, null, bInShowEffectWhenDisabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShowEffectWhenDisabled_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Border:SetPadding
    static readonly IntPtr SetPadding_NativeFunction;
    static readonly int SetPadding_ParamsSize;
    static readonly int SetPadding_InPadding_Offset;
    
    public void SetPadding(UnrealSharp.SlateCore.Margin inPadding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPadding_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.Margin>.ToNative(IntPtr.Add(ParamsBuffer, SetPadding_InPadding_Offset), 0, null, inPadding);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPadding_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Border:SetHorizontalAlignment
    static readonly IntPtr SetHorizontalAlignment_NativeFunction;
    static readonly int SetHorizontalAlignment_ParamsSize;
    static readonly int SetHorizontalAlignment_InHorizontalAlignment_Offset;
    
    public void SetHorizontalAlignment(UnrealSharp.SlateCore.EHorizontalAlignment inHorizontalAlignment)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetHorizontalAlignment_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.EHorizontalAlignment>.ToNative(IntPtr.Add(ParamsBuffer, SetHorizontalAlignment_InHorizontalAlignment_Offset), 0, null, inHorizontalAlignment);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetHorizontalAlignment_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Border:SetDesiredSizeScale
    static readonly IntPtr SetDesiredSizeScale_NativeFunction;
    static readonly int SetDesiredSizeScale_ParamsSize;
    static readonly int SetDesiredSizeScale_InScale_Offset;
    
    public void SetDesiredSizeScale(System.DoubleNumerics.Vector2 inScale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDesiredSizeScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetDesiredSizeScale_InScale_Offset), 0, null, inScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDesiredSizeScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Border:SetContentColorAndOpacity
    static readonly IntPtr SetContentColorAndOpacity_NativeFunction;
    static readonly int SetContentColorAndOpacity_ParamsSize;
    static readonly int SetContentColorAndOpacity_InContentColorAndOpacity_Offset;
    
    public void SetContentColorAndOpacity(UnrealSharp.CoreUObject.LinearColor inContentColorAndOpacity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetContentColorAndOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetContentColorAndOpacity_InContentColorAndOpacity_Offset), 0, null, inContentColorAndOpacity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetContentColorAndOpacity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Border:SetBrushFromTexture
    static readonly IntPtr SetBrushFromTexture_NativeFunction;
    static readonly int SetBrushFromTexture_ParamsSize;
    static readonly int SetBrushFromTexture_Texture_Offset;
    
    public void SetBrushFromTexture(UnrealSharp.Engine.Texture2D texture)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrushFromTexture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Texture2D>.ToNative(IntPtr.Add(ParamsBuffer, SetBrushFromTexture_Texture_Offset), 0, null, texture);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBrushFromTexture_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Border:SetBrushFromMaterial
    static readonly IntPtr SetBrushFromMaterial_NativeFunction;
    static readonly int SetBrushFromMaterial_ParamsSize;
    static readonly int SetBrushFromMaterial_Material_Offset;
    
    public void SetBrushFromMaterial(UnrealSharp.Engine.MaterialInterface material)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrushFromMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetBrushFromMaterial_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBrushFromMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Border:SetBrushFromAsset
    static readonly IntPtr SetBrushFromAsset_NativeFunction;
    static readonly int SetBrushFromAsset_ParamsSize;
    static readonly int SetBrushFromAsset_Asset_Offset;
    
    public void SetBrushFromAsset(UnrealSharp.Engine.SlateBrushAsset asset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrushFromAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SlateBrushAsset>.ToNative(IntPtr.Add(ParamsBuffer, SetBrushFromAsset_Asset_Offset), 0, null, asset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBrushFromAsset_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Border:SetBrushColor
    static readonly IntPtr SetBrushColor_NativeFunction;
    static readonly int SetBrushColor_ParamsSize;
    static readonly int SetBrushColor_InBrushColor_Offset;
    
    public void SetBrushColor(UnrealSharp.CoreUObject.LinearColor inBrushColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrushColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetBrushColor_InBrushColor_Offset), 0, null, inBrushColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBrushColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Border:SetBrush
    static readonly IntPtr SetBrush_NativeFunction;
    static readonly int SetBrush_ParamsSize;
    static readonly int SetBrush_InBrush_Offset;
    
    public void SetBrush(UnrealSharp.SlateCore.SlateBrush inBrush)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrush_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateBrushMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetBrush_InBrush_Offset), 0, null, inBrush);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBrush_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/UMG.Border:GetDynamicMaterial
    static readonly IntPtr GetDynamicMaterial_NativeFunction;
    static readonly int GetDynamicMaterial_ParamsSize;
    static readonly int GetDynamicMaterial_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInstanceDynamic GetDynamicMaterial()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDynamicMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDynamicMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInstanceDynamic returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceDynamic>.FromNative(IntPtr.Add(ParamsBuffer, GetDynamicMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
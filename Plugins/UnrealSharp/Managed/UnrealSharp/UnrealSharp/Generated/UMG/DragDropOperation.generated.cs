// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class DragDropOperation : UnrealSharp.CoreUObject.Object
{
    
    static DragDropOperation()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("DragDropOperation");
        
        Tag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Tag");
        Tag_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Tag");
        Payload_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Payload");
        DefaultDragVisual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultDragVisual");
        Pivot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Pivot");
        Offset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Offset");
        
        
        IntPtr Drop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Drop");
        Drop_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Drop_NativeFunction);
        Drop_PointerEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Drop_NativeFunction, "PointerEvent");
        
        IntPtr Dragged_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Dragged");
        Dragged_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Dragged_NativeFunction);
        Dragged_PointerEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Dragged_NativeFunction, "PointerEvent");
        
        IntPtr DragCancelled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DragCancelled");
        DragCancelled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DragCancelled_NativeFunction);
        DragCancelled_PointerEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DragCancelled_NativeFunction, "PointerEvent");
        
        
    }
    
    protected DragDropOperation(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StrProperty /Script/UMG.DragDropOperation:Tag
    static readonly int Tag_Offset;
    static readonly IntPtr Tag_NativeProperty;
    
    public string Tag
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,Tag_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,Tag_Offset),0,this,value);
        }
    }
    
    // ObjectProperty /Script/UMG.DragDropOperation:Payload
    static readonly int Payload_Offset;
    
    public UnrealSharp.CoreUObject.Object Payload
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(NativeObject, Payload_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(NativeObject, Payload_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/UMG.DragDropOperation:DefaultDragVisual
    static readonly int DefaultDragVisual_Offset;
    
    public UnrealSharp.UMG.Widget DefaultDragVisual
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.UMG.Widget>.FromNative(IntPtr.Add(NativeObject, DefaultDragVisual_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/UMG.DragDropOperation:Pivot
    static readonly int Pivot_Offset;
    
    public UnrealSharp.UMG.EDragPivot Pivot
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.UMG.EDragPivot>.FromNative(IntPtr.Add(NativeObject, Pivot_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.UMG.EDragPivot>.ToNative(IntPtr.Add(NativeObject, Pivot_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.DragDropOperation:Offset
    static readonly int Offset_Offset;
    
    public System.DoubleNumerics.Vector2 Offset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, Offset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(NativeObject, Offset_Offset), 0, this, value);
        }
    }
    
    // Function /Script/UMG.DragDropOperation:Drop
    IntPtr Drop_NativeFunction;
    static readonly int Drop_ParamsSize;
    static readonly int Drop_PointerEvent_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void Drop(UnrealSharp.SlateCore.PointerEvent pointerEvent)
    {
        unsafe
        {
            if (Drop_NativeFunction == IntPtr.Zero)
            {
                Drop_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Drop");
            }
            byte* ParamsBufferAllocation = stackalloc byte[Drop_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Drop_PointerEvent_Offset), 0, null, pointerEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Drop_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void Drop_Implementation(UnrealSharp.SlateCore.PointerEvent pointerEvent)
    {
    }
    void Invoke_Drop(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.PointerEvent pointerEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, Drop_PointerEvent_Offset), 0, null);
            Drop_Implementation(pointerEvent);
        }
    }
    
    // Function /Script/UMG.DragDropOperation:Dragged
    IntPtr Dragged_NativeFunction;
    static readonly int Dragged_ParamsSize;
    static readonly int Dragged_PointerEvent_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void Dragged(UnrealSharp.SlateCore.PointerEvent pointerEvent)
    {
        unsafe
        {
            if (Dragged_NativeFunction == IntPtr.Zero)
            {
                Dragged_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Dragged");
            }
            byte* ParamsBufferAllocation = stackalloc byte[Dragged_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Dragged_PointerEvent_Offset), 0, null, pointerEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Dragged_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void Dragged_Implementation(UnrealSharp.SlateCore.PointerEvent pointerEvent)
    {
    }
    void Invoke_Dragged(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.PointerEvent pointerEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, Dragged_PointerEvent_Offset), 0, null);
            Dragged_Implementation(pointerEvent);
        }
    }
    
    // Function /Script/UMG.DragDropOperation:DragCancelled
    IntPtr DragCancelled_NativeFunction;
    static readonly int DragCancelled_ParamsSize;
    static readonly int DragCancelled_PointerEvent_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void DragCancelled(UnrealSharp.SlateCore.PointerEvent pointerEvent)
    {
        unsafe
        {
            if (DragCancelled_NativeFunction == IntPtr.Zero)
            {
                DragCancelled_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "DragCancelled");
            }
            byte* ParamsBufferAllocation = stackalloc byte[DragCancelled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DragCancelled_PointerEvent_Offset), 0, null, pointerEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DragCancelled_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void DragCancelled_Implementation(UnrealSharp.SlateCore.PointerEvent pointerEvent)
    {
    }
    void Invoke_DragCancelled(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.PointerEvent pointerEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, DragCancelled_PointerEvent_Offset), 0, null);
            DragCancelled_Implementation(pointerEvent);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class EditableText : UnrealSharp.UMG.Widget
{
    
    static EditableText()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("EditableText");
        
        Text_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Text");
        Text_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Text");
        HintText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HintText");
        HintText_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "HintText");
        WidgetStyle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WidgetStyle");
        IsReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IsReadOnly");
        IsPassword_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IsPassword");
        MinimumDesiredWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinimumDesiredWidth");
        IsCaretMovedWhenGainFocus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IsCaretMovedWhenGainFocus");
        SelectAllTextWhenFocused_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SelectAllTextWhenFocused");
        RevertTextOnEscape_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RevertTextOnEscape");
        ClearKeyboardFocusOnCommit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ClearKeyboardFocusOnCommit");
        SelectAllTextOnCommit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SelectAllTextOnCommit");
        Justification_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Justification");
        OverflowPolicy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OverflowPolicy");
        ShapedTextOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShapedTextOptions");
        
        SetMinimumDesiredWidth_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMinimumDesiredWidth");
        SetMinimumDesiredWidth_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMinimumDesiredWidth_NativeFunction);
        SetMinimumDesiredWidth_InMinDesiredWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMinimumDesiredWidth_NativeFunction, "InMinDesiredWidth");
        SetIsReadOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsReadOnly");
        SetIsReadOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsReadOnly_NativeFunction);
        SetIsReadOnly_InbIsReadyOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsReadOnly_NativeFunction, "InbIsReadyOnly");
        SetIsPassword_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsPassword");
        SetIsPassword_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsPassword_NativeFunction);
        SetIsPassword_InbIsPassword_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsPassword_NativeFunction, "InbIsPassword");
        SetFontOutlineMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFontOutlineMaterial");
        SetFontOutlineMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFontOutlineMaterial_NativeFunction);
        SetFontOutlineMaterial_InMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFontOutlineMaterial_NativeFunction, "InMaterial");
        SetFontMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFontMaterial");
        SetFontMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFontMaterial_NativeFunction);
        SetFontMaterial_InMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFontMaterial_NativeFunction, "InMaterial");
        SetFont_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFont");
        SetFont_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFont_NativeFunction);
        SetFont_InFontInfo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFont_NativeFunction, "InFontInfo");
        GetJustification_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetJustification");
        GetJustification_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetJustification_NativeFunction);
        GetJustification_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetJustification_NativeFunction, "ReturnValue");
        GetFont_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFont");
        GetFont_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFont_NativeFunction);
        GetFont_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFont_NativeFunction, "ReturnValue");
        
        
    }
    
    protected EditableText(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // TextProperty /Script/UMG.EditableText:Text
    static readonly int Text_Offset;
    static readonly IntPtr Text_NativeProperty;
    TextMarshaller Text_Wrapper;
    
    public Text Text
    {
        get
        {
            if (Text_Wrapper == null)
            {
                Text_Wrapper  = new TextMarshaller(1);
            }
            return Text_Wrapper.FromNative(this.NativeObject + Text_Offset, 0, this);
        }
    }
    
    // TextProperty /Script/UMG.EditableText:HintText
    static readonly int HintText_Offset;
    static readonly IntPtr HintText_NativeProperty;
    TextMarshaller HintText_Wrapper;
    
    public Text HintText
    {
        get
        {
            if (HintText_Wrapper == null)
            {
                HintText_Wrapper  = new TextMarshaller(1);
            }
            return HintText_Wrapper.FromNative(this.NativeObject + HintText_Offset, 0, this);
        }
    }
    
    // StructProperty /Script/UMG.EditableText:WidgetStyle
    static readonly int WidgetStyle_Offset;
    
    public UnrealSharp.SlateCore.EditableTextStyle WidgetStyle
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.EditableTextStyleMarshaler.FromNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.EditableTextStyleMarshaler.ToNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.EditableText:IsReadOnly
    static readonly int IsReadOnly_Offset;
    
    public bool IsReadOnly
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, IsReadOnly_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, IsReadOnly_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.EditableText:IsPassword
    static readonly int IsPassword_Offset;
    
    public bool IsPassword
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, IsPassword_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, IsPassword_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UMG.EditableText:MinimumDesiredWidth
    static readonly int MinimumDesiredWidth_Offset;
    
    public float MinimumDesiredWidth
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinimumDesiredWidth_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinimumDesiredWidth_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.EditableText:IsCaretMovedWhenGainFocus
    static readonly int IsCaretMovedWhenGainFocus_Offset;
    
    public bool IsCaretMovedWhenGainFocus
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, IsCaretMovedWhenGainFocus_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, IsCaretMovedWhenGainFocus_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.EditableText:SelectAllTextWhenFocused
    static readonly int SelectAllTextWhenFocused_Offset;
    
    public bool SelectAllTextWhenFocused
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, SelectAllTextWhenFocused_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, SelectAllTextWhenFocused_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.EditableText:RevertTextOnEscape
    static readonly int RevertTextOnEscape_Offset;
    
    public bool RevertTextOnEscape
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, RevertTextOnEscape_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, RevertTextOnEscape_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.EditableText:ClearKeyboardFocusOnCommit
    static readonly int ClearKeyboardFocusOnCommit_Offset;
    
    public bool ClearKeyboardFocusOnCommit
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, ClearKeyboardFocusOnCommit_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, ClearKeyboardFocusOnCommit_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.EditableText:SelectAllTextOnCommit
    static readonly int SelectAllTextOnCommit_Offset;
    
    public bool SelectAllTextOnCommit
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, SelectAllTextOnCommit_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, SelectAllTextOnCommit_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/UMG.EditableText:Justification
    static readonly int Justification_Offset;
    
    public UnrealSharp.Slate.ETextJustify Justification
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Slate.ETextJustify>.FromNative(IntPtr.Add(NativeObject, Justification_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Slate.ETextJustify>.ToNative(IntPtr.Add(NativeObject, Justification_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/UMG.EditableText:OverflowPolicy
    static readonly int OverflowPolicy_Offset;
    
    public UnrealSharp.SlateCore.ETextOverflowPolicy OverflowPolicy
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.ETextOverflowPolicy>.FromNative(IntPtr.Add(NativeObject, OverflowPolicy_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.ETextOverflowPolicy>.ToNative(IntPtr.Add(NativeObject, OverflowPolicy_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.EditableText:ShapedTextOptions
    static readonly int ShapedTextOptions_Offset;
    
    public UnrealSharp.UMG.ShapedTextOptions ShapedTextOptions
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.UMG.ShapedTextOptionsMarshaler.FromNative(IntPtr.Add(NativeObject, ShapedTextOptions_Offset), 0, this);
        }
    }
    
    // Function /Script/UMG.EditableText:SetMinimumDesiredWidth
    static readonly IntPtr SetMinimumDesiredWidth_NativeFunction;
    static readonly int SetMinimumDesiredWidth_ParamsSize;
    static readonly int SetMinimumDesiredWidth_InMinDesiredWidth_Offset;
    
    public void SetMinimumDesiredWidth(float inMinDesiredWidth)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMinimumDesiredWidth_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMinimumDesiredWidth_InMinDesiredWidth_Offset), 0, null, inMinDesiredWidth);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMinimumDesiredWidth_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.EditableText:SetIsReadOnly
    static readonly IntPtr SetIsReadOnly_NativeFunction;
    static readonly int SetIsReadOnly_ParamsSize;
    static readonly int SetIsReadOnly_InbIsReadyOnly_Offset;
    
    public void SetIsReadOnly(bool inbIsReadyOnly)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsReadOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsReadOnly_InbIsReadyOnly_Offset), 0, null, inbIsReadyOnly);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsReadOnly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.EditableText:SetIsPassword
    static readonly IntPtr SetIsPassword_NativeFunction;
    static readonly int SetIsPassword_ParamsSize;
    static readonly int SetIsPassword_InbIsPassword_Offset;
    
    public void SetIsPassword(bool inbIsPassword)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsPassword_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsPassword_InbIsPassword_Offset), 0, null, inbIsPassword);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsPassword_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.EditableText:SetFontOutlineMaterial
    static readonly IntPtr SetFontOutlineMaterial_NativeFunction;
    static readonly int SetFontOutlineMaterial_ParamsSize;
    static readonly int SetFontOutlineMaterial_InMaterial_Offset;
    
    public void SetFontOutlineMaterial(UnrealSharp.Engine.MaterialInterface inMaterial)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFontOutlineMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetFontOutlineMaterial_InMaterial_Offset), 0, null, inMaterial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFontOutlineMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.EditableText:SetFontMaterial
    static readonly IntPtr SetFontMaterial_NativeFunction;
    static readonly int SetFontMaterial_ParamsSize;
    static readonly int SetFontMaterial_InMaterial_Offset;
    
    public void SetFontMaterial(UnrealSharp.Engine.MaterialInterface inMaterial)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFontMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetFontMaterial_InMaterial_Offset), 0, null, inMaterial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFontMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.EditableText:SetFont
    static readonly IntPtr SetFont_NativeFunction;
    static readonly int SetFont_ParamsSize;
    static readonly int SetFont_InFontInfo_Offset;
    
    public void SetFont(UnrealSharp.SlateCore.SlateFontInfo inFontInfo)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFont_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateFontInfoMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetFont_InFontInfo_Offset), 0, null, inFontInfo);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFont_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.EditableText:GetJustification
    static readonly IntPtr GetJustification_NativeFunction;
    static readonly int GetJustification_ParamsSize;
    static readonly int GetJustification_ReturnValue_Offset;
    
    public UnrealSharp.Slate.ETextJustify GetJustification()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetJustification_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetJustification_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Slate.ETextJustify returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Slate.ETextJustify>.FromNative(IntPtr.Add(ParamsBuffer, GetJustification_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.EditableText:GetFont
    static readonly IntPtr GetFont_NativeFunction;
    static readonly int GetFont_ParamsSize;
    static readonly int GetFont_ReturnValue_Offset;
    
    public UnrealSharp.SlateCore.SlateFontInfo GetFont()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFont_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFont_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.SlateFontInfo returnValue;
            returnValue = UnrealSharp.SlateCore.SlateFontInfoMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetFont_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
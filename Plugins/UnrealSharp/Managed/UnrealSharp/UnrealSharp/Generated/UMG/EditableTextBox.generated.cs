// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class EditableTextBox : UnrealSharp.UMG.Widget
{
    
    static EditableTextBox()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("EditableTextBox");
        
        Text_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Text");
        Text_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Text");
        WidgetStyle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WidgetStyle");
        HintText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HintText");
        HintText_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "HintText");
        IsReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IsReadOnly");
        IsPassword_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IsPassword");
        MinimumDesiredWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinimumDesiredWidth");
        IsCaretMovedWhenGainFocus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IsCaretMovedWhenGainFocus");
        SelectAllTextWhenFocused_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SelectAllTextWhenFocused");
        RevertTextOnEscape_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RevertTextOnEscape");
        ClearKeyboardFocusOnCommit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ClearKeyboardFocusOnCommit");
        SelectAllTextOnCommit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SelectAllTextOnCommit");
        Justification_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Justification");
        OverflowPolicy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OverflowPolicy");
        ShapedTextOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShapedTextOptions");
        
        SetIsReadOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsReadOnly");
        SetIsReadOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsReadOnly_NativeFunction);
        SetIsReadOnly_bReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsReadOnly_NativeFunction, "bReadOnly");
        SetIsPassword_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsPassword");
        SetIsPassword_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsPassword_NativeFunction);
        SetIsPassword_bIsPassword_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsPassword_NativeFunction, "bIsPassword");
        SetForegroundColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetForegroundColor");
        SetForegroundColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetForegroundColor_NativeFunction);
        SetForegroundColor_color_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForegroundColor_NativeFunction, "color");
        HasError_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasError");
        HasError_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasError_NativeFunction);
        HasError_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasError_NativeFunction, "ReturnValue");
        ClearError_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearError");
        
        
    }
    
    protected EditableTextBox(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // TextProperty /Script/UMG.EditableTextBox:Text
    static readonly int Text_Offset;
    static readonly IntPtr Text_NativeProperty;
    TextMarshaller Text_Wrapper;
    
    public Text Text
    {
        get
        {
            if (Text_Wrapper == null)
            {
                Text_Wrapper  = new TextMarshaller(1);
            }
            return Text_Wrapper.FromNative(this.NativeObject + Text_Offset, 0, this);
        }
    }
    
    // StructProperty /Script/UMG.EditableTextBox:WidgetStyle
    static readonly int WidgetStyle_Offset;
    
    public UnrealSharp.SlateCore.EditableTextBoxStyle WidgetStyle
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.EditableTextBoxStyleMarshaler.FromNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.EditableTextBoxStyleMarshaler.ToNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this, value);
        }
    }
    
    // TextProperty /Script/UMG.EditableTextBox:HintText
    static readonly int HintText_Offset;
    static readonly IntPtr HintText_NativeProperty;
    TextMarshaller HintText_Wrapper;
    
    public Text HintText
    {
        get
        {
            if (HintText_Wrapper == null)
            {
                HintText_Wrapper  = new TextMarshaller(1);
            }
            return HintText_Wrapper.FromNative(this.NativeObject + HintText_Offset, 0, this);
        }
    }
    
    // BoolProperty /Script/UMG.EditableTextBox:IsReadOnly
    static readonly int IsReadOnly_Offset;
    
    public bool IsReadOnly
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, IsReadOnly_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, IsReadOnly_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.EditableTextBox:IsPassword
    static readonly int IsPassword_Offset;
    
    public bool IsPassword
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, IsPassword_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, IsPassword_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UMG.EditableTextBox:MinimumDesiredWidth
    static readonly int MinimumDesiredWidth_Offset;
    
    public float MinimumDesiredWidth
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinimumDesiredWidth_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinimumDesiredWidth_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.EditableTextBox:IsCaretMovedWhenGainFocus
    static readonly int IsCaretMovedWhenGainFocus_Offset;
    
    public bool IsCaretMovedWhenGainFocus
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, IsCaretMovedWhenGainFocus_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, IsCaretMovedWhenGainFocus_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.EditableTextBox:SelectAllTextWhenFocused
    static readonly int SelectAllTextWhenFocused_Offset;
    
    public bool SelectAllTextWhenFocused
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, SelectAllTextWhenFocused_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, SelectAllTextWhenFocused_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.EditableTextBox:RevertTextOnEscape
    static readonly int RevertTextOnEscape_Offset;
    
    public bool RevertTextOnEscape
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, RevertTextOnEscape_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, RevertTextOnEscape_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.EditableTextBox:ClearKeyboardFocusOnCommit
    static readonly int ClearKeyboardFocusOnCommit_Offset;
    
    public bool ClearKeyboardFocusOnCommit
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, ClearKeyboardFocusOnCommit_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, ClearKeyboardFocusOnCommit_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.EditableTextBox:SelectAllTextOnCommit
    static readonly int SelectAllTextOnCommit_Offset;
    
    public bool SelectAllTextOnCommit
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, SelectAllTextOnCommit_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, SelectAllTextOnCommit_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/UMG.EditableTextBox:Justification
    static readonly int Justification_Offset;
    
    public UnrealSharp.Slate.ETextJustify Justification
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Slate.ETextJustify>.FromNative(IntPtr.Add(NativeObject, Justification_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Slate.ETextJustify>.ToNative(IntPtr.Add(NativeObject, Justification_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/UMG.EditableTextBox:OverflowPolicy
    static readonly int OverflowPolicy_Offset;
    
    public UnrealSharp.SlateCore.ETextOverflowPolicy OverflowPolicy
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.ETextOverflowPolicy>.FromNative(IntPtr.Add(NativeObject, OverflowPolicy_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.ETextOverflowPolicy>.ToNative(IntPtr.Add(NativeObject, OverflowPolicy_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.EditableTextBox:ShapedTextOptions
    static readonly int ShapedTextOptions_Offset;
    
    public UnrealSharp.UMG.ShapedTextOptions ShapedTextOptions
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.UMG.ShapedTextOptionsMarshaler.FromNative(IntPtr.Add(NativeObject, ShapedTextOptions_Offset), 0, this);
        }
    }
    
    // Function /Script/UMG.EditableTextBox:SetIsReadOnly
    static readonly IntPtr SetIsReadOnly_NativeFunction;
    static readonly int SetIsReadOnly_ParamsSize;
    static readonly int SetIsReadOnly_bReadOnly_Offset;
    
    public void SetIsReadOnly(bool bReadOnly)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsReadOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsReadOnly_bReadOnly_Offset), 0, null, bReadOnly);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsReadOnly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.EditableTextBox:SetIsPassword
    static readonly IntPtr SetIsPassword_NativeFunction;
    static readonly int SetIsPassword_ParamsSize;
    static readonly int SetIsPassword_bIsPassword_Offset;
    
    public void SetIsPassword(bool bIsPassword)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsPassword_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsPassword_bIsPassword_Offset), 0, null, bIsPassword);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsPassword_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.EditableTextBox:SetForegroundColor
    static readonly IntPtr SetForegroundColor_NativeFunction;
    static readonly int SetForegroundColor_ParamsSize;
    static readonly int SetForegroundColor_color_Offset;
    
    public void SetForegroundColor(UnrealSharp.CoreUObject.LinearColor color)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetForegroundColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetForegroundColor_color_Offset), 0, null, color);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetForegroundColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.EditableTextBox:HasError
    static readonly IntPtr HasError_NativeFunction;
    static readonly int HasError_ParamsSize;
    static readonly int HasError_ReturnValue_Offset;
    
    public bool HasError()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasError_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasError_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasError_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.EditableTextBox:ClearError
    static readonly IntPtr ClearError_NativeFunction;
    
    public void ClearError()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearError_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class ExpandableArea : UnrealSharp.UMG.Widget
{
    
    static ExpandableArea()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ExpandableArea");
        
        BorderBrush_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BorderBrush");
        BorderColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BorderColor");
        bIsExpanded_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsExpanded");
        MaxHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxHeight");
        HeaderPadding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HeaderPadding");
        AreaPadding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AreaPadding");
        
        SetIsExpanded_Animated_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsExpanded_Animated");
        SetIsExpanded_Animated_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsExpanded_Animated_NativeFunction);
        SetIsExpanded_Animated_IsExpanded_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsExpanded_Animated_NativeFunction, "IsExpanded");
        SetIsExpanded_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsExpanded");
        SetIsExpanded_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsExpanded_NativeFunction);
        SetIsExpanded_IsExpanded_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsExpanded_NativeFunction, "IsExpanded");
        GetIsExpanded_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetIsExpanded");
        GetIsExpanded_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetIsExpanded_NativeFunction);
        GetIsExpanded_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIsExpanded_NativeFunction, "ReturnValue");
        
        
    }
    
    protected ExpandableArea(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/UMG.ExpandableArea:BorderBrush
    static readonly int BorderBrush_Offset;
    
    public UnrealSharp.SlateCore.SlateBrush BorderBrush
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.SlateBrushMarshaler.FromNative(IntPtr.Add(NativeObject, BorderBrush_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.SlateBrushMarshaler.ToNative(IntPtr.Add(NativeObject, BorderBrush_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.ExpandableArea:BorderColor
    static readonly int BorderColor_Offset;
    
    public UnrealSharp.SlateCore.SlateColor BorderColor
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.SlateColorMarshaler.FromNative(IntPtr.Add(NativeObject, BorderColor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.SlateColorMarshaler.ToNative(IntPtr.Add(NativeObject, BorderColor_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.ExpandableArea:bIsExpanded
    static readonly int bIsExpanded_Offset;
    
    public bool bIsExpanded
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bIsExpanded_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bIsExpanded_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UMG.ExpandableArea:MaxHeight
    static readonly int MaxHeight_Offset;
    
    public float MaxHeight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxHeight_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxHeight_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.ExpandableArea:HeaderPadding
    static readonly int HeaderPadding_Offset;
    
    public UnrealSharp.SlateCore.Margin HeaderPadding
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.Margin>.FromNative(IntPtr.Add(NativeObject, HeaderPadding_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.Margin>.ToNative(IntPtr.Add(NativeObject, HeaderPadding_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.ExpandableArea:AreaPadding
    static readonly int AreaPadding_Offset;
    
    public UnrealSharp.SlateCore.Margin AreaPadding
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.Margin>.FromNative(IntPtr.Add(NativeObject, AreaPadding_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.Margin>.ToNative(IntPtr.Add(NativeObject, AreaPadding_Offset), 0, this, value);
        }
    }
    
    // Function /Script/UMG.ExpandableArea:SetIsExpanded_Animated
    static readonly IntPtr SetIsExpanded_Animated_NativeFunction;
    static readonly int SetIsExpanded_Animated_ParamsSize;
    static readonly int SetIsExpanded_Animated_IsExpanded_Offset;
    
    public void SetIsExpanded_Animated(bool isExpanded)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsExpanded_Animated_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsExpanded_Animated_IsExpanded_Offset), 0, null, isExpanded);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsExpanded_Animated_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.ExpandableArea:SetIsExpanded
    static readonly IntPtr SetIsExpanded_NativeFunction;
    static readonly int SetIsExpanded_ParamsSize;
    static readonly int SetIsExpanded_IsExpanded_Offset;
    
    public void SetIsExpanded(bool isExpanded)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsExpanded_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsExpanded_IsExpanded_Offset), 0, null, isExpanded);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsExpanded_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.ExpandableArea:GetIsExpanded
    static readonly IntPtr GetIsExpanded_NativeFunction;
    static readonly int GetIsExpanded_ParamsSize;
    static readonly int GetIsExpanded_ReturnValue_Offset;
    
    public bool GetIsExpanded()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetIsExpanded_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetIsExpanded_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetIsExpanded_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class Image : UnrealSharp.UMG.Widget
{
    
    static Image()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Image");
        
        Brush_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Brush");
        ColorAndOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ColorAndOpacity");
        bFlipForRightToLeftFlowDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bFlipForRightToLeftFlowDirection");
        
        SetOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOpacity");
        SetOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOpacity_NativeFunction);
        SetOpacity_InOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOpacity_NativeFunction, "InOpacity");
        SetDesiredSizeOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDesiredSizeOverride");
        SetDesiredSizeOverride_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDesiredSizeOverride_NativeFunction);
        SetDesiredSizeOverride_DesiredSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDesiredSizeOverride_NativeFunction, "DesiredSize");
        SetColorAndOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetColorAndOpacity");
        SetColorAndOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetColorAndOpacity_NativeFunction);
        SetColorAndOpacity_InColorAndOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetColorAndOpacity_NativeFunction, "InColorAndOpacity");
        SetBrushTintColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrushTintColor");
        SetBrushTintColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrushTintColor_NativeFunction);
        SetBrushTintColor_TintColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushTintColor_NativeFunction, "TintColor");
        SetBrushResourceObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrushResourceObject");
        SetBrushResourceObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrushResourceObject_NativeFunction);
        SetBrushResourceObject_ResourceObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushResourceObject_NativeFunction, "ResourceObject");
        SetBrushFromTextureDynamic_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrushFromTextureDynamic");
        SetBrushFromTextureDynamic_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrushFromTextureDynamic_NativeFunction);
        SetBrushFromTextureDynamic_Texture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushFromTextureDynamic_NativeFunction, "Texture");
        SetBrushFromTextureDynamic_bMatchSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushFromTextureDynamic_NativeFunction, "bMatchSize");
        SetBrushFromTexture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrushFromTexture");
        SetBrushFromTexture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrushFromTexture_NativeFunction);
        SetBrushFromTexture_Texture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushFromTexture_NativeFunction, "Texture");
        SetBrushFromTexture_bMatchSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushFromTexture_NativeFunction, "bMatchSize");
        SetBrushFromSoftTexture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrushFromSoftTexture");
        SetBrushFromSoftTexture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrushFromSoftTexture_NativeFunction);
        SetBrushFromSoftTexture_SoftTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushFromSoftTexture_NativeFunction, "SoftTexture");
        SetBrushFromSoftTexture_bMatchSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushFromSoftTexture_NativeFunction, "bMatchSize");
        SetBrushFromSoftMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrushFromSoftMaterial");
        SetBrushFromSoftMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrushFromSoftMaterial_NativeFunction);
        SetBrushFromSoftMaterial_SoftMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushFromSoftMaterial_NativeFunction, "SoftMaterial");
        SetBrushFromMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrushFromMaterial");
        SetBrushFromMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrushFromMaterial_NativeFunction);
        SetBrushFromMaterial_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushFromMaterial_NativeFunction, "Material");
        SetBrushFromAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrushFromAsset");
        SetBrushFromAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrushFromAsset_NativeFunction);
        SetBrushFromAsset_Asset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushFromAsset_NativeFunction, "Asset");
        SetBrush_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrush");
        SetBrush_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrush_NativeFunction);
        SetBrush_InBrush_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrush_NativeFunction, "InBrush");
        GetDynamicMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDynamicMaterial");
        GetDynamicMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDynamicMaterial_NativeFunction);
        GetDynamicMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDynamicMaterial_NativeFunction, "ReturnValue");
        
        
    }
    
    protected Image(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/UMG.Image:Brush
    static readonly int Brush_Offset;
    
    public UnrealSharp.SlateCore.SlateBrush Brush
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.SlateBrushMarshaler.FromNative(IntPtr.Add(NativeObject, Brush_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.SlateBrushMarshaler.ToNative(IntPtr.Add(NativeObject, Brush_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.Image:ColorAndOpacity
    static readonly int ColorAndOpacity_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor ColorAndOpacity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, ColorAndOpacity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(NativeObject, ColorAndOpacity_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.Image:bFlipForRightToLeftFlowDirection
    static readonly int bFlipForRightToLeftFlowDirection_Offset;
    
    public bool bFlipForRightToLeftFlowDirection
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bFlipForRightToLeftFlowDirection_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bFlipForRightToLeftFlowDirection_Offset), 0, this, value);
        }
    }
    
    // Function /Script/UMG.Image:SetOpacity
    static readonly IntPtr SetOpacity_NativeFunction;
    static readonly int SetOpacity_ParamsSize;
    static readonly int SetOpacity_InOpacity_Offset;
    
    public void SetOpacity(float inOpacity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetOpacity_InOpacity_Offset), 0, null, inOpacity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOpacity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Image:SetDesiredSizeOverride
    static readonly IntPtr SetDesiredSizeOverride_NativeFunction;
    static readonly int SetDesiredSizeOverride_ParamsSize;
    static readonly int SetDesiredSizeOverride_DesiredSize_Offset;
    
    public void SetDesiredSizeOverride(System.DoubleNumerics.Vector2 desiredSize)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDesiredSizeOverride_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetDesiredSizeOverride_DesiredSize_Offset), 0, null, desiredSize);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDesiredSizeOverride_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Image:SetColorAndOpacity
    static readonly IntPtr SetColorAndOpacity_NativeFunction;
    static readonly int SetColorAndOpacity_ParamsSize;
    static readonly int SetColorAndOpacity_InColorAndOpacity_Offset;
    
    public void SetColorAndOpacity(UnrealSharp.CoreUObject.LinearColor inColorAndOpacity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetColorAndOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetColorAndOpacity_InColorAndOpacity_Offset), 0, null, inColorAndOpacity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetColorAndOpacity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Image:SetBrushTintColor
    static readonly IntPtr SetBrushTintColor_NativeFunction;
    static readonly int SetBrushTintColor_ParamsSize;
    static readonly int SetBrushTintColor_TintColor_Offset;
    
    public void SetBrushTintColor(UnrealSharp.SlateCore.SlateColor tintColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrushTintColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateColorMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetBrushTintColor_TintColor_Offset), 0, null, tintColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBrushTintColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Image:SetBrushResourceObject
    static readonly IntPtr SetBrushResourceObject_NativeFunction;
    static readonly int SetBrushResourceObject_ParamsSize;
    static readonly int SetBrushResourceObject_ResourceObject_Offset;
    
    public void SetBrushResourceObject(UnrealSharp.CoreUObject.Object resourceObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrushResourceObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetBrushResourceObject_ResourceObject_Offset), 0, null, resourceObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBrushResourceObject_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Image:SetBrushFromTextureDynamic
    static readonly IntPtr SetBrushFromTextureDynamic_NativeFunction;
    static readonly int SetBrushFromTextureDynamic_ParamsSize;
    static readonly int SetBrushFromTextureDynamic_Texture_Offset;
    static readonly int SetBrushFromTextureDynamic_bMatchSize_Offset;
    
    public void SetBrushFromTextureDynamic(UnrealSharp.Engine.Texture2DDynamic texture, bool bMatchSize = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrushFromTextureDynamic_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Texture2DDynamic>.ToNative(IntPtr.Add(ParamsBuffer, SetBrushFromTextureDynamic_Texture_Offset), 0, null, texture);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetBrushFromTextureDynamic_bMatchSize_Offset), 0, null, bMatchSize);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBrushFromTextureDynamic_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Image:SetBrushFromTexture
    static readonly IntPtr SetBrushFromTexture_NativeFunction;
    static readonly int SetBrushFromTexture_ParamsSize;
    static readonly int SetBrushFromTexture_Texture_Offset;
    static readonly int SetBrushFromTexture_bMatchSize_Offset;
    
    public void SetBrushFromTexture(UnrealSharp.Engine.Texture2D texture, bool bMatchSize = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrushFromTexture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Texture2D>.ToNative(IntPtr.Add(ParamsBuffer, SetBrushFromTexture_Texture_Offset), 0, null, texture);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetBrushFromTexture_bMatchSize_Offset), 0, null, bMatchSize);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBrushFromTexture_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Image:SetBrushFromSoftTexture
    static readonly IntPtr SetBrushFromSoftTexture_NativeFunction;
    static readonly int SetBrushFromSoftTexture_ParamsSize;
    static readonly int SetBrushFromSoftTexture_SoftTexture_Offset;
    static readonly int SetBrushFromSoftTexture_bMatchSize_Offset;
    
    public void SetBrushFromSoftTexture(SoftObject<UnrealSharp.Engine.Texture2D> softTexture, bool bMatchSize = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrushFromSoftTexture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<SoftObject<UnrealSharp.Engine.Texture2D>>.ToNative(IntPtr.Add(ParamsBuffer, SetBrushFromSoftTexture_SoftTexture_Offset), 0, null, softTexture);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetBrushFromSoftTexture_bMatchSize_Offset), 0, null, bMatchSize);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBrushFromSoftTexture_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Image:SetBrushFromSoftMaterial
    static readonly IntPtr SetBrushFromSoftMaterial_NativeFunction;
    static readonly int SetBrushFromSoftMaterial_ParamsSize;
    static readonly int SetBrushFromSoftMaterial_SoftMaterial_Offset;
    
    public void SetBrushFromSoftMaterial(SoftObject<UnrealSharp.Engine.MaterialInterface> softMaterial)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrushFromSoftMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<SoftObject<UnrealSharp.Engine.MaterialInterface>>.ToNative(IntPtr.Add(ParamsBuffer, SetBrushFromSoftMaterial_SoftMaterial_Offset), 0, null, softMaterial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBrushFromSoftMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Image:SetBrushFromMaterial
    static readonly IntPtr SetBrushFromMaterial_NativeFunction;
    static readonly int SetBrushFromMaterial_ParamsSize;
    static readonly int SetBrushFromMaterial_Material_Offset;
    
    public void SetBrushFromMaterial(UnrealSharp.Engine.MaterialInterface material)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrushFromMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetBrushFromMaterial_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBrushFromMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Image:SetBrushFromAsset
    static readonly IntPtr SetBrushFromAsset_NativeFunction;
    static readonly int SetBrushFromAsset_ParamsSize;
    static readonly int SetBrushFromAsset_Asset_Offset;
    
    public void SetBrushFromAsset(UnrealSharp.Engine.SlateBrushAsset asset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrushFromAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SlateBrushAsset>.ToNative(IntPtr.Add(ParamsBuffer, SetBrushFromAsset_Asset_Offset), 0, null, asset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBrushFromAsset_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Image:SetBrush
    static readonly IntPtr SetBrush_NativeFunction;
    static readonly int SetBrush_ParamsSize;
    static readonly int SetBrush_InBrush_Offset;
    
    public void SetBrush(UnrealSharp.SlateCore.SlateBrush inBrush)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrush_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateBrushMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetBrush_InBrush_Offset), 0, null, inBrush);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBrush_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/UMG.Image:GetDynamicMaterial
    static readonly IntPtr GetDynamicMaterial_NativeFunction;
    static readonly int GetDynamicMaterial_ParamsSize;
    static readonly int GetDynamicMaterial_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInstanceDynamic GetDynamicMaterial()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDynamicMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDynamicMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInstanceDynamic returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceDynamic>.FromNative(IntPtr.Add(ParamsBuffer, GetDynamicMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class MenuAnchor : UnrealSharp.UMG.ContentWidget
{
    
    static MenuAnchor()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MenuAnchor");
        
        MenuClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MenuClass");
        Placement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Placement");
        bFitInWindow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bFitInWindow");
        ShouldDeferPaintingAfterWindowContent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShouldDeferPaintingAfterWindowContent");
        UseApplicationMenuStack_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "UseApplicationMenuStack");
        
        ToggleOpen_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ToggleOpen");
        ToggleOpen_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ToggleOpen_NativeFunction);
        ToggleOpen_bFocusOnOpen_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToggleOpen_NativeFunction, "bFocusOnOpen");
        ShouldOpenDueToClick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ShouldOpenDueToClick");
        ShouldOpenDueToClick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ShouldOpenDueToClick_NativeFunction);
        ShouldOpenDueToClick_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShouldOpenDueToClick_NativeFunction, "ReturnValue");
        SetPlacement_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlacement");
        SetPlacement_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlacement_NativeFunction);
        SetPlacement_InPlacement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlacement_NativeFunction, "InPlacement");
        Open_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Open");
        Open_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Open_NativeFunction);
        Open_bFocusMenu_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Open_NativeFunction, "bFocusMenu");
        IsOpen_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsOpen");
        IsOpen_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsOpen_NativeFunction);
        IsOpen_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsOpen_NativeFunction, "ReturnValue");
        HasOpenSubMenus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasOpenSubMenus");
        HasOpenSubMenus_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasOpenSubMenus_NativeFunction);
        HasOpenSubMenus_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasOpenSubMenus_NativeFunction, "ReturnValue");
        GetMenuPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMenuPosition");
        GetMenuPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMenuPosition_NativeFunction);
        GetMenuPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMenuPosition_NativeFunction, "ReturnValue");
        FitInWindow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FitInWindow");
        FitInWindow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FitInWindow_NativeFunction);
        FitInWindow_bFit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FitInWindow_NativeFunction, "bFit");
        Close_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Close");
        
        
    }
    
    protected MenuAnchor(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ClassProperty /Script/UMG.MenuAnchor:MenuClass
    static readonly int MenuClass_Offset;
    
    public SubclassOf<UnrealSharp.UMG.UserWidget> MenuClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.UMG.UserWidget>.FromNative(IntPtr.Add(NativeObject, MenuClass_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/UMG.MenuAnchor:Placement
    static readonly int Placement_Offset;
    
    public UnrealSharp.SlateCore.EMenuPlacement Placement
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.EMenuPlacement>.FromNative(IntPtr.Add(NativeObject, Placement_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.EMenuPlacement>.ToNative(IntPtr.Add(NativeObject, Placement_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.MenuAnchor:bFitInWindow
    static readonly int bFitInWindow_Offset;
    
    public bool bFitInWindow
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bFitInWindow_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bFitInWindow_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.MenuAnchor:ShouldDeferPaintingAfterWindowContent
    static readonly int ShouldDeferPaintingAfterWindowContent_Offset;
    
    public bool ShouldDeferPaintingAfterWindowContent
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, ShouldDeferPaintingAfterWindowContent_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/UMG.MenuAnchor:UseApplicationMenuStack
    static readonly int UseApplicationMenuStack_Offset;
    
    public bool UseApplicationMenuStack
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, UseApplicationMenuStack_Offset), 0, this);
        }
    }
    
    // Function /Script/UMG.MenuAnchor:ToggleOpen
    static readonly IntPtr ToggleOpen_NativeFunction;
    static readonly int ToggleOpen_ParamsSize;
    static readonly int ToggleOpen_bFocusOnOpen_Offset;
    
    public void ToggleOpen(bool bFocusOnOpen)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ToggleOpen_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ToggleOpen_bFocusOnOpen_Offset), 0, null, bFocusOnOpen);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ToggleOpen_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.MenuAnchor:ShouldOpenDueToClick
    static readonly IntPtr ShouldOpenDueToClick_NativeFunction;
    static readonly int ShouldOpenDueToClick_ParamsSize;
    static readonly int ShouldOpenDueToClick_ReturnValue_Offset;
    
    public bool ShouldOpenDueToClick()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ShouldOpenDueToClick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ShouldOpenDueToClick_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ShouldOpenDueToClick_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.MenuAnchor:SetPlacement
    static readonly IntPtr SetPlacement_NativeFunction;
    static readonly int SetPlacement_ParamsSize;
    static readonly int SetPlacement_InPlacement_Offset;
    
    public void SetPlacement(UnrealSharp.SlateCore.EMenuPlacement inPlacement)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlacement_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.EMenuPlacement>.ToNative(IntPtr.Add(ParamsBuffer, SetPlacement_InPlacement_Offset), 0, null, inPlacement);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlacement_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.MenuAnchor:Open
    static readonly IntPtr Open_NativeFunction;
    static readonly int Open_ParamsSize;
    static readonly int Open_bFocusMenu_Offset;
    
    public void Open(bool bFocusMenu)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Open_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Open_bFocusMenu_Offset), 0, null, bFocusMenu);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Open_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.MenuAnchor:IsOpen
    static readonly IntPtr IsOpen_NativeFunction;
    static readonly int IsOpen_ParamsSize;
    static readonly int IsOpen_ReturnValue_Offset;
    
    public bool IsOpen()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsOpen_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsOpen_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsOpen_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.MenuAnchor:HasOpenSubMenus
    static readonly IntPtr HasOpenSubMenus_NativeFunction;
    static readonly int HasOpenSubMenus_ParamsSize;
    static readonly int HasOpenSubMenus_ReturnValue_Offset;
    
    public bool HasOpenSubMenus()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasOpenSubMenus_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasOpenSubMenus_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasOpenSubMenus_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.MenuAnchor:GetMenuPosition
    static readonly IntPtr GetMenuPosition_NativeFunction;
    static readonly int GetMenuPosition_ParamsSize;
    static readonly int GetMenuPosition_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 GetMenuPosition()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMenuPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMenuPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetMenuPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.MenuAnchor:FitInWindow
    static readonly IntPtr FitInWindow_NativeFunction;
    static readonly int FitInWindow_ParamsSize;
    static readonly int FitInWindow_bFit_Offset;
    
    public void FitInWindow(bool bFit)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FitInWindow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, FitInWindow_bFit_Offset), 0, null, bFit);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FitInWindow_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.MenuAnchor:Close
    static readonly IntPtr Close_NativeFunction;
    
    public void Close()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Close_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
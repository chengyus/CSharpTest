// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class MultiLineEditableText : UnrealSharp.UMG.TextLayoutWidget
{
    
    static MultiLineEditableText()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MultiLineEditableText");
        
        Text_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Text");
        Text_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Text");
        HintText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HintText");
        HintText_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "HintText");
        WidgetStyle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WidgetStyle");
        bIsReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsReadOnly");
        SelectAllTextWhenFocused_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SelectAllTextWhenFocused");
        RevertTextOnEscape_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RevertTextOnEscape");
        ClearKeyboardFocusOnCommit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ClearKeyboardFocusOnCommit");
        
        SetIsReadOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsReadOnly");
        SetIsReadOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsReadOnly_NativeFunction);
        SetIsReadOnly_bReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsReadOnly_NativeFunction, "bReadOnly");
        SetFontOutlineMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFontOutlineMaterial");
        SetFontOutlineMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFontOutlineMaterial_NativeFunction);
        SetFontOutlineMaterial_InMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFontOutlineMaterial_NativeFunction, "InMaterial");
        SetFontMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFontMaterial");
        SetFontMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFontMaterial_NativeFunction);
        SetFontMaterial_InMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFontMaterial_NativeFunction, "InMaterial");
        SetFont_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFont");
        SetFont_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFont_NativeFunction);
        SetFont_InFontInfo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFont_NativeFunction, "InFontInfo");
        GetFont_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFont");
        GetFont_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFont_NativeFunction);
        GetFont_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFont_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MultiLineEditableText(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // TextProperty /Script/UMG.MultiLineEditableText:Text
    static readonly int Text_Offset;
    static readonly IntPtr Text_NativeProperty;
    TextMarshaller Text_Wrapper;
    
    public Text Text
    {
        get
        {
            if (Text_Wrapper == null)
            {
                Text_Wrapper  = new TextMarshaller(1);
            }
            return Text_Wrapper.FromNative(this.NativeObject + Text_Offset, 0, this);
        }
    }
    
    // TextProperty /Script/UMG.MultiLineEditableText:HintText
    static readonly int HintText_Offset;
    static readonly IntPtr HintText_NativeProperty;
    TextMarshaller HintText_Wrapper;
    
    public Text HintText
    {
        get
        {
            if (HintText_Wrapper == null)
            {
                HintText_Wrapper  = new TextMarshaller(1);
            }
            return HintText_Wrapper.FromNative(this.NativeObject + HintText_Offset, 0, this);
        }
    }
    
    // StructProperty /Script/UMG.MultiLineEditableText:WidgetStyle
    static readonly int WidgetStyle_Offset;
    
    public UnrealSharp.SlateCore.TextBlockStyle WidgetStyle
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.TextBlockStyleMarshaler.FromNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.TextBlockStyleMarshaler.ToNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.MultiLineEditableText:bIsReadOnly
    static readonly int bIsReadOnly_Offset;
    
    public bool bIsReadOnly
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bIsReadOnly_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bIsReadOnly_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.MultiLineEditableText:SelectAllTextWhenFocused
    static readonly int SelectAllTextWhenFocused_Offset;
    
    public bool SelectAllTextWhenFocused
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, SelectAllTextWhenFocused_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, SelectAllTextWhenFocused_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.MultiLineEditableText:RevertTextOnEscape
    static readonly int RevertTextOnEscape_Offset;
    
    public bool RevertTextOnEscape
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, RevertTextOnEscape_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, RevertTextOnEscape_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.MultiLineEditableText:ClearKeyboardFocusOnCommit
    static readonly int ClearKeyboardFocusOnCommit_Offset;
    
    public bool ClearKeyboardFocusOnCommit
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, ClearKeyboardFocusOnCommit_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, ClearKeyboardFocusOnCommit_Offset), 0, this, value);
        }
    }
    
    // Function /Script/UMG.MultiLineEditableText:SetIsReadOnly
    static readonly IntPtr SetIsReadOnly_NativeFunction;
    static readonly int SetIsReadOnly_ParamsSize;
    static readonly int SetIsReadOnly_bReadOnly_Offset;
    
    public void SetIsReadOnly(bool bReadOnly)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsReadOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsReadOnly_bReadOnly_Offset), 0, null, bReadOnly);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsReadOnly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.MultiLineEditableText:SetFontOutlineMaterial
    static readonly IntPtr SetFontOutlineMaterial_NativeFunction;
    static readonly int SetFontOutlineMaterial_ParamsSize;
    static readonly int SetFontOutlineMaterial_InMaterial_Offset;
    
    public void SetFontOutlineMaterial(UnrealSharp.Engine.MaterialInterface inMaterial)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFontOutlineMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetFontOutlineMaterial_InMaterial_Offset), 0, null, inMaterial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFontOutlineMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.MultiLineEditableText:SetFontMaterial
    static readonly IntPtr SetFontMaterial_NativeFunction;
    static readonly int SetFontMaterial_ParamsSize;
    static readonly int SetFontMaterial_InMaterial_Offset;
    
    public void SetFontMaterial(UnrealSharp.Engine.MaterialInterface inMaterial)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFontMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetFontMaterial_InMaterial_Offset), 0, null, inMaterial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFontMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.MultiLineEditableText:SetFont
    static readonly IntPtr SetFont_NativeFunction;
    static readonly int SetFont_ParamsSize;
    static readonly int SetFont_InFontInfo_Offset;
    
    public void SetFont(UnrealSharp.SlateCore.SlateFontInfo inFontInfo)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFont_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateFontInfoMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetFont_InFontInfo_Offset), 0, null, inFontInfo);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFont_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.MultiLineEditableText:GetFont
    static readonly IntPtr GetFont_NativeFunction;
    static readonly int GetFont_ParamsSize;
    static readonly int GetFont_ReturnValue_Offset;
    
    public UnrealSharp.SlateCore.SlateFontInfo GetFont()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFont_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFont_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.SlateFontInfo returnValue;
            returnValue = UnrealSharp.SlateCore.SlateFontInfoMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetFont_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
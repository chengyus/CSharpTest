// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class MultiLineEditableTextBox : UnrealSharp.UMG.TextLayoutWidget
{
    
    static MultiLineEditableTextBox()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MultiLineEditableTextBox");
        
        Text_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Text");
        Text_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Text");
        HintText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HintText");
        HintText_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "HintText");
        WidgetStyle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WidgetStyle");
        bIsReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsReadOnly");
        
        SetTextStyle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTextStyle");
        SetTextStyle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTextStyle_NativeFunction);
        SetTextStyle_InTextStyle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTextStyle_NativeFunction, "InTextStyle");
        SetIsReadOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsReadOnly");
        SetIsReadOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsReadOnly_NativeFunction);
        SetIsReadOnly_bReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsReadOnly_NativeFunction, "bReadOnly");
        SetForegroundColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetForegroundColor");
        SetForegroundColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetForegroundColor_NativeFunction);
        SetForegroundColor_color_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForegroundColor_NativeFunction, "color");
        
        
    }
    
    protected MultiLineEditableTextBox(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // TextProperty /Script/UMG.MultiLineEditableTextBox:Text
    static readonly int Text_Offset;
    static readonly IntPtr Text_NativeProperty;
    TextMarshaller Text_Wrapper;
    
    public Text Text
    {
        get
        {
            if (Text_Wrapper == null)
            {
                Text_Wrapper  = new TextMarshaller(1);
            }
            return Text_Wrapper.FromNative(this.NativeObject + Text_Offset, 0, this);
        }
    }
    
    // TextProperty /Script/UMG.MultiLineEditableTextBox:HintText
    static readonly int HintText_Offset;
    static readonly IntPtr HintText_NativeProperty;
    TextMarshaller HintText_Wrapper;
    
    public Text HintText
    {
        get
        {
            if (HintText_Wrapper == null)
            {
                HintText_Wrapper  = new TextMarshaller(1);
            }
            return HintText_Wrapper.FromNative(this.NativeObject + HintText_Offset, 0, this);
        }
    }
    
    // StructProperty /Script/UMG.MultiLineEditableTextBox:WidgetStyle
    static readonly int WidgetStyle_Offset;
    
    public UnrealSharp.SlateCore.EditableTextBoxStyle WidgetStyle
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.EditableTextBoxStyleMarshaler.FromNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.EditableTextBoxStyleMarshaler.ToNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.MultiLineEditableTextBox:bIsReadOnly
    static readonly int bIsReadOnly_Offset;
    
    public bool bIsReadOnly
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bIsReadOnly_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bIsReadOnly_Offset), 0, this, value);
        }
    }
    
    // Function /Script/UMG.MultiLineEditableTextBox:SetTextStyle
    static readonly IntPtr SetTextStyle_NativeFunction;
    static readonly int SetTextStyle_ParamsSize;
    static readonly int SetTextStyle_InTextStyle_Offset;
    
    public void SetTextStyle(UnrealSharp.SlateCore.TextBlockStyle inTextStyle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTextStyle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.TextBlockStyleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetTextStyle_InTextStyle_Offset), 0, null, inTextStyle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTextStyle_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/UMG.MultiLineEditableTextBox:SetIsReadOnly
    static readonly IntPtr SetIsReadOnly_NativeFunction;
    static readonly int SetIsReadOnly_ParamsSize;
    static readonly int SetIsReadOnly_bReadOnly_Offset;
    
    public void SetIsReadOnly(bool bReadOnly)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsReadOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsReadOnly_bReadOnly_Offset), 0, null, bReadOnly);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsReadOnly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.MultiLineEditableTextBox:SetForegroundColor
    static readonly IntPtr SetForegroundColor_NativeFunction;
    static readonly int SetForegroundColor_ParamsSize;
    static readonly int SetForegroundColor_color_Offset;
    
    public void SetForegroundColor(UnrealSharp.CoreUObject.LinearColor color)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetForegroundColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetForegroundColor_color_Offset), 0, null, color);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetForegroundColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
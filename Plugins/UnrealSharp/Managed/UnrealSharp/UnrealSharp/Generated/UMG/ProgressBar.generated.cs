// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class ProgressBar : UnrealSharp.UMG.Widget
{
    
    static ProgressBar()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ProgressBar");
        
        WidgetStyle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WidgetStyle");
        Percent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Percent");
        BarFillType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BarFillType");
        BarFillStyle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BarFillStyle");
        bIsMarquee_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsMarquee");
        BorderPadding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BorderPadding");
        FillColorAndOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FillColorAndOpacity");
        
        SetPercent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPercent");
        SetPercent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPercent_NativeFunction);
        SetPercent_InPercent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPercent_NativeFunction, "InPercent");
        SetIsMarquee_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsMarquee");
        SetIsMarquee_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsMarquee_NativeFunction);
        SetIsMarquee_InbIsMarquee_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsMarquee_NativeFunction, "InbIsMarquee");
        SetFillColorAndOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFillColorAndOpacity");
        SetFillColorAndOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFillColorAndOpacity_NativeFunction);
        SetFillColorAndOpacity_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFillColorAndOpacity_NativeFunction, "InColor");
        
        
    }
    
    protected ProgressBar(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/UMG.ProgressBar:WidgetStyle
    static readonly int WidgetStyle_Offset;
    
    public UnrealSharp.SlateCore.ProgressBarStyle WidgetStyle
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.ProgressBarStyleMarshaler.FromNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.ProgressBarStyleMarshaler.ToNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UMG.ProgressBar:Percent
    static readonly int Percent_Offset;
    
    public float Percent
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Percent_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Percent_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/UMG.ProgressBar:BarFillType
    static readonly int BarFillType_Offset;
    
    public UnrealSharp.Slate.EProgressBarFillType BarFillType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Slate.EProgressBarFillType>.FromNative(IntPtr.Add(NativeObject, BarFillType_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Slate.EProgressBarFillType>.ToNative(IntPtr.Add(NativeObject, BarFillType_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/UMG.ProgressBar:BarFillStyle
    static readonly int BarFillStyle_Offset;
    
    public UnrealSharp.Slate.EProgressBarFillStyle BarFillStyle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Slate.EProgressBarFillStyle>.FromNative(IntPtr.Add(NativeObject, BarFillStyle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Slate.EProgressBarFillStyle>.ToNative(IntPtr.Add(NativeObject, BarFillStyle_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.ProgressBar:bIsMarquee
    static readonly int bIsMarquee_Offset;
    
    public bool bIsMarquee
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bIsMarquee_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bIsMarquee_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.ProgressBar:BorderPadding
    static readonly int BorderPadding_Offset;
    
    public System.DoubleNumerics.Vector2 BorderPadding
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, BorderPadding_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(NativeObject, BorderPadding_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.ProgressBar:FillColorAndOpacity
    static readonly int FillColorAndOpacity_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor FillColorAndOpacity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, FillColorAndOpacity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(NativeObject, FillColorAndOpacity_Offset), 0, this, value);
        }
    }
    
    // Function /Script/UMG.ProgressBar:SetPercent
    static readonly IntPtr SetPercent_NativeFunction;
    static readonly int SetPercent_ParamsSize;
    static readonly int SetPercent_InPercent_Offset;
    
    public void SetPercent(float inPercent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPercent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPercent_InPercent_Offset), 0, null, inPercent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPercent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.ProgressBar:SetIsMarquee
    static readonly IntPtr SetIsMarquee_NativeFunction;
    static readonly int SetIsMarquee_ParamsSize;
    static readonly int SetIsMarquee_InbIsMarquee_Offset;
    
    public void SetIsMarquee(bool inbIsMarquee)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsMarquee_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsMarquee_InbIsMarquee_Offset), 0, null, inbIsMarquee);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsMarquee_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.ProgressBar:SetFillColorAndOpacity
    static readonly IntPtr SetFillColorAndOpacity_NativeFunction;
    static readonly int SetFillColorAndOpacity_ParamsSize;
    static readonly int SetFillColorAndOpacity_InColor_Offset;
    
    public void SetFillColorAndOpacity(UnrealSharp.CoreUObject.LinearColor inColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFillColorAndOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetFillColorAndOpacity_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFillColorAndOpacity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
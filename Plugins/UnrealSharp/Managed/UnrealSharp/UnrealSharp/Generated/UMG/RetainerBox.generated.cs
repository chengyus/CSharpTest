// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class RetainerBox : UnrealSharp.UMG.ContentWidget
{
    
    static RetainerBox()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RetainerBox");
        
        bRetainRender_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRetainRender");
        RenderOnInvalidation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RenderOnInvalidation");
        RenderOnPhase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RenderOnPhase");
        Phase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Phase");
        PhaseCount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PhaseCount");
        EffectMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EffectMaterial");
        TextureParameter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextureParameter");
        bShowEffectsInDesigner_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShowEffectsInDesigner");
        
        SetTextureParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTextureParameter");
        SetTextureParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTextureParameter_NativeFunction);
        SetTextureParameter_TextureParameter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTextureParameter_NativeFunction, "TextureParameter");
        SetRetainRendering_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRetainRendering");
        SetRetainRendering_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRetainRendering_NativeFunction);
        SetRetainRendering_bInRetainRendering_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRetainRendering_NativeFunction, "bInRetainRendering");
        SetRenderingPhase_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRenderingPhase");
        SetRenderingPhase_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRenderingPhase_NativeFunction);
        SetRenderingPhase_RenderPhase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRenderingPhase_NativeFunction, "RenderPhase");
        SetRenderingPhase_TotalPhases_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRenderingPhase_NativeFunction, "TotalPhases");
        SetEffectMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEffectMaterial");
        SetEffectMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEffectMaterial_NativeFunction);
        SetEffectMaterial_EffectMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEffectMaterial_NativeFunction, "EffectMaterial");
        RequestRender_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RequestRender");
        GetEffectMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEffectMaterial");
        GetEffectMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEffectMaterial_NativeFunction);
        GetEffectMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEffectMaterial_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RetainerBox(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/UMG.RetainerBox:bRetainRender
    static readonly int bRetainRender_Offset;
    
    public bool bRetainRender
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bRetainRender_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bRetainRender_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.RetainerBox:RenderOnInvalidation
    static readonly int RenderOnInvalidation_Offset;
    
    public bool RenderOnInvalidation
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, RenderOnInvalidation_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/UMG.RetainerBox:RenderOnPhase
    static readonly int RenderOnPhase_Offset;
    
    public bool RenderOnPhase
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, RenderOnPhase_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/UMG.RetainerBox:Phase
    static readonly int Phase_Offset;
    
    public int Phase
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, Phase_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/UMG.RetainerBox:PhaseCount
    static readonly int PhaseCount_Offset;
    
    public int PhaseCount
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, PhaseCount_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/UMG.RetainerBox:EffectMaterial
    static readonly int EffectMaterial_Offset;
    
    public UnrealSharp.Engine.MaterialInterface EffectMaterial
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(NativeObject, EffectMaterial_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(NativeObject, EffectMaterial_Offset), 0, this, value);
        }
    }
    
    // NameProperty /Script/UMG.RetainerBox:TextureParameter
    static readonly int TextureParameter_Offset;
    
    public Name TextureParameter
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, TextureParameter_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, TextureParameter_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.RetainerBox:bShowEffectsInDesigner
    static readonly int bShowEffectsInDesigner_Offset;
    
    public bool bShowEffectsInDesigner
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bShowEffectsInDesigner_Offset), 0, this);
        }
    }
    
    // Function /Script/UMG.RetainerBox:SetTextureParameter
    static readonly IntPtr SetTextureParameter_NativeFunction;
    static readonly int SetTextureParameter_ParamsSize;
    static readonly int SetTextureParameter_TextureParameter_Offset;
    
    public void SetTextureParameter(Name textureParameter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTextureParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetTextureParameter_TextureParameter_Offset), 0, null, textureParameter);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTextureParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.RetainerBox:SetRetainRendering
    static readonly IntPtr SetRetainRendering_NativeFunction;
    static readonly int SetRetainRendering_ParamsSize;
    static readonly int SetRetainRendering_bInRetainRendering_Offset;
    
    public void SetRetainRendering(bool bInRetainRendering)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRetainRendering_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetRetainRendering_bInRetainRendering_Offset), 0, null, bInRetainRendering);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRetainRendering_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.RetainerBox:SetRenderingPhase
    static readonly IntPtr SetRenderingPhase_NativeFunction;
    static readonly int SetRenderingPhase_ParamsSize;
    static readonly int SetRenderingPhase_RenderPhase_Offset;
    static readonly int SetRenderingPhase_TotalPhases_Offset;
    
    public void SetRenderingPhase(int renderPhase, int totalPhases)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRenderingPhase_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetRenderingPhase_RenderPhase_Offset), 0, null, renderPhase);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetRenderingPhase_TotalPhases_Offset), 0, null, totalPhases);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRenderingPhase_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.RetainerBox:SetEffectMaterial
    static readonly IntPtr SetEffectMaterial_NativeFunction;
    static readonly int SetEffectMaterial_ParamsSize;
    static readonly int SetEffectMaterial_EffectMaterial_Offset;
    
    public void SetEffectMaterial(UnrealSharp.Engine.MaterialInterface effectMaterial)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEffectMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetEffectMaterial_EffectMaterial_Offset), 0, null, effectMaterial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetEffectMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.RetainerBox:RequestRender
    static readonly IntPtr RequestRender_NativeFunction;
    
    public void RequestRender()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RequestRender_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.RetainerBox:GetEffectMaterial
    static readonly IntPtr GetEffectMaterial_NativeFunction;
    static readonly int GetEffectMaterial_ParamsSize;
    static readonly int GetEffectMaterial_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInstanceDynamic GetEffectMaterial()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEffectMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEffectMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInstanceDynamic returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceDynamic>.FromNative(IntPtr.Add(ParamsBuffer, GetEffectMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
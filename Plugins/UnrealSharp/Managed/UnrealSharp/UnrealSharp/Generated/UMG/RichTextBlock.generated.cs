// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class RichTextBlock : UnrealSharp.UMG.TextLayoutWidget
{
    
    static RichTextBlock()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RichTextBlock");
        
        Text_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Text");
        Text_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Text");
        TextStyleSet_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextStyleSet");
        DefaultTextStyleOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultTextStyleOverride");
        MinDesiredWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinDesiredWidth");
        TextTransformPolicy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextTransformPolicy");
        TextOverflowPolicy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextOverflowPolicy");
        
        SetTextTransformPolicy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTextTransformPolicy");
        SetTextTransformPolicy_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTextTransformPolicy_NativeFunction);
        SetTextTransformPolicy_InTransformPolicy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTextTransformPolicy_NativeFunction, "InTransformPolicy");
        SetTextStyleSet_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTextStyleSet");
        SetTextStyleSet_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTextStyleSet_NativeFunction);
        SetTextStyleSet_NewTextStyleSet_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTextStyleSet_NativeFunction, "NewTextStyleSet");
        SetTextOverflowPolicy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTextOverflowPolicy");
        SetTextOverflowPolicy_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTextOverflowPolicy_NativeFunction);
        SetTextOverflowPolicy_InOverflowPolicy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTextOverflowPolicy_NativeFunction, "InOverflowPolicy");
        SetMinDesiredWidth_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMinDesiredWidth");
        SetMinDesiredWidth_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMinDesiredWidth_NativeFunction);
        SetMinDesiredWidth_InMinDesiredWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMinDesiredWidth_NativeFunction, "InMinDesiredWidth");
        SetDefaultTextStyle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultTextStyle");
        SetDefaultTextStyle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultTextStyle_NativeFunction);
        SetDefaultTextStyle_InDefaultTextStyle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultTextStyle_NativeFunction, "InDefaultTextStyle");
        SetDefaultStrikeBrush_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultStrikeBrush");
        SetDefaultStrikeBrush_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultStrikeBrush_NativeFunction);
        SetDefaultStrikeBrush_InStrikeBrush_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultStrikeBrush_NativeFunction, "InStrikeBrush");
        SetDefaultShadowOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultShadowOffset");
        SetDefaultShadowOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultShadowOffset_NativeFunction);
        SetDefaultShadowOffset_InShadowOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultShadowOffset_NativeFunction, "InShadowOffset");
        SetDefaultShadowColorAndOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultShadowColorAndOpacity");
        SetDefaultShadowColorAndOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultShadowColorAndOpacity_NativeFunction);
        SetDefaultShadowColorAndOpacity_InShadowColorAndOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultShadowColorAndOpacity_NativeFunction, "InShadowColorAndOpacity");
        SetDefaultMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultMaterial");
        SetDefaultMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultMaterial_NativeFunction);
        SetDefaultMaterial_InMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultMaterial_NativeFunction, "InMaterial");
        SetDefaultFont_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultFont");
        SetDefaultFont_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultFont_NativeFunction);
        SetDefaultFont_InFontInfo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultFont_NativeFunction, "InFontInfo");
        SetDefaultColorAndOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultColorAndOpacity");
        SetDefaultColorAndOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultColorAndOpacity_NativeFunction);
        SetDefaultColorAndOpacity_InColorAndOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultColorAndOpacity_NativeFunction, "InColorAndOpacity");
        SetDecorators_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDecorators");
        SetDecorators_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDecorators_NativeFunction);
        SetDecorators_InDecoratorClasses_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDecorators_NativeFunction, "InDecoratorClasses");
        SetDecorators_InDecoratorClasses_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetDecorators_NativeFunction, "InDecoratorClasses");
        SetAutoWrapText_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAutoWrapText");
        SetAutoWrapText_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAutoWrapText_NativeFunction);
        SetAutoWrapText_InAutoTextWrap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAutoWrapText_NativeFunction, "InAutoTextWrap");
        RefreshTextLayout_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RefreshTextLayout");
        GetTextStyleSet_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTextStyleSet");
        GetTextStyleSet_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTextStyleSet_NativeFunction);
        GetTextStyleSet_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextStyleSet_NativeFunction, "ReturnValue");
        GetDefaultDynamicMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultDynamicMaterial");
        GetDefaultDynamicMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultDynamicMaterial_NativeFunction);
        GetDefaultDynamicMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultDynamicMaterial_NativeFunction, "ReturnValue");
        GetDecoratorByClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDecoratorByClass");
        GetDecoratorByClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDecoratorByClass_NativeFunction);
        GetDecoratorByClass_DecoratorClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDecoratorByClass_NativeFunction, "DecoratorClass");
        GetDecoratorByClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDecoratorByClass_NativeFunction, "ReturnValue");
        ClearAllDefaultStyleOverrides_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearAllDefaultStyleOverrides");
        
        
    }
    
    protected RichTextBlock(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // TextProperty /Script/UMG.RichTextBlock:Text
    static readonly int Text_Offset;
    static readonly IntPtr Text_NativeProperty;
    TextMarshaller Text_Wrapper;
    
    public Text Text
    {
        get
        {
            if (Text_Wrapper == null)
            {
                Text_Wrapper  = new TextMarshaller(1);
            }
            return Text_Wrapper.FromNative(this.NativeObject + Text_Offset, 0, this);
        }
    }
    
    // ObjectProperty /Script/UMG.RichTextBlock:TextStyleSet
    static readonly int TextStyleSet_Offset;
    
    public UnrealSharp.Engine.DataTable TextStyleSet
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.DataTable>.FromNative(IntPtr.Add(NativeObject, TextStyleSet_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.DataTable>.ToNative(IntPtr.Add(NativeObject, TextStyleSet_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.RichTextBlock:DefaultTextStyleOverride
    static readonly int DefaultTextStyleOverride_Offset;
    
    public UnrealSharp.SlateCore.TextBlockStyle DefaultTextStyleOverride
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.TextBlockStyleMarshaler.FromNative(IntPtr.Add(NativeObject, DefaultTextStyleOverride_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.TextBlockStyleMarshaler.ToNative(IntPtr.Add(NativeObject, DefaultTextStyleOverride_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UMG.RichTextBlock:MinDesiredWidth
    static readonly int MinDesiredWidth_Offset;
    
    public float MinDesiredWidth
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinDesiredWidth_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinDesiredWidth_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/UMG.RichTextBlock:TextTransformPolicy
    static readonly int TextTransformPolicy_Offset;
    
    public UnrealSharp.SlateCore.ETextTransformPolicy TextTransformPolicy
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.ETextTransformPolicy>.FromNative(IntPtr.Add(NativeObject, TextTransformPolicy_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.ETextTransformPolicy>.ToNative(IntPtr.Add(NativeObject, TextTransformPolicy_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/UMG.RichTextBlock:TextOverflowPolicy
    static readonly int TextOverflowPolicy_Offset;
    
    public UnrealSharp.SlateCore.ETextOverflowPolicy TextOverflowPolicy
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.ETextOverflowPolicy>.FromNative(IntPtr.Add(NativeObject, TextOverflowPolicy_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.ETextOverflowPolicy>.ToNative(IntPtr.Add(NativeObject, TextOverflowPolicy_Offset), 0, this, value);
        }
    }
    
    // Function /Script/UMG.RichTextBlock:SetTextTransformPolicy
    static readonly IntPtr SetTextTransformPolicy_NativeFunction;
    static readonly int SetTextTransformPolicy_ParamsSize;
    static readonly int SetTextTransformPolicy_InTransformPolicy_Offset;
    
    public void SetTextTransformPolicy(UnrealSharp.SlateCore.ETextTransformPolicy inTransformPolicy)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTextTransformPolicy_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.ETextTransformPolicy>.ToNative(IntPtr.Add(ParamsBuffer, SetTextTransformPolicy_InTransformPolicy_Offset), 0, null, inTransformPolicy);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTextTransformPolicy_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.RichTextBlock:SetTextStyleSet
    static readonly IntPtr SetTextStyleSet_NativeFunction;
    static readonly int SetTextStyleSet_ParamsSize;
    static readonly int SetTextStyleSet_NewTextStyleSet_Offset;
    
    public void SetTextStyleSet(UnrealSharp.Engine.DataTable newTextStyleSet)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTextStyleSet_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.DataTable>.ToNative(IntPtr.Add(ParamsBuffer, SetTextStyleSet_NewTextStyleSet_Offset), 0, null, newTextStyleSet);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTextStyleSet_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.RichTextBlock:SetTextOverflowPolicy
    static readonly IntPtr SetTextOverflowPolicy_NativeFunction;
    static readonly int SetTextOverflowPolicy_ParamsSize;
    static readonly int SetTextOverflowPolicy_InOverflowPolicy_Offset;
    
    public void SetTextOverflowPolicy(UnrealSharp.SlateCore.ETextOverflowPolicy inOverflowPolicy)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTextOverflowPolicy_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.ETextOverflowPolicy>.ToNative(IntPtr.Add(ParamsBuffer, SetTextOverflowPolicy_InOverflowPolicy_Offset), 0, null, inOverflowPolicy);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTextOverflowPolicy_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.RichTextBlock:SetMinDesiredWidth
    static readonly IntPtr SetMinDesiredWidth_NativeFunction;
    static readonly int SetMinDesiredWidth_ParamsSize;
    static readonly int SetMinDesiredWidth_InMinDesiredWidth_Offset;
    
    public void SetMinDesiredWidth(float inMinDesiredWidth)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMinDesiredWidth_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMinDesiredWidth_InMinDesiredWidth_Offset), 0, null, inMinDesiredWidth);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMinDesiredWidth_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.RichTextBlock:SetDefaultTextStyle
    static readonly IntPtr SetDefaultTextStyle_NativeFunction;
    static readonly int SetDefaultTextStyle_ParamsSize;
    static readonly int SetDefaultTextStyle_InDefaultTextStyle_Offset;
    
    public void SetDefaultTextStyle(UnrealSharp.SlateCore.TextBlockStyle inDefaultTextStyle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultTextStyle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.TextBlockStyleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultTextStyle_InDefaultTextStyle_Offset), 0, null, inDefaultTextStyle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefaultTextStyle_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/UMG.RichTextBlock:SetDefaultStrikeBrush
    static readonly IntPtr SetDefaultStrikeBrush_NativeFunction;
    static readonly int SetDefaultStrikeBrush_ParamsSize;
    static readonly int SetDefaultStrikeBrush_InStrikeBrush_Offset;
    
    public void SetDefaultStrikeBrush(UnrealSharp.SlateCore.SlateBrush inStrikeBrush)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultStrikeBrush_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateBrushMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultStrikeBrush_InStrikeBrush_Offset), 0, null, inStrikeBrush);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefaultStrikeBrush_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/UMG.RichTextBlock:SetDefaultShadowOffset
    static readonly IntPtr SetDefaultShadowOffset_NativeFunction;
    static readonly int SetDefaultShadowOffset_ParamsSize;
    static readonly int SetDefaultShadowOffset_InShadowOffset_Offset;
    
    public void SetDefaultShadowOffset(System.DoubleNumerics.Vector2 inShadowOffset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultShadowOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultShadowOffset_InShadowOffset_Offset), 0, null, inShadowOffset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefaultShadowOffset_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.RichTextBlock:SetDefaultShadowColorAndOpacity
    static readonly IntPtr SetDefaultShadowColorAndOpacity_NativeFunction;
    static readonly int SetDefaultShadowColorAndOpacity_ParamsSize;
    static readonly int SetDefaultShadowColorAndOpacity_InShadowColorAndOpacity_Offset;
    
    public void SetDefaultShadowColorAndOpacity(UnrealSharp.CoreUObject.LinearColor inShadowColorAndOpacity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultShadowColorAndOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultShadowColorAndOpacity_InShadowColorAndOpacity_Offset), 0, null, inShadowColorAndOpacity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefaultShadowColorAndOpacity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.RichTextBlock:SetDefaultMaterial
    static readonly IntPtr SetDefaultMaterial_NativeFunction;
    static readonly int SetDefaultMaterial_ParamsSize;
    static readonly int SetDefaultMaterial_InMaterial_Offset;
    
    public void SetDefaultMaterial(UnrealSharp.Engine.MaterialInterface inMaterial)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultMaterial_InMaterial_Offset), 0, null, inMaterial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefaultMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.RichTextBlock:SetDefaultFont
    static readonly IntPtr SetDefaultFont_NativeFunction;
    static readonly int SetDefaultFont_ParamsSize;
    static readonly int SetDefaultFont_InFontInfo_Offset;
    
    public void SetDefaultFont(UnrealSharp.SlateCore.SlateFontInfo inFontInfo)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultFont_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateFontInfoMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultFont_InFontInfo_Offset), 0, null, inFontInfo);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefaultFont_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.RichTextBlock:SetDefaultColorAndOpacity
    static readonly IntPtr SetDefaultColorAndOpacity_NativeFunction;
    static readonly int SetDefaultColorAndOpacity_ParamsSize;
    static readonly int SetDefaultColorAndOpacity_InColorAndOpacity_Offset;
    
    public void SetDefaultColorAndOpacity(UnrealSharp.SlateCore.SlateColor inColorAndOpacity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultColorAndOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateColorMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultColorAndOpacity_InColorAndOpacity_Offset), 0, null, inColorAndOpacity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefaultColorAndOpacity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.RichTextBlock:SetDecorators
    static readonly IntPtr SetDecorators_NativeFunction;
    static readonly int SetDecorators_ParamsSize;
    static readonly int SetDecorators_InDecoratorClasses_Offset;
    static readonly int SetDecorators_InDecoratorClasses_ElementSize;
    
    public void SetDecorators(System.Collections.Generic.IList<SubclassOf<UnrealSharp.UMG.RichTextBlockDecorator>> inDecoratorClasses)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDecorators_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InDecoratorClasses_NativeBuffer = IntPtr.Add(ParamsBuffer, SetDecorators_InDecoratorClasses_Offset);
            UnrealArrayCopyMarshaler<SubclassOf<UnrealSharp.UMG.RichTextBlockDecorator>> InDecoratorClasses_Marshaler = new UnrealArrayCopyMarshaler<SubclassOf<UnrealSharp.UMG.RichTextBlockDecorator>>(1, SubclassOfMarshaller<UnrealSharp.UMG.RichTextBlockDecorator>.ToNative, SubclassOfMarshaller<UnrealSharp.UMG.RichTextBlockDecorator>.FromNative, SetDecorators_InDecoratorClasses_ElementSize);
            InDecoratorClasses_Marshaler.ToNative(InDecoratorClasses_NativeBuffer, 0, null, inDecoratorClasses);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDecorators_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/UMG.RichTextBlock:SetAutoWrapText
    static readonly IntPtr SetAutoWrapText_NativeFunction;
    static readonly int SetAutoWrapText_ParamsSize;
    static readonly int SetAutoWrapText_InAutoTextWrap_Offset;
    
    public void SetAutoWrapText(bool inAutoTextWrap)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAutoWrapText_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAutoWrapText_InAutoTextWrap_Offset), 0, null, inAutoTextWrap);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAutoWrapText_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.RichTextBlock:RefreshTextLayout
    static readonly IntPtr RefreshTextLayout_NativeFunction;
    
    public void RefreshTextLayout()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RefreshTextLayout_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.RichTextBlock:GetTextStyleSet
    static readonly IntPtr GetTextStyleSet_NativeFunction;
    static readonly int GetTextStyleSet_ParamsSize;
    static readonly int GetTextStyleSet_ReturnValue_Offset;
    
    public UnrealSharp.Engine.DataTable GetTextStyleSet()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTextStyleSet_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTextStyleSet_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.DataTable returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.DataTable>.FromNative(IntPtr.Add(ParamsBuffer, GetTextStyleSet_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.RichTextBlock:GetDefaultDynamicMaterial
    static readonly IntPtr GetDefaultDynamicMaterial_NativeFunction;
    static readonly int GetDefaultDynamicMaterial_ParamsSize;
    static readonly int GetDefaultDynamicMaterial_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInstanceDynamic GetDefaultDynamicMaterial()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultDynamicMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDefaultDynamicMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInstanceDynamic returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceDynamic>.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultDynamicMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.RichTextBlock:GetDecoratorByClass
    static readonly IntPtr GetDecoratorByClass_NativeFunction;
    static readonly int GetDecoratorByClass_ParamsSize;
    static readonly int GetDecoratorByClass_DecoratorClass_Offset;
    static readonly int GetDecoratorByClass_ReturnValue_Offset;
    
    public UnrealSharp.UMG.RichTextBlockDecorator GetDecoratorByClass(SubclassOf<UnrealSharp.UMG.RichTextBlockDecorator> decoratorClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDecoratorByClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.UMG.RichTextBlockDecorator>.ToNative(IntPtr.Add(ParamsBuffer, GetDecoratorByClass_DecoratorClass_Offset), 0, null, decoratorClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDecoratorByClass_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.RichTextBlockDecorator returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.UMG.RichTextBlockDecorator>.FromNative(IntPtr.Add(ParamsBuffer, GetDecoratorByClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.RichTextBlock:ClearAllDefaultStyleOverrides
    static readonly IntPtr ClearAllDefaultStyleOverrides_NativeFunction;
    
    public void ClearAllDefaultStyleOverrides()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearAllDefaultStyleOverrides_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
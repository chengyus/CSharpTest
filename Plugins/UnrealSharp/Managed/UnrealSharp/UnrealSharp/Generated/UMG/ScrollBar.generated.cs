// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class ScrollBar : UnrealSharp.UMG.Widget
{
    
    static ScrollBar()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ScrollBar");
        
        WidgetStyle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WidgetStyle");
        bAlwaysShowScrollbar_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAlwaysShowScrollbar");
        bAlwaysShowScrollbarTrack_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAlwaysShowScrollbarTrack");
        Orientation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Orientation");
        Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Thickness");
        Padding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Padding");
        
        SetState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetState");
        SetState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetState_NativeFunction);
        SetState_InOffsetFraction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetState_NativeFunction, "InOffsetFraction");
        SetState_InThumbSizeFraction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetState_NativeFunction, "InThumbSizeFraction");
        
        
    }
    
    protected ScrollBar(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/UMG.ScrollBar:WidgetStyle
    static readonly int WidgetStyle_Offset;
    
    public UnrealSharp.SlateCore.ScrollBarStyle WidgetStyle
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.ScrollBarStyleMarshaler.FromNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.ScrollBarStyleMarshaler.ToNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.ScrollBar:bAlwaysShowScrollbar
    static readonly int bAlwaysShowScrollbar_Offset;
    
    public bool bAlwaysShowScrollbar
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAlwaysShowScrollbar_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAlwaysShowScrollbar_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.ScrollBar:bAlwaysShowScrollbarTrack
    static readonly int bAlwaysShowScrollbarTrack_Offset;
    
    public bool bAlwaysShowScrollbarTrack
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAlwaysShowScrollbarTrack_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAlwaysShowScrollbarTrack_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/UMG.ScrollBar:Orientation
    static readonly int Orientation_Offset;
    
    public UnrealSharp.SlateCore.EOrientation Orientation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.EOrientation>.FromNative(IntPtr.Add(NativeObject, Orientation_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/UMG.ScrollBar:Thickness
    static readonly int Thickness_Offset;
    
    public System.DoubleNumerics.Vector2 Thickness
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, Thickness_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(NativeObject, Thickness_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.ScrollBar:Padding
    static readonly int Padding_Offset;
    
    public UnrealSharp.SlateCore.Margin Padding
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.Margin>.FromNative(IntPtr.Add(NativeObject, Padding_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.Margin>.ToNative(IntPtr.Add(NativeObject, Padding_Offset), 0, this, value);
        }
    }
    
    // Function /Script/UMG.ScrollBar:SetState
    static readonly IntPtr SetState_NativeFunction;
    static readonly int SetState_ParamsSize;
    static readonly int SetState_InOffsetFraction_Offset;
    static readonly int SetState_InThumbSizeFraction_Offset;
    
    public void SetState(float inOffsetFraction, float inThumbSizeFraction)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetState_InOffsetFraction_Offset), 0, null, inOffsetFraction);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetState_InThumbSizeFraction_Offset), 0, null, inThumbSizeFraction);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetState_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
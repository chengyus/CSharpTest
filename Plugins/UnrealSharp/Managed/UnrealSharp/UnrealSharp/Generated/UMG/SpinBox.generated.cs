// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class SpinBox : UnrealSharp.UMG.Widget
{
    
    static SpinBox()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SpinBox");
        
        Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Value");
        WidgetStyle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WidgetStyle");
        MinFractionalDigits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinFractionalDigits");
        MaxFractionalDigits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxFractionalDigits");
        bAlwaysUsesDeltaSnap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAlwaysUsesDeltaSnap");
        bEnableSlider_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableSlider");
        Delta_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Delta");
        SliderExponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SliderExponent");
        Font_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Font");
        Justification_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Justification");
        MinDesiredWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinDesiredWidth");
        ClearKeyboardFocusOnCommit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ClearKeyboardFocusOnCommit");
        SelectAllTextOnCommit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SelectAllTextOnCommit");
        ForegroundColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ForegroundColor");
        MinValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinValue");
        MaxValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxValue");
        MinSliderValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinSliderValue");
        MaxSliderValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxSliderValue");
        
        SetValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValue");
        SetValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValue_NativeFunction);
        SetValue_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValue_NativeFunction, "NewValue");
        SetMinValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMinValue");
        SetMinValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMinValue_NativeFunction);
        SetMinValue_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMinValue_NativeFunction, "NewValue");
        SetMinSliderValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMinSliderValue");
        SetMinSliderValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMinSliderValue_NativeFunction);
        SetMinSliderValue_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMinSliderValue_NativeFunction, "NewValue");
        SetMaxValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaxValue");
        SetMaxValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaxValue_NativeFunction);
        SetMaxValue_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaxValue_NativeFunction, "NewValue");
        SetMaxSliderValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaxSliderValue");
        SetMaxSliderValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaxSliderValue_NativeFunction);
        SetMaxSliderValue_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaxSliderValue_NativeFunction, "NewValue");
        SetForegroundColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetForegroundColor");
        SetForegroundColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetForegroundColor_NativeFunction);
        SetForegroundColor_InForegroundColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForegroundColor_NativeFunction, "InForegroundColor");
        GetValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValue");
        GetValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValue_NativeFunction);
        GetValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValue_NativeFunction, "ReturnValue");
        GetMinValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMinValue");
        GetMinValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMinValue_NativeFunction);
        GetMinValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMinValue_NativeFunction, "ReturnValue");
        GetMinSliderValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMinSliderValue");
        GetMinSliderValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMinSliderValue_NativeFunction);
        GetMinSliderValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMinSliderValue_NativeFunction, "ReturnValue");
        GetMaxValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaxValue");
        GetMaxValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaxValue_NativeFunction);
        GetMaxValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaxValue_NativeFunction, "ReturnValue");
        GetMaxSliderValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaxSliderValue");
        GetMaxSliderValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaxSliderValue_NativeFunction);
        GetMaxSliderValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaxSliderValue_NativeFunction, "ReturnValue");
        ClearMinValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearMinValue");
        ClearMinSliderValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearMinSliderValue");
        ClearMaxValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearMaxValue");
        ClearMaxSliderValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearMaxSliderValue");
        
        
    }
    
    protected SpinBox(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/UMG.SpinBox:Value
    static readonly int Value_Offset;
    
    public float Value
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Value_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Value_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.SpinBox:WidgetStyle
    static readonly int WidgetStyle_Offset;
    
    public UnrealSharp.SlateCore.SpinBoxStyle WidgetStyle
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.SpinBoxStyleMarshaler.FromNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.SpinBoxStyleMarshaler.ToNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/UMG.SpinBox:MinFractionalDigits
    static readonly int MinFractionalDigits_Offset;
    
    public int MinFractionalDigits
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MinFractionalDigits_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MinFractionalDigits_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/UMG.SpinBox:MaxFractionalDigits
    static readonly int MaxFractionalDigits_Offset;
    
    public int MaxFractionalDigits
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MaxFractionalDigits_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MaxFractionalDigits_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.SpinBox:bAlwaysUsesDeltaSnap
    static readonly int bAlwaysUsesDeltaSnap_Offset;
    
    public bool bAlwaysUsesDeltaSnap
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAlwaysUsesDeltaSnap_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAlwaysUsesDeltaSnap_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.SpinBox:bEnableSlider
    static readonly int bEnableSlider_Offset;
    
    public bool bEnableSlider
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnableSlider_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bEnableSlider_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UMG.SpinBox:Delta
    static readonly int Delta_Offset;
    
    public float Delta
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Delta_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Delta_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UMG.SpinBox:SliderExponent
    static readonly int SliderExponent_Offset;
    
    public float SliderExponent
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SliderExponent_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, SliderExponent_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.SpinBox:Font
    static readonly int Font_Offset;
    
    public UnrealSharp.SlateCore.SlateFontInfo Font
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.SlateFontInfoMarshaler.FromNative(IntPtr.Add(NativeObject, Font_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.SlateFontInfoMarshaler.ToNative(IntPtr.Add(NativeObject, Font_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/UMG.SpinBox:Justification
    static readonly int Justification_Offset;
    
    public UnrealSharp.Slate.ETextJustify Justification
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Slate.ETextJustify>.FromNative(IntPtr.Add(NativeObject, Justification_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Slate.ETextJustify>.ToNative(IntPtr.Add(NativeObject, Justification_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UMG.SpinBox:MinDesiredWidth
    static readonly int MinDesiredWidth_Offset;
    
    public float MinDesiredWidth
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinDesiredWidth_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinDesiredWidth_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.SpinBox:ClearKeyboardFocusOnCommit
    static readonly int ClearKeyboardFocusOnCommit_Offset;
    
    public bool ClearKeyboardFocusOnCommit
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, ClearKeyboardFocusOnCommit_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, ClearKeyboardFocusOnCommit_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.SpinBox:SelectAllTextOnCommit
    static readonly int SelectAllTextOnCommit_Offset;
    
    public bool SelectAllTextOnCommit
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, SelectAllTextOnCommit_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, SelectAllTextOnCommit_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.SpinBox:ForegroundColor
    static readonly int ForegroundColor_Offset;
    
    public UnrealSharp.SlateCore.SlateColor ForegroundColor
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.SlateColorMarshaler.FromNative(IntPtr.Add(NativeObject, ForegroundColor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.SlateColorMarshaler.ToNative(IntPtr.Add(NativeObject, ForegroundColor_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UMG.SpinBox:MinValue
    static readonly int MinValue_Offset;
    
    public float MinValue
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinValue_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinValue_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UMG.SpinBox:MaxValue
    static readonly int MaxValue_Offset;
    
    public float MaxValue
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxValue_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxValue_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UMG.SpinBox:MinSliderValue
    static readonly int MinSliderValue_Offset;
    
    public float MinSliderValue
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinSliderValue_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinSliderValue_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UMG.SpinBox:MaxSliderValue
    static readonly int MaxSliderValue_Offset;
    
    public float MaxSliderValue
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxSliderValue_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxSliderValue_Offset), 0, this, value);
        }
    }
    
    // Function /Script/UMG.SpinBox:SetValue
    static readonly IntPtr SetValue_NativeFunction;
    static readonly int SetValue_ParamsSize;
    static readonly int SetValue_NewValue_Offset;
    
    public void SetValue(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetValue_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.SpinBox:SetMinValue
    static readonly IntPtr SetMinValue_NativeFunction;
    static readonly int SetMinValue_ParamsSize;
    static readonly int SetMinValue_NewValue_Offset;
    
    public void SetMinValue(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMinValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMinValue_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMinValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.SpinBox:SetMinSliderValue
    static readonly IntPtr SetMinSliderValue_NativeFunction;
    static readonly int SetMinSliderValue_ParamsSize;
    static readonly int SetMinSliderValue_NewValue_Offset;
    
    public void SetMinSliderValue(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMinSliderValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMinSliderValue_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMinSliderValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.SpinBox:SetMaxValue
    static readonly IntPtr SetMaxValue_NativeFunction;
    static readonly int SetMaxValue_ParamsSize;
    static readonly int SetMaxValue_NewValue_Offset;
    
    public void SetMaxValue(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaxValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMaxValue_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMaxValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.SpinBox:SetMaxSliderValue
    static readonly IntPtr SetMaxSliderValue_NativeFunction;
    static readonly int SetMaxSliderValue_ParamsSize;
    static readonly int SetMaxSliderValue_NewValue_Offset;
    
    public void SetMaxSliderValue(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaxSliderValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMaxSliderValue_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMaxSliderValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.SpinBox:SetForegroundColor
    static readonly IntPtr SetForegroundColor_NativeFunction;
    static readonly int SetForegroundColor_ParamsSize;
    static readonly int SetForegroundColor_InForegroundColor_Offset;
    
    public void SetForegroundColor(UnrealSharp.SlateCore.SlateColor inForegroundColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetForegroundColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateColorMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetForegroundColor_InForegroundColor_Offset), 0, null, inForegroundColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetForegroundColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.SpinBox:GetValue
    static readonly IntPtr GetValue_NativeFunction;
    static readonly int GetValue_ParamsSize;
    static readonly int GetValue_ReturnValue_Offset;
    
    public float GetValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.SpinBox:GetMinValue
    static readonly IntPtr GetMinValue_NativeFunction;
    static readonly int GetMinValue_ParamsSize;
    static readonly int GetMinValue_ReturnValue_Offset;
    
    public float GetMinValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMinValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMinValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMinValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.SpinBox:GetMinSliderValue
    static readonly IntPtr GetMinSliderValue_NativeFunction;
    static readonly int GetMinSliderValue_ParamsSize;
    static readonly int GetMinSliderValue_ReturnValue_Offset;
    
    public float GetMinSliderValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMinSliderValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMinSliderValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMinSliderValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.SpinBox:GetMaxValue
    static readonly IntPtr GetMaxValue_NativeFunction;
    static readonly int GetMaxValue_ParamsSize;
    static readonly int GetMaxValue_ReturnValue_Offset;
    
    public float GetMaxValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaxValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMaxValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMaxValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.SpinBox:GetMaxSliderValue
    static readonly IntPtr GetMaxSliderValue_NativeFunction;
    static readonly int GetMaxSliderValue_ParamsSize;
    static readonly int GetMaxSliderValue_ReturnValue_Offset;
    
    public float GetMaxSliderValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaxSliderValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMaxSliderValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMaxSliderValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.SpinBox:ClearMinValue
    static readonly IntPtr ClearMinValue_NativeFunction;
    
    public void ClearMinValue()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearMinValue_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.SpinBox:ClearMinSliderValue
    static readonly IntPtr ClearMinSliderValue_NativeFunction;
    
    public void ClearMinSliderValue()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearMinSliderValue_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.SpinBox:ClearMaxValue
    static readonly IntPtr ClearMaxValue_NativeFunction;
    
    public void ClearMaxValue()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearMaxValue_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.SpinBox:ClearMaxSliderValue
    static readonly IntPtr ClearMaxSliderValue_NativeFunction;
    
    public void ClearMaxSliderValue()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearMaxSliderValue_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
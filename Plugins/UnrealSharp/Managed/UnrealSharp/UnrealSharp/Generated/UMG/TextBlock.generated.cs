// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class TextBlock : UnrealSharp.UMG.TextLayoutWidget
{
    
    static TextBlock()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TextBlock");
        
        Text_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Text");
        Text_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Text");
        ColorAndOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ColorAndOpacity");
        Font_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Font");
        StrikeBrush_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StrikeBrush");
        ShadowOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowOffset");
        ShadowColorAndOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowColorAndOpacity");
        MinDesiredWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinDesiredWidth");
        bWrapWithInvalidationPanel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bWrapWithInvalidationPanel");
        TextTransformPolicy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextTransformPolicy");
        TextOverflowPolicy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextOverflowPolicy");
        bSimpleTextMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSimpleTextMode");
        
        SetTextTransformPolicy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTextTransformPolicy");
        SetTextTransformPolicy_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTextTransformPolicy_NativeFunction);
        SetTextTransformPolicy_InTransformPolicy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTextTransformPolicy_NativeFunction, "InTransformPolicy");
        SetTextOverflowPolicy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTextOverflowPolicy");
        SetTextOverflowPolicy_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTextOverflowPolicy_NativeFunction);
        SetTextOverflowPolicy_InOverflowPolicy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTextOverflowPolicy_NativeFunction, "InOverflowPolicy");
        SetStrikeBrush_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetStrikeBrush");
        SetStrikeBrush_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetStrikeBrush_NativeFunction);
        SetStrikeBrush_InStrikeBrush_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStrikeBrush_NativeFunction, "InStrikeBrush");
        SetShadowOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShadowOffset");
        SetShadowOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShadowOffset_NativeFunction);
        SetShadowOffset_InShadowOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShadowOffset_NativeFunction, "InShadowOffset");
        SetShadowColorAndOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShadowColorAndOpacity");
        SetShadowColorAndOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShadowColorAndOpacity_NativeFunction);
        SetShadowColorAndOpacity_InShadowColorAndOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShadowColorAndOpacity_NativeFunction, "InShadowColorAndOpacity");
        SetOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOpacity");
        SetOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOpacity_NativeFunction);
        SetOpacity_InOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOpacity_NativeFunction, "InOpacity");
        SetMinDesiredWidth_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMinDesiredWidth");
        SetMinDesiredWidth_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMinDesiredWidth_NativeFunction);
        SetMinDesiredWidth_InMinDesiredWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMinDesiredWidth_NativeFunction, "InMinDesiredWidth");
        SetFontOutlineMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFontOutlineMaterial");
        SetFontOutlineMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFontOutlineMaterial_NativeFunction);
        SetFontOutlineMaterial_InMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFontOutlineMaterial_NativeFunction, "InMaterial");
        SetFontMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFontMaterial");
        SetFontMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFontMaterial_NativeFunction);
        SetFontMaterial_InMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFontMaterial_NativeFunction, "InMaterial");
        SetFont_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFont");
        SetFont_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFont_NativeFunction);
        SetFont_InFontInfo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFont_NativeFunction, "InFontInfo");
        SetColorAndOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetColorAndOpacity");
        SetColorAndOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetColorAndOpacity_NativeFunction);
        SetColorAndOpacity_InColorAndOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetColorAndOpacity_NativeFunction, "InColorAndOpacity");
        SetAutoWrapText_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAutoWrapText");
        SetAutoWrapText_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAutoWrapText_NativeFunction);
        SetAutoWrapText_InAutoTextWrap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAutoWrapText_NativeFunction, "InAutoTextWrap");
        GetDynamicOutlineMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDynamicOutlineMaterial");
        GetDynamicOutlineMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDynamicOutlineMaterial_NativeFunction);
        GetDynamicOutlineMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDynamicOutlineMaterial_NativeFunction, "ReturnValue");
        GetDynamicFontMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDynamicFontMaterial");
        GetDynamicFontMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDynamicFontMaterial_NativeFunction);
        GetDynamicFontMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDynamicFontMaterial_NativeFunction, "ReturnValue");
        
        
    }
    
    protected TextBlock(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // TextProperty /Script/UMG.TextBlock:Text
    static readonly int Text_Offset;
    static readonly IntPtr Text_NativeProperty;
    TextMarshaller Text_Wrapper;
    
    public Text Text
    {
        get
        {
            if (Text_Wrapper == null)
            {
                Text_Wrapper  = new TextMarshaller(1);
            }
            return Text_Wrapper.FromNative(this.NativeObject + Text_Offset, 0, this);
        }
    }
    
    // StructProperty /Script/UMG.TextBlock:ColorAndOpacity
    static readonly int ColorAndOpacity_Offset;
    
    public UnrealSharp.SlateCore.SlateColor ColorAndOpacity
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.SlateColorMarshaler.FromNative(IntPtr.Add(NativeObject, ColorAndOpacity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.SlateColorMarshaler.ToNative(IntPtr.Add(NativeObject, ColorAndOpacity_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.TextBlock:Font
    static readonly int Font_Offset;
    
    public UnrealSharp.SlateCore.SlateFontInfo Font
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.SlateFontInfoMarshaler.FromNative(IntPtr.Add(NativeObject, Font_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.SlateFontInfoMarshaler.ToNative(IntPtr.Add(NativeObject, Font_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.TextBlock:StrikeBrush
    static readonly int StrikeBrush_Offset;
    
    public UnrealSharp.SlateCore.SlateBrush StrikeBrush
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.SlateBrushMarshaler.FromNative(IntPtr.Add(NativeObject, StrikeBrush_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.SlateBrushMarshaler.ToNative(IntPtr.Add(NativeObject, StrikeBrush_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.TextBlock:ShadowOffset
    static readonly int ShadowOffset_Offset;
    
    public System.DoubleNumerics.Vector2 ShadowOffset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, ShadowOffset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(NativeObject, ShadowOffset_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.TextBlock:ShadowColorAndOpacity
    static readonly int ShadowColorAndOpacity_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor ShadowColorAndOpacity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, ShadowColorAndOpacity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(NativeObject, ShadowColorAndOpacity_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UMG.TextBlock:MinDesiredWidth
    static readonly int MinDesiredWidth_Offset;
    
    public float MinDesiredWidth
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinDesiredWidth_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinDesiredWidth_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.TextBlock:bWrapWithInvalidationPanel
    static readonly int bWrapWithInvalidationPanel_Offset;
    
    public bool bWrapWithInvalidationPanel
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bWrapWithInvalidationPanel_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/UMG.TextBlock:TextTransformPolicy
    static readonly int TextTransformPolicy_Offset;
    
    public UnrealSharp.SlateCore.ETextTransformPolicy TextTransformPolicy
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.ETextTransformPolicy>.FromNative(IntPtr.Add(NativeObject, TextTransformPolicy_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.ETextTransformPolicy>.ToNative(IntPtr.Add(NativeObject, TextTransformPolicy_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/UMG.TextBlock:TextOverflowPolicy
    static readonly int TextOverflowPolicy_Offset;
    
    public UnrealSharp.SlateCore.ETextOverflowPolicy TextOverflowPolicy
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.ETextOverflowPolicy>.FromNative(IntPtr.Add(NativeObject, TextOverflowPolicy_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.ETextOverflowPolicy>.ToNative(IntPtr.Add(NativeObject, TextOverflowPolicy_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.TextBlock:bSimpleTextMode
    static readonly int bSimpleTextMode_Offset;
    
    public bool bSimpleTextMode
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSimpleTextMode_Offset), 0, this);
        }
    }
    
    // Function /Script/UMG.TextBlock:SetTextTransformPolicy
    static readonly IntPtr SetTextTransformPolicy_NativeFunction;
    static readonly int SetTextTransformPolicy_ParamsSize;
    static readonly int SetTextTransformPolicy_InTransformPolicy_Offset;
    
    public void SetTextTransformPolicy(UnrealSharp.SlateCore.ETextTransformPolicy inTransformPolicy)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTextTransformPolicy_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.ETextTransformPolicy>.ToNative(IntPtr.Add(ParamsBuffer, SetTextTransformPolicy_InTransformPolicy_Offset), 0, null, inTransformPolicy);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTextTransformPolicy_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.TextBlock:SetTextOverflowPolicy
    static readonly IntPtr SetTextOverflowPolicy_NativeFunction;
    static readonly int SetTextOverflowPolicy_ParamsSize;
    static readonly int SetTextOverflowPolicy_InOverflowPolicy_Offset;
    
    public void SetTextOverflowPolicy(UnrealSharp.SlateCore.ETextOverflowPolicy inOverflowPolicy)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTextOverflowPolicy_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.ETextOverflowPolicy>.ToNative(IntPtr.Add(ParamsBuffer, SetTextOverflowPolicy_InOverflowPolicy_Offset), 0, null, inOverflowPolicy);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTextOverflowPolicy_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.TextBlock:SetStrikeBrush
    static readonly IntPtr SetStrikeBrush_NativeFunction;
    static readonly int SetStrikeBrush_ParamsSize;
    static readonly int SetStrikeBrush_InStrikeBrush_Offset;
    
    public void SetStrikeBrush(UnrealSharp.SlateCore.SlateBrush inStrikeBrush)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetStrikeBrush_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateBrushMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetStrikeBrush_InStrikeBrush_Offset), 0, null, inStrikeBrush);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetStrikeBrush_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.TextBlock:SetShadowOffset
    static readonly IntPtr SetShadowOffset_NativeFunction;
    static readonly int SetShadowOffset_ParamsSize;
    static readonly int SetShadowOffset_InShadowOffset_Offset;
    
    public void SetShadowOffset(System.DoubleNumerics.Vector2 inShadowOffset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShadowOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetShadowOffset_InShadowOffset_Offset), 0, null, inShadowOffset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShadowOffset_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.TextBlock:SetShadowColorAndOpacity
    static readonly IntPtr SetShadowColorAndOpacity_NativeFunction;
    static readonly int SetShadowColorAndOpacity_ParamsSize;
    static readonly int SetShadowColorAndOpacity_InShadowColorAndOpacity_Offset;
    
    public void SetShadowColorAndOpacity(UnrealSharp.CoreUObject.LinearColor inShadowColorAndOpacity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShadowColorAndOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetShadowColorAndOpacity_InShadowColorAndOpacity_Offset), 0, null, inShadowColorAndOpacity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShadowColorAndOpacity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.TextBlock:SetOpacity
    static readonly IntPtr SetOpacity_NativeFunction;
    static readonly int SetOpacity_ParamsSize;
    static readonly int SetOpacity_InOpacity_Offset;
    
    public void SetOpacity(float inOpacity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetOpacity_InOpacity_Offset), 0, null, inOpacity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOpacity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.TextBlock:SetMinDesiredWidth
    static readonly IntPtr SetMinDesiredWidth_NativeFunction;
    static readonly int SetMinDesiredWidth_ParamsSize;
    static readonly int SetMinDesiredWidth_InMinDesiredWidth_Offset;
    
    public void SetMinDesiredWidth(float inMinDesiredWidth)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMinDesiredWidth_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMinDesiredWidth_InMinDesiredWidth_Offset), 0, null, inMinDesiredWidth);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMinDesiredWidth_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.TextBlock:SetFontOutlineMaterial
    static readonly IntPtr SetFontOutlineMaterial_NativeFunction;
    static readonly int SetFontOutlineMaterial_ParamsSize;
    static readonly int SetFontOutlineMaterial_InMaterial_Offset;
    
    public void SetFontOutlineMaterial(UnrealSharp.Engine.MaterialInterface inMaterial)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFontOutlineMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetFontOutlineMaterial_InMaterial_Offset), 0, null, inMaterial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFontOutlineMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.TextBlock:SetFontMaterial
    static readonly IntPtr SetFontMaterial_NativeFunction;
    static readonly int SetFontMaterial_ParamsSize;
    static readonly int SetFontMaterial_InMaterial_Offset;
    
    public void SetFontMaterial(UnrealSharp.Engine.MaterialInterface inMaterial)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFontMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetFontMaterial_InMaterial_Offset), 0, null, inMaterial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFontMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.TextBlock:SetFont
    static readonly IntPtr SetFont_NativeFunction;
    static readonly int SetFont_ParamsSize;
    static readonly int SetFont_InFontInfo_Offset;
    
    public void SetFont(UnrealSharp.SlateCore.SlateFontInfo inFontInfo)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFont_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateFontInfoMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetFont_InFontInfo_Offset), 0, null, inFontInfo);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFont_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.TextBlock:SetColorAndOpacity
    static readonly IntPtr SetColorAndOpacity_NativeFunction;
    static readonly int SetColorAndOpacity_ParamsSize;
    static readonly int SetColorAndOpacity_InColorAndOpacity_Offset;
    
    public void SetColorAndOpacity(UnrealSharp.SlateCore.SlateColor inColorAndOpacity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetColorAndOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateColorMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetColorAndOpacity_InColorAndOpacity_Offset), 0, null, inColorAndOpacity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetColorAndOpacity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.TextBlock:SetAutoWrapText
    static readonly IntPtr SetAutoWrapText_NativeFunction;
    static readonly int SetAutoWrapText_ParamsSize;
    static readonly int SetAutoWrapText_InAutoTextWrap_Offset;
    
    public void SetAutoWrapText(bool inAutoTextWrap)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAutoWrapText_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAutoWrapText_InAutoTextWrap_Offset), 0, null, inAutoTextWrap);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAutoWrapText_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.TextBlock:GetDynamicOutlineMaterial
    static readonly IntPtr GetDynamicOutlineMaterial_NativeFunction;
    static readonly int GetDynamicOutlineMaterial_ParamsSize;
    static readonly int GetDynamicOutlineMaterial_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInstanceDynamic GetDynamicOutlineMaterial()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDynamicOutlineMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDynamicOutlineMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInstanceDynamic returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceDynamic>.FromNative(IntPtr.Add(ParamsBuffer, GetDynamicOutlineMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.TextBlock:GetDynamicFontMaterial
    static readonly IntPtr GetDynamicFontMaterial_NativeFunction;
    static readonly int GetDynamicFontMaterial_ParamsSize;
    static readonly int GetDynamicFontMaterial_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInstanceDynamic GetDynamicFontMaterial()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDynamicFontMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDynamicFontMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInstanceDynamic returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceDynamic>.FromNative(IntPtr.Add(ParamsBuffer, GetDynamicFontMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
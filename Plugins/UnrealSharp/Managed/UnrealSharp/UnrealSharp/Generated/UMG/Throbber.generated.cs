// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class Throbber : UnrealSharp.UMG.Widget
{
    
    static Throbber()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Throbber");
        
        NumberOfPieces_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumberOfPieces");
        bAnimateHorizontally_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAnimateHorizontally");
        bAnimateVertically_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAnimateVertically");
        bAnimateOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAnimateOpacity");
        Image_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Image");
        
        SetNumberOfPieces_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNumberOfPieces");
        SetNumberOfPieces_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNumberOfPieces_NativeFunction);
        SetNumberOfPieces_InNumberOfPieces_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNumberOfPieces_NativeFunction, "InNumberOfPieces");
        SetAnimateVertically_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAnimateVertically");
        SetAnimateVertically_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAnimateVertically_NativeFunction);
        SetAnimateVertically_bInAnimateVertically_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnimateVertically_NativeFunction, "bInAnimateVertically");
        SetAnimateOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAnimateOpacity");
        SetAnimateOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAnimateOpacity_NativeFunction);
        SetAnimateOpacity_bInAnimateOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnimateOpacity_NativeFunction, "bInAnimateOpacity");
        SetAnimateHorizontally_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAnimateHorizontally");
        SetAnimateHorizontally_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAnimateHorizontally_NativeFunction);
        SetAnimateHorizontally_bInAnimateHorizontally_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnimateHorizontally_NativeFunction, "bInAnimateHorizontally");
        
        
    }
    
    protected Throbber(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // IntProperty /Script/UMG.Throbber:NumberOfPieces
    static readonly int NumberOfPieces_Offset;
    
    public int NumberOfPieces
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, NumberOfPieces_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, NumberOfPieces_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.Throbber:bAnimateHorizontally
    static readonly int bAnimateHorizontally_Offset;
    
    public bool bAnimateHorizontally
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAnimateHorizontally_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAnimateHorizontally_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.Throbber:bAnimateVertically
    static readonly int bAnimateVertically_Offset;
    
    public bool bAnimateVertically
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAnimateVertically_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAnimateVertically_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.Throbber:bAnimateOpacity
    static readonly int bAnimateOpacity_Offset;
    
    public bool bAnimateOpacity
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAnimateOpacity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAnimateOpacity_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.Throbber:Image
    static readonly int Image_Offset;
    
    public UnrealSharp.SlateCore.SlateBrush Image
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.SlateBrushMarshaler.FromNative(IntPtr.Add(NativeObject, Image_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.SlateBrushMarshaler.ToNative(IntPtr.Add(NativeObject, Image_Offset), 0, this, value);
        }
    }
    
    // Function /Script/UMG.Throbber:SetNumberOfPieces
    static readonly IntPtr SetNumberOfPieces_NativeFunction;
    static readonly int SetNumberOfPieces_ParamsSize;
    static readonly int SetNumberOfPieces_InNumberOfPieces_Offset;
    
    public void SetNumberOfPieces(int inNumberOfPieces)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNumberOfPieces_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetNumberOfPieces_InNumberOfPieces_Offset), 0, null, inNumberOfPieces);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNumberOfPieces_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Throbber:SetAnimateVertically
    static readonly IntPtr SetAnimateVertically_NativeFunction;
    static readonly int SetAnimateVertically_ParamsSize;
    static readonly int SetAnimateVertically_bInAnimateVertically_Offset;
    
    public void SetAnimateVertically(bool bInAnimateVertically)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAnimateVertically_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAnimateVertically_bInAnimateVertically_Offset), 0, null, bInAnimateVertically);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAnimateVertically_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Throbber:SetAnimateOpacity
    static readonly IntPtr SetAnimateOpacity_NativeFunction;
    static readonly int SetAnimateOpacity_ParamsSize;
    static readonly int SetAnimateOpacity_bInAnimateOpacity_Offset;
    
    public void SetAnimateOpacity(bool bInAnimateOpacity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAnimateOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAnimateOpacity_bInAnimateOpacity_Offset), 0, null, bInAnimateOpacity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAnimateOpacity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Throbber:SetAnimateHorizontally
    static readonly IntPtr SetAnimateHorizontally_NativeFunction;
    static readonly int SetAnimateHorizontally_ParamsSize;
    static readonly int SetAnimateHorizontally_bInAnimateHorizontally_Offset;
    
    public void SetAnimateHorizontally(bool bInAnimateHorizontally)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAnimateHorizontally_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAnimateHorizontally_bInAnimateHorizontally_Offset), 0, null, bInAnimateHorizontally);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAnimateHorizontally_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
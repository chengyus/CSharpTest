// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
abstract public partial class UserWidget : UnrealSharp.UMG.Widget
{
    
    static UserWidget()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("UserWidget");
        
        ColorAndOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ColorAndOpacity");
        ForegroundColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ForegroundColor");
        Padding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Padding");
        Priority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Priority");
        bIsFocusable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsFocusable");
        bIsFocusable_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsFocusable");
        bStopAction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bStopAction");
        bStopAction_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bStopAction");
        TickFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TickFrequency");
        
        UnregisterInputComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnregisterInputComponent");
        UnbindAllFromAnimationStarted_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnbindAllFromAnimationStarted");
        UnbindAllFromAnimationStarted_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnbindAllFromAnimationStarted_NativeFunction);
        UnbindAllFromAnimationStarted_Animation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnbindAllFromAnimationStarted_NativeFunction, "Animation");
        UnbindAllFromAnimationFinished_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnbindAllFromAnimationFinished");
        UnbindAllFromAnimationFinished_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnbindAllFromAnimationFinished_NativeFunction);
        UnbindAllFromAnimationFinished_Animation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnbindAllFromAnimationFinished_NativeFunction, "Animation");
        StopListeningForInputAction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopListeningForInputAction");
        StopListeningForInputAction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopListeningForInputAction_NativeFunction);
        StopListeningForInputAction_ActionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopListeningForInputAction_NativeFunction, "ActionName");
        StopListeningForInputAction_EventType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopListeningForInputAction_NativeFunction, "EventType");
        StopListeningForAllInputActions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopListeningForAllInputActions");
        StopAnimationsAndLatentActions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopAnimationsAndLatentActions");
        StopAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopAnimation");
        StopAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopAnimation_NativeFunction);
        StopAnimation_InAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopAnimation_NativeFunction, "InAnimation");
        StopAllAnimations_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopAllAnimations");
        SetPositionInViewport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPositionInViewport");
        SetPositionInViewport_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPositionInViewport_NativeFunction);
        SetPositionInViewport_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPositionInViewport_NativeFunction, "Position");
        SetPositionInViewport_bRemoveDPIScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPositionInViewport_NativeFunction, "bRemoveDPIScale");
        SetPlaybackSpeed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaybackSpeed");
        SetPlaybackSpeed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaybackSpeed_NativeFunction);
        SetPlaybackSpeed_InAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackSpeed_NativeFunction, "InAnimation");
        SetPlaybackSpeed_PlaybackSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackSpeed_NativeFunction, "PlaybackSpeed");
        SetPadding_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPadding");
        SetPadding_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPadding_NativeFunction);
        SetPadding_InPadding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPadding_NativeFunction, "InPadding");
        SetOwningPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOwningPlayer");
        SetOwningPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOwningPlayer_NativeFunction);
        SetOwningPlayer_LocalPlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOwningPlayer_NativeFunction, "LocalPlayerController");
        SetNumLoopsToPlay_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNumLoopsToPlay");
        SetNumLoopsToPlay_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNumLoopsToPlay_NativeFunction);
        SetNumLoopsToPlay_InAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNumLoopsToPlay_NativeFunction, "InAnimation");
        SetNumLoopsToPlay_NumLoopsToPlay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNumLoopsToPlay_NativeFunction, "NumLoopsToPlay");
        SetInputActionPriority_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInputActionPriority");
        SetInputActionPriority_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInputActionPriority_NativeFunction);
        SetInputActionPriority_NewPriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInputActionPriority_NativeFunction, "NewPriority");
        SetInputActionBlocking_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInputActionBlocking");
        SetInputActionBlocking_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInputActionBlocking_NativeFunction);
        SetInputActionBlocking_bShouldBlock_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInputActionBlocking_NativeFunction, "bShouldBlock");
        SetForegroundColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetForegroundColor");
        SetForegroundColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetForegroundColor_NativeFunction);
        SetForegroundColor_InForegroundColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForegroundColor_NativeFunction, "InForegroundColor");
        SetDesiredSizeInViewport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDesiredSizeInViewport");
        SetDesiredSizeInViewport_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDesiredSizeInViewport_NativeFunction);
        SetDesiredSizeInViewport_Size_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDesiredSizeInViewport_NativeFunction, "Size");
        SetColorAndOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetColorAndOpacity");
        SetColorAndOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetColorAndOpacity_NativeFunction);
        SetColorAndOpacity_InColorAndOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetColorAndOpacity_NativeFunction, "InColorAndOpacity");
        SetAnimationCurrentTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAnimationCurrentTime");
        SetAnimationCurrentTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAnimationCurrentTime_NativeFunction);
        SetAnimationCurrentTime_InAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnimationCurrentTime_NativeFunction, "InAnimation");
        SetAnimationCurrentTime_InTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnimationCurrentTime_NativeFunction, "InTime");
        SetAnchorsInViewport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAnchorsInViewport");
        SetAnchorsInViewport_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAnchorsInViewport_NativeFunction);
        SetAnchorsInViewport_Anchors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnchorsInViewport_NativeFunction, "Anchors");
        SetAlignmentInViewport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAlignmentInViewport");
        SetAlignmentInViewport_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAlignmentInViewport_NativeFunction);
        SetAlignmentInViewport_Alignment_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAlignmentInViewport_NativeFunction, "Alignment");
        ReverseAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReverseAnimation");
        ReverseAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReverseAnimation_NativeFunction);
        ReverseAnimation_InAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReverseAnimation_NativeFunction, "InAnimation");
        RemoveFromViewport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveFromViewport");
        RemoveExtensions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveExtensions");
        RemoveExtensions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveExtensions_NativeFunction);
        RemoveExtensions_InExtensionType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveExtensions_NativeFunction, "InExtensionType");
        RemoveExtension_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveExtension");
        RemoveExtension_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveExtension_NativeFunction);
        RemoveExtension_InExtension_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveExtension_NativeFunction, "InExtension");
        RegisterInputComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RegisterInputComponent");
        PlaySound_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlaySound");
        PlaySound_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlaySound_NativeFunction);
        PlaySound_SoundToPlay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySound_NativeFunction, "SoundToPlay");
        PlayAnimationTimeRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayAnimationTimeRange");
        PlayAnimationTimeRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlayAnimationTimeRange_NativeFunction);
        PlayAnimationTimeRange_InAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationTimeRange_NativeFunction, "InAnimation");
        PlayAnimationTimeRange_StartAtTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationTimeRange_NativeFunction, "StartAtTime");
        PlayAnimationTimeRange_EndAtTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationTimeRange_NativeFunction, "EndAtTime");
        PlayAnimationTimeRange_NumLoopsToPlay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationTimeRange_NativeFunction, "NumLoopsToPlay");
        PlayAnimationTimeRange_PlayMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationTimeRange_NativeFunction, "PlayMode");
        PlayAnimationTimeRange_PlaybackSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationTimeRange_NativeFunction, "PlaybackSpeed");
        PlayAnimationTimeRange_bRestoreState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationTimeRange_NativeFunction, "bRestoreState");
        PlayAnimationTimeRange_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationTimeRange_NativeFunction, "ReturnValue");
        PlayAnimationReverse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayAnimationReverse");
        PlayAnimationReverse_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlayAnimationReverse_NativeFunction);
        PlayAnimationReverse_InAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationReverse_NativeFunction, "InAnimation");
        PlayAnimationReverse_PlaybackSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationReverse_NativeFunction, "PlaybackSpeed");
        PlayAnimationReverse_bRestoreState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationReverse_NativeFunction, "bRestoreState");
        PlayAnimationReverse_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationReverse_NativeFunction, "ReturnValue");
        PlayAnimationForward_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayAnimationForward");
        PlayAnimationForward_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlayAnimationForward_NativeFunction);
        PlayAnimationForward_InAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationForward_NativeFunction, "InAnimation");
        PlayAnimationForward_PlaybackSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationForward_NativeFunction, "PlaybackSpeed");
        PlayAnimationForward_bRestoreState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationForward_NativeFunction, "bRestoreState");
        PlayAnimationForward_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimationForward_NativeFunction, "ReturnValue");
        PlayAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayAnimation");
        PlayAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlayAnimation_NativeFunction);
        PlayAnimation_InAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimation_NativeFunction, "InAnimation");
        PlayAnimation_StartAtTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimation_NativeFunction, "StartAtTime");
        PlayAnimation_NumLoopsToPlay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimation_NativeFunction, "NumLoopsToPlay");
        PlayAnimation_PlayMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimation_NativeFunction, "PlayMode");
        PlayAnimation_PlaybackSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimation_NativeFunction, "PlaybackSpeed");
        PlayAnimation_bRestoreState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimation_NativeFunction, "bRestoreState");
        PlayAnimation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimation_NativeFunction, "ReturnValue");
        PauseAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PauseAnimation");
        PauseAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PauseAnimation_NativeFunction);
        PauseAnimation_InAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PauseAnimation_NativeFunction, "InAnimation");
        PauseAnimation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PauseAnimation_NativeFunction, "ReturnValue");
        IsPlayingAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPlayingAnimation");
        IsPlayingAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPlayingAnimation_NativeFunction);
        IsPlayingAnimation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlayingAnimation_NativeFunction, "ReturnValue");
        IsListeningForInputAction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsListeningForInputAction");
        IsListeningForInputAction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsListeningForInputAction_NativeFunction);
        IsListeningForInputAction_ActionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsListeningForInputAction_NativeFunction, "ActionName");
        IsListeningForInputAction_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsListeningForInputAction_NativeFunction, "ReturnValue");
        IsAnyAnimationPlaying_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsAnyAnimationPlaying");
        IsAnyAnimationPlaying_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsAnyAnimationPlaying_NativeFunction);
        IsAnyAnimationPlaying_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAnyAnimationPlaying_NativeFunction, "ReturnValue");
        IsAnimationPlayingForward_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsAnimationPlayingForward");
        IsAnimationPlayingForward_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsAnimationPlayingForward_NativeFunction);
        IsAnimationPlayingForward_InAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAnimationPlayingForward_NativeFunction, "InAnimation");
        IsAnimationPlayingForward_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAnimationPlayingForward_NativeFunction, "ReturnValue");
        IsAnimationPlaying_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsAnimationPlaying");
        IsAnimationPlaying_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsAnimationPlaying_NativeFunction);
        IsAnimationPlaying_InAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAnimationPlaying_NativeFunction, "InAnimation");
        IsAnimationPlaying_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAnimationPlaying_NativeFunction, "ReturnValue");
        GetOwningPlayerPawn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOwningPlayerPawn");
        GetOwningPlayerPawn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOwningPlayerPawn_NativeFunction);
        GetOwningPlayerPawn_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOwningPlayerPawn_NativeFunction, "ReturnValue");
        GetOwningPlayerCameraManager_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOwningPlayerCameraManager");
        GetOwningPlayerCameraManager_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOwningPlayerCameraManager_NativeFunction);
        GetOwningPlayerCameraManager_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOwningPlayerCameraManager_NativeFunction, "ReturnValue");
        GetIsVisible_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetIsVisible");
        GetIsVisible_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetIsVisible_NativeFunction);
        GetIsVisible_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIsVisible_NativeFunction, "ReturnValue");
        GetExtensions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetExtensions");
        GetExtensions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetExtensions_NativeFunction);
        GetExtensions_ExtensionType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetExtensions_NativeFunction, "ExtensionType");
        GetExtensions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetExtensions_NativeFunction, "ReturnValue");
        GetExtensions_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetExtensions_NativeFunction, "ReturnValue");
        GetExtension_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetExtension");
        GetExtension_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetExtension_NativeFunction);
        GetExtension_ExtensionType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetExtension_NativeFunction, "ExtensionType");
        GetExtension_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetExtension_NativeFunction, "ReturnValue");
        GetAnimationCurrentTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimationCurrentTime");
        GetAnimationCurrentTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimationCurrentTime_NativeFunction);
        GetAnimationCurrentTime_InAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationCurrentTime_NativeFunction, "InAnimation");
        GetAnimationCurrentTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationCurrentTime_NativeFunction, "ReturnValue");
        GetAnchorsInViewport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnchorsInViewport");
        GetAnchorsInViewport_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnchorsInViewport_NativeFunction);
        GetAnchorsInViewport_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnchorsInViewport_NativeFunction, "ReturnValue");
        GetAlignmentInViewport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAlignmentInViewport");
        GetAlignmentInViewport_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAlignmentInViewport_NativeFunction);
        GetAlignmentInViewport_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAlignmentInViewport_NativeFunction, "ReturnValue");
        FlushAnimations_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FlushAnimations");
        CancelLatentActions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CancelLatentActions");
        AddToViewport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddToViewport");
        AddToViewport_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddToViewport_NativeFunction);
        AddToViewport_ZOrder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddToViewport_NativeFunction, "ZOrder");
        AddToPlayerScreen_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddToPlayerScreen");
        AddToPlayerScreen_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddToPlayerScreen_NativeFunction);
        AddToPlayerScreen_ZOrder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddToPlayerScreen_NativeFunction, "ZOrder");
        AddToPlayerScreen_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddToPlayerScreen_NativeFunction, "ReturnValue");
        AddExtension_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddExtension");
        AddExtension_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddExtension_NativeFunction);
        AddExtension_InExtensionType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddExtension_NativeFunction, "InExtensionType");
        AddExtension_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddExtension_NativeFunction, "ReturnValue");
        
        IntPtr Tick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Tick");
        Tick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Tick_NativeFunction);
        Tick_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Tick_NativeFunction, "MyGeometry");
        Tick_InDeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Tick_NativeFunction, "InDeltaTime");
        
        IntPtr PreConstruct_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PreConstruct");
        PreConstruct_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PreConstruct_NativeFunction);
        PreConstruct_IsDesignTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PreConstruct_NativeFunction, "IsDesignTime");
        
        IntPtr OnTouchStarted_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnTouchStarted");
        OnTouchStarted_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnTouchStarted_NativeFunction);
        OnTouchStarted_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchStarted_NativeFunction, "MyGeometry");
        OnTouchStarted_InTouchEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchStarted_NativeFunction, "InTouchEvent");
        OnTouchStarted_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchStarted_NativeFunction, "ReturnValue");
        
        IntPtr OnTouchMoved_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnTouchMoved");
        OnTouchMoved_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnTouchMoved_NativeFunction);
        OnTouchMoved_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchMoved_NativeFunction, "MyGeometry");
        OnTouchMoved_InTouchEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchMoved_NativeFunction, "InTouchEvent");
        OnTouchMoved_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchMoved_NativeFunction, "ReturnValue");
        
        IntPtr OnTouchGesture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnTouchGesture");
        OnTouchGesture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnTouchGesture_NativeFunction);
        OnTouchGesture_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchGesture_NativeFunction, "MyGeometry");
        OnTouchGesture_GestureEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchGesture_NativeFunction, "GestureEvent");
        OnTouchGesture_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchGesture_NativeFunction, "ReturnValue");
        
        IntPtr OnTouchForceChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnTouchForceChanged");
        OnTouchForceChanged_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnTouchForceChanged_NativeFunction);
        OnTouchForceChanged_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchForceChanged_NativeFunction, "MyGeometry");
        OnTouchForceChanged_InTouchEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchForceChanged_NativeFunction, "InTouchEvent");
        OnTouchForceChanged_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchForceChanged_NativeFunction, "ReturnValue");
        
        IntPtr OnTouchEnded_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnTouchEnded");
        OnTouchEnded_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnTouchEnded_NativeFunction);
        OnTouchEnded_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchEnded_NativeFunction, "MyGeometry");
        OnTouchEnded_InTouchEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchEnded_NativeFunction, "InTouchEvent");
        OnTouchEnded_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTouchEnded_NativeFunction, "ReturnValue");
        
        IntPtr OnRemovedFromFocusPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnRemovedFromFocusPath");
        OnRemovedFromFocusPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnRemovedFromFocusPath_NativeFunction);
        OnRemovedFromFocusPath_InFocusEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnRemovedFromFocusPath_NativeFunction, "InFocusEvent");
        
        IntPtr OnPreviewMouseButtonDown_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnPreviewMouseButtonDown");
        OnPreviewMouseButtonDown_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnPreviewMouseButtonDown_NativeFunction);
        OnPreviewMouseButtonDown_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnPreviewMouseButtonDown_NativeFunction, "MyGeometry");
        OnPreviewMouseButtonDown_MouseEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnPreviewMouseButtonDown_NativeFunction, "MouseEvent");
        OnPreviewMouseButtonDown_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnPreviewMouseButtonDown_NativeFunction, "ReturnValue");
        
        IntPtr OnPreviewKeyDown_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnPreviewKeyDown");
        OnPreviewKeyDown_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnPreviewKeyDown_NativeFunction);
        OnPreviewKeyDown_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnPreviewKeyDown_NativeFunction, "MyGeometry");
        OnPreviewKeyDown_InKeyEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnPreviewKeyDown_NativeFunction, "InKeyEvent");
        OnPreviewKeyDown_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnPreviewKeyDown_NativeFunction, "ReturnValue");
        
        IntPtr OnPaint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnPaint");
        OnPaint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnPaint_NativeFunction);
        OnPaint_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnPaint_NativeFunction, "Context");
        
        IntPtr OnMouseWheel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnMouseWheel");
        OnMouseWheel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnMouseWheel_NativeFunction);
        OnMouseWheel_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseWheel_NativeFunction, "MyGeometry");
        OnMouseWheel_MouseEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseWheel_NativeFunction, "MouseEvent");
        OnMouseWheel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseWheel_NativeFunction, "ReturnValue");
        
        IntPtr OnMouseMove_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnMouseMove");
        OnMouseMove_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnMouseMove_NativeFunction);
        OnMouseMove_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseMove_NativeFunction, "MyGeometry");
        OnMouseMove_MouseEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseMove_NativeFunction, "MouseEvent");
        OnMouseMove_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseMove_NativeFunction, "ReturnValue");
        
        IntPtr OnMouseLeave_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnMouseLeave");
        OnMouseLeave_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnMouseLeave_NativeFunction);
        OnMouseLeave_MouseEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseLeave_NativeFunction, "MouseEvent");
        
        IntPtr OnMouseEnter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnMouseEnter");
        OnMouseEnter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnMouseEnter_NativeFunction);
        OnMouseEnter_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseEnter_NativeFunction, "MyGeometry");
        OnMouseEnter_MouseEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseEnter_NativeFunction, "MouseEvent");
        
        IntPtr OnMouseButtonUp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnMouseButtonUp");
        OnMouseButtonUp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnMouseButtonUp_NativeFunction);
        OnMouseButtonUp_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseButtonUp_NativeFunction, "MyGeometry");
        OnMouseButtonUp_MouseEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseButtonUp_NativeFunction, "MouseEvent");
        OnMouseButtonUp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseButtonUp_NativeFunction, "ReturnValue");
        
        IntPtr OnMouseButtonDown_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnMouseButtonDown");
        OnMouseButtonDown_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnMouseButtonDown_NativeFunction);
        OnMouseButtonDown_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseButtonDown_NativeFunction, "MyGeometry");
        OnMouseButtonDown_MouseEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseButtonDown_NativeFunction, "MouseEvent");
        OnMouseButtonDown_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseButtonDown_NativeFunction, "ReturnValue");
        
        IntPtr OnMouseButtonDoubleClick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnMouseButtonDoubleClick");
        OnMouseButtonDoubleClick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnMouseButtonDoubleClick_NativeFunction);
        OnMouseButtonDoubleClick_InMyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseButtonDoubleClick_NativeFunction, "InMyGeometry");
        OnMouseButtonDoubleClick_InMouseEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseButtonDoubleClick_NativeFunction, "InMouseEvent");
        OnMouseButtonDoubleClick_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMouseButtonDoubleClick_NativeFunction, "ReturnValue");
        
        IntPtr OnMotionDetected_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnMotionDetected");
        OnMotionDetected_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnMotionDetected_NativeFunction);
        OnMotionDetected_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMotionDetected_NativeFunction, "MyGeometry");
        OnMotionDetected_InMotionEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMotionDetected_NativeFunction, "InMotionEvent");
        OnMotionDetected_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnMotionDetected_NativeFunction, "ReturnValue");
        
        IntPtr OnKeyUp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnKeyUp");
        OnKeyUp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnKeyUp_NativeFunction);
        OnKeyUp_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnKeyUp_NativeFunction, "MyGeometry");
        OnKeyUp_InKeyEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnKeyUp_NativeFunction, "InKeyEvent");
        OnKeyUp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnKeyUp_NativeFunction, "ReturnValue");
        
        IntPtr OnKeyDown_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnKeyDown");
        OnKeyDown_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnKeyDown_NativeFunction);
        OnKeyDown_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnKeyDown_NativeFunction, "MyGeometry");
        OnKeyDown_InKeyEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnKeyDown_NativeFunction, "InKeyEvent");
        OnKeyDown_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnKeyDown_NativeFunction, "ReturnValue");
        
        IntPtr OnKeyChar_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnKeyChar");
        OnKeyChar_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnKeyChar_NativeFunction);
        OnKeyChar_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnKeyChar_NativeFunction, "MyGeometry");
        OnKeyChar_InCharacterEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnKeyChar_NativeFunction, "InCharacterEvent");
        OnKeyChar_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnKeyChar_NativeFunction, "ReturnValue");
        
        IntPtr OnFocusReceived_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnFocusReceived");
        OnFocusReceived_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnFocusReceived_NativeFunction);
        OnFocusReceived_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnFocusReceived_NativeFunction, "MyGeometry");
        OnFocusReceived_InFocusEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnFocusReceived_NativeFunction, "InFocusEvent");
        OnFocusReceived_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnFocusReceived_NativeFunction, "ReturnValue");
        
        IntPtr OnFocusLost_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnFocusLost");
        OnFocusLost_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnFocusLost_NativeFunction);
        OnFocusLost_InFocusEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnFocusLost_NativeFunction, "InFocusEvent");
        
        IntPtr OnDrop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnDrop");
        OnDrop_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnDrop_NativeFunction);
        OnDrop_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDrop_NativeFunction, "MyGeometry");
        OnDrop_PointerEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDrop_NativeFunction, "PointerEvent");
        OnDrop_Operation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDrop_NativeFunction, "Operation");
        OnDrop_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDrop_NativeFunction, "ReturnValue");
        
        IntPtr OnDragOver_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnDragOver");
        OnDragOver_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnDragOver_NativeFunction);
        OnDragOver_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDragOver_NativeFunction, "MyGeometry");
        OnDragOver_PointerEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDragOver_NativeFunction, "PointerEvent");
        OnDragOver_Operation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDragOver_NativeFunction, "Operation");
        OnDragOver_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDragOver_NativeFunction, "ReturnValue");
        
        IntPtr OnDragLeave_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnDragLeave");
        OnDragLeave_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnDragLeave_NativeFunction);
        OnDragLeave_PointerEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDragLeave_NativeFunction, "PointerEvent");
        OnDragLeave_Operation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDragLeave_NativeFunction, "Operation");
        
        IntPtr OnDragEnter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnDragEnter");
        OnDragEnter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnDragEnter_NativeFunction);
        OnDragEnter_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDragEnter_NativeFunction, "MyGeometry");
        OnDragEnter_PointerEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDragEnter_NativeFunction, "PointerEvent");
        OnDragEnter_Operation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDragEnter_NativeFunction, "Operation");
        
        IntPtr OnDragDetected_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnDragDetected");
        OnDragDetected_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnDragDetected_NativeFunction);
        OnDragDetected_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDragDetected_NativeFunction, "MyGeometry");
        OnDragDetected_PointerEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDragDetected_NativeFunction, "PointerEvent");
        OnDragDetected_Operation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDragDetected_NativeFunction, "Operation");
        
        IntPtr OnDragCancelled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnDragCancelled");
        OnDragCancelled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnDragCancelled_NativeFunction);
        OnDragCancelled_PointerEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDragCancelled_NativeFunction, "PointerEvent");
        OnDragCancelled_Operation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnDragCancelled_NativeFunction, "Operation");
        
        IntPtr OnAnimationStarted_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnAnimationStarted");
        OnAnimationStarted_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnAnimationStarted_NativeFunction);
        OnAnimationStarted_Animation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnAnimationStarted_NativeFunction, "Animation");
        
        IntPtr OnAnimationFinished_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnAnimationFinished");
        OnAnimationFinished_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnAnimationFinished_NativeFunction);
        OnAnimationFinished_Animation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnAnimationFinished_NativeFunction, "Animation");
        
        IntPtr OnAnalogValueChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnAnalogValueChanged");
        OnAnalogValueChanged_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnAnalogValueChanged_NativeFunction);
        OnAnalogValueChanged_MyGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnAnalogValueChanged_NativeFunction, "MyGeometry");
        OnAnalogValueChanged_InAnalogInputEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnAnalogValueChanged_NativeFunction, "InAnalogInputEvent");
        OnAnalogValueChanged_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnAnalogValueChanged_NativeFunction, "ReturnValue");
        
        IntPtr OnAddedToFocusPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnAddedToFocusPath");
        OnAddedToFocusPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnAddedToFocusPath_NativeFunction);
        OnAddedToFocusPath_InFocusEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnAddedToFocusPath_NativeFunction, "InFocusEvent");
        
        IntPtr IsInteractable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsInteractable");
        IsInteractable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsInteractable_NativeFunction);
        IsInteractable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsInteractable_NativeFunction, "ReturnValue");
        
        
    }
    
    protected UserWidget(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/UMG.UserWidget:ColorAndOpacity
    static readonly int ColorAndOpacity_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor ColorAndOpacity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, ColorAndOpacity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(NativeObject, ColorAndOpacity_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.UserWidget:ForegroundColor
    static readonly int ForegroundColor_Offset;
    
    public UnrealSharp.SlateCore.SlateColor ForegroundColor
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.SlateColorMarshaler.FromNative(IntPtr.Add(NativeObject, ForegroundColor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.SlateColorMarshaler.ToNative(IntPtr.Add(NativeObject, ForegroundColor_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.UserWidget:Padding
    static readonly int Padding_Offset;
    
    public UnrealSharp.SlateCore.Margin Padding
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.Margin>.FromNative(IntPtr.Add(NativeObject, Padding_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.Margin>.ToNative(IntPtr.Add(NativeObject, Padding_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/UMG.UserWidget:Priority
    static readonly int Priority_Offset;
    
    public int Priority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, Priority_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, Priority_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.UserWidget:bIsFocusable
    static readonly int bIsFocusable_Offset;
    static readonly IntPtr bIsFocusable_NativeProperty;
    
    public bool bIsFocusable
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsFocusable_NativeProperty, bIsFocusable_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIsFocusable_NativeProperty, bIsFocusable_Offset, value);
        }
    }
    
    // BoolProperty /Script/UMG.UserWidget:bStopAction
    static readonly int bStopAction_Offset;
    static readonly IntPtr bStopAction_NativeProperty;
    
    public bool bStopAction
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bStopAction_NativeProperty, bStopAction_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bStopAction_NativeProperty, bStopAction_Offset, value);
        }
    }
    
    // EnumProperty /Script/UMG.UserWidget:TickFrequency
    static readonly int TickFrequency_Offset;
    
    public UnrealSharp.UMG.EWidgetTickFrequency TickFrequency
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.UMG.EWidgetTickFrequency>.FromNative(IntPtr.Add(NativeObject, TickFrequency_Offset), 0, this);
        }
    }
    
    // Function /Script/UMG.UserWidget:UnregisterInputComponent
    static readonly IntPtr UnregisterInputComponent_NativeFunction;
    
    protected void UnregisterInputComponent()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UnregisterInputComponent_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.UserWidget:UnbindAllFromAnimationStarted
    static readonly IntPtr UnbindAllFromAnimationStarted_NativeFunction;
    static readonly int UnbindAllFromAnimationStarted_ParamsSize;
    static readonly int UnbindAllFromAnimationStarted_Animation_Offset;
    
    public void UnbindAllFromAnimationStarted(UnrealSharp.UMG.WidgetAnimation animation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnbindAllFromAnimationStarted_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, UnbindAllFromAnimationStarted_Animation_Offset), 0, null, animation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UnbindAllFromAnimationStarted_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:UnbindAllFromAnimationFinished
    static readonly IntPtr UnbindAllFromAnimationFinished_NativeFunction;
    static readonly int UnbindAllFromAnimationFinished_ParamsSize;
    static readonly int UnbindAllFromAnimationFinished_Animation_Offset;
    
    public void UnbindAllFromAnimationFinished(UnrealSharp.UMG.WidgetAnimation animation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnbindAllFromAnimationFinished_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, UnbindAllFromAnimationFinished_Animation_Offset), 0, null, animation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UnbindAllFromAnimationFinished_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:StopListeningForInputAction
    static readonly IntPtr StopListeningForInputAction_NativeFunction;
    static readonly int StopListeningForInputAction_ParamsSize;
    static readonly int StopListeningForInputAction_ActionName_Offset;
    static readonly int StopListeningForInputAction_EventType_Offset;
    
    protected void StopListeningForInputAction(Name actionName, UnrealSharp.Engine.EInputEvent eventType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopListeningForInputAction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, StopListeningForInputAction_ActionName_Offset), 0, null, actionName);
            BlittableMarshaller<UnrealSharp.Engine.EInputEvent>.ToNative(IntPtr.Add(ParamsBuffer, StopListeningForInputAction_EventType_Offset), 0, null, eventType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopListeningForInputAction_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:StopListeningForAllInputActions
    static readonly IntPtr StopListeningForAllInputActions_NativeFunction;
    
    protected void StopListeningForAllInputActions()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopListeningForAllInputActions_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.UserWidget:StopAnimationsAndLatentActions
    static readonly IntPtr StopAnimationsAndLatentActions_NativeFunction;
    
    public void StopAnimationsAndLatentActions()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopAnimationsAndLatentActions_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.UserWidget:StopAnimation
    static readonly IntPtr StopAnimation_NativeFunction;
    static readonly int StopAnimation_ParamsSize;
    static readonly int StopAnimation_InAnimation_Offset;
    
    public void StopAnimation(UnrealSharp.UMG.WidgetAnimation inAnimation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, StopAnimation_InAnimation_Offset), 0, null, inAnimation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopAnimation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:StopAllAnimations
    static readonly IntPtr StopAllAnimations_NativeFunction;
    
    public void StopAllAnimations()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopAllAnimations_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.UserWidget:SetPositionInViewport
    static readonly IntPtr SetPositionInViewport_NativeFunction;
    static readonly int SetPositionInViewport_ParamsSize;
    static readonly int SetPositionInViewport_Position_Offset;
    static readonly int SetPositionInViewport_bRemoveDPIScale_Offset;
    
    public void SetPositionInViewport(System.DoubleNumerics.Vector2 position, bool bRemoveDPIScale = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPositionInViewport_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetPositionInViewport_Position_Offset), 0, null, position);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPositionInViewport_bRemoveDPIScale_Offset), 0, null, bRemoveDPIScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPositionInViewport_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:SetPlaybackSpeed
    static readonly IntPtr SetPlaybackSpeed_NativeFunction;
    static readonly int SetPlaybackSpeed_ParamsSize;
    static readonly int SetPlaybackSpeed_InAnimation_Offset;
    static readonly int SetPlaybackSpeed_PlaybackSpeed_Offset;
    
    public void SetPlaybackSpeed(UnrealSharp.UMG.WidgetAnimation inAnimation, float playbackSpeed = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaybackSpeed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackSpeed_InAnimation_Offset), 0, null, inAnimation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackSpeed_PlaybackSpeed_Offset), 0, null, playbackSpeed);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlaybackSpeed_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:SetPadding
    static readonly IntPtr SetPadding_NativeFunction;
    static readonly int SetPadding_ParamsSize;
    static readonly int SetPadding_InPadding_Offset;
    
    public void SetPadding(UnrealSharp.SlateCore.Margin inPadding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPadding_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.Margin>.ToNative(IntPtr.Add(ParamsBuffer, SetPadding_InPadding_Offset), 0, null, inPadding);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPadding_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:SetOwningPlayer
    static readonly IntPtr SetOwningPlayer_NativeFunction;
    static readonly int SetOwningPlayer_ParamsSize;
    static readonly int SetOwningPlayer_LocalPlayerController_Offset;
    
    public void SetOwningPlayer(UnrealSharp.Engine.PlayerController localPlayerController)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOwningPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, SetOwningPlayer_LocalPlayerController_Offset), 0, null, localPlayerController);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOwningPlayer_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:SetNumLoopsToPlay
    static readonly IntPtr SetNumLoopsToPlay_NativeFunction;
    static readonly int SetNumLoopsToPlay_ParamsSize;
    static readonly int SetNumLoopsToPlay_InAnimation_Offset;
    static readonly int SetNumLoopsToPlay_NumLoopsToPlay_Offset;
    
    public void SetNumLoopsToPlay(UnrealSharp.UMG.WidgetAnimation inAnimation, int numLoopsToPlay)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNumLoopsToPlay_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, SetNumLoopsToPlay_InAnimation_Offset), 0, null, inAnimation);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetNumLoopsToPlay_NumLoopsToPlay_Offset), 0, null, numLoopsToPlay);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNumLoopsToPlay_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:SetInputActionPriority
    static readonly IntPtr SetInputActionPriority_NativeFunction;
    static readonly int SetInputActionPriority_ParamsSize;
    static readonly int SetInputActionPriority_NewPriority_Offset;
    
    protected void SetInputActionPriority(int newPriority)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInputActionPriority_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetInputActionPriority_NewPriority_Offset), 0, null, newPriority);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInputActionPriority_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:SetInputActionBlocking
    static readonly IntPtr SetInputActionBlocking_NativeFunction;
    static readonly int SetInputActionBlocking_ParamsSize;
    static readonly int SetInputActionBlocking_bShouldBlock_Offset;
    
    protected void SetInputActionBlocking(bool bShouldBlock)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInputActionBlocking_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetInputActionBlocking_bShouldBlock_Offset), 0, null, bShouldBlock);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInputActionBlocking_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:SetForegroundColor
    static readonly IntPtr SetForegroundColor_NativeFunction;
    static readonly int SetForegroundColor_ParamsSize;
    static readonly int SetForegroundColor_InForegroundColor_Offset;
    
    public void SetForegroundColor(UnrealSharp.SlateCore.SlateColor inForegroundColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetForegroundColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateColorMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetForegroundColor_InForegroundColor_Offset), 0, null, inForegroundColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetForegroundColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:SetDesiredSizeInViewport
    static readonly IntPtr SetDesiredSizeInViewport_NativeFunction;
    static readonly int SetDesiredSizeInViewport_ParamsSize;
    static readonly int SetDesiredSizeInViewport_Size_Offset;
    
    public void SetDesiredSizeInViewport(System.DoubleNumerics.Vector2 size)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDesiredSizeInViewport_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetDesiredSizeInViewport_Size_Offset), 0, null, size);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDesiredSizeInViewport_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:SetColorAndOpacity
    static readonly IntPtr SetColorAndOpacity_NativeFunction;
    static readonly int SetColorAndOpacity_ParamsSize;
    static readonly int SetColorAndOpacity_InColorAndOpacity_Offset;
    
    public void SetColorAndOpacity(UnrealSharp.CoreUObject.LinearColor inColorAndOpacity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetColorAndOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetColorAndOpacity_InColorAndOpacity_Offset), 0, null, inColorAndOpacity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetColorAndOpacity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:SetAnimationCurrentTime
    static readonly IntPtr SetAnimationCurrentTime_NativeFunction;
    static readonly int SetAnimationCurrentTime_ParamsSize;
    static readonly int SetAnimationCurrentTime_InAnimation_Offset;
    static readonly int SetAnimationCurrentTime_InTime_Offset;
    
    public void SetAnimationCurrentTime(UnrealSharp.UMG.WidgetAnimation inAnimation, float inTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAnimationCurrentTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, SetAnimationCurrentTime_InAnimation_Offset), 0, null, inAnimation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAnimationCurrentTime_InTime_Offset), 0, null, inTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAnimationCurrentTime_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:SetAnchorsInViewport
    static readonly IntPtr SetAnchorsInViewport_NativeFunction;
    static readonly int SetAnchorsInViewport_ParamsSize;
    static readonly int SetAnchorsInViewport_Anchors_Offset;
    
    public void SetAnchorsInViewport(UnrealSharp.Slate.Anchors anchors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAnchorsInViewport_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Slate.Anchors>.ToNative(IntPtr.Add(ParamsBuffer, SetAnchorsInViewport_Anchors_Offset), 0, null, anchors);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAnchorsInViewport_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:SetAlignmentInViewport
    static readonly IntPtr SetAlignmentInViewport_NativeFunction;
    static readonly int SetAlignmentInViewport_ParamsSize;
    static readonly int SetAlignmentInViewport_Alignment_Offset;
    
    public void SetAlignmentInViewport(System.DoubleNumerics.Vector2 alignment)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAlignmentInViewport_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetAlignmentInViewport_Alignment_Offset), 0, null, alignment);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAlignmentInViewport_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:ReverseAnimation
    static readonly IntPtr ReverseAnimation_NativeFunction;
    static readonly int ReverseAnimation_ParamsSize;
    static readonly int ReverseAnimation_InAnimation_Offset;
    
    public void ReverseAnimation(UnrealSharp.UMG.WidgetAnimation inAnimation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReverseAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, ReverseAnimation_InAnimation_Offset), 0, null, inAnimation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReverseAnimation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:RemoveFromViewport
    static readonly IntPtr RemoveFromViewport_NativeFunction;
    
    [Obsolete("Use RemoveFromParent instead")]
    public void RemoveFromViewport()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveFromViewport_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.UserWidget:RemoveExtensions
    static readonly IntPtr RemoveExtensions_NativeFunction;
    static readonly int RemoveExtensions_ParamsSize;
    static readonly int RemoveExtensions_InExtensionType_Offset;
    
    public void RemoveExtensions(SubclassOf<UnrealSharp.UMG.UserWidgetExtension> inExtensionType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveExtensions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.UMG.UserWidgetExtension>.ToNative(IntPtr.Add(ParamsBuffer, RemoveExtensions_InExtensionType_Offset), 0, null, inExtensionType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveExtensions_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:RemoveExtension
    static readonly IntPtr RemoveExtension_NativeFunction;
    static readonly int RemoveExtension_ParamsSize;
    static readonly int RemoveExtension_InExtension_Offset;
    
    public void RemoveExtension(UnrealSharp.UMG.UserWidgetExtension inExtension)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveExtension_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.UserWidgetExtension>.ToNative(IntPtr.Add(ParamsBuffer, RemoveExtension_InExtension_Offset), 0, null, inExtension);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveExtension_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:RegisterInputComponent
    static readonly IntPtr RegisterInputComponent_NativeFunction;
    
    protected void RegisterInputComponent()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RegisterInputComponent_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.UserWidget:PlaySound
    static readonly IntPtr PlaySound_NativeFunction;
    static readonly int PlaySound_ParamsSize;
    static readonly int PlaySound_SoundToPlay_Offset;
    
    [Obsolete("Use the UGameplayStatics::PlaySound2D instead.")]
    public void PlaySound(UnrealSharp.Engine.SoundBase soundToPlay)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlaySound_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundBase>.ToNative(IntPtr.Add(ParamsBuffer, PlaySound_SoundToPlay_Offset), 0, null, soundToPlay);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlaySound_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:PlayAnimationTimeRange
    static readonly IntPtr PlayAnimationTimeRange_NativeFunction;
    static readonly int PlayAnimationTimeRange_ParamsSize;
    static readonly int PlayAnimationTimeRange_InAnimation_Offset;
    static readonly int PlayAnimationTimeRange_StartAtTime_Offset;
    static readonly int PlayAnimationTimeRange_EndAtTime_Offset;
    static readonly int PlayAnimationTimeRange_NumLoopsToPlay_Offset;
    static readonly int PlayAnimationTimeRange_PlayMode_Offset;
    static readonly int PlayAnimationTimeRange_PlaybackSpeed_Offset;
    static readonly int PlayAnimationTimeRange_bRestoreState_Offset;
    static readonly int PlayAnimationTimeRange_ReturnValue_Offset;
    
    public UnrealSharp.UMG.UMGSequencePlayer PlayAnimationTimeRange(UnrealSharp.UMG.WidgetAnimation inAnimation, float startAtTime = 0.000000f, float endAtTime = 0.000000f, int numLoopsToPlay = 1, UnrealSharp.UMG.EUMGSequencePlayMode playMode = UnrealSharp.UMG.EUMGSequencePlayMode.Forward, float playbackSpeed = 1.000000f, bool bRestoreState = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlayAnimationTimeRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimationTimeRange_InAnimation_Offset), 0, null, inAnimation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimationTimeRange_StartAtTime_Offset), 0, null, startAtTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimationTimeRange_EndAtTime_Offset), 0, null, endAtTime);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimationTimeRange_NumLoopsToPlay_Offset), 0, null, numLoopsToPlay);
            BlittableMarshaller<UnrealSharp.UMG.EUMGSequencePlayMode>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimationTimeRange_PlayMode_Offset), 0, null, playMode);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimationTimeRange_PlaybackSpeed_Offset), 0, null, playbackSpeed);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimationTimeRange_bRestoreState_Offset), 0, null, bRestoreState);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlayAnimationTimeRange_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.UMGSequencePlayer returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.UMG.UMGSequencePlayer>.FromNative(IntPtr.Add(ParamsBuffer, PlayAnimationTimeRange_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:PlayAnimationReverse
    static readonly IntPtr PlayAnimationReverse_NativeFunction;
    static readonly int PlayAnimationReverse_ParamsSize;
    static readonly int PlayAnimationReverse_InAnimation_Offset;
    static readonly int PlayAnimationReverse_PlaybackSpeed_Offset;
    static readonly int PlayAnimationReverse_bRestoreState_Offset;
    static readonly int PlayAnimationReverse_ReturnValue_Offset;
    
    public UnrealSharp.UMG.UMGSequencePlayer PlayAnimationReverse(UnrealSharp.UMG.WidgetAnimation inAnimation, float playbackSpeed = 1.000000f, bool bRestoreState = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlayAnimationReverse_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimationReverse_InAnimation_Offset), 0, null, inAnimation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimationReverse_PlaybackSpeed_Offset), 0, null, playbackSpeed);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimationReverse_bRestoreState_Offset), 0, null, bRestoreState);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlayAnimationReverse_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.UMGSequencePlayer returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.UMG.UMGSequencePlayer>.FromNative(IntPtr.Add(ParamsBuffer, PlayAnimationReverse_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:PlayAnimationForward
    static readonly IntPtr PlayAnimationForward_NativeFunction;
    static readonly int PlayAnimationForward_ParamsSize;
    static readonly int PlayAnimationForward_InAnimation_Offset;
    static readonly int PlayAnimationForward_PlaybackSpeed_Offset;
    static readonly int PlayAnimationForward_bRestoreState_Offset;
    static readonly int PlayAnimationForward_ReturnValue_Offset;
    
    public UnrealSharp.UMG.UMGSequencePlayer PlayAnimationForward(UnrealSharp.UMG.WidgetAnimation inAnimation, float playbackSpeed = 1.000000f, bool bRestoreState = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlayAnimationForward_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimationForward_InAnimation_Offset), 0, null, inAnimation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimationForward_PlaybackSpeed_Offset), 0, null, playbackSpeed);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimationForward_bRestoreState_Offset), 0, null, bRestoreState);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlayAnimationForward_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.UMGSequencePlayer returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.UMG.UMGSequencePlayer>.FromNative(IntPtr.Add(ParamsBuffer, PlayAnimationForward_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:PlayAnimation
    static readonly IntPtr PlayAnimation_NativeFunction;
    static readonly int PlayAnimation_ParamsSize;
    static readonly int PlayAnimation_InAnimation_Offset;
    static readonly int PlayAnimation_StartAtTime_Offset;
    static readonly int PlayAnimation_NumLoopsToPlay_Offset;
    static readonly int PlayAnimation_PlayMode_Offset;
    static readonly int PlayAnimation_PlaybackSpeed_Offset;
    static readonly int PlayAnimation_bRestoreState_Offset;
    static readonly int PlayAnimation_ReturnValue_Offset;
    
    public UnrealSharp.UMG.UMGSequencePlayer PlayAnimation(UnrealSharp.UMG.WidgetAnimation inAnimation, float startAtTime = 0.000000f, int numLoopsToPlay = 1, UnrealSharp.UMG.EUMGSequencePlayMode playMode = UnrealSharp.UMG.EUMGSequencePlayMode.Forward, float playbackSpeed = 1.000000f, bool bRestoreState = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlayAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimation_InAnimation_Offset), 0, null, inAnimation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimation_StartAtTime_Offset), 0, null, startAtTime);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimation_NumLoopsToPlay_Offset), 0, null, numLoopsToPlay);
            BlittableMarshaller<UnrealSharp.UMG.EUMGSequencePlayMode>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimation_PlayMode_Offset), 0, null, playMode);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimation_PlaybackSpeed_Offset), 0, null, playbackSpeed);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimation_bRestoreState_Offset), 0, null, bRestoreState);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlayAnimation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.UMGSequencePlayer returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.UMG.UMGSequencePlayer>.FromNative(IntPtr.Add(ParamsBuffer, PlayAnimation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:PauseAnimation
    static readonly IntPtr PauseAnimation_NativeFunction;
    static readonly int PauseAnimation_ParamsSize;
    static readonly int PauseAnimation_InAnimation_Offset;
    static readonly int PauseAnimation_ReturnValue_Offset;
    
    public float PauseAnimation(UnrealSharp.UMG.WidgetAnimation inAnimation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PauseAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, PauseAnimation_InAnimation_Offset), 0, null, inAnimation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PauseAnimation_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, PauseAnimation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:IsPlayingAnimation
    static readonly IntPtr IsPlayingAnimation_NativeFunction;
    static readonly int IsPlayingAnimation_ParamsSize;
    static readonly int IsPlayingAnimation_ReturnValue_Offset;
    
    public bool IsPlayingAnimation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPlayingAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPlayingAnimation_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPlayingAnimation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:IsListeningForInputAction
    static readonly IntPtr IsListeningForInputAction_NativeFunction;
    static readonly int IsListeningForInputAction_ParamsSize;
    static readonly int IsListeningForInputAction_ActionName_Offset;
    static readonly int IsListeningForInputAction_ReturnValue_Offset;
    
    protected bool IsListeningForInputAction(Name actionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsListeningForInputAction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsListeningForInputAction_ActionName_Offset), 0, null, actionName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsListeningForInputAction_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsListeningForInputAction_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:IsAnyAnimationPlaying
    static readonly IntPtr IsAnyAnimationPlaying_NativeFunction;
    static readonly int IsAnyAnimationPlaying_ParamsSize;
    static readonly int IsAnyAnimationPlaying_ReturnValue_Offset;
    
    public bool IsAnyAnimationPlaying()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsAnyAnimationPlaying_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsAnyAnimationPlaying_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsAnyAnimationPlaying_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:IsAnimationPlayingForward
    static readonly IntPtr IsAnimationPlayingForward_NativeFunction;
    static readonly int IsAnimationPlayingForward_ParamsSize;
    static readonly int IsAnimationPlayingForward_InAnimation_Offset;
    static readonly int IsAnimationPlayingForward_ReturnValue_Offset;
    
    public bool IsAnimationPlayingForward(UnrealSharp.UMG.WidgetAnimation inAnimation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsAnimationPlayingForward_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, IsAnimationPlayingForward_InAnimation_Offset), 0, null, inAnimation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsAnimationPlayingForward_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsAnimationPlayingForward_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:IsAnimationPlaying
    static readonly IntPtr IsAnimationPlaying_NativeFunction;
    static readonly int IsAnimationPlaying_ParamsSize;
    static readonly int IsAnimationPlaying_InAnimation_Offset;
    static readonly int IsAnimationPlaying_ReturnValue_Offset;
    
    public bool IsAnimationPlaying(UnrealSharp.UMG.WidgetAnimation inAnimation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsAnimationPlaying_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, IsAnimationPlaying_InAnimation_Offset), 0, null, inAnimation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsAnimationPlaying_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsAnimationPlaying_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:GetOwningPlayerPawn
    static readonly IntPtr GetOwningPlayerPawn_NativeFunction;
    static readonly int GetOwningPlayerPawn_ParamsSize;
    static readonly int GetOwningPlayerPawn_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Pawn GetOwningPlayerPawn()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOwningPlayerPawn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOwningPlayerPawn_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Pawn returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(ParamsBuffer, GetOwningPlayerPawn_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:GetOwningPlayerCameraManager
    static readonly IntPtr GetOwningPlayerCameraManager_NativeFunction;
    static readonly int GetOwningPlayerCameraManager_ParamsSize;
    static readonly int GetOwningPlayerCameraManager_ReturnValue_Offset;
    
    public UnrealSharp.Engine.PlayerCameraManager GetOwningPlayerCameraManager()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOwningPlayerCameraManager_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOwningPlayerCameraManager_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerCameraManager returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerCameraManager>.FromNative(IntPtr.Add(ParamsBuffer, GetOwningPlayerCameraManager_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:GetIsVisible
    static readonly IntPtr GetIsVisible_NativeFunction;
    static readonly int GetIsVisible_ParamsSize;
    static readonly int GetIsVisible_ReturnValue_Offset;
    
    [Obsolete("Use IsInViewport instead")]
    public bool GetIsVisible()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetIsVisible_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetIsVisible_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetIsVisible_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:GetExtensions
    static readonly IntPtr GetExtensions_NativeFunction;
    static readonly int GetExtensions_ParamsSize;
    static readonly int GetExtensions_ExtensionType_Offset;
    static readonly int GetExtensions_ReturnValue_Offset;
    static readonly int GetExtensions_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.UMG.UserWidgetExtension> GetExtensions(SubclassOf<UnrealSharp.UMG.UserWidgetExtension> extensionType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetExtensions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.UMG.UserWidgetExtension>.ToNative(IntPtr.Add(ParamsBuffer, GetExtensions_ExtensionType_Offset), 0, null, extensionType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetExtensions_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.UMG.UserWidgetExtension> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetExtensions_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.UMG.UserWidgetExtension> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.UMG.UserWidgetExtension> (1, ObjectMarshaller<UnrealSharp.UMG.UserWidgetExtension>.ToNative, ObjectMarshaller<UnrealSharp.UMG.UserWidgetExtension>.FromNative, GetExtensions_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.UMG.UserWidgetExtension>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:GetExtension
    static readonly IntPtr GetExtension_NativeFunction;
    static readonly int GetExtension_ParamsSize;
    static readonly int GetExtension_ExtensionType_Offset;
    static readonly int GetExtension_ReturnValue_Offset;
    
    public UnrealSharp.UMG.UserWidgetExtension GetExtension(SubclassOf<UnrealSharp.UMG.UserWidgetExtension> extensionType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetExtension_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.UMG.UserWidgetExtension>.ToNative(IntPtr.Add(ParamsBuffer, GetExtension_ExtensionType_Offset), 0, null, extensionType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetExtension_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.UserWidgetExtension returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.UMG.UserWidgetExtension>.FromNative(IntPtr.Add(ParamsBuffer, GetExtension_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:GetAnimationCurrentTime
    static readonly IntPtr GetAnimationCurrentTime_NativeFunction;
    static readonly int GetAnimationCurrentTime_ParamsSize;
    static readonly int GetAnimationCurrentTime_InAnimation_Offset;
    static readonly int GetAnimationCurrentTime_ReturnValue_Offset;
    
    public float GetAnimationCurrentTime(UnrealSharp.UMG.WidgetAnimation inAnimation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimationCurrentTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimationCurrentTime_InAnimation_Offset), 0, null, inAnimation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAnimationCurrentTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetAnimationCurrentTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:GetAnchorsInViewport
    static readonly IntPtr GetAnchorsInViewport_NativeFunction;
    static readonly int GetAnchorsInViewport_ParamsSize;
    static readonly int GetAnchorsInViewport_ReturnValue_Offset;
    
    public UnrealSharp.Slate.Anchors GetAnchorsInViewport()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnchorsInViewport_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAnchorsInViewport_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Slate.Anchors returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Slate.Anchors>.FromNative(IntPtr.Add(ParamsBuffer, GetAnchorsInViewport_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:GetAlignmentInViewport
    static readonly IntPtr GetAlignmentInViewport_NativeFunction;
    static readonly int GetAlignmentInViewport_ParamsSize;
    static readonly int GetAlignmentInViewport_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 GetAlignmentInViewport()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAlignmentInViewport_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAlignmentInViewport_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetAlignmentInViewport_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:FlushAnimations
    static readonly IntPtr FlushAnimations_NativeFunction;
    
    public void FlushAnimations()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FlushAnimations_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.UserWidget:CancelLatentActions
    static readonly IntPtr CancelLatentActions_NativeFunction;
    
    public void CancelLatentActions()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CancelLatentActions_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.UserWidget:AddToViewport
    static readonly IntPtr AddToViewport_NativeFunction;
    static readonly int AddToViewport_ParamsSize;
    static readonly int AddToViewport_ZOrder_Offset;
    
    public void AddToViewport(int zOrder = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddToViewport_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, AddToViewport_ZOrder_Offset), 0, null, zOrder);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddToViewport_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.UserWidget:AddToPlayerScreen
    static readonly IntPtr AddToPlayerScreen_NativeFunction;
    static readonly int AddToPlayerScreen_ParamsSize;
    static readonly int AddToPlayerScreen_ZOrder_Offset;
    static readonly int AddToPlayerScreen_ReturnValue_Offset;
    
    public bool AddToPlayerScreen(int zOrder = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddToPlayerScreen_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, AddToPlayerScreen_ZOrder_Offset), 0, null, zOrder);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddToPlayerScreen_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddToPlayerScreen_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:AddExtension
    static readonly IntPtr AddExtension_NativeFunction;
    static readonly int AddExtension_ParamsSize;
    static readonly int AddExtension_InExtensionType_Offset;
    static readonly int AddExtension_ReturnValue_Offset;
    
    public UnrealSharp.UMG.UserWidgetExtension AddExtension(SubclassOf<UnrealSharp.UMG.UserWidgetExtension> inExtensionType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddExtension_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.UMG.UserWidgetExtension>.ToNative(IntPtr.Add(ParamsBuffer, AddExtension_InExtensionType_Offset), 0, null, inExtensionType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddExtension_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.UserWidgetExtension returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.UMG.UserWidgetExtension>.FromNative(IntPtr.Add(ParamsBuffer, AddExtension_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.UserWidget:Tick
    IntPtr Tick_NativeFunction;
    static readonly int Tick_ParamsSize;
    static readonly int Tick_MyGeometry_Offset;
    static readonly int Tick_InDeltaTime_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void Tick(UnrealSharp.SlateCore.Geometry myGeometry, float inDeltaTime)
    {
        unsafe
        {
            if (Tick_NativeFunction == IntPtr.Zero)
            {
                Tick_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Tick");
            }
            byte* ParamsBufferAllocation = stackalloc byte[Tick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Tick_MyGeometry_Offset), 0, null, myGeometry);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Tick_InDeltaTime_Offset), 0, null, inDeltaTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Tick_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void Tick_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, float inDeltaTime)
    {
    }
    void Invoke_Tick(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, Tick_MyGeometry_Offset), 0, null);
            float inDeltaTime = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, Tick_InDeltaTime_Offset), 0, null);
            Tick_Implementation(myGeometry, inDeltaTime);
        }
    }
    
    // Function /Script/UMG.UserWidget:PreConstruct
    IntPtr PreConstruct_NativeFunction;
    static readonly int PreConstruct_ParamsSize;
    static readonly int PreConstruct_IsDesignTime_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void PreConstruct(bool isDesignTime)
    {
        unsafe
        {
            if (PreConstruct_NativeFunction == IntPtr.Zero)
            {
                PreConstruct_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "PreConstruct");
            }
            byte* ParamsBufferAllocation = stackalloc byte[PreConstruct_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PreConstruct_IsDesignTime_Offset), 0, null, isDesignTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PreConstruct_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void PreConstruct_Implementation(bool isDesignTime)
    {
    }
    void Invoke_PreConstruct(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            bool isDesignTime = BoolMarshaller.FromNative(IntPtr.Add(buffer, PreConstruct_IsDesignTime_Offset), 0, null);
            PreConstruct_Implementation(isDesignTime);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnTouchStarted
    IntPtr OnTouchStarted_NativeFunction;
    static readonly int OnTouchStarted_ParamsSize;
    static readonly int OnTouchStarted_MyGeometry_Offset;
    static readonly int OnTouchStarted_InTouchEvent_Offset;
    static readonly int OnTouchStarted_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnTouchStarted(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent inTouchEvent)
    {
        unsafe
        {
            if (OnTouchStarted_NativeFunction == IntPtr.Zero)
            {
                OnTouchStarted_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnTouchStarted");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnTouchStarted_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnTouchStarted_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnTouchStarted_InTouchEvent_Offset), 0, null, inTouchEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnTouchStarted_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnTouchStarted_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnTouchStarted_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent inTouchEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnTouchStarted(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnTouchStarted_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent inTouchEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnTouchStarted_InTouchEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnTouchStarted_Implementation(myGeometry, inTouchEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnTouchMoved
    IntPtr OnTouchMoved_NativeFunction;
    static readonly int OnTouchMoved_ParamsSize;
    static readonly int OnTouchMoved_MyGeometry_Offset;
    static readonly int OnTouchMoved_InTouchEvent_Offset;
    static readonly int OnTouchMoved_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnTouchMoved(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent inTouchEvent)
    {
        unsafe
        {
            if (OnTouchMoved_NativeFunction == IntPtr.Zero)
            {
                OnTouchMoved_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnTouchMoved");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnTouchMoved_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnTouchMoved_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnTouchMoved_InTouchEvent_Offset), 0, null, inTouchEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnTouchMoved_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnTouchMoved_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnTouchMoved_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent inTouchEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnTouchMoved(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnTouchMoved_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent inTouchEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnTouchMoved_InTouchEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnTouchMoved_Implementation(myGeometry, inTouchEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnTouchGesture
    IntPtr OnTouchGesture_NativeFunction;
    static readonly int OnTouchGesture_ParamsSize;
    static readonly int OnTouchGesture_MyGeometry_Offset;
    static readonly int OnTouchGesture_GestureEvent_Offset;
    static readonly int OnTouchGesture_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnTouchGesture(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent gestureEvent)
    {
        unsafe
        {
            if (OnTouchGesture_NativeFunction == IntPtr.Zero)
            {
                OnTouchGesture_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnTouchGesture");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnTouchGesture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnTouchGesture_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnTouchGesture_GestureEvent_Offset), 0, null, gestureEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnTouchGesture_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnTouchGesture_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnTouchGesture_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent gestureEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnTouchGesture(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnTouchGesture_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent gestureEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnTouchGesture_GestureEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnTouchGesture_Implementation(myGeometry, gestureEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnTouchForceChanged
    IntPtr OnTouchForceChanged_NativeFunction;
    static readonly int OnTouchForceChanged_ParamsSize;
    static readonly int OnTouchForceChanged_MyGeometry_Offset;
    static readonly int OnTouchForceChanged_InTouchEvent_Offset;
    static readonly int OnTouchForceChanged_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnTouchForceChanged(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent inTouchEvent)
    {
        unsafe
        {
            if (OnTouchForceChanged_NativeFunction == IntPtr.Zero)
            {
                OnTouchForceChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnTouchForceChanged");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnTouchForceChanged_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnTouchForceChanged_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnTouchForceChanged_InTouchEvent_Offset), 0, null, inTouchEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnTouchForceChanged_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnTouchForceChanged_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnTouchForceChanged_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent inTouchEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnTouchForceChanged(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnTouchForceChanged_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent inTouchEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnTouchForceChanged_InTouchEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnTouchForceChanged_Implementation(myGeometry, inTouchEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnTouchEnded
    IntPtr OnTouchEnded_NativeFunction;
    static readonly int OnTouchEnded_ParamsSize;
    static readonly int OnTouchEnded_MyGeometry_Offset;
    static readonly int OnTouchEnded_InTouchEvent_Offset;
    static readonly int OnTouchEnded_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnTouchEnded(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent inTouchEvent)
    {
        unsafe
        {
            if (OnTouchEnded_NativeFunction == IntPtr.Zero)
            {
                OnTouchEnded_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnTouchEnded");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnTouchEnded_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnTouchEnded_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnTouchEnded_InTouchEvent_Offset), 0, null, inTouchEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnTouchEnded_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnTouchEnded_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnTouchEnded_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent inTouchEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnTouchEnded(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnTouchEnded_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent inTouchEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnTouchEnded_InTouchEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnTouchEnded_Implementation(myGeometry, inTouchEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnRemovedFromFocusPath
    IntPtr OnRemovedFromFocusPath_NativeFunction;
    static readonly int OnRemovedFromFocusPath_ParamsSize;
    static readonly int OnRemovedFromFocusPath_InFocusEvent_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnRemovedFromFocusPath(UnrealSharp.SlateCore.FocusEvent inFocusEvent)
    {
        unsafe
        {
            if (OnRemovedFromFocusPath_NativeFunction == IntPtr.Zero)
            {
                OnRemovedFromFocusPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnRemovedFromFocusPath");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnRemovedFromFocusPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.FocusEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnRemovedFromFocusPath_InFocusEvent_Offset), 0, null, inFocusEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnRemovedFromFocusPath_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnRemovedFromFocusPath_Implementation(UnrealSharp.SlateCore.FocusEvent inFocusEvent)
    {
    }
    void Invoke_OnRemovedFromFocusPath(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.FocusEvent inFocusEvent = UnrealSharp.SlateCore.FocusEventMarshaler.FromNative(IntPtr.Add(buffer, OnRemovedFromFocusPath_InFocusEvent_Offset), 0, null);
            OnRemovedFromFocusPath_Implementation(inFocusEvent);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnPreviewMouseButtonDown
    IntPtr OnPreviewMouseButtonDown_NativeFunction;
    static readonly int OnPreviewMouseButtonDown_ParamsSize;
    static readonly int OnPreviewMouseButtonDown_MyGeometry_Offset;
    static readonly int OnPreviewMouseButtonDown_MouseEvent_Offset;
    static readonly int OnPreviewMouseButtonDown_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnPreviewMouseButtonDown(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent mouseEvent)
    {
        unsafe
        {
            if (OnPreviewMouseButtonDown_NativeFunction == IntPtr.Zero)
            {
                OnPreviewMouseButtonDown_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnPreviewMouseButtonDown");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnPreviewMouseButtonDown_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnPreviewMouseButtonDown_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnPreviewMouseButtonDown_MouseEvent_Offset), 0, null, mouseEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnPreviewMouseButtonDown_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnPreviewMouseButtonDown_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnPreviewMouseButtonDown_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent mouseEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnPreviewMouseButtonDown(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnPreviewMouseButtonDown_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent mouseEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnPreviewMouseButtonDown_MouseEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnPreviewMouseButtonDown_Implementation(myGeometry, mouseEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnPreviewKeyDown
    IntPtr OnPreviewKeyDown_NativeFunction;
    static readonly int OnPreviewKeyDown_ParamsSize;
    static readonly int OnPreviewKeyDown_MyGeometry_Offset;
    static readonly int OnPreviewKeyDown_InKeyEvent_Offset;
    static readonly int OnPreviewKeyDown_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnPreviewKeyDown(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.KeyEvent inKeyEvent)
    {
        unsafe
        {
            if (OnPreviewKeyDown_NativeFunction == IntPtr.Zero)
            {
                OnPreviewKeyDown_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnPreviewKeyDown");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnPreviewKeyDown_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnPreviewKeyDown_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.KeyEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnPreviewKeyDown_InKeyEvent_Offset), 0, null, inKeyEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnPreviewKeyDown_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnPreviewKeyDown_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnPreviewKeyDown_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.KeyEvent inKeyEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnPreviewKeyDown(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnPreviewKeyDown_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.KeyEvent inKeyEvent = UnrealSharp.SlateCore.KeyEventMarshaler.FromNative(IntPtr.Add(buffer, OnPreviewKeyDown_InKeyEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnPreviewKeyDown_Implementation(myGeometry, inKeyEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnPaint
    IntPtr OnPaint_NativeFunction;
    static readonly int OnPaint_ParamsSize;
    static readonly int OnPaint_Context_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnPaint(ref UnrealSharp.UMG.PaintContext context)
    {
        unsafe
        {
            if (OnPaint_NativeFunction == IntPtr.Zero)
            {
                OnPaint_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnPaint");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnPaint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.PaintContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnPaint_Context_Offset), 0, null, context);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnPaint_NativeFunction, ParamsBuffer);
            
            context = UnrealSharp.UMG.PaintContextMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnPaint_Context_Offset), 0, null);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnPaint_Implementation(ref UnrealSharp.UMG.PaintContext context)
    {
    }
    void Invoke_OnPaint(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.UMG.PaintContext context = default;
            OnPaint_Implementation(ref context);
            UnrealSharp.UMG.PaintContextMarshaler.ToNative(IntPtr.Add(buffer, OnPaint_Context_Offset), 0, null, context);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnMouseWheel
    IntPtr OnMouseWheel_NativeFunction;
    static readonly int OnMouseWheel_ParamsSize;
    static readonly int OnMouseWheel_MyGeometry_Offset;
    static readonly int OnMouseWheel_MouseEvent_Offset;
    static readonly int OnMouseWheel_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnMouseWheel(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent mouseEvent)
    {
        unsafe
        {
            if (OnMouseWheel_NativeFunction == IntPtr.Zero)
            {
                OnMouseWheel_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnMouseWheel");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnMouseWheel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMouseWheel_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMouseWheel_MouseEvent_Offset), 0, null, mouseEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnMouseWheel_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnMouseWheel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnMouseWheel_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent mouseEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnMouseWheel(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnMouseWheel_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent mouseEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnMouseWheel_MouseEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnMouseWheel_Implementation(myGeometry, mouseEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnMouseMove
    IntPtr OnMouseMove_NativeFunction;
    static readonly int OnMouseMove_ParamsSize;
    static readonly int OnMouseMove_MyGeometry_Offset;
    static readonly int OnMouseMove_MouseEvent_Offset;
    static readonly int OnMouseMove_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnMouseMove(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent mouseEvent)
    {
        unsafe
        {
            if (OnMouseMove_NativeFunction == IntPtr.Zero)
            {
                OnMouseMove_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnMouseMove");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnMouseMove_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMouseMove_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMouseMove_MouseEvent_Offset), 0, null, mouseEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnMouseMove_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnMouseMove_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnMouseMove_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent mouseEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnMouseMove(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnMouseMove_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent mouseEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnMouseMove_MouseEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnMouseMove_Implementation(myGeometry, mouseEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnMouseLeave
    IntPtr OnMouseLeave_NativeFunction;
    static readonly int OnMouseLeave_ParamsSize;
    static readonly int OnMouseLeave_MouseEvent_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnMouseLeave(UnrealSharp.SlateCore.PointerEvent mouseEvent)
    {
        unsafe
        {
            if (OnMouseLeave_NativeFunction == IntPtr.Zero)
            {
                OnMouseLeave_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnMouseLeave");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnMouseLeave_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMouseLeave_MouseEvent_Offset), 0, null, mouseEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnMouseLeave_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnMouseLeave_Implementation(UnrealSharp.SlateCore.PointerEvent mouseEvent)
    {
    }
    void Invoke_OnMouseLeave(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.PointerEvent mouseEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnMouseLeave_MouseEvent_Offset), 0, null);
            OnMouseLeave_Implementation(mouseEvent);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnMouseEnter
    IntPtr OnMouseEnter_NativeFunction;
    static readonly int OnMouseEnter_ParamsSize;
    static readonly int OnMouseEnter_MyGeometry_Offset;
    static readonly int OnMouseEnter_MouseEvent_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnMouseEnter(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent mouseEvent)
    {
        unsafe
        {
            if (OnMouseEnter_NativeFunction == IntPtr.Zero)
            {
                OnMouseEnter_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnMouseEnter");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnMouseEnter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMouseEnter_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMouseEnter_MouseEvent_Offset), 0, null, mouseEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnMouseEnter_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnMouseEnter_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent mouseEvent)
    {
    }
    void Invoke_OnMouseEnter(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnMouseEnter_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent mouseEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnMouseEnter_MouseEvent_Offset), 0, null);
            OnMouseEnter_Implementation(myGeometry, mouseEvent);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnMouseCaptureLost
    IntPtr OnMouseCaptureLost_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnMouseCaptureLost()
    {
        unsafe
        {
            if (OnMouseCaptureLost_NativeFunction == IntPtr.Zero)
            {
                OnMouseCaptureLost_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnMouseCaptureLost");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnMouseCaptureLost_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnMouseCaptureLost_Implementation()
    {
    }
    void Invoke_OnMouseCaptureLost(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            OnMouseCaptureLost_Implementation();
        }
    }
    
    // Function /Script/UMG.UserWidget:OnMouseButtonUp
    IntPtr OnMouseButtonUp_NativeFunction;
    static readonly int OnMouseButtonUp_ParamsSize;
    static readonly int OnMouseButtonUp_MyGeometry_Offset;
    static readonly int OnMouseButtonUp_MouseEvent_Offset;
    static readonly int OnMouseButtonUp_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnMouseButtonUp(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent mouseEvent)
    {
        unsafe
        {
            if (OnMouseButtonUp_NativeFunction == IntPtr.Zero)
            {
                OnMouseButtonUp_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnMouseButtonUp");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnMouseButtonUp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMouseButtonUp_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMouseButtonUp_MouseEvent_Offset), 0, null, mouseEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnMouseButtonUp_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnMouseButtonUp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnMouseButtonUp_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent mouseEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnMouseButtonUp(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnMouseButtonUp_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent mouseEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnMouseButtonUp_MouseEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnMouseButtonUp_Implementation(myGeometry, mouseEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnMouseButtonDown
    IntPtr OnMouseButtonDown_NativeFunction;
    static readonly int OnMouseButtonDown_ParamsSize;
    static readonly int OnMouseButtonDown_MyGeometry_Offset;
    static readonly int OnMouseButtonDown_MouseEvent_Offset;
    static readonly int OnMouseButtonDown_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnMouseButtonDown(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent mouseEvent)
    {
        unsafe
        {
            if (OnMouseButtonDown_NativeFunction == IntPtr.Zero)
            {
                OnMouseButtonDown_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnMouseButtonDown");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnMouseButtonDown_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMouseButtonDown_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMouseButtonDown_MouseEvent_Offset), 0, null, mouseEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnMouseButtonDown_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnMouseButtonDown_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnMouseButtonDown_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent mouseEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnMouseButtonDown(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnMouseButtonDown_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent mouseEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnMouseButtonDown_MouseEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnMouseButtonDown_Implementation(myGeometry, mouseEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnMouseButtonDoubleClick
    IntPtr OnMouseButtonDoubleClick_NativeFunction;
    static readonly int OnMouseButtonDoubleClick_ParamsSize;
    static readonly int OnMouseButtonDoubleClick_InMyGeometry_Offset;
    static readonly int OnMouseButtonDoubleClick_InMouseEvent_Offset;
    static readonly int OnMouseButtonDoubleClick_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnMouseButtonDoubleClick(UnrealSharp.SlateCore.Geometry inMyGeometry, UnrealSharp.SlateCore.PointerEvent inMouseEvent)
    {
        unsafe
        {
            if (OnMouseButtonDoubleClick_NativeFunction == IntPtr.Zero)
            {
                OnMouseButtonDoubleClick_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnMouseButtonDoubleClick");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnMouseButtonDoubleClick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMouseButtonDoubleClick_InMyGeometry_Offset), 0, null, inMyGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMouseButtonDoubleClick_InMouseEvent_Offset), 0, null, inMouseEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnMouseButtonDoubleClick_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnMouseButtonDoubleClick_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnMouseButtonDoubleClick_Implementation(UnrealSharp.SlateCore.Geometry inMyGeometry, UnrealSharp.SlateCore.PointerEvent inMouseEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnMouseButtonDoubleClick(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry inMyGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnMouseButtonDoubleClick_InMyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent inMouseEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnMouseButtonDoubleClick_InMouseEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnMouseButtonDoubleClick_Implementation(inMyGeometry, inMouseEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnMotionDetected
    IntPtr OnMotionDetected_NativeFunction;
    static readonly int OnMotionDetected_ParamsSize;
    static readonly int OnMotionDetected_MyGeometry_Offset;
    static readonly int OnMotionDetected_InMotionEvent_Offset;
    static readonly int OnMotionDetected_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnMotionDetected(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.MotionEvent inMotionEvent)
    {
        unsafe
        {
            if (OnMotionDetected_NativeFunction == IntPtr.Zero)
            {
                OnMotionDetected_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnMotionDetected");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnMotionDetected_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMotionDetected_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.MotionEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnMotionDetected_InMotionEvent_Offset), 0, null, inMotionEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnMotionDetected_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnMotionDetected_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnMotionDetected_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.MotionEvent inMotionEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnMotionDetected(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnMotionDetected_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.MotionEvent inMotionEvent = UnrealSharp.SlateCore.MotionEventMarshaler.FromNative(IntPtr.Add(buffer, OnMotionDetected_InMotionEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnMotionDetected_Implementation(myGeometry, inMotionEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnKeyUp
    IntPtr OnKeyUp_NativeFunction;
    static readonly int OnKeyUp_ParamsSize;
    static readonly int OnKeyUp_MyGeometry_Offset;
    static readonly int OnKeyUp_InKeyEvent_Offset;
    static readonly int OnKeyUp_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnKeyUp(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.KeyEvent inKeyEvent)
    {
        unsafe
        {
            if (OnKeyUp_NativeFunction == IntPtr.Zero)
            {
                OnKeyUp_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnKeyUp");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnKeyUp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnKeyUp_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.KeyEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnKeyUp_InKeyEvent_Offset), 0, null, inKeyEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnKeyUp_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnKeyUp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnKeyUp_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.KeyEvent inKeyEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnKeyUp(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnKeyUp_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.KeyEvent inKeyEvent = UnrealSharp.SlateCore.KeyEventMarshaler.FromNative(IntPtr.Add(buffer, OnKeyUp_InKeyEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnKeyUp_Implementation(myGeometry, inKeyEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnKeyDown
    IntPtr OnKeyDown_NativeFunction;
    static readonly int OnKeyDown_ParamsSize;
    static readonly int OnKeyDown_MyGeometry_Offset;
    static readonly int OnKeyDown_InKeyEvent_Offset;
    static readonly int OnKeyDown_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnKeyDown(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.KeyEvent inKeyEvent)
    {
        unsafe
        {
            if (OnKeyDown_NativeFunction == IntPtr.Zero)
            {
                OnKeyDown_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnKeyDown");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnKeyDown_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnKeyDown_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.KeyEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnKeyDown_InKeyEvent_Offset), 0, null, inKeyEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnKeyDown_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnKeyDown_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnKeyDown_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.KeyEvent inKeyEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnKeyDown(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnKeyDown_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.KeyEvent inKeyEvent = UnrealSharp.SlateCore.KeyEventMarshaler.FromNative(IntPtr.Add(buffer, OnKeyDown_InKeyEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnKeyDown_Implementation(myGeometry, inKeyEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnKeyChar
    IntPtr OnKeyChar_NativeFunction;
    static readonly int OnKeyChar_ParamsSize;
    static readonly int OnKeyChar_MyGeometry_Offset;
    static readonly int OnKeyChar_InCharacterEvent_Offset;
    static readonly int OnKeyChar_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnKeyChar(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.CharacterEvent inCharacterEvent)
    {
        unsafe
        {
            if (OnKeyChar_NativeFunction == IntPtr.Zero)
            {
                OnKeyChar_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnKeyChar");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnKeyChar_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnKeyChar_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.CharacterEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnKeyChar_InCharacterEvent_Offset), 0, null, inCharacterEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnKeyChar_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnKeyChar_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnKeyChar_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.CharacterEvent inCharacterEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnKeyChar(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnKeyChar_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.CharacterEvent inCharacterEvent = UnrealSharp.SlateCore.CharacterEventMarshaler.FromNative(IntPtr.Add(buffer, OnKeyChar_InCharacterEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnKeyChar_Implementation(myGeometry, inCharacterEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnInitialized
    IntPtr OnInitialized_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnInitialized()
    {
        unsafe
        {
            if (OnInitialized_NativeFunction == IntPtr.Zero)
            {
                OnInitialized_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnInitialized");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnInitialized_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnInitialized_Implementation()
    {
    }
    void Invoke_OnInitialized(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            OnInitialized_Implementation();
        }
    }
    
    // Function /Script/UMG.UserWidget:OnFocusReceived
    IntPtr OnFocusReceived_NativeFunction;
    static readonly int OnFocusReceived_ParamsSize;
    static readonly int OnFocusReceived_MyGeometry_Offset;
    static readonly int OnFocusReceived_InFocusEvent_Offset;
    static readonly int OnFocusReceived_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnFocusReceived(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.FocusEvent inFocusEvent)
    {
        unsafe
        {
            if (OnFocusReceived_NativeFunction == IntPtr.Zero)
            {
                OnFocusReceived_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnFocusReceived");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnFocusReceived_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnFocusReceived_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.FocusEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnFocusReceived_InFocusEvent_Offset), 0, null, inFocusEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnFocusReceived_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnFocusReceived_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnFocusReceived_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.FocusEvent inFocusEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnFocusReceived(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnFocusReceived_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.FocusEvent inFocusEvent = UnrealSharp.SlateCore.FocusEventMarshaler.FromNative(IntPtr.Add(buffer, OnFocusReceived_InFocusEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnFocusReceived_Implementation(myGeometry, inFocusEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnFocusLost
    IntPtr OnFocusLost_NativeFunction;
    static readonly int OnFocusLost_ParamsSize;
    static readonly int OnFocusLost_InFocusEvent_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnFocusLost(UnrealSharp.SlateCore.FocusEvent inFocusEvent)
    {
        unsafe
        {
            if (OnFocusLost_NativeFunction == IntPtr.Zero)
            {
                OnFocusLost_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnFocusLost");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnFocusLost_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.FocusEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnFocusLost_InFocusEvent_Offset), 0, null, inFocusEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnFocusLost_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnFocusLost_Implementation(UnrealSharp.SlateCore.FocusEvent inFocusEvent)
    {
    }
    void Invoke_OnFocusLost(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.FocusEvent inFocusEvent = UnrealSharp.SlateCore.FocusEventMarshaler.FromNative(IntPtr.Add(buffer, OnFocusLost_InFocusEvent_Offset), 0, null);
            OnFocusLost_Implementation(inFocusEvent);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnDrop
    IntPtr OnDrop_NativeFunction;
    static readonly int OnDrop_ParamsSize;
    static readonly int OnDrop_MyGeometry_Offset;
    static readonly int OnDrop_PointerEvent_Offset;
    static readonly int OnDrop_Operation_Offset;
    static readonly int OnDrop_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool OnDrop(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent pointerEvent, UnrealSharp.UMG.DragDropOperation operation)
    {
        unsafe
        {
            if (OnDrop_NativeFunction == IntPtr.Zero)
            {
                OnDrop_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnDrop");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnDrop_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnDrop_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnDrop_PointerEvent_Offset), 0, null, pointerEvent);
            ObjectMarshaller<UnrealSharp.UMG.DragDropOperation>.ToNative(IntPtr.Add(ParamsBuffer, OnDrop_Operation_Offset), 0, null, operation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnDrop_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, OnDrop_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool OnDrop_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent pointerEvent, UnrealSharp.UMG.DragDropOperation operation)
    {
        return default(bool);
    }
    void Invoke_OnDrop(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnDrop_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent pointerEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnDrop_PointerEvent_Offset), 0, null);
            UnrealSharp.UMG.DragDropOperation operation = ObjectMarshaller<UnrealSharp.UMG.DragDropOperation>.FromNative(IntPtr.Add(buffer, OnDrop_Operation_Offset), 0, null);
            bool returnValue = OnDrop_Implementation(myGeometry, pointerEvent, operation);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnDragOver
    IntPtr OnDragOver_NativeFunction;
    static readonly int OnDragOver_ParamsSize;
    static readonly int OnDragOver_MyGeometry_Offset;
    static readonly int OnDragOver_PointerEvent_Offset;
    static readonly int OnDragOver_Operation_Offset;
    static readonly int OnDragOver_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool OnDragOver(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent pointerEvent, UnrealSharp.UMG.DragDropOperation operation)
    {
        unsafe
        {
            if (OnDragOver_NativeFunction == IntPtr.Zero)
            {
                OnDragOver_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnDragOver");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnDragOver_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnDragOver_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnDragOver_PointerEvent_Offset), 0, null, pointerEvent);
            ObjectMarshaller<UnrealSharp.UMG.DragDropOperation>.ToNative(IntPtr.Add(ParamsBuffer, OnDragOver_Operation_Offset), 0, null, operation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnDragOver_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, OnDragOver_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool OnDragOver_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent pointerEvent, UnrealSharp.UMG.DragDropOperation operation)
    {
        return default(bool);
    }
    void Invoke_OnDragOver(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnDragOver_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent pointerEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnDragOver_PointerEvent_Offset), 0, null);
            UnrealSharp.UMG.DragDropOperation operation = ObjectMarshaller<UnrealSharp.UMG.DragDropOperation>.FromNative(IntPtr.Add(buffer, OnDragOver_Operation_Offset), 0, null);
            bool returnValue = OnDragOver_Implementation(myGeometry, pointerEvent, operation);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnDragLeave
    IntPtr OnDragLeave_NativeFunction;
    static readonly int OnDragLeave_ParamsSize;
    static readonly int OnDragLeave_PointerEvent_Offset;
    static readonly int OnDragLeave_Operation_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnDragLeave(UnrealSharp.SlateCore.PointerEvent pointerEvent, UnrealSharp.UMG.DragDropOperation operation)
    {
        unsafe
        {
            if (OnDragLeave_NativeFunction == IntPtr.Zero)
            {
                OnDragLeave_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnDragLeave");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnDragLeave_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnDragLeave_PointerEvent_Offset), 0, null, pointerEvent);
            ObjectMarshaller<UnrealSharp.UMG.DragDropOperation>.ToNative(IntPtr.Add(ParamsBuffer, OnDragLeave_Operation_Offset), 0, null, operation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnDragLeave_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnDragLeave_Implementation(UnrealSharp.SlateCore.PointerEvent pointerEvent, UnrealSharp.UMG.DragDropOperation operation)
    {
    }
    void Invoke_OnDragLeave(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.PointerEvent pointerEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnDragLeave_PointerEvent_Offset), 0, null);
            UnrealSharp.UMG.DragDropOperation operation = ObjectMarshaller<UnrealSharp.UMG.DragDropOperation>.FromNative(IntPtr.Add(buffer, OnDragLeave_Operation_Offset), 0, null);
            OnDragLeave_Implementation(pointerEvent, operation);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnDragEnter
    IntPtr OnDragEnter_NativeFunction;
    static readonly int OnDragEnter_ParamsSize;
    static readonly int OnDragEnter_MyGeometry_Offset;
    static readonly int OnDragEnter_PointerEvent_Offset;
    static readonly int OnDragEnter_Operation_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnDragEnter(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent pointerEvent, UnrealSharp.UMG.DragDropOperation operation)
    {
        unsafe
        {
            if (OnDragEnter_NativeFunction == IntPtr.Zero)
            {
                OnDragEnter_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnDragEnter");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnDragEnter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnDragEnter_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnDragEnter_PointerEvent_Offset), 0, null, pointerEvent);
            ObjectMarshaller<UnrealSharp.UMG.DragDropOperation>.ToNative(IntPtr.Add(ParamsBuffer, OnDragEnter_Operation_Offset), 0, null, operation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnDragEnter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnDragEnter_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent pointerEvent, UnrealSharp.UMG.DragDropOperation operation)
    {
    }
    void Invoke_OnDragEnter(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnDragEnter_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent pointerEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnDragEnter_PointerEvent_Offset), 0, null);
            UnrealSharp.UMG.DragDropOperation operation = ObjectMarshaller<UnrealSharp.UMG.DragDropOperation>.FromNative(IntPtr.Add(buffer, OnDragEnter_Operation_Offset), 0, null);
            OnDragEnter_Implementation(myGeometry, pointerEvent, operation);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnDragDetected
    IntPtr OnDragDetected_NativeFunction;
    static readonly int OnDragDetected_ParamsSize;
    static readonly int OnDragDetected_MyGeometry_Offset;
    static readonly int OnDragDetected_PointerEvent_Offset;
    static readonly int OnDragDetected_Operation_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnDragDetected(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent pointerEvent, out UnrealSharp.UMG.DragDropOperation operation)
    {
        unsafe
        {
            if (OnDragDetected_NativeFunction == IntPtr.Zero)
            {
                OnDragDetected_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnDragDetected");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnDragDetected_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnDragDetected_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnDragDetected_PointerEvent_Offset), 0, null, pointerEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnDragDetected_NativeFunction, ParamsBuffer);
            
            operation = ObjectMarshaller<UnrealSharp.UMG.DragDropOperation>.FromNative(IntPtr.Add(ParamsBuffer, OnDragDetected_Operation_Offset), 0, null);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnDragDetected_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.PointerEvent pointerEvent, out UnrealSharp.UMG.DragDropOperation operation)
    {
        operation = default(UnrealSharp.UMG.DragDropOperation);
    }
    void Invoke_OnDragDetected(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnDragDetected_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.PointerEvent pointerEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnDragDetected_PointerEvent_Offset), 0, null);
            UnrealSharp.UMG.DragDropOperation operation = default;
            OnDragDetected_Implementation(myGeometry, pointerEvent, out operation);
            ObjectMarshaller<UnrealSharp.UMG.DragDropOperation>.ToNative(IntPtr.Add(buffer, OnDragDetected_Operation_Offset), 0, null, operation);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnDragCancelled
    IntPtr OnDragCancelled_NativeFunction;
    static readonly int OnDragCancelled_ParamsSize;
    static readonly int OnDragCancelled_PointerEvent_Offset;
    static readonly int OnDragCancelled_Operation_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnDragCancelled(UnrealSharp.SlateCore.PointerEvent pointerEvent, UnrealSharp.UMG.DragDropOperation operation)
    {
        unsafe
        {
            if (OnDragCancelled_NativeFunction == IntPtr.Zero)
            {
                OnDragCancelled_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnDragCancelled");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnDragCancelled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnDragCancelled_PointerEvent_Offset), 0, null, pointerEvent);
            ObjectMarshaller<UnrealSharp.UMG.DragDropOperation>.ToNative(IntPtr.Add(ParamsBuffer, OnDragCancelled_Operation_Offset), 0, null, operation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnDragCancelled_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnDragCancelled_Implementation(UnrealSharp.SlateCore.PointerEvent pointerEvent, UnrealSharp.UMG.DragDropOperation operation)
    {
    }
    void Invoke_OnDragCancelled(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.PointerEvent pointerEvent = UnrealSharp.SlateCore.PointerEventMarshaler.FromNative(IntPtr.Add(buffer, OnDragCancelled_PointerEvent_Offset), 0, null);
            UnrealSharp.UMG.DragDropOperation operation = ObjectMarshaller<UnrealSharp.UMG.DragDropOperation>.FromNative(IntPtr.Add(buffer, OnDragCancelled_Operation_Offset), 0, null);
            OnDragCancelled_Implementation(pointerEvent, operation);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnAnimationStarted
    IntPtr OnAnimationStarted_NativeFunction;
    static readonly int OnAnimationStarted_ParamsSize;
    static readonly int OnAnimationStarted_Animation_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void OnAnimationStarted(UnrealSharp.UMG.WidgetAnimation animation)
    {
        unsafe
        {
            if (OnAnimationStarted_NativeFunction == IntPtr.Zero)
            {
                OnAnimationStarted_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnAnimationStarted");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnAnimationStarted_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, OnAnimationStarted_Animation_Offset), 0, null, animation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnAnimationStarted_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnAnimationStarted_Implementation(UnrealSharp.UMG.WidgetAnimation animation)
    {
    }
    void Invoke_OnAnimationStarted(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.UMG.WidgetAnimation animation = ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.FromNative(IntPtr.Add(buffer, OnAnimationStarted_Animation_Offset), 0, null);
            OnAnimationStarted_Implementation(animation);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnAnimationFinished
    IntPtr OnAnimationFinished_NativeFunction;
    static readonly int OnAnimationFinished_ParamsSize;
    static readonly int OnAnimationFinished_Animation_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void OnAnimationFinished(UnrealSharp.UMG.WidgetAnimation animation)
    {
        unsafe
        {
            if (OnAnimationFinished_NativeFunction == IntPtr.Zero)
            {
                OnAnimationFinished_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnAnimationFinished");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnAnimationFinished_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.ToNative(IntPtr.Add(ParamsBuffer, OnAnimationFinished_Animation_Offset), 0, null, animation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnAnimationFinished_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnAnimationFinished_Implementation(UnrealSharp.UMG.WidgetAnimation animation)
    {
    }
    void Invoke_OnAnimationFinished(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.UMG.WidgetAnimation animation = ObjectMarshaller<UnrealSharp.UMG.WidgetAnimation>.FromNative(IntPtr.Add(buffer, OnAnimationFinished_Animation_Offset), 0, null);
            OnAnimationFinished_Implementation(animation);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnAnalogValueChanged
    IntPtr OnAnalogValueChanged_NativeFunction;
    static readonly int OnAnalogValueChanged_ParamsSize;
    static readonly int OnAnalogValueChanged_MyGeometry_Offset;
    static readonly int OnAnalogValueChanged_InAnalogInputEvent_Offset;
    static readonly int OnAnalogValueChanged_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.UMG.EventReply OnAnalogValueChanged(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.AnalogInputEvent inAnalogInputEvent)
    {
        unsafe
        {
            if (OnAnalogValueChanged_NativeFunction == IntPtr.Zero)
            {
                OnAnalogValueChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnAnalogValueChanged");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnAnalogValueChanged_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.GeometryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnAnalogValueChanged_MyGeometry_Offset), 0, null, myGeometry);
            UnrealSharp.SlateCore.AnalogInputEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnAnalogValueChanged_InAnalogInputEvent_Offset), 0, null, inAnalogInputEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnAnalogValueChanged_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, OnAnalogValueChanged_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.UMG.EventReply OnAnalogValueChanged_Implementation(UnrealSharp.SlateCore.Geometry myGeometry, UnrealSharp.SlateCore.AnalogInputEvent inAnalogInputEvent)
    {
        return default(UnrealSharp.UMG.EventReply);
    }
    void Invoke_OnAnalogValueChanged(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.Geometry myGeometry = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(buffer, OnAnalogValueChanged_MyGeometry_Offset), 0, null);
            UnrealSharp.SlateCore.AnalogInputEvent inAnalogInputEvent = UnrealSharp.SlateCore.AnalogInputEventMarshaler.FromNative(IntPtr.Add(buffer, OnAnalogValueChanged_InAnalogInputEvent_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue = OnAnalogValueChanged_Implementation(myGeometry, inAnalogInputEvent);
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:OnAddedToFocusPath
    IntPtr OnAddedToFocusPath_NativeFunction;
    static readonly int OnAddedToFocusPath_ParamsSize;
    static readonly int OnAddedToFocusPath_InFocusEvent_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnAddedToFocusPath(UnrealSharp.SlateCore.FocusEvent inFocusEvent)
    {
        unsafe
        {
            if (OnAddedToFocusPath_NativeFunction == IntPtr.Zero)
            {
                OnAddedToFocusPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnAddedToFocusPath");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnAddedToFocusPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.FocusEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnAddedToFocusPath_InFocusEvent_Offset), 0, null, inFocusEvent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnAddedToFocusPath_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnAddedToFocusPath_Implementation(UnrealSharp.SlateCore.FocusEvent inFocusEvent)
    {
    }
    void Invoke_OnAddedToFocusPath(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.SlateCore.FocusEvent inFocusEvent = UnrealSharp.SlateCore.FocusEventMarshaler.FromNative(IntPtr.Add(buffer, OnAddedToFocusPath_InFocusEvent_Offset), 0, null);
            OnAddedToFocusPath_Implementation(inFocusEvent);
        }
    }
    
    // Function /Script/UMG.UserWidget:IsInteractable
    IntPtr IsInteractable_NativeFunction;
    static readonly int IsInteractable_ParamsSize;
    static readonly int IsInteractable_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool IsInteractable()
    {
        unsafe
        {
            if (IsInteractable_NativeFunction == IntPtr.Zero)
            {
                IsInteractable_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "IsInteractable");
            }
            byte* ParamsBufferAllocation = stackalloc byte[IsInteractable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsInteractable_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsInteractable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool IsInteractable_Implementation()
    {
        return default(bool);
    }
    void Invoke_IsInteractable(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            bool returnValue = IsInteractable_Implementation();
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/UMG.UserWidget:Destruct
    IntPtr Destruct_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void Destruct()
    {
        unsafe
        {
            if (Destruct_NativeFunction == IntPtr.Zero)
            {
                Destruct_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Destruct");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Destruct_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void Destruct_Implementation()
    {
    }
    void Invoke_Destruct(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            Destruct_Implementation();
        }
    }
    
    // Function /Script/UMG.UserWidget:Construct
    IntPtr Construct_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void Construct()
    {
        unsafe
        {
            if (Construct_NativeFunction == IntPtr.Zero)
            {
                Construct_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Construct");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Construct_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void Construct_Implementation()
    {
    }
    void Invoke_Construct(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            Construct_Implementation();
        }
    }
    
    
}
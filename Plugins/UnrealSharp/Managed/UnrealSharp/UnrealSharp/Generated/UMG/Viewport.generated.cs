// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class Viewport : UnrealSharp.UMG.ContentWidget
{
    
    static Viewport()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Viewport");
        
        BackgroundColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BackgroundColor");
        
        Spawn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Spawn");
        Spawn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Spawn_NativeFunction);
        Spawn_ActorClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Spawn_NativeFunction, "ActorClass");
        Spawn_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Spawn_NativeFunction, "ReturnValue");
        SetViewRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetViewRotation");
        SetViewRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetViewRotation_NativeFunction);
        SetViewRotation_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewRotation_NativeFunction, "Rotation");
        SetViewLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetViewLocation");
        SetViewLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetViewLocation_NativeFunction);
        SetViewLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewLocation_NativeFunction, "Location");
        GetViewRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetViewRotation");
        GetViewRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetViewRotation_NativeFunction);
        GetViewRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewRotation_NativeFunction, "ReturnValue");
        GetViewportWorld_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetViewportWorld");
        GetViewportWorld_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetViewportWorld_NativeFunction);
        GetViewportWorld_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewportWorld_NativeFunction, "ReturnValue");
        GetViewLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetViewLocation");
        GetViewLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetViewLocation_NativeFunction);
        GetViewLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewLocation_NativeFunction, "ReturnValue");
        
        
    }
    
    protected Viewport(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/UMG.Viewport:BackgroundColor
    static readonly int BackgroundColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor BackgroundColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, BackgroundColor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(NativeObject, BackgroundColor_Offset), 0, this, value);
        }
    }
    
    // Function /Script/UMG.Viewport:Spawn
    static readonly IntPtr Spawn_NativeFunction;
    static readonly int Spawn_ParamsSize;
    static readonly int Spawn_ActorClass_Offset;
    static readonly int Spawn_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Actor Spawn(SubclassOf<UnrealSharp.Engine.Actor> actorClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Spawn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, Spawn_ActorClass_Offset), 0, null, actorClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Spawn_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, Spawn_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Viewport:SetViewRotation
    static readonly IntPtr SetViewRotation_NativeFunction;
    static readonly int SetViewRotation_ParamsSize;
    static readonly int SetViewRotation_Rotation_Offset;
    
    public void SetViewRotation(UnrealSharp.Rotator rotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetViewRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetViewRotation_Rotation_Offset), 0, null, rotation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetViewRotation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Viewport:SetViewLocation
    static readonly IntPtr SetViewLocation_NativeFunction;
    static readonly int SetViewLocation_ParamsSize;
    static readonly int SetViewLocation_Location_Offset;
    
    public void SetViewLocation(System.DoubleNumerics.Vector3 location)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetViewLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetViewLocation_Location_Offset), 0, null, location);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetViewLocation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Viewport:GetViewRotation
    static readonly IntPtr GetViewRotation_NativeFunction;
    static readonly int GetViewRotation_ParamsSize;
    static readonly int GetViewRotation_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetViewRotation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetViewRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetViewRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetViewRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Viewport:GetViewportWorld
    static readonly IntPtr GetViewportWorld_NativeFunction;
    static readonly int GetViewportWorld_ParamsSize;
    static readonly int GetViewportWorld_ReturnValue_Offset;
    
    public UnrealSharp.Engine.World GetViewportWorld()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetViewportWorld_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetViewportWorld_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.World returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.World>.FromNative(IntPtr.Add(ParamsBuffer, GetViewportWorld_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Viewport:GetViewLocation
    static readonly IntPtr GetViewLocation_NativeFunction;
    static readonly int GetViewLocation_ParamsSize;
    static readonly int GetViewLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetViewLocation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetViewLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetViewLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetViewLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
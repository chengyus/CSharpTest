// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
abstract public partial class Widget : UnrealSharp.UMG.Visual
{
    
    static Widget()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Widget");
        
        Slot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Slot");
        ToolTipText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ToolTipText");
        ToolTipText_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ToolTipText");
        ToolTipWidget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ToolTipWidget");
        RenderTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RenderTransform");
        RenderTransformPivot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RenderTransformPivot");
        FlowDirectionPreference_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FlowDirectionPreference");
        bIsEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsEnabled");
        bIsEnabled_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsEnabled");
        bIsVolatile_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsVolatile");
        bIsVolatile_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsVolatile");
        Cursor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Cursor");
        Clipping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Clipping");
        Visibility_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Visibility");
        RenderOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RenderOpacity");
        PixelSnapping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PixelSnapping");
        Navigation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Navigation");
        
        SetVisibility_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVisibility");
        SetVisibility_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVisibility_NativeFunction);
        SetVisibility_InVisibility_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVisibility_NativeFunction, "InVisibility");
        SetUserFocus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUserFocus");
        SetUserFocus_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUserFocus_NativeFunction);
        SetUserFocus_PlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUserFocus_NativeFunction, "PlayerController");
        SetToolTip_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetToolTip");
        SetToolTip_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetToolTip_NativeFunction);
        SetToolTip_Widget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetToolTip_NativeFunction, "Widget");
        SetRenderTranslation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRenderTranslation");
        SetRenderTranslation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRenderTranslation_NativeFunction);
        SetRenderTranslation_Translation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRenderTranslation_NativeFunction, "Translation");
        SetRenderTransformPivot_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRenderTransformPivot");
        SetRenderTransformPivot_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRenderTransformPivot_NativeFunction);
        SetRenderTransformPivot_Pivot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRenderTransformPivot_NativeFunction, "Pivot");
        SetRenderTransformAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRenderTransformAngle");
        SetRenderTransformAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRenderTransformAngle_NativeFunction);
        SetRenderTransformAngle_Angle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRenderTransformAngle_NativeFunction, "Angle");
        SetRenderTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRenderTransform");
        SetRenderTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRenderTransform_NativeFunction);
        SetRenderTransform_InTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRenderTransform_NativeFunction, "InTransform");
        SetRenderShear_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRenderShear");
        SetRenderShear_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRenderShear_NativeFunction);
        SetRenderShear_Shear_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRenderShear_NativeFunction, "Shear");
        SetRenderScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRenderScale");
        SetRenderScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRenderScale_NativeFunction);
        SetRenderScale_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRenderScale_NativeFunction, "Scale");
        SetRenderOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRenderOpacity");
        SetRenderOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRenderOpacity_NativeFunction);
        SetRenderOpacity_InOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRenderOpacity_NativeFunction, "InOpacity");
        SetNavigationRuleExplicit_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNavigationRuleExplicit");
        SetNavigationRuleExplicit_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNavigationRuleExplicit_NativeFunction);
        SetNavigationRuleExplicit_Direction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNavigationRuleExplicit_NativeFunction, "Direction");
        SetNavigationRuleExplicit_InWidget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNavigationRuleExplicit_NativeFunction, "InWidget");
        SetNavigationRuleBase_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNavigationRuleBase");
        SetNavigationRuleBase_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNavigationRuleBase_NativeFunction);
        SetNavigationRuleBase_Direction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNavigationRuleBase_NativeFunction, "Direction");
        SetNavigationRuleBase_Rule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNavigationRuleBase_NativeFunction, "Rule");
        SetNavigationRule_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNavigationRule");
        SetNavigationRule_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNavigationRule_NativeFunction);
        SetNavigationRule_Direction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNavigationRule_NativeFunction, "Direction");
        SetNavigationRule_Rule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNavigationRule_NativeFunction, "Rule");
        SetNavigationRule_WidgetToFocus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNavigationRule_NativeFunction, "WidgetToFocus");
        SetKeyboardFocus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetKeyboardFocus");
        SetIsEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsEnabled");
        SetIsEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsEnabled_NativeFunction);
        SetIsEnabled_bInIsEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsEnabled_NativeFunction, "bInIsEnabled");
        SetFocus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFocus");
        SetCursor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCursor");
        SetCursor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCursor_NativeFunction);
        SetCursor_InCursor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCursor_NativeFunction, "InCursor");
        SetClipping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetClipping");
        SetClipping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetClipping_NativeFunction);
        SetClipping_InClipping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetClipping_NativeFunction, "InClipping");
        SetAllNavigationRules_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAllNavigationRules");
        SetAllNavigationRules_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAllNavigationRules_NativeFunction);
        SetAllNavigationRules_Rule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAllNavigationRules_NativeFunction, "Rule");
        SetAllNavigationRules_WidgetToFocus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAllNavigationRules_NativeFunction, "WidgetToFocus");
        ResetCursor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetCursor");
        RemoveFromParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveFromParent");
        K2_BroadcastFieldValueChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_BroadcastFieldValueChanged");
        K2_BroadcastFieldValueChanged_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_BroadcastFieldValueChanged_NativeFunction);
        K2_BroadcastFieldValueChanged_FieldId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_BroadcastFieldValueChanged_NativeFunction, "FieldId");
        IsVisible_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsVisible");
        IsVisible_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsVisible_NativeFunction);
        IsVisible_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVisible_NativeFunction, "ReturnValue");
        IsRendered_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRendered");
        IsRendered_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRendered_NativeFunction);
        IsRendered_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRendered_NativeFunction, "ReturnValue");
        IsInViewport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsInViewport");
        IsInViewport_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsInViewport_NativeFunction);
        IsInViewport_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsInViewport_NativeFunction, "ReturnValue");
        IsHovered_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsHovered");
        IsHovered_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsHovered_NativeFunction);
        IsHovered_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsHovered_NativeFunction, "ReturnValue");
        InvalidateLayoutAndVolatility_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InvalidateLayoutAndVolatility");
        HasUserFocusedDescendants_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasUserFocusedDescendants");
        HasUserFocusedDescendants_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasUserFocusedDescendants_NativeFunction);
        HasUserFocusedDescendants_PlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasUserFocusedDescendants_NativeFunction, "PlayerController");
        HasUserFocusedDescendants_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasUserFocusedDescendants_NativeFunction, "ReturnValue");
        HasUserFocus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasUserFocus");
        HasUserFocus_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasUserFocus_NativeFunction);
        HasUserFocus_PlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasUserFocus_NativeFunction, "PlayerController");
        HasUserFocus_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasUserFocus_NativeFunction, "ReturnValue");
        HasMouseCaptureByUser_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasMouseCaptureByUser");
        HasMouseCaptureByUser_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasMouseCaptureByUser_NativeFunction);
        HasMouseCaptureByUser_UserIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasMouseCaptureByUser_NativeFunction, "UserIndex");
        HasMouseCaptureByUser_PointerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasMouseCaptureByUser_NativeFunction, "PointerIndex");
        HasMouseCaptureByUser_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasMouseCaptureByUser_NativeFunction, "ReturnValue");
        HasMouseCapture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasMouseCapture");
        HasMouseCapture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasMouseCapture_NativeFunction);
        HasMouseCapture_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasMouseCapture_NativeFunction, "ReturnValue");
        HasKeyboardFocus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasKeyboardFocus");
        HasKeyboardFocus_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasKeyboardFocus_NativeFunction);
        HasKeyboardFocus_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasKeyboardFocus_NativeFunction, "ReturnValue");
        HasFocusedDescendants_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasFocusedDescendants");
        HasFocusedDescendants_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasFocusedDescendants_NativeFunction);
        HasFocusedDescendants_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasFocusedDescendants_NativeFunction, "ReturnValue");
        HasAnyUserFocus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasAnyUserFocus");
        HasAnyUserFocus_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasAnyUserFocus_NativeFunction);
        HasAnyUserFocus_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasAnyUserFocus_NativeFunction, "ReturnValue");
        GetVisibility_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVisibility");
        GetVisibility_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVisibility_NativeFunction);
        GetVisibility_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVisibility_NativeFunction, "ReturnValue");
        GetTickSpaceGeometry_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTickSpaceGeometry");
        GetTickSpaceGeometry_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTickSpaceGeometry_NativeFunction);
        GetTickSpaceGeometry_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTickSpaceGeometry_NativeFunction, "ReturnValue");
        GetRenderTransformAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRenderTransformAngle");
        GetRenderTransformAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRenderTransformAngle_NativeFunction);
        GetRenderTransformAngle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRenderTransformAngle_NativeFunction, "ReturnValue");
        GetRenderOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRenderOpacity");
        GetRenderOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRenderOpacity_NativeFunction);
        GetRenderOpacity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRenderOpacity_NativeFunction, "ReturnValue");
        GetParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParent");
        GetParent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParent_NativeFunction);
        GetParent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParent_NativeFunction, "ReturnValue");
        GetPaintSpaceGeometry_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPaintSpaceGeometry");
        GetPaintSpaceGeometry_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPaintSpaceGeometry_NativeFunction);
        GetPaintSpaceGeometry_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPaintSpaceGeometry_NativeFunction, "ReturnValue");
        GetOwningPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOwningPlayer");
        GetOwningPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOwningPlayer_NativeFunction);
        GetOwningPlayer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOwningPlayer_NativeFunction, "ReturnValue");
        GetOwningLocalPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOwningLocalPlayer");
        GetOwningLocalPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOwningLocalPlayer_NativeFunction);
        GetOwningLocalPlayer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOwningLocalPlayer_NativeFunction, "ReturnValue");
        GetIsEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetIsEnabled");
        GetIsEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetIsEnabled_NativeFunction);
        GetIsEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIsEnabled_NativeFunction, "ReturnValue");
        GetGameInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGameInstance");
        GetGameInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGameInstance_NativeFunction);
        GetGameInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGameInstance_NativeFunction, "ReturnValue");
        GetDesiredSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDesiredSize");
        GetDesiredSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDesiredSize_NativeFunction);
        GetDesiredSize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDesiredSize_NativeFunction, "ReturnValue");
        GetClipping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetClipping");
        GetClipping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetClipping_NativeFunction);
        GetClipping_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClipping_NativeFunction, "ReturnValue");
        GetCachedGeometry_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCachedGeometry");
        GetCachedGeometry_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCachedGeometry_NativeFunction);
        GetCachedGeometry_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCachedGeometry_NativeFunction, "ReturnValue");
        ForceVolatile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ForceVolatile");
        ForceVolatile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ForceVolatile_NativeFunction);
        ForceVolatile_bForce_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ForceVolatile_NativeFunction, "bForce");
        ForceLayoutPrepass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ForceLayoutPrepass");
        
        
    }
    
    protected Widget(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/UMG.Widget:Slot
    static readonly int Slot_Offset;
    
    public UnrealSharp.UMG.PanelSlot Slot
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.UMG.PanelSlot>.FromNative(IntPtr.Add(NativeObject, Slot_Offset), 0, this);
        }
    }
    
    // TextProperty /Script/UMG.Widget:ToolTipText
    static readonly int ToolTipText_Offset;
    static readonly IntPtr ToolTipText_NativeProperty;
    TextMarshaller ToolTipText_Wrapper;
    
    public Text ToolTipText
    {
        get
        {
            if (ToolTipText_Wrapper == null)
            {
                ToolTipText_Wrapper  = new TextMarshaller(1);
            }
            return ToolTipText_Wrapper.FromNative(this.NativeObject + ToolTipText_Offset, 0, this);
        }
    }
    
    // ObjectProperty /Script/UMG.Widget:ToolTipWidget
    static readonly int ToolTipWidget_Offset;
    
    public UnrealSharp.UMG.Widget ToolTipWidget
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.UMG.Widget>.FromNative(IntPtr.Add(NativeObject, ToolTipWidget_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.UMG.Widget>.ToNative(IntPtr.Add(NativeObject, ToolTipWidget_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.Widget:RenderTransform
    static readonly int RenderTransform_Offset;
    
    public UnrealSharp.UMG.WidgetTransform RenderTransform
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.UMG.WidgetTransformMarshaler.FromNative(IntPtr.Add(NativeObject, RenderTransform_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.UMG.WidgetTransformMarshaler.ToNative(IntPtr.Add(NativeObject, RenderTransform_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UMG.Widget:RenderTransformPivot
    static readonly int RenderTransformPivot_Offset;
    
    public System.DoubleNumerics.Vector2 RenderTransformPivot
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, RenderTransformPivot_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(NativeObject, RenderTransformPivot_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/UMG.Widget:FlowDirectionPreference
    static readonly int FlowDirectionPreference_Offset;
    
    public UnrealSharp.SlateCore.EFlowDirectionPreference FlowDirectionPreference
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.EFlowDirectionPreference>.FromNative(IntPtr.Add(NativeObject, FlowDirectionPreference_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.EFlowDirectionPreference>.ToNative(IntPtr.Add(NativeObject, FlowDirectionPreference_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UMG.Widget:bIsEnabled
    static readonly int bIsEnabled_Offset;
    static readonly IntPtr bIsEnabled_NativeProperty;
    
    public bool bIsEnabled
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsEnabled_NativeProperty, bIsEnabled_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIsEnabled_NativeProperty, bIsEnabled_Offset, value);
        }
    }
    
    // BoolProperty /Script/UMG.Widget:bIsVolatile
    static readonly int bIsVolatile_Offset;
    static readonly IntPtr bIsVolatile_NativeProperty;
    
    public bool bIsVolatile
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsVolatile_NativeProperty, bIsVolatile_Offset);
        }
    }
    
    // ByteProperty /Script/UMG.Widget:Cursor
    static readonly int Cursor_Offset;
    
    public UnrealSharp.CoreUObject.EMouseCursor Cursor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.EMouseCursor>.FromNative(IntPtr.Add(NativeObject, Cursor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.EMouseCursor>.ToNative(IntPtr.Add(NativeObject, Cursor_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/UMG.Widget:Clipping
    static readonly int Clipping_Offset;
    
    public UnrealSharp.SlateCore.EWidgetClipping Clipping
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.EWidgetClipping>.FromNative(IntPtr.Add(NativeObject, Clipping_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.EWidgetClipping>.ToNative(IntPtr.Add(NativeObject, Clipping_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/UMG.Widget:Visibility
    static readonly int Visibility_Offset;
    
    public UnrealSharp.UMG.ESlateVisibility Visibility
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.UMG.ESlateVisibility>.FromNative(IntPtr.Add(NativeObject, Visibility_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.UMG.ESlateVisibility>.ToNative(IntPtr.Add(NativeObject, Visibility_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UMG.Widget:RenderOpacity
    static readonly int RenderOpacity_Offset;
    
    public float RenderOpacity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, RenderOpacity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, RenderOpacity_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/UMG.Widget:PixelSnapping
    static readonly int PixelSnapping_Offset;
    
    public UnrealSharp.SlateCore.EWidgetPixelSnapping PixelSnapping
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.EWidgetPixelSnapping>.FromNative(IntPtr.Add(NativeObject, PixelSnapping_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.SlateCore.EWidgetPixelSnapping>.ToNative(IntPtr.Add(NativeObject, PixelSnapping_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/UMG.Widget:Navigation
    static readonly int Navigation_Offset;
    
    public UnrealSharp.UMG.WidgetNavigation Navigation
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.UMG.WidgetNavigation>.FromNative(IntPtr.Add(NativeObject, Navigation_Offset), 0, this);
        }
    }
    
    // Function /Script/UMG.Widget:SetVisibility
    static readonly IntPtr SetVisibility_NativeFunction;
    static readonly int SetVisibility_ParamsSize;
    static readonly int SetVisibility_InVisibility_Offset;
    
    public void SetVisibility(UnrealSharp.UMG.ESlateVisibility inVisibility)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVisibility_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.UMG.ESlateVisibility>.ToNative(IntPtr.Add(ParamsBuffer, SetVisibility_InVisibility_Offset), 0, null, inVisibility);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVisibility_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetUserFocus
    static readonly IntPtr SetUserFocus_NativeFunction;
    static readonly int SetUserFocus_ParamsSize;
    static readonly int SetUserFocus_PlayerController_Offset;
    
    public void SetUserFocus(UnrealSharp.Engine.PlayerController playerController)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUserFocus_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, SetUserFocus_PlayerController_Offset), 0, null, playerController);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUserFocus_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetToolTip
    static readonly IntPtr SetToolTip_NativeFunction;
    static readonly int SetToolTip_ParamsSize;
    static readonly int SetToolTip_Widget_Offset;
    
    public void SetToolTip(UnrealSharp.UMG.Widget widget)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetToolTip_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.Widget>.ToNative(IntPtr.Add(ParamsBuffer, SetToolTip_Widget_Offset), 0, null, widget);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetToolTip_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetRenderTranslation
    static readonly IntPtr SetRenderTranslation_NativeFunction;
    static readonly int SetRenderTranslation_ParamsSize;
    static readonly int SetRenderTranslation_Translation_Offset;
    
    public void SetRenderTranslation(System.DoubleNumerics.Vector2 translation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRenderTranslation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetRenderTranslation_Translation_Offset), 0, null, translation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRenderTranslation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetRenderTransformPivot
    static readonly IntPtr SetRenderTransformPivot_NativeFunction;
    static readonly int SetRenderTransformPivot_ParamsSize;
    static readonly int SetRenderTransformPivot_Pivot_Offset;
    
    public void SetRenderTransformPivot(System.DoubleNumerics.Vector2 pivot)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRenderTransformPivot_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetRenderTransformPivot_Pivot_Offset), 0, null, pivot);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRenderTransformPivot_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetRenderTransformAngle
    static readonly IntPtr SetRenderTransformAngle_NativeFunction;
    static readonly int SetRenderTransformAngle_ParamsSize;
    static readonly int SetRenderTransformAngle_Angle_Offset;
    
    public void SetRenderTransformAngle(float angle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRenderTransformAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRenderTransformAngle_Angle_Offset), 0, null, angle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRenderTransformAngle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetRenderTransform
    static readonly IntPtr SetRenderTransform_NativeFunction;
    static readonly int SetRenderTransform_ParamsSize;
    static readonly int SetRenderTransform_InTransform_Offset;
    
    public void SetRenderTransform(UnrealSharp.UMG.WidgetTransform inTransform)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRenderTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.WidgetTransformMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetRenderTransform_InTransform_Offset), 0, null, inTransform);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRenderTransform_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetRenderShear
    static readonly IntPtr SetRenderShear_NativeFunction;
    static readonly int SetRenderShear_ParamsSize;
    static readonly int SetRenderShear_Shear_Offset;
    
    public void SetRenderShear(System.DoubleNumerics.Vector2 shear)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRenderShear_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetRenderShear_Shear_Offset), 0, null, shear);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRenderShear_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetRenderScale
    static readonly IntPtr SetRenderScale_NativeFunction;
    static readonly int SetRenderScale_ParamsSize;
    static readonly int SetRenderScale_Scale_Offset;
    
    public void SetRenderScale(System.DoubleNumerics.Vector2 scale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRenderScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetRenderScale_Scale_Offset), 0, null, scale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRenderScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetRenderOpacity
    static readonly IntPtr SetRenderOpacity_NativeFunction;
    static readonly int SetRenderOpacity_ParamsSize;
    static readonly int SetRenderOpacity_InOpacity_Offset;
    
    public void SetRenderOpacity(float inOpacity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRenderOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRenderOpacity_InOpacity_Offset), 0, null, inOpacity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRenderOpacity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetNavigationRuleExplicit
    static readonly IntPtr SetNavigationRuleExplicit_NativeFunction;
    static readonly int SetNavigationRuleExplicit_ParamsSize;
    static readonly int SetNavigationRuleExplicit_Direction_Offset;
    static readonly int SetNavigationRuleExplicit_InWidget_Offset;
    
    public void SetNavigationRuleExplicit(UnrealSharp.SlateCore.EUINavigation direction, UnrealSharp.UMG.Widget inWidget)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNavigationRuleExplicit_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.EUINavigation>.ToNative(IntPtr.Add(ParamsBuffer, SetNavigationRuleExplicit_Direction_Offset), 0, null, direction);
            ObjectMarshaller<UnrealSharp.UMG.Widget>.ToNative(IntPtr.Add(ParamsBuffer, SetNavigationRuleExplicit_InWidget_Offset), 0, null, inWidget);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNavigationRuleExplicit_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetNavigationRuleBase
    static readonly IntPtr SetNavigationRuleBase_NativeFunction;
    static readonly int SetNavigationRuleBase_ParamsSize;
    static readonly int SetNavigationRuleBase_Direction_Offset;
    static readonly int SetNavigationRuleBase_Rule_Offset;
    
    public void SetNavigationRuleBase(UnrealSharp.SlateCore.EUINavigation direction, UnrealSharp.SlateCore.EUINavigationRule rule)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNavigationRuleBase_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.EUINavigation>.ToNative(IntPtr.Add(ParamsBuffer, SetNavigationRuleBase_Direction_Offset), 0, null, direction);
            BlittableMarshaller<UnrealSharp.SlateCore.EUINavigationRule>.ToNative(IntPtr.Add(ParamsBuffer, SetNavigationRuleBase_Rule_Offset), 0, null, rule);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNavigationRuleBase_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetNavigationRule
    static readonly IntPtr SetNavigationRule_NativeFunction;
    static readonly int SetNavigationRule_ParamsSize;
    static readonly int SetNavigationRule_Direction_Offset;
    static readonly int SetNavigationRule_Rule_Offset;
    static readonly int SetNavigationRule_WidgetToFocus_Offset;
    
    [Obsolete("This function is obsolete")]
    public void SetNavigationRule(UnrealSharp.SlateCore.EUINavigation direction, UnrealSharp.SlateCore.EUINavigationRule rule, Name widgetToFocus)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNavigationRule_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.EUINavigation>.ToNative(IntPtr.Add(ParamsBuffer, SetNavigationRule_Direction_Offset), 0, null, direction);
            BlittableMarshaller<UnrealSharp.SlateCore.EUINavigationRule>.ToNative(IntPtr.Add(ParamsBuffer, SetNavigationRule_Rule_Offset), 0, null, rule);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetNavigationRule_WidgetToFocus_Offset), 0, null, widgetToFocus);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNavigationRule_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetKeyboardFocus
    static readonly IntPtr SetKeyboardFocus_NativeFunction;
    
    public void SetKeyboardFocus()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetKeyboardFocus_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.Widget:SetIsEnabled
    static readonly IntPtr SetIsEnabled_NativeFunction;
    static readonly int SetIsEnabled_ParamsSize;
    static readonly int SetIsEnabled_bInIsEnabled_Offset;
    
    public void SetIsEnabled(bool bInIsEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsEnabled_bInIsEnabled_Offset), 0, null, bInIsEnabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsEnabled_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetFocus
    static readonly IntPtr SetFocus_NativeFunction;
    
    public void SetFocus()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFocus_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.Widget:SetCursor
    static readonly IntPtr SetCursor_NativeFunction;
    static readonly int SetCursor_ParamsSize;
    static readonly int SetCursor_InCursor_Offset;
    
    public void SetCursor(UnrealSharp.CoreUObject.EMouseCursor inCursor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCursor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.EMouseCursor>.ToNative(IntPtr.Add(ParamsBuffer, SetCursor_InCursor_Offset), 0, null, inCursor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCursor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetClipping
    static readonly IntPtr SetClipping_NativeFunction;
    static readonly int SetClipping_ParamsSize;
    static readonly int SetClipping_InClipping_Offset;
    
    public void SetClipping(UnrealSharp.SlateCore.EWidgetClipping inClipping)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetClipping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.EWidgetClipping>.ToNative(IntPtr.Add(ParamsBuffer, SetClipping_InClipping_Offset), 0, null, inClipping);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetClipping_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:SetAllNavigationRules
    static readonly IntPtr SetAllNavigationRules_NativeFunction;
    static readonly int SetAllNavigationRules_ParamsSize;
    static readonly int SetAllNavigationRules_Rule_Offset;
    static readonly int SetAllNavigationRules_WidgetToFocus_Offset;
    
    public void SetAllNavigationRules(UnrealSharp.SlateCore.EUINavigationRule rule, Name widgetToFocus)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAllNavigationRules_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.EUINavigationRule>.ToNative(IntPtr.Add(ParamsBuffer, SetAllNavigationRules_Rule_Offset), 0, null, rule);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetAllNavigationRules_WidgetToFocus_Offset), 0, null, widgetToFocus);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAllNavigationRules_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:ResetCursor
    static readonly IntPtr ResetCursor_NativeFunction;
    
    public void ResetCursor()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetCursor_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.Widget:RemoveFromParent
    static readonly IntPtr RemoveFromParent_NativeFunction;
    
    public void RemoveFromParent()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveFromParent_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.Widget:K2_BroadcastFieldValueChanged
    static readonly IntPtr K2_BroadcastFieldValueChanged_NativeFunction;
    static readonly int K2_BroadcastFieldValueChanged_ParamsSize;
    static readonly int K2_BroadcastFieldValueChanged_FieldId_Offset;
    
    protected void BroadcastFieldValueChanged(UnrealSharp.FieldNotification.FieldNotificationId fieldId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_BroadcastFieldValueChanged_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.FieldNotification.FieldNotificationId>.ToNative(IntPtr.Add(ParamsBuffer, K2_BroadcastFieldValueChanged_FieldId_Offset), 0, null, fieldId);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_BroadcastFieldValueChanged_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:IsVisible
    static readonly IntPtr IsVisible_NativeFunction;
    static readonly int IsVisible_ParamsSize;
    static readonly int IsVisible_ReturnValue_Offset;
    
    public bool IsVisible()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsVisible_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsVisible_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsVisible_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:IsRendered
    static readonly IntPtr IsRendered_NativeFunction;
    static readonly int IsRendered_ParamsSize;
    static readonly int IsRendered_ReturnValue_Offset;
    
    public bool IsRendered()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRendered_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsRendered_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRendered_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:IsInViewport
    static readonly IntPtr IsInViewport_NativeFunction;
    static readonly int IsInViewport_ParamsSize;
    static readonly int IsInViewport_ReturnValue_Offset;
    
    public bool IsInViewport()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsInViewport_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsInViewport_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsInViewport_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:IsHovered
    static readonly IntPtr IsHovered_NativeFunction;
    static readonly int IsHovered_ParamsSize;
    static readonly int IsHovered_ReturnValue_Offset;
    
    public bool IsHovered()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsHovered_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsHovered_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsHovered_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:InvalidateLayoutAndVolatility
    static readonly IntPtr InvalidateLayoutAndVolatility_NativeFunction;
    
    public void InvalidateLayoutAndVolatility()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, InvalidateLayoutAndVolatility_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.Widget:HasUserFocusedDescendants
    static readonly IntPtr HasUserFocusedDescendants_NativeFunction;
    static readonly int HasUserFocusedDescendants_ParamsSize;
    static readonly int HasUserFocusedDescendants_PlayerController_Offset;
    static readonly int HasUserFocusedDescendants_ReturnValue_Offset;
    
    public bool HasUserFocusedDescendants(UnrealSharp.Engine.PlayerController playerController)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasUserFocusedDescendants_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, HasUserFocusedDescendants_PlayerController_Offset), 0, null, playerController);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasUserFocusedDescendants_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasUserFocusedDescendants_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:HasUserFocus
    static readonly IntPtr HasUserFocus_NativeFunction;
    static readonly int HasUserFocus_ParamsSize;
    static readonly int HasUserFocus_PlayerController_Offset;
    static readonly int HasUserFocus_ReturnValue_Offset;
    
    public bool HasUserFocus(UnrealSharp.Engine.PlayerController playerController)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasUserFocus_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, HasUserFocus_PlayerController_Offset), 0, null, playerController);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasUserFocus_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasUserFocus_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:HasMouseCaptureByUser
    static readonly IntPtr HasMouseCaptureByUser_NativeFunction;
    static readonly int HasMouseCaptureByUser_ParamsSize;
    static readonly int HasMouseCaptureByUser_UserIndex_Offset;
    static readonly int HasMouseCaptureByUser_PointerIndex_Offset;
    static readonly int HasMouseCaptureByUser_ReturnValue_Offset;
    
    public bool HasMouseCaptureByUser(int userIndex, int pointerIndex = -1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasMouseCaptureByUser_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, HasMouseCaptureByUser_UserIndex_Offset), 0, null, userIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, HasMouseCaptureByUser_PointerIndex_Offset), 0, null, pointerIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasMouseCaptureByUser_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasMouseCaptureByUser_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:HasMouseCapture
    static readonly IntPtr HasMouseCapture_NativeFunction;
    static readonly int HasMouseCapture_ParamsSize;
    static readonly int HasMouseCapture_ReturnValue_Offset;
    
    public bool HasMouseCapture()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasMouseCapture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasMouseCapture_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasMouseCapture_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:HasKeyboardFocus
    static readonly IntPtr HasKeyboardFocus_NativeFunction;
    static readonly int HasKeyboardFocus_ParamsSize;
    static readonly int HasKeyboardFocus_ReturnValue_Offset;
    
    public bool HasKeyboardFocus()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasKeyboardFocus_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasKeyboardFocus_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasKeyboardFocus_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:HasFocusedDescendants
    static readonly IntPtr HasFocusedDescendants_NativeFunction;
    static readonly int HasFocusedDescendants_ParamsSize;
    static readonly int HasFocusedDescendants_ReturnValue_Offset;
    
    public bool HasFocusedDescendants()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasFocusedDescendants_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasFocusedDescendants_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasFocusedDescendants_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:HasAnyUserFocus
    static readonly IntPtr HasAnyUserFocus_NativeFunction;
    static readonly int HasAnyUserFocus_ParamsSize;
    static readonly int HasAnyUserFocus_ReturnValue_Offset;
    
    public bool HasAnyUserFocus()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasAnyUserFocus_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasAnyUserFocus_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasAnyUserFocus_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:GetVisibility
    static readonly IntPtr GetVisibility_NativeFunction;
    static readonly int GetVisibility_ParamsSize;
    static readonly int GetVisibility_ReturnValue_Offset;
    
    public UnrealSharp.UMG.ESlateVisibility GetVisibility()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVisibility_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVisibility_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.ESlateVisibility returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.UMG.ESlateVisibility>.FromNative(IntPtr.Add(ParamsBuffer, GetVisibility_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:GetTickSpaceGeometry
    static readonly IntPtr GetTickSpaceGeometry_NativeFunction;
    static readonly int GetTickSpaceGeometry_ParamsSize;
    static readonly int GetTickSpaceGeometry_ReturnValue_Offset;
    
    public UnrealSharp.SlateCore.Geometry GetTickSpaceGeometry()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTickSpaceGeometry_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTickSpaceGeometry_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.Geometry returnValue;
            returnValue = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetTickSpaceGeometry_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:GetRenderTransformAngle
    static readonly IntPtr GetRenderTransformAngle_NativeFunction;
    static readonly int GetRenderTransformAngle_ParamsSize;
    static readonly int GetRenderTransformAngle_ReturnValue_Offset;
    
    public float GetRenderTransformAngle()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRenderTransformAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRenderTransformAngle_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetRenderTransformAngle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:GetRenderOpacity
    static readonly IntPtr GetRenderOpacity_NativeFunction;
    static readonly int GetRenderOpacity_ParamsSize;
    static readonly int GetRenderOpacity_ReturnValue_Offset;
    
    public float GetRenderOpacity()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRenderOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRenderOpacity_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetRenderOpacity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:GetParent
    static readonly IntPtr GetParent_NativeFunction;
    static readonly int GetParent_ParamsSize;
    static readonly int GetParent_ReturnValue_Offset;
    
    public UnrealSharp.UMG.PanelWidget GetParent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.PanelWidget returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.UMG.PanelWidget>.FromNative(IntPtr.Add(ParamsBuffer, GetParent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:GetPaintSpaceGeometry
    static readonly IntPtr GetPaintSpaceGeometry_NativeFunction;
    static readonly int GetPaintSpaceGeometry_ParamsSize;
    static readonly int GetPaintSpaceGeometry_ReturnValue_Offset;
    
    public UnrealSharp.SlateCore.Geometry GetPaintSpaceGeometry()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPaintSpaceGeometry_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPaintSpaceGeometry_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.Geometry returnValue;
            returnValue = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetPaintSpaceGeometry_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:GetOwningPlayer
    static readonly IntPtr GetOwningPlayer_NativeFunction;
    static readonly int GetOwningPlayer_ParamsSize;
    static readonly int GetOwningPlayer_ReturnValue_Offset;
    
    public UnrealSharp.Engine.PlayerController GetOwningPlayer()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOwningPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOwningPlayer_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(ParamsBuffer, GetOwningPlayer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:GetOwningLocalPlayer
    static readonly IntPtr GetOwningLocalPlayer_NativeFunction;
    static readonly int GetOwningLocalPlayer_ParamsSize;
    static readonly int GetOwningLocalPlayer_ReturnValue_Offset;
    
    public UnrealSharp.Engine.LocalPlayer GetOwningLocalPlayer()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOwningLocalPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOwningLocalPlayer_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.LocalPlayer returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.LocalPlayer>.FromNative(IntPtr.Add(ParamsBuffer, GetOwningLocalPlayer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:GetIsEnabled
    static readonly IntPtr GetIsEnabled_NativeFunction;
    static readonly int GetIsEnabled_ParamsSize;
    static readonly int GetIsEnabled_ReturnValue_Offset;
    
    public bool GetIsEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetIsEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetIsEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetIsEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:GetGameInstance
    static readonly IntPtr GetGameInstance_NativeFunction;
    static readonly int GetGameInstance_ParamsSize;
    static readonly int GetGameInstance_ReturnValue_Offset;
    
    public UnrealSharp.Engine.GameInstance GetGameInstance()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGameInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGameInstance_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.GameInstance returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.GameInstance>.FromNative(IntPtr.Add(ParamsBuffer, GetGameInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:GetDesiredSize
    static readonly IntPtr GetDesiredSize_NativeFunction;
    static readonly int GetDesiredSize_ParamsSize;
    static readonly int GetDesiredSize_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 GetDesiredSize()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDesiredSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDesiredSize_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetDesiredSize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:GetClipping
    static readonly IntPtr GetClipping_NativeFunction;
    static readonly int GetClipping_ParamsSize;
    static readonly int GetClipping_ReturnValue_Offset;
    
    public UnrealSharp.SlateCore.EWidgetClipping GetClipping()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetClipping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetClipping_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.EWidgetClipping returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.SlateCore.EWidgetClipping>.FromNative(IntPtr.Add(ParamsBuffer, GetClipping_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:GetCachedGeometry
    static readonly IntPtr GetCachedGeometry_NativeFunction;
    static readonly int GetCachedGeometry_ParamsSize;
    static readonly int GetCachedGeometry_ReturnValue_Offset;
    
    public UnrealSharp.SlateCore.Geometry GetCachedGeometry()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCachedGeometry_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCachedGeometry_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.Geometry returnValue;
            returnValue = UnrealSharp.SlateCore.GeometryMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetCachedGeometry_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.Widget:ForceVolatile
    static readonly IntPtr ForceVolatile_NativeFunction;
    static readonly int ForceVolatile_ParamsSize;
    static readonly int ForceVolatile_bForce_Offset;
    
    public void ForceVolatile(bool bForce)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ForceVolatile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ForceVolatile_bForce_Offset), 0, null, bForce);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ForceVolatile_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.Widget:ForceLayoutPrepass
    static readonly IntPtr ForceLayoutPrepass_NativeFunction;
    
    public void ForceLayoutPrepass()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ForceLayoutPrepass_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
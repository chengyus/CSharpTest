// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class WidgetLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static WidgetLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("WidgetBlueprintLibrary");
        
        
        UnlockMouse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnlockMouse");
        UnlockMouse_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnlockMouse_NativeFunction);
        UnlockMouse_Reply_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnlockMouse_NativeFunction, "Reply");
        UnlockMouse_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnlockMouse_NativeFunction, "ReturnValue");
        Unhandled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Unhandled");
        Unhandled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Unhandled_NativeFunction);
        Unhandled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Unhandled_NativeFunction, "ReturnValue");
        SetWindowTitleBarState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWindowTitleBarState");
        SetWindowTitleBarState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWindowTitleBarState_NativeFunction);
        SetWindowTitleBarState_TitleBarContent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWindowTitleBarState_NativeFunction, "TitleBarContent");
        SetWindowTitleBarState_Mode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWindowTitleBarState_NativeFunction, "Mode");
        SetWindowTitleBarState_bTitleBarDragEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWindowTitleBarState_NativeFunction, "bTitleBarDragEnabled");
        SetWindowTitleBarState_bWindowButtonsVisible_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWindowTitleBarState_NativeFunction, "bWindowButtonsVisible");
        SetWindowTitleBarState_bTitleBarVisible_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWindowTitleBarState_NativeFunction, "bTitleBarVisible");
        SetWindowTitleBarCloseButtonActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWindowTitleBarCloseButtonActive");
        SetWindowTitleBarCloseButtonActive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWindowTitleBarCloseButtonActive_NativeFunction);
        SetWindowTitleBarCloseButtonActive_bActive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWindowTitleBarCloseButtonActive_NativeFunction, "bActive");
        SetUserFocus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUserFocus");
        SetUserFocus_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUserFocus_NativeFunction);
        SetUserFocus_Reply_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUserFocus_NativeFunction, "Reply");
        SetUserFocus_FocusWidget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUserFocus_NativeFunction, "FocusWidget");
        SetUserFocus_bInAllUsers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUserFocus_NativeFunction, "bInAllUsers");
        SetUserFocus_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUserFocus_NativeFunction, "ReturnValue");
        SetMousePosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMousePosition");
        SetMousePosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMousePosition_NativeFunction);
        SetMousePosition_Reply_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMousePosition_NativeFunction, "Reply");
        SetMousePosition_NewMousePosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMousePosition_NativeFunction, "NewMousePosition");
        SetMousePosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMousePosition_NativeFunction, "ReturnValue");
        SetInputMode_UIOnlyEx_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInputMode_UIOnlyEx");
        SetInputMode_UIOnlyEx_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInputMode_UIOnlyEx_NativeFunction);
        SetInputMode_UIOnlyEx_PlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInputMode_UIOnlyEx_NativeFunction, "PlayerController");
        SetInputMode_UIOnlyEx_InWidgetToFocus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInputMode_UIOnlyEx_NativeFunction, "InWidgetToFocus");
        SetInputMode_UIOnlyEx_InMouseLockMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInputMode_UIOnlyEx_NativeFunction, "InMouseLockMode");
        SetInputMode_UIOnlyEx_bFlushInput_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInputMode_UIOnlyEx_NativeFunction, "bFlushInput");
        SetInputMode_GameOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInputMode_GameOnly");
        SetInputMode_GameOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInputMode_GameOnly_NativeFunction);
        SetInputMode_GameOnly_PlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInputMode_GameOnly_NativeFunction, "PlayerController");
        SetInputMode_GameOnly_bFlushInput_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInputMode_GameOnly_NativeFunction, "bFlushInput");
        SetInputMode_GameAndUIEx_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInputMode_GameAndUIEx");
        SetInputMode_GameAndUIEx_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInputMode_GameAndUIEx_NativeFunction);
        SetInputMode_GameAndUIEx_PlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInputMode_GameAndUIEx_NativeFunction, "PlayerController");
        SetInputMode_GameAndUIEx_InWidgetToFocus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInputMode_GameAndUIEx_NativeFunction, "InWidgetToFocus");
        SetInputMode_GameAndUIEx_InMouseLockMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInputMode_GameAndUIEx_NativeFunction, "InMouseLockMode");
        SetInputMode_GameAndUIEx_bHideCursorDuringCapture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInputMode_GameAndUIEx_NativeFunction, "bHideCursorDuringCapture");
        SetInputMode_GameAndUIEx_bFlushInput_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInputMode_GameAndUIEx_NativeFunction, "bFlushInput");
        SetHardwareCursor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetHardwareCursor");
        SetHardwareCursor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetHardwareCursor_NativeFunction);
        SetHardwareCursor_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHardwareCursor_NativeFunction, "WorldContextObject");
        SetHardwareCursor_CursorShape_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHardwareCursor_NativeFunction, "CursorShape");
        SetHardwareCursor_CursorName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHardwareCursor_NativeFunction, "CursorName");
        SetHardwareCursor_HotSpot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHardwareCursor_NativeFunction, "HotSpot");
        SetHardwareCursor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHardwareCursor_NativeFunction, "ReturnValue");
        SetFocusToGameViewport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFocusToGameViewport");
        SetColorVisionDeficiencyType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetColorVisionDeficiencyType");
        SetColorVisionDeficiencyType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetColorVisionDeficiencyType_NativeFunction);
        SetColorVisionDeficiencyType_Type_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetColorVisionDeficiencyType_NativeFunction, "Type");
        SetColorVisionDeficiencyType_Severity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetColorVisionDeficiencyType_NativeFunction, "Severity");
        SetColorVisionDeficiencyType_CorrectDeficiency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetColorVisionDeficiencyType_NativeFunction, "CorrectDeficiency");
        SetColorVisionDeficiencyType_ShowCorrectionWithDeficiency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetColorVisionDeficiencyType_NativeFunction, "ShowCorrectionWithDeficiency");
        SetBrushResourceToTexture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrushResourceToTexture");
        SetBrushResourceToTexture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrushResourceToTexture_NativeFunction);
        SetBrushResourceToTexture_Brush_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushResourceToTexture_NativeFunction, "Brush");
        SetBrushResourceToTexture_Texture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushResourceToTexture_NativeFunction, "Texture");
        SetBrushResourceToMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBrushResourceToMaterial");
        SetBrushResourceToMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBrushResourceToMaterial_NativeFunction);
        SetBrushResourceToMaterial_Brush_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushResourceToMaterial_NativeFunction, "Brush");
        SetBrushResourceToMaterial_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBrushResourceToMaterial_NativeFunction, "Material");
        RestorePreviousWindowTitleBarState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RestorePreviousWindowTitleBarState");
        ReleaseMouseCapture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReleaseMouseCapture");
        ReleaseMouseCapture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReleaseMouseCapture_NativeFunction);
        ReleaseMouseCapture_Reply_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReleaseMouseCapture_NativeFunction, "Reply");
        ReleaseMouseCapture_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReleaseMouseCapture_NativeFunction, "ReturnValue");
        ReleaseJoystickCapture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReleaseJoystickCapture");
        ReleaseJoystickCapture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReleaseJoystickCapture_NativeFunction);
        ReleaseJoystickCapture_Reply_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReleaseJoystickCapture_NativeFunction, "Reply");
        ReleaseJoystickCapture_bInAllJoysticks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReleaseJoystickCapture_NativeFunction, "bInAllJoysticks");
        ReleaseJoystickCapture_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReleaseJoystickCapture_NativeFunction, "ReturnValue");
        NoResourceBrush_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NoResourceBrush");
        NoResourceBrush_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NoResourceBrush_NativeFunction);
        NoResourceBrush_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NoResourceBrush_NativeFunction, "ReturnValue");
        MakeBrushFromTexture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeBrushFromTexture");
        MakeBrushFromTexture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeBrushFromTexture_NativeFunction);
        MakeBrushFromTexture_Texture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeBrushFromTexture_NativeFunction, "Texture");
        MakeBrushFromTexture_Width_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeBrushFromTexture_NativeFunction, "Width");
        MakeBrushFromTexture_Height_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeBrushFromTexture_NativeFunction, "Height");
        MakeBrushFromTexture_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeBrushFromTexture_NativeFunction, "ReturnValue");
        MakeBrushFromMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeBrushFromMaterial");
        MakeBrushFromMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeBrushFromMaterial_NativeFunction);
        MakeBrushFromMaterial_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeBrushFromMaterial_NativeFunction, "Material");
        MakeBrushFromMaterial_Width_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeBrushFromMaterial_NativeFunction, "Width");
        MakeBrushFromMaterial_Height_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeBrushFromMaterial_NativeFunction, "Height");
        MakeBrushFromMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeBrushFromMaterial_NativeFunction, "ReturnValue");
        MakeBrushFromAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeBrushFromAsset");
        MakeBrushFromAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeBrushFromAsset_NativeFunction);
        MakeBrushFromAsset_BrushAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeBrushFromAsset_NativeFunction, "BrushAsset");
        MakeBrushFromAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeBrushFromAsset_NativeFunction, "ReturnValue");
        LockMouse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LockMouse");
        LockMouse_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LockMouse_NativeFunction);
        LockMouse_Reply_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LockMouse_NativeFunction, "Reply");
        LockMouse_CapturingWidget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LockMouse_NativeFunction, "CapturingWidget");
        LockMouse_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LockMouse_NativeFunction, "ReturnValue");
        IsDragDropping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsDragDropping");
        IsDragDropping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsDragDropping_NativeFunction);
        IsDragDropping_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDragDropping_NativeFunction, "ReturnValue");
        Handled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Handled");
        Handled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Handled_NativeFunction);
        Handled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Handled_NativeFunction, "ReturnValue");
        GetSafeZonePadding_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSafeZonePadding");
        GetSafeZonePadding_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSafeZonePadding_NativeFunction);
        GetSafeZonePadding_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSafeZonePadding_NativeFunction, "WorldContextObject");
        GetSafeZonePadding_SafePadding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSafeZonePadding_NativeFunction, "SafePadding");
        GetSafeZonePadding_SafePaddingScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSafeZonePadding_NativeFunction, "SafePaddingScale");
        GetSafeZonePadding_SpillOverPadding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSafeZonePadding_NativeFunction, "SpillOverPadding");
        GetKeyEventFromAnalogInputEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetKeyEventFromAnalogInputEvent");
        GetKeyEventFromAnalogInputEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetKeyEventFromAnalogInputEvent_NativeFunction);
        GetKeyEventFromAnalogInputEvent_Event_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetKeyEventFromAnalogInputEvent_NativeFunction, "Event");
        GetKeyEventFromAnalogInputEvent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetKeyEventFromAnalogInputEvent_NativeFunction, "ReturnValue");
        GetInputEventFromPointerEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputEventFromPointerEvent");
        GetInputEventFromPointerEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputEventFromPointerEvent_NativeFunction);
        GetInputEventFromPointerEvent_Event_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputEventFromPointerEvent_NativeFunction, "Event");
        GetInputEventFromPointerEvent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputEventFromPointerEvent_NativeFunction, "ReturnValue");
        GetInputEventFromNavigationEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputEventFromNavigationEvent");
        GetInputEventFromNavigationEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputEventFromNavigationEvent_NativeFunction);
        GetInputEventFromNavigationEvent_Event_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputEventFromNavigationEvent_NativeFunction, "Event");
        GetInputEventFromNavigationEvent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputEventFromNavigationEvent_NativeFunction, "ReturnValue");
        GetInputEventFromKeyEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputEventFromKeyEvent");
        GetInputEventFromKeyEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputEventFromKeyEvent_NativeFunction);
        GetInputEventFromKeyEvent_Event_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputEventFromKeyEvent_NativeFunction, "Event");
        GetInputEventFromKeyEvent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputEventFromKeyEvent_NativeFunction, "ReturnValue");
        GetInputEventFromCharacterEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputEventFromCharacterEvent");
        GetInputEventFromCharacterEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputEventFromCharacterEvent_NativeFunction);
        GetInputEventFromCharacterEvent_Event_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputEventFromCharacterEvent_NativeFunction, "Event");
        GetInputEventFromCharacterEvent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputEventFromCharacterEvent_NativeFunction, "ReturnValue");
        GetDynamicMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDynamicMaterial");
        GetDynamicMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDynamicMaterial_NativeFunction);
        GetDynamicMaterial_Brush_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDynamicMaterial_NativeFunction, "Brush");
        GetDynamicMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDynamicMaterial_NativeFunction, "ReturnValue");
        GetDragDroppingContent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDragDroppingContent");
        GetDragDroppingContent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDragDroppingContent_NativeFunction);
        GetDragDroppingContent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDragDroppingContent_NativeFunction, "ReturnValue");
        GetBrushResourceAsTexture2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBrushResourceAsTexture2D");
        GetBrushResourceAsTexture2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBrushResourceAsTexture2D_NativeFunction);
        GetBrushResourceAsTexture2D_Brush_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBrushResourceAsTexture2D_NativeFunction, "Brush");
        GetBrushResourceAsTexture2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBrushResourceAsTexture2D_NativeFunction, "ReturnValue");
        GetBrushResourceAsMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBrushResourceAsMaterial");
        GetBrushResourceAsMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBrushResourceAsMaterial_NativeFunction);
        GetBrushResourceAsMaterial_Brush_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBrushResourceAsMaterial_NativeFunction, "Brush");
        GetBrushResourceAsMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBrushResourceAsMaterial_NativeFunction, "ReturnValue");
        GetBrushResource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBrushResource");
        GetBrushResource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBrushResource_NativeFunction);
        GetBrushResource_Brush_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBrushResource_NativeFunction, "Brush");
        GetBrushResource_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBrushResource_NativeFunction, "ReturnValue");
        GetAllWidgetsWithInterface_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllWidgetsWithInterface");
        GetAllWidgetsWithInterface_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllWidgetsWithInterface_NativeFunction);
        GetAllWidgetsWithInterface_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllWidgetsWithInterface_NativeFunction, "WorldContextObject");
        GetAllWidgetsWithInterface_FoundWidgets_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllWidgetsWithInterface_NativeFunction, "FoundWidgets");
        GetAllWidgetsWithInterface_FoundWidgets_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllWidgetsWithInterface_NativeFunction, "FoundWidgets");
        GetAllWidgetsWithInterface_Interface_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllWidgetsWithInterface_NativeFunction, "Interface");
        GetAllWidgetsWithInterface_TopLevelOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllWidgetsWithInterface_NativeFunction, "TopLevelOnly");
        GetAllWidgetsOfClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllWidgetsOfClass");
        GetAllWidgetsOfClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllWidgetsOfClass_NativeFunction);
        GetAllWidgetsOfClass_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllWidgetsOfClass_NativeFunction, "WorldContextObject");
        GetAllWidgetsOfClass_FoundWidgets_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllWidgetsOfClass_NativeFunction, "FoundWidgets");
        GetAllWidgetsOfClass_FoundWidgets_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllWidgetsOfClass_NativeFunction, "FoundWidgets");
        GetAllWidgetsOfClass_WidgetClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllWidgetsOfClass_NativeFunction, "WidgetClass");
        GetAllWidgetsOfClass_TopLevelOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllWidgetsOfClass_NativeFunction, "TopLevelOnly");
        EndDragDrop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EndDragDrop");
        EndDragDrop_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EndDragDrop_NativeFunction);
        EndDragDrop_Reply_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EndDragDrop_NativeFunction, "Reply");
        EndDragDrop_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EndDragDrop_NativeFunction, "ReturnValue");
        DrawText_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawText");
        DrawText_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawText_NativeFunction);
        DrawText_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawText_NativeFunction, "Context");
        DrawText_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawText_NativeFunction, "InString");
        DrawText_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawText_NativeFunction, "Position");
        DrawText_Tint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawText_NativeFunction, "Tint");
        DrawSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawSpline");
        DrawSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawSpline_NativeFunction);
        DrawSpline_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawSpline_NativeFunction, "Context");
        DrawSpline_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawSpline_NativeFunction, "Start");
        DrawSpline_StartDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawSpline_NativeFunction, "StartDir");
        DrawSpline_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawSpline_NativeFunction, "End");
        DrawSpline_EndDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawSpline_NativeFunction, "EndDir");
        DrawSpline_Tint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawSpline_NativeFunction, "Tint");
        DrawSpline_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawSpline_NativeFunction, "Thickness");
        DrawLines_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawLines");
        DrawLines_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawLines_NativeFunction);
        DrawLines_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLines_NativeFunction, "Context");
        DrawLines_Points_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLines_NativeFunction, "Points");
        DrawLines_Points_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DrawLines_NativeFunction, "Points");
        DrawLines_Tint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLines_NativeFunction, "Tint");
        DrawLines_bAntiAlias_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLines_NativeFunction, "bAntiAlias");
        DrawLines_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLines_NativeFunction, "Thickness");
        DrawLine_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawLine");
        DrawLine_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawLine_NativeFunction);
        DrawLine_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLine_NativeFunction, "Context");
        DrawLine_PositionA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLine_NativeFunction, "PositionA");
        DrawLine_PositionB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLine_NativeFunction, "PositionB");
        DrawLine_Tint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLine_NativeFunction, "Tint");
        DrawLine_bAntiAlias_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLine_NativeFunction, "bAntiAlias");
        DrawLine_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLine_NativeFunction, "Thickness");
        DrawBox_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawBox");
        DrawBox_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawBox_NativeFunction);
        DrawBox_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawBox_NativeFunction, "Context");
        DrawBox_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawBox_NativeFunction, "Position");
        DrawBox_Size_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawBox_NativeFunction, "Size");
        DrawBox_Brush_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawBox_NativeFunction, "Brush");
        DrawBox_Tint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawBox_NativeFunction, "Tint");
        DismissAllMenus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DismissAllMenus");
        DetectDragIfPressed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DetectDragIfPressed");
        DetectDragIfPressed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DetectDragIfPressed_NativeFunction);
        DetectDragIfPressed_PointerEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DetectDragIfPressed_NativeFunction, "PointerEvent");
        DetectDragIfPressed_WidgetDetectingDrag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DetectDragIfPressed_NativeFunction, "WidgetDetectingDrag");
        DetectDragIfPressed_DragKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DetectDragIfPressed_NativeFunction, "DragKey");
        DetectDragIfPressed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DetectDragIfPressed_NativeFunction, "ReturnValue");
        DetectDrag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DetectDrag");
        DetectDrag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DetectDrag_NativeFunction);
        DetectDrag_Reply_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DetectDrag_NativeFunction, "Reply");
        DetectDrag_WidgetDetectingDrag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DetectDrag_NativeFunction, "WidgetDetectingDrag");
        DetectDrag_DragKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DetectDrag_NativeFunction, "DragKey");
        DetectDrag_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DetectDrag_NativeFunction, "ReturnValue");
        ClearUserFocus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearUserFocus");
        ClearUserFocus_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearUserFocus_NativeFunction);
        ClearUserFocus_Reply_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearUserFocus_NativeFunction, "Reply");
        ClearUserFocus_bInAllUsers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearUserFocus_NativeFunction, "bInAllUsers");
        ClearUserFocus_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearUserFocus_NativeFunction, "ReturnValue");
        CaptureMouse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CaptureMouse");
        CaptureMouse_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CaptureMouse_NativeFunction);
        CaptureMouse_Reply_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CaptureMouse_NativeFunction, "Reply");
        CaptureMouse_CapturingWidget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CaptureMouse_NativeFunction, "CapturingWidget");
        CaptureMouse_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CaptureMouse_NativeFunction, "ReturnValue");
        CaptureJoystick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CaptureJoystick");
        CaptureJoystick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CaptureJoystick_NativeFunction);
        CaptureJoystick_Reply_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CaptureJoystick_NativeFunction, "Reply");
        CaptureJoystick_CapturingWidget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CaptureJoystick_NativeFunction, "CapturingWidget");
        CaptureJoystick_bInAllJoysticks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CaptureJoystick_NativeFunction, "bInAllJoysticks");
        CaptureJoystick_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CaptureJoystick_NativeFunction, "ReturnValue");
        CancelDragDrop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CancelDragDrop");
        
        
    }
    
    protected WidgetLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/UMG.WidgetBlueprintLibrary:UnlockMouse
    static readonly IntPtr UnlockMouse_NativeFunction;
    static readonly int UnlockMouse_ParamsSize;
    static readonly int UnlockMouse_Reply_Offset;
    static readonly int UnlockMouse_ReturnValue_Offset;
    
    public static UnrealSharp.UMG.EventReply UnlockMouse(ref UnrealSharp.UMG.EventReply reply)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnlockMouse_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, UnlockMouse_Reply_Offset), 0, null, reply);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, UnlockMouse_NativeFunction, ParamsBuffer);
            
            reply = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, UnlockMouse_Reply_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, UnlockMouse_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:Unhandled
    static readonly IntPtr Unhandled_NativeFunction;
    static readonly int Unhandled_ParamsSize;
    static readonly int Unhandled_ReturnValue_Offset;
    
    public static UnrealSharp.UMG.EventReply Unhandled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Unhandled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Unhandled_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Unhandled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:SetWindowTitleBarState
    static readonly IntPtr SetWindowTitleBarState_NativeFunction;
    static readonly int SetWindowTitleBarState_ParamsSize;
    static readonly int SetWindowTitleBarState_TitleBarContent_Offset;
    static readonly int SetWindowTitleBarState_Mode_Offset;
    static readonly int SetWindowTitleBarState_bTitleBarDragEnabled_Offset;
    static readonly int SetWindowTitleBarState_bWindowButtonsVisible_Offset;
    static readonly int SetWindowTitleBarState_bTitleBarVisible_Offset;
    
    public static void SetWindowTitleBarState(UnrealSharp.UMG.Widget titleBarContent, UnrealSharp.Engine.EWindowTitleBarMode mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWindowTitleBarState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.Widget>.ToNative(IntPtr.Add(ParamsBuffer, SetWindowTitleBarState_TitleBarContent_Offset), 0, null, titleBarContent);
            BlittableMarshaller<UnrealSharp.Engine.EWindowTitleBarMode>.ToNative(IntPtr.Add(ParamsBuffer, SetWindowTitleBarState_Mode_Offset), 0, null, mode);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetWindowTitleBarState_bTitleBarDragEnabled_Offset), 0, null, bTitleBarDragEnabled);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetWindowTitleBarState_bWindowButtonsVisible_Offset), 0, null, bWindowButtonsVisible);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetWindowTitleBarState_bTitleBarVisible_Offset), 0, null, bTitleBarVisible);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetWindowTitleBarState_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:SetWindowTitleBarCloseButtonActive
    static readonly IntPtr SetWindowTitleBarCloseButtonActive_NativeFunction;
    static readonly int SetWindowTitleBarCloseButtonActive_ParamsSize;
    static readonly int SetWindowTitleBarCloseButtonActive_bActive_Offset;
    
    public static void SetWindowTitleBarCloseButtonActive(bool bActive)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWindowTitleBarCloseButtonActive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetWindowTitleBarCloseButtonActive_bActive_Offset), 0, null, bActive);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetWindowTitleBarCloseButtonActive_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:SetUserFocus
    static readonly IntPtr SetUserFocus_NativeFunction;
    static readonly int SetUserFocus_ParamsSize;
    static readonly int SetUserFocus_Reply_Offset;
    static readonly int SetUserFocus_FocusWidget_Offset;
    static readonly int SetUserFocus_bInAllUsers_Offset;
    static readonly int SetUserFocus_ReturnValue_Offset;
    
    public static UnrealSharp.UMG.EventReply SetUserFocus(ref UnrealSharp.UMG.EventReply reply, UnrealSharp.UMG.Widget focusWidget, bool bInAllUsers = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUserFocus_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetUserFocus_Reply_Offset), 0, null, reply);
            ObjectMarshaller<UnrealSharp.UMG.Widget>.ToNative(IntPtr.Add(ParamsBuffer, SetUserFocus_FocusWidget_Offset), 0, null, focusWidget);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetUserFocus_bInAllUsers_Offset), 0, null, bInAllUsers);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetUserFocus_NativeFunction, ParamsBuffer);
            
            reply = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetUserFocus_Reply_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetUserFocus_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:SetMousePosition
    static readonly IntPtr SetMousePosition_NativeFunction;
    static readonly int SetMousePosition_ParamsSize;
    static readonly int SetMousePosition_Reply_Offset;
    static readonly int SetMousePosition_NewMousePosition_Offset;
    static readonly int SetMousePosition_ReturnValue_Offset;
    
    public static UnrealSharp.UMG.EventReply SetMousePosition(ref UnrealSharp.UMG.EventReply reply, System.DoubleNumerics.Vector2 newMousePosition)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMousePosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetMousePosition_Reply_Offset), 0, null, reply);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetMousePosition_NewMousePosition_Offset), 0, null, newMousePosition);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMousePosition_NativeFunction, ParamsBuffer);
            
            reply = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetMousePosition_Reply_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetMousePosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:SetInputMode_UIOnlyEx
    static readonly IntPtr SetInputMode_UIOnlyEx_NativeFunction;
    static readonly int SetInputMode_UIOnlyEx_ParamsSize;
    static readonly int SetInputMode_UIOnlyEx_PlayerController_Offset;
    static readonly int SetInputMode_UIOnlyEx_InWidgetToFocus_Offset;
    static readonly int SetInputMode_UIOnlyEx_InMouseLockMode_Offset;
    static readonly int SetInputMode_UIOnlyEx_bFlushInput_Offset;
    
    public static void SetInputMode_UIOnlyEx(UnrealSharp.Engine.PlayerController playerController, UnrealSharp.UMG.Widget inWidgetToFocus = default(UnrealSharp.UMG.Widget), UnrealSharp.Engine.EMouseLockMode inMouseLockMode = UnrealSharp.Engine.EMouseLockMode.DoNotLock, bool bFlushInput = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInputMode_UIOnlyEx_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, SetInputMode_UIOnlyEx_PlayerController_Offset), 0, null, playerController);
            ObjectMarshaller<UnrealSharp.UMG.Widget>.ToNative(IntPtr.Add(ParamsBuffer, SetInputMode_UIOnlyEx_InWidgetToFocus_Offset), 0, null, inWidgetToFocus);
            BlittableMarshaller<UnrealSharp.Engine.EMouseLockMode>.ToNative(IntPtr.Add(ParamsBuffer, SetInputMode_UIOnlyEx_InMouseLockMode_Offset), 0, null, inMouseLockMode);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetInputMode_UIOnlyEx_bFlushInput_Offset), 0, null, bFlushInput);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetInputMode_UIOnlyEx_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:SetInputMode_GameOnly
    static readonly IntPtr SetInputMode_GameOnly_NativeFunction;
    static readonly int SetInputMode_GameOnly_ParamsSize;
    static readonly int SetInputMode_GameOnly_PlayerController_Offset;
    static readonly int SetInputMode_GameOnly_bFlushInput_Offset;
    
    public static void SetInputMode_GameOnly(UnrealSharp.Engine.PlayerController playerController, bool bFlushInput = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInputMode_GameOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, SetInputMode_GameOnly_PlayerController_Offset), 0, null, playerController);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetInputMode_GameOnly_bFlushInput_Offset), 0, null, bFlushInput);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetInputMode_GameOnly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:SetInputMode_GameAndUIEx
    static readonly IntPtr SetInputMode_GameAndUIEx_NativeFunction;
    static readonly int SetInputMode_GameAndUIEx_ParamsSize;
    static readonly int SetInputMode_GameAndUIEx_PlayerController_Offset;
    static readonly int SetInputMode_GameAndUIEx_InWidgetToFocus_Offset;
    static readonly int SetInputMode_GameAndUIEx_InMouseLockMode_Offset;
    static readonly int SetInputMode_GameAndUIEx_bHideCursorDuringCapture_Offset;
    static readonly int SetInputMode_GameAndUIEx_bFlushInput_Offset;
    
    public static void SetInputMode_GameAndUIEx(UnrealSharp.Engine.PlayerController playerController, UnrealSharp.UMG.Widget inWidgetToFocus = default(UnrealSharp.UMG.Widget), UnrealSharp.Engine.EMouseLockMode inMouseLockMode = UnrealSharp.Engine.EMouseLockMode.DoNotLock, bool bHideCursorDuringCapture = true, bool bFlushInput = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInputMode_GameAndUIEx_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, SetInputMode_GameAndUIEx_PlayerController_Offset), 0, null, playerController);
            ObjectMarshaller<UnrealSharp.UMG.Widget>.ToNative(IntPtr.Add(ParamsBuffer, SetInputMode_GameAndUIEx_InWidgetToFocus_Offset), 0, null, inWidgetToFocus);
            BlittableMarshaller<UnrealSharp.Engine.EMouseLockMode>.ToNative(IntPtr.Add(ParamsBuffer, SetInputMode_GameAndUIEx_InMouseLockMode_Offset), 0, null, inMouseLockMode);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetInputMode_GameAndUIEx_bHideCursorDuringCapture_Offset), 0, null, bHideCursorDuringCapture);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetInputMode_GameAndUIEx_bFlushInput_Offset), 0, null, bFlushInput);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetInputMode_GameAndUIEx_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:SetHardwareCursor
    static readonly IntPtr SetHardwareCursor_NativeFunction;
    static readonly int SetHardwareCursor_ParamsSize;
    static readonly int SetHardwareCursor_WorldContextObject_Offset;
    static readonly int SetHardwareCursor_CursorShape_Offset;
    static readonly int SetHardwareCursor_CursorName_Offset;
    static readonly int SetHardwareCursor_HotSpot_Offset;
    static readonly int SetHardwareCursor_ReturnValue_Offset;
    
    public static bool SetHardwareCursor(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.CoreUObject.EMouseCursor cursorShape, Name cursorName, System.DoubleNumerics.Vector2 hotSpot)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetHardwareCursor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetHardwareCursor_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.CoreUObject.EMouseCursor>.ToNative(IntPtr.Add(ParamsBuffer, SetHardwareCursor_CursorShape_Offset), 0, null, cursorShape);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetHardwareCursor_CursorName_Offset), 0, null, cursorName);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetHardwareCursor_HotSpot_Offset), 0, null, hotSpot);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetHardwareCursor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetHardwareCursor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:SetFocusToGameViewport
    static readonly IntPtr SetFocusToGameViewport_NativeFunction;
    
    public static void SetFocusToGameViewport()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetFocusToGameViewport_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:SetColorVisionDeficiencyType
    static readonly IntPtr SetColorVisionDeficiencyType_NativeFunction;
    static readonly int SetColorVisionDeficiencyType_ParamsSize;
    static readonly int SetColorVisionDeficiencyType_Type_Offset;
    static readonly int SetColorVisionDeficiencyType_Severity_Offset;
    static readonly int SetColorVisionDeficiencyType_CorrectDeficiency_Offset;
    static readonly int SetColorVisionDeficiencyType_ShowCorrectionWithDeficiency_Offset;
    
    public static void SetColorVisionDeficiencyType(UnrealSharp.SlateCore.EColorVisionDeficiency type, float severity, bool correctDeficiency, bool showCorrectionWithDeficiency)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetColorVisionDeficiencyType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.SlateCore.EColorVisionDeficiency>.ToNative(IntPtr.Add(ParamsBuffer, SetColorVisionDeficiencyType_Type_Offset), 0, null, type);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetColorVisionDeficiencyType_Severity_Offset), 0, null, severity);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetColorVisionDeficiencyType_CorrectDeficiency_Offset), 0, null, correctDeficiency);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetColorVisionDeficiencyType_ShowCorrectionWithDeficiency_Offset), 0, null, showCorrectionWithDeficiency);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetColorVisionDeficiencyType_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:SetBrushResourceToTexture
    static readonly IntPtr SetBrushResourceToTexture_NativeFunction;
    static readonly int SetBrushResourceToTexture_ParamsSize;
    static readonly int SetBrushResourceToTexture_Brush_Offset;
    static readonly int SetBrushResourceToTexture_Texture_Offset;
    
    public static void SetBrushResourceToTexture(ref UnrealSharp.SlateCore.SlateBrush brush, UnrealSharp.Engine.Texture2D texture)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrushResourceToTexture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateBrushMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetBrushResourceToTexture_Brush_Offset), 0, null, brush);
            ObjectMarshaller<UnrealSharp.Engine.Texture2D>.ToNative(IntPtr.Add(ParamsBuffer, SetBrushResourceToTexture_Texture_Offset), 0, null, texture);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetBrushResourceToTexture_NativeFunction, ParamsBuffer);
            
            brush = UnrealSharp.SlateCore.SlateBrushMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetBrushResourceToTexture_Brush_Offset), 0, null);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:SetBrushResourceToMaterial
    static readonly IntPtr SetBrushResourceToMaterial_NativeFunction;
    static readonly int SetBrushResourceToMaterial_ParamsSize;
    static readonly int SetBrushResourceToMaterial_Brush_Offset;
    static readonly int SetBrushResourceToMaterial_Material_Offset;
    
    public static void SetBrushResourceToMaterial(ref UnrealSharp.SlateCore.SlateBrush brush, UnrealSharp.Engine.MaterialInterface material)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBrushResourceToMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateBrushMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetBrushResourceToMaterial_Brush_Offset), 0, null, brush);
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetBrushResourceToMaterial_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetBrushResourceToMaterial_NativeFunction, ParamsBuffer);
            
            brush = UnrealSharp.SlateCore.SlateBrushMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetBrushResourceToMaterial_Brush_Offset), 0, null);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:RestorePreviousWindowTitleBarState
    static readonly IntPtr RestorePreviousWindowTitleBarState_NativeFunction;
    
    public static void RestorePreviousWindowTitleBarState()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RestorePreviousWindowTitleBarState_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:ReleaseMouseCapture
    static readonly IntPtr ReleaseMouseCapture_NativeFunction;
    static readonly int ReleaseMouseCapture_ParamsSize;
    static readonly int ReleaseMouseCapture_Reply_Offset;
    static readonly int ReleaseMouseCapture_ReturnValue_Offset;
    
    public static UnrealSharp.UMG.EventReply ReleaseMouseCapture(ref UnrealSharp.UMG.EventReply reply)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReleaseMouseCapture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ReleaseMouseCapture_Reply_Offset), 0, null, reply);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReleaseMouseCapture_NativeFunction, ParamsBuffer);
            
            reply = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ReleaseMouseCapture_Reply_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ReleaseMouseCapture_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:ReleaseJoystickCapture
    static readonly IntPtr ReleaseJoystickCapture_NativeFunction;
    static readonly int ReleaseJoystickCapture_ParamsSize;
    static readonly int ReleaseJoystickCapture_Reply_Offset;
    static readonly int ReleaseJoystickCapture_bInAllJoysticks_Offset;
    static readonly int ReleaseJoystickCapture_ReturnValue_Offset;
    
    [Obsolete("Use ClearUserFocus() instead")]
    public static UnrealSharp.UMG.EventReply ReleaseJoystickCapture(ref UnrealSharp.UMG.EventReply reply, bool bInAllJoysticks = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReleaseJoystickCapture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ReleaseJoystickCapture_Reply_Offset), 0, null, reply);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ReleaseJoystickCapture_bInAllJoysticks_Offset), 0, null, bInAllJoysticks);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReleaseJoystickCapture_NativeFunction, ParamsBuffer);
            
            reply = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ReleaseJoystickCapture_Reply_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ReleaseJoystickCapture_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:NoResourceBrush
    static readonly IntPtr NoResourceBrush_NativeFunction;
    static readonly int NoResourceBrush_ParamsSize;
    static readonly int NoResourceBrush_ReturnValue_Offset;
    
    public static UnrealSharp.SlateCore.SlateBrush NoResourceBrush()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NoResourceBrush_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NoResourceBrush_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.SlateBrush returnValue;
            returnValue = UnrealSharp.SlateCore.SlateBrushMarshaler.FromNative(IntPtr.Add(ParamsBuffer, NoResourceBrush_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:MakeBrushFromTexture
    static readonly IntPtr MakeBrushFromTexture_NativeFunction;
    static readonly int MakeBrushFromTexture_ParamsSize;
    static readonly int MakeBrushFromTexture_Texture_Offset;
    static readonly int MakeBrushFromTexture_Width_Offset;
    static readonly int MakeBrushFromTexture_Height_Offset;
    static readonly int MakeBrushFromTexture_ReturnValue_Offset;
    
    public static UnrealSharp.SlateCore.SlateBrush MakeBrushFromTexture(UnrealSharp.Engine.Texture2D texture, int width = 0, int height = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeBrushFromTexture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Texture2D>.ToNative(IntPtr.Add(ParamsBuffer, MakeBrushFromTexture_Texture_Offset), 0, null, texture);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeBrushFromTexture_Width_Offset), 0, null, width);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeBrushFromTexture_Height_Offset), 0, null, height);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeBrushFromTexture_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.SlateBrush returnValue;
            returnValue = UnrealSharp.SlateCore.SlateBrushMarshaler.FromNative(IntPtr.Add(ParamsBuffer, MakeBrushFromTexture_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:MakeBrushFromMaterial
    static readonly IntPtr MakeBrushFromMaterial_NativeFunction;
    static readonly int MakeBrushFromMaterial_ParamsSize;
    static readonly int MakeBrushFromMaterial_Material_Offset;
    static readonly int MakeBrushFromMaterial_Width_Offset;
    static readonly int MakeBrushFromMaterial_Height_Offset;
    static readonly int MakeBrushFromMaterial_ReturnValue_Offset;
    
    public static UnrealSharp.SlateCore.SlateBrush MakeBrushFromMaterial(UnrealSharp.Engine.MaterialInterface material, int width = 32, int height = 32)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeBrushFromMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, MakeBrushFromMaterial_Material_Offset), 0, null, material);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeBrushFromMaterial_Width_Offset), 0, null, width);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeBrushFromMaterial_Height_Offset), 0, null, height);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeBrushFromMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.SlateBrush returnValue;
            returnValue = UnrealSharp.SlateCore.SlateBrushMarshaler.FromNative(IntPtr.Add(ParamsBuffer, MakeBrushFromMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:MakeBrushFromAsset
    static readonly IntPtr MakeBrushFromAsset_NativeFunction;
    static readonly int MakeBrushFromAsset_ParamsSize;
    static readonly int MakeBrushFromAsset_BrushAsset_Offset;
    static readonly int MakeBrushFromAsset_ReturnValue_Offset;
    
    public static UnrealSharp.SlateCore.SlateBrush MakeBrushFromAsset(UnrealSharp.Engine.SlateBrushAsset brushAsset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeBrushFromAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SlateBrushAsset>.ToNative(IntPtr.Add(ParamsBuffer, MakeBrushFromAsset_BrushAsset_Offset), 0, null, brushAsset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeBrushFromAsset_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.SlateBrush returnValue;
            returnValue = UnrealSharp.SlateCore.SlateBrushMarshaler.FromNative(IntPtr.Add(ParamsBuffer, MakeBrushFromAsset_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:LockMouse
    static readonly IntPtr LockMouse_NativeFunction;
    static readonly int LockMouse_ParamsSize;
    static readonly int LockMouse_Reply_Offset;
    static readonly int LockMouse_CapturingWidget_Offset;
    static readonly int LockMouse_ReturnValue_Offset;
    
    public static UnrealSharp.UMG.EventReply LockMouse(ref UnrealSharp.UMG.EventReply reply, UnrealSharp.UMG.Widget capturingWidget)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LockMouse_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, LockMouse_Reply_Offset), 0, null, reply);
            ObjectMarshaller<UnrealSharp.UMG.Widget>.ToNative(IntPtr.Add(ParamsBuffer, LockMouse_CapturingWidget_Offset), 0, null, capturingWidget);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LockMouse_NativeFunction, ParamsBuffer);
            
            reply = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, LockMouse_Reply_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, LockMouse_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:IsDragDropping
    static readonly IntPtr IsDragDropping_NativeFunction;
    static readonly int IsDragDropping_ParamsSize;
    static readonly int IsDragDropping_ReturnValue_Offset;
    
    public static bool IsDragDropping()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsDragDropping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsDragDropping_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsDragDropping_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:Handled
    static readonly IntPtr Handled_NativeFunction;
    static readonly int Handled_ParamsSize;
    static readonly int Handled_ReturnValue_Offset;
    
    public static UnrealSharp.UMG.EventReply Handled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Handled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Handled_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Handled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:GetSafeZonePadding
    static readonly IntPtr GetSafeZonePadding_NativeFunction;
    static readonly int GetSafeZonePadding_ParamsSize;
    static readonly int GetSafeZonePadding_WorldContextObject_Offset;
    static readonly int GetSafeZonePadding_SafePadding_Offset;
    static readonly int GetSafeZonePadding_SafePaddingScale_Offset;
    static readonly int GetSafeZonePadding_SpillOverPadding_Offset;
    
    public static void GetSafeZonePadding(UnrealSharp.CoreUObject.Object worldContextObject, out System.DoubleNumerics.Vector4 safePadding, out System.DoubleNumerics.Vector2 safePaddingScale, out System.DoubleNumerics.Vector4 spillOverPadding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSafeZonePadding_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetSafeZonePadding_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSafeZonePadding_NativeFunction, ParamsBuffer);
            
            safePadding = BlittableMarshaller<System.DoubleNumerics.Vector4>.FromNative(IntPtr.Add(ParamsBuffer, GetSafeZonePadding_SafePadding_Offset), 0, null);
            safePaddingScale = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetSafeZonePadding_SafePaddingScale_Offset), 0, null);
            spillOverPadding = BlittableMarshaller<System.DoubleNumerics.Vector4>.FromNative(IntPtr.Add(ParamsBuffer, GetSafeZonePadding_SpillOverPadding_Offset), 0, null);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:GetKeyEventFromAnalogInputEvent
    static readonly IntPtr GetKeyEventFromAnalogInputEvent_NativeFunction;
    static readonly int GetKeyEventFromAnalogInputEvent_ParamsSize;
    static readonly int GetKeyEventFromAnalogInputEvent_Event_Offset;
    static readonly int GetKeyEventFromAnalogInputEvent_ReturnValue_Offset;
    
    public static UnrealSharp.SlateCore.KeyEvent GetKeyEventFromAnalogInputEvent(UnrealSharp.SlateCore.AnalogInputEvent @event)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetKeyEventFromAnalogInputEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.AnalogInputEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetKeyEventFromAnalogInputEvent_Event_Offset), 0, null, @event);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetKeyEventFromAnalogInputEvent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.KeyEvent returnValue;
            returnValue = UnrealSharp.SlateCore.KeyEventMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetKeyEventFromAnalogInputEvent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:GetInputEventFromPointerEvent
    static readonly IntPtr GetInputEventFromPointerEvent_NativeFunction;
    static readonly int GetInputEventFromPointerEvent_ParamsSize;
    static readonly int GetInputEventFromPointerEvent_Event_Offset;
    static readonly int GetInputEventFromPointerEvent_ReturnValue_Offset;
    
    public static UnrealSharp.SlateCore.InputEvent GetInputEventFromPointerEvent(UnrealSharp.SlateCore.PointerEvent @event)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputEventFromPointerEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetInputEventFromPointerEvent_Event_Offset), 0, null, @event);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetInputEventFromPointerEvent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.InputEvent returnValue;
            returnValue = UnrealSharp.SlateCore.InputEventMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetInputEventFromPointerEvent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:GetInputEventFromNavigationEvent
    static readonly IntPtr GetInputEventFromNavigationEvent_NativeFunction;
    static readonly int GetInputEventFromNavigationEvent_ParamsSize;
    static readonly int GetInputEventFromNavigationEvent_Event_Offset;
    static readonly int GetInputEventFromNavigationEvent_ReturnValue_Offset;
    
    public static UnrealSharp.SlateCore.InputEvent GetInputEventFromNavigationEvent(UnrealSharp.SlateCore.NavigationEvent @event)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputEventFromNavigationEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.NavigationEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetInputEventFromNavigationEvent_Event_Offset), 0, null, @event);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetInputEventFromNavigationEvent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.InputEvent returnValue;
            returnValue = UnrealSharp.SlateCore.InputEventMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetInputEventFromNavigationEvent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:GetInputEventFromKeyEvent
    static readonly IntPtr GetInputEventFromKeyEvent_NativeFunction;
    static readonly int GetInputEventFromKeyEvent_ParamsSize;
    static readonly int GetInputEventFromKeyEvent_Event_Offset;
    static readonly int GetInputEventFromKeyEvent_ReturnValue_Offset;
    
    public static UnrealSharp.SlateCore.InputEvent GetInputEventFromKeyEvent(UnrealSharp.SlateCore.KeyEvent @event)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputEventFromKeyEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.KeyEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetInputEventFromKeyEvent_Event_Offset), 0, null, @event);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetInputEventFromKeyEvent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.InputEvent returnValue;
            returnValue = UnrealSharp.SlateCore.InputEventMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetInputEventFromKeyEvent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:GetInputEventFromCharacterEvent
    static readonly IntPtr GetInputEventFromCharacterEvent_NativeFunction;
    static readonly int GetInputEventFromCharacterEvent_ParamsSize;
    static readonly int GetInputEventFromCharacterEvent_Event_Offset;
    static readonly int GetInputEventFromCharacterEvent_ReturnValue_Offset;
    
    public static UnrealSharp.SlateCore.InputEvent GetInputEventFromCharacterEvent(UnrealSharp.SlateCore.CharacterEvent @event)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputEventFromCharacterEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.CharacterEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetInputEventFromCharacterEvent_Event_Offset), 0, null, @event);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetInputEventFromCharacterEvent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SlateCore.InputEvent returnValue;
            returnValue = UnrealSharp.SlateCore.InputEventMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetInputEventFromCharacterEvent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:GetDynamicMaterial
    static readonly IntPtr GetDynamicMaterial_NativeFunction;
    static readonly int GetDynamicMaterial_ParamsSize;
    static readonly int GetDynamicMaterial_Brush_Offset;
    static readonly int GetDynamicMaterial_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.MaterialInstanceDynamic GetDynamicMaterial(ref UnrealSharp.SlateCore.SlateBrush brush)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDynamicMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateBrushMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetDynamicMaterial_Brush_Offset), 0, null, brush);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDynamicMaterial_NativeFunction, ParamsBuffer);
            
            brush = UnrealSharp.SlateCore.SlateBrushMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetDynamicMaterial_Brush_Offset), 0, null);
            UnrealSharp.Engine.MaterialInstanceDynamic returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceDynamic>.FromNative(IntPtr.Add(ParamsBuffer, GetDynamicMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:GetDragDroppingContent
    static readonly IntPtr GetDragDroppingContent_NativeFunction;
    static readonly int GetDragDroppingContent_ParamsSize;
    static readonly int GetDragDroppingContent_ReturnValue_Offset;
    
    public static UnrealSharp.UMG.DragDropOperation GetDragDroppingContent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDragDroppingContent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDragDroppingContent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.DragDropOperation returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.UMG.DragDropOperation>.FromNative(IntPtr.Add(ParamsBuffer, GetDragDroppingContent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:GetBrushResourceAsTexture2D
    static readonly IntPtr GetBrushResourceAsTexture2D_NativeFunction;
    static readonly int GetBrushResourceAsTexture2D_ParamsSize;
    static readonly int GetBrushResourceAsTexture2D_Brush_Offset;
    static readonly int GetBrushResourceAsTexture2D_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Texture2D GetBrushResourceAsTexture2D(UnrealSharp.SlateCore.SlateBrush brush)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBrushResourceAsTexture2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateBrushMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetBrushResourceAsTexture2D_Brush_Offset), 0, null, brush);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBrushResourceAsTexture2D_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Texture2D returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Texture2D>.FromNative(IntPtr.Add(ParamsBuffer, GetBrushResourceAsTexture2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:GetBrushResourceAsMaterial
    static readonly IntPtr GetBrushResourceAsMaterial_NativeFunction;
    static readonly int GetBrushResourceAsMaterial_ParamsSize;
    static readonly int GetBrushResourceAsMaterial_Brush_Offset;
    static readonly int GetBrushResourceAsMaterial_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.MaterialInterface GetBrushResourceAsMaterial(UnrealSharp.SlateCore.SlateBrush brush)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBrushResourceAsMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateBrushMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetBrushResourceAsMaterial_Brush_Offset), 0, null, brush);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBrushResourceAsMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInterface returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(ParamsBuffer, GetBrushResourceAsMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:GetBrushResource
    static readonly IntPtr GetBrushResource_NativeFunction;
    static readonly int GetBrushResource_ParamsSize;
    static readonly int GetBrushResource_Brush_Offset;
    static readonly int GetBrushResource_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Object GetBrushResource(UnrealSharp.SlateCore.SlateBrush brush)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBrushResource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateBrushMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetBrushResource_Brush_Offset), 0, null, brush);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBrushResource_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetBrushResource_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:GetAllWidgetsWithInterface
    static readonly IntPtr GetAllWidgetsWithInterface_NativeFunction;
    static readonly int GetAllWidgetsWithInterface_ParamsSize;
    static readonly int GetAllWidgetsWithInterface_WorldContextObject_Offset;
    static readonly int GetAllWidgetsWithInterface_FoundWidgets_Offset;
    static readonly int GetAllWidgetsWithInterface_FoundWidgets_ElementSize;
    static readonly int GetAllWidgetsWithInterface_Interface_Offset;
    static readonly int GetAllWidgetsWithInterface_TopLevelOnly_Offset;
    
    public static void GetAllWidgetsWithInterface(UnrealSharp.CoreUObject.Object worldContextObject, out System.Collections.Generic.IList<UnrealSharp.UMG.UserWidget> foundWidgets, SubclassOf<UnrealSharp.CoreUObject.IInterface> @interface, bool topLevelOnly)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllWidgetsWithInterface_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetAllWidgetsWithInterface_WorldContextObject_Offset), 0, null, worldContextObject);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.IInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetAllWidgetsWithInterface_Interface_Offset), 0, null, @interface);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetAllWidgetsWithInterface_TopLevelOnly_Offset), 0, null, topLevelOnly);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAllWidgetsWithInterface_NativeFunction, ParamsBuffer);
            
            IntPtr FoundWidgets_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllWidgetsWithInterface_FoundWidgets_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.UMG.UserWidget> FoundWidgets_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.UMG.UserWidget> (1, ObjectMarshaller<UnrealSharp.UMG.UserWidget>.ToNative, ObjectMarshaller<UnrealSharp.UMG.UserWidget>.FromNative, GetAllWidgetsWithInterface_FoundWidgets_ElementSize);
            foundWidgets = FoundWidgets_Marshaler.FromNative(FoundWidgets_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.UMG.UserWidget>.DestructInstance(FoundWidgets_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:GetAllWidgetsOfClass
    static readonly IntPtr GetAllWidgetsOfClass_NativeFunction;
    static readonly int GetAllWidgetsOfClass_ParamsSize;
    static readonly int GetAllWidgetsOfClass_WorldContextObject_Offset;
    static readonly int GetAllWidgetsOfClass_FoundWidgets_Offset;
    static readonly int GetAllWidgetsOfClass_FoundWidgets_ElementSize;
    static readonly int GetAllWidgetsOfClass_WidgetClass_Offset;
    static readonly int GetAllWidgetsOfClass_TopLevelOnly_Offset;
    
    public static void GetAllWidgetsOfClass(UnrealSharp.CoreUObject.Object worldContextObject, out System.Collections.Generic.IList<UnrealSharp.UMG.UserWidget> foundWidgets, SubclassOf<UnrealSharp.UMG.UserWidget> widgetClass, bool topLevelOnly = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllWidgetsOfClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetAllWidgetsOfClass_WorldContextObject_Offset), 0, null, worldContextObject);
            SubclassOfMarshaller<UnrealSharp.UMG.UserWidget>.ToNative(IntPtr.Add(ParamsBuffer, GetAllWidgetsOfClass_WidgetClass_Offset), 0, null, widgetClass);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetAllWidgetsOfClass_TopLevelOnly_Offset), 0, null, topLevelOnly);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAllWidgetsOfClass_NativeFunction, ParamsBuffer);
            
            IntPtr FoundWidgets_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllWidgetsOfClass_FoundWidgets_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.UMG.UserWidget> FoundWidgets_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.UMG.UserWidget> (1, ObjectMarshaller<UnrealSharp.UMG.UserWidget>.ToNative, ObjectMarshaller<UnrealSharp.UMG.UserWidget>.FromNative, GetAllWidgetsOfClass_FoundWidgets_ElementSize);
            foundWidgets = FoundWidgets_Marshaler.FromNative(FoundWidgets_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.UMG.UserWidget>.DestructInstance(FoundWidgets_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:EndDragDrop
    static readonly IntPtr EndDragDrop_NativeFunction;
    static readonly int EndDragDrop_ParamsSize;
    static readonly int EndDragDrop_Reply_Offset;
    static readonly int EndDragDrop_ReturnValue_Offset;
    
    public static UnrealSharp.UMG.EventReply EndDragDrop(ref UnrealSharp.UMG.EventReply reply)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EndDragDrop_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, EndDragDrop_Reply_Offset), 0, null, reply);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EndDragDrop_NativeFunction, ParamsBuffer);
            
            reply = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, EndDragDrop_Reply_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, EndDragDrop_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:DrawText
    static readonly IntPtr DrawText_NativeFunction;
    static readonly int DrawText_ParamsSize;
    static readonly int DrawText_Context_Offset;
    static readonly int DrawText_InString_Offset;
    static readonly int DrawText_Position_Offset;
    static readonly int DrawText_Tint_Offset;
    
    [Obsolete("Use Draw Text instead")]
    public static void DrawText(ref UnrealSharp.UMG.PaintContext context, string inString, System.DoubleNumerics.Vector2 position)
    {
        UnrealSharp.CoreUObject.LinearColor tint = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawText(ref context, inString, position, tint);
    }
    
    [Obsolete("Use Draw Text instead")]
    public static void DrawText(ref UnrealSharp.UMG.PaintContext context, string inString, System.DoubleNumerics.Vector2 position, UnrealSharp.CoreUObject.LinearColor tint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawText_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.PaintContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DrawText_Context_Offset), 0, null, context);
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,DrawText_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawText_Position_Offset), 0, null, position);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawText_Tint_Offset), 0, null, tint);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawText_NativeFunction, ParamsBuffer);
            
            context = UnrealSharp.UMG.PaintContextMarshaler.FromNative(IntPtr.Add(ParamsBuffer, DrawText_Context_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:DrawSpline
    static readonly IntPtr DrawSpline_NativeFunction;
    static readonly int DrawSpline_ParamsSize;
    static readonly int DrawSpline_Context_Offset;
    static readonly int DrawSpline_Start_Offset;
    static readonly int DrawSpline_StartDir_Offset;
    static readonly int DrawSpline_End_Offset;
    static readonly int DrawSpline_EndDir_Offset;
    static readonly int DrawSpline_Tint_Offset;
    static readonly int DrawSpline_Thickness_Offset;
    
    public static void DrawSpline(ref UnrealSharp.UMG.PaintContext context, System.DoubleNumerics.Vector2 start, System.DoubleNumerics.Vector2 startDir, System.DoubleNumerics.Vector2 end, System.DoubleNumerics.Vector2 endDir)
    {
        UnrealSharp.CoreUObject.LinearColor tint = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawSpline(ref context, start, startDir, end, endDir, tint);
    }
    
    public static void DrawSpline(ref UnrealSharp.UMG.PaintContext context, System.DoubleNumerics.Vector2 start, System.DoubleNumerics.Vector2 startDir, System.DoubleNumerics.Vector2 end, System.DoubleNumerics.Vector2 endDir, UnrealSharp.CoreUObject.LinearColor tint, float thickness = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.PaintContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DrawSpline_Context_Offset), 0, null, context);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawSpline_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawSpline_StartDir_Offset), 0, null, startDir);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawSpline_End_Offset), 0, null, end);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawSpline_EndDir_Offset), 0, null, endDir);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawSpline_Tint_Offset), 0, null, tint);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawSpline_Thickness_Offset), 0, null, thickness);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawSpline_NativeFunction, ParamsBuffer);
            
            context = UnrealSharp.UMG.PaintContextMarshaler.FromNative(IntPtr.Add(ParamsBuffer, DrawSpline_Context_Offset), 0, null);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:DrawLines
    static readonly IntPtr DrawLines_NativeFunction;
    static readonly int DrawLines_ParamsSize;
    static readonly int DrawLines_Context_Offset;
    static readonly int DrawLines_Points_Offset;
    static readonly int DrawLines_Points_ElementSize;
    static readonly int DrawLines_Tint_Offset;
    static readonly int DrawLines_bAntiAlias_Offset;
    static readonly int DrawLines_Thickness_Offset;
    
    public static void DrawLines(ref UnrealSharp.UMG.PaintContext context, System.Collections.Generic.IList<System.DoubleNumerics.Vector2> points)
    {
        UnrealSharp.CoreUObject.LinearColor tint = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawLines(ref context, points, tint);
    }
    
    public static void DrawLines(ref UnrealSharp.UMG.PaintContext context, System.Collections.Generic.IList<System.DoubleNumerics.Vector2> points, UnrealSharp.CoreUObject.LinearColor tint, bool bAntiAlias = true, float thickness = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawLines_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.PaintContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DrawLines_Context_Offset), 0, null, context);
            IntPtr Points_NativeBuffer = IntPtr.Add(ParamsBuffer, DrawLines_Points_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> Points_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>(1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, DrawLines_Points_ElementSize);
            Points_Marshaler.ToNative(Points_NativeBuffer, 0, null, points);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawLines_Tint_Offset), 0, null, tint);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, DrawLines_bAntiAlias_Offset), 0, null, bAntiAlias);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawLines_Thickness_Offset), 0, null, thickness);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawLines_NativeFunction, ParamsBuffer);
            
            context = UnrealSharp.UMG.PaintContextMarshaler.FromNative(IntPtr.Add(ParamsBuffer, DrawLines_Context_Offset), 0, null);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:DrawLine
    static readonly IntPtr DrawLine_NativeFunction;
    static readonly int DrawLine_ParamsSize;
    static readonly int DrawLine_Context_Offset;
    static readonly int DrawLine_PositionA_Offset;
    static readonly int DrawLine_PositionB_Offset;
    static readonly int DrawLine_Tint_Offset;
    static readonly int DrawLine_bAntiAlias_Offset;
    static readonly int DrawLine_Thickness_Offset;
    
    public static void DrawLine(ref UnrealSharp.UMG.PaintContext context, System.DoubleNumerics.Vector2 positionA, System.DoubleNumerics.Vector2 positionB)
    {
        UnrealSharp.CoreUObject.LinearColor tint = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawLine(ref context, positionA, positionB, tint);
    }
    
    public static void DrawLine(ref UnrealSharp.UMG.PaintContext context, System.DoubleNumerics.Vector2 positionA, System.DoubleNumerics.Vector2 positionB, UnrealSharp.CoreUObject.LinearColor tint, bool bAntiAlias = true, float thickness = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawLine_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.PaintContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DrawLine_Context_Offset), 0, null, context);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawLine_PositionA_Offset), 0, null, positionA);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawLine_PositionB_Offset), 0, null, positionB);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawLine_Tint_Offset), 0, null, tint);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, DrawLine_bAntiAlias_Offset), 0, null, bAntiAlias);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawLine_Thickness_Offset), 0, null, thickness);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawLine_NativeFunction, ParamsBuffer);
            
            context = UnrealSharp.UMG.PaintContextMarshaler.FromNative(IntPtr.Add(ParamsBuffer, DrawLine_Context_Offset), 0, null);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:DrawBox
    static readonly IntPtr DrawBox_NativeFunction;
    static readonly int DrawBox_ParamsSize;
    static readonly int DrawBox_Context_Offset;
    static readonly int DrawBox_Position_Offset;
    static readonly int DrawBox_Size_Offset;
    static readonly int DrawBox_Brush_Offset;
    static readonly int DrawBox_Tint_Offset;
    
    public static void DrawBox(ref UnrealSharp.UMG.PaintContext context, System.DoubleNumerics.Vector2 position, System.DoubleNumerics.Vector2 size, UnrealSharp.Engine.SlateBrushAsset brush)
    {
        UnrealSharp.CoreUObject.LinearColor tint = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawBox(ref context, position, size, brush, tint);
    }
    
    public static void DrawBox(ref UnrealSharp.UMG.PaintContext context, System.DoubleNumerics.Vector2 position, System.DoubleNumerics.Vector2 size, UnrealSharp.Engine.SlateBrushAsset brush, UnrealSharp.CoreUObject.LinearColor tint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawBox_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.PaintContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DrawBox_Context_Offset), 0, null, context);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawBox_Position_Offset), 0, null, position);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawBox_Size_Offset), 0, null, size);
            ObjectMarshaller<UnrealSharp.Engine.SlateBrushAsset>.ToNative(IntPtr.Add(ParamsBuffer, DrawBox_Brush_Offset), 0, null, brush);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawBox_Tint_Offset), 0, null, tint);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawBox_NativeFunction, ParamsBuffer);
            
            context = UnrealSharp.UMG.PaintContextMarshaler.FromNative(IntPtr.Add(ParamsBuffer, DrawBox_Context_Offset), 0, null);
            
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:DismissAllMenus
    static readonly IntPtr DismissAllMenus_NativeFunction;
    
    public static void DismissAllMenus()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DismissAllMenus_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:DetectDragIfPressed
    static readonly IntPtr DetectDragIfPressed_NativeFunction;
    static readonly int DetectDragIfPressed_ParamsSize;
    static readonly int DetectDragIfPressed_PointerEvent_Offset;
    static readonly int DetectDragIfPressed_WidgetDetectingDrag_Offset;
    static readonly int DetectDragIfPressed_DragKey_Offset;
    static readonly int DetectDragIfPressed_ReturnValue_Offset;
    
    public static UnrealSharp.UMG.EventReply DetectDragIfPressed(UnrealSharp.SlateCore.PointerEvent pointerEvent, UnrealSharp.UMG.Widget widgetDetectingDrag, UnrealSharp.InputCore.Key dragKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DetectDragIfPressed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.PointerEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DetectDragIfPressed_PointerEvent_Offset), 0, null, pointerEvent);
            ObjectMarshaller<UnrealSharp.UMG.Widget>.ToNative(IntPtr.Add(ParamsBuffer, DetectDragIfPressed_WidgetDetectingDrag_Offset), 0, null, widgetDetectingDrag);
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DetectDragIfPressed_DragKey_Offset), 0, null, dragKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DetectDragIfPressed_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, DetectDragIfPressed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:DetectDrag
    static readonly IntPtr DetectDrag_NativeFunction;
    static readonly int DetectDrag_ParamsSize;
    static readonly int DetectDrag_Reply_Offset;
    static readonly int DetectDrag_WidgetDetectingDrag_Offset;
    static readonly int DetectDrag_DragKey_Offset;
    static readonly int DetectDrag_ReturnValue_Offset;
    
    public static UnrealSharp.UMG.EventReply DetectDrag(ref UnrealSharp.UMG.EventReply reply, UnrealSharp.UMG.Widget widgetDetectingDrag, UnrealSharp.InputCore.Key dragKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DetectDrag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DetectDrag_Reply_Offset), 0, null, reply);
            ObjectMarshaller<UnrealSharp.UMG.Widget>.ToNative(IntPtr.Add(ParamsBuffer, DetectDrag_WidgetDetectingDrag_Offset), 0, null, widgetDetectingDrag);
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DetectDrag_DragKey_Offset), 0, null, dragKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DetectDrag_NativeFunction, ParamsBuffer);
            
            reply = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, DetectDrag_Reply_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, DetectDrag_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:ClearUserFocus
    static readonly IntPtr ClearUserFocus_NativeFunction;
    static readonly int ClearUserFocus_ParamsSize;
    static readonly int ClearUserFocus_Reply_Offset;
    static readonly int ClearUserFocus_bInAllUsers_Offset;
    static readonly int ClearUserFocus_ReturnValue_Offset;
    
    public static UnrealSharp.UMG.EventReply ClearUserFocus(ref UnrealSharp.UMG.EventReply reply, bool bInAllUsers = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearUserFocus_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ClearUserFocus_Reply_Offset), 0, null, reply);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ClearUserFocus_bInAllUsers_Offset), 0, null, bInAllUsers);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClearUserFocus_NativeFunction, ParamsBuffer);
            
            reply = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ClearUserFocus_Reply_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ClearUserFocus_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:CaptureMouse
    static readonly IntPtr CaptureMouse_NativeFunction;
    static readonly int CaptureMouse_ParamsSize;
    static readonly int CaptureMouse_Reply_Offset;
    static readonly int CaptureMouse_CapturingWidget_Offset;
    static readonly int CaptureMouse_ReturnValue_Offset;
    
    public static UnrealSharp.UMG.EventReply CaptureMouse(ref UnrealSharp.UMG.EventReply reply, UnrealSharp.UMG.Widget capturingWidget)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CaptureMouse_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, CaptureMouse_Reply_Offset), 0, null, reply);
            ObjectMarshaller<UnrealSharp.UMG.Widget>.ToNative(IntPtr.Add(ParamsBuffer, CaptureMouse_CapturingWidget_Offset), 0, null, capturingWidget);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CaptureMouse_NativeFunction, ParamsBuffer);
            
            reply = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, CaptureMouse_Reply_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, CaptureMouse_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:CaptureJoystick
    static readonly IntPtr CaptureJoystick_NativeFunction;
    static readonly int CaptureJoystick_ParamsSize;
    static readonly int CaptureJoystick_Reply_Offset;
    static readonly int CaptureJoystick_CapturingWidget_Offset;
    static readonly int CaptureJoystick_bInAllJoysticks_Offset;
    static readonly int CaptureJoystick_ReturnValue_Offset;
    
    [Obsolete("Use SetUserFocus() instead")]
    public static UnrealSharp.UMG.EventReply CaptureJoystick(ref UnrealSharp.UMG.EventReply reply, UnrealSharp.UMG.Widget capturingWidget, bool bInAllJoysticks = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CaptureJoystick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.UMG.EventReplyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, CaptureJoystick_Reply_Offset), 0, null, reply);
            ObjectMarshaller<UnrealSharp.UMG.Widget>.ToNative(IntPtr.Add(ParamsBuffer, CaptureJoystick_CapturingWidget_Offset), 0, null, capturingWidget);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CaptureJoystick_bInAllJoysticks_Offset), 0, null, bInAllJoysticks);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CaptureJoystick_NativeFunction, ParamsBuffer);
            
            reply = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, CaptureJoystick_Reply_Offset), 0, null);
            UnrealSharp.UMG.EventReply returnValue;
            returnValue = UnrealSharp.UMG.EventReplyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, CaptureJoystick_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetBlueprintLibrary:CancelDragDrop
    static readonly IntPtr CancelDragDrop_NativeFunction;
    
    public static void CancelDragDrop()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CancelDragDrop_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
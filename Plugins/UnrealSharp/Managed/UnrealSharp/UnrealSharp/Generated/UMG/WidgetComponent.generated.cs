// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UMG;

[UClass]
public partial class WidgetComponent : UnrealSharp.Engine.MeshComponent
{
    
    static WidgetComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("WidgetComponent");
        
        
        SetWindowVisibility_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWindowVisibility");
        SetWindowVisibility_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWindowVisibility_NativeFunction);
        SetWindowVisibility_InVisibility_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWindowVisibility_NativeFunction, "InVisibility");
        SetWindowFocusable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWindowFocusable");
        SetWindowFocusable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWindowFocusable_NativeFunction);
        SetWindowFocusable_bInWindowFocusable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWindowFocusable_NativeFunction, "bInWindowFocusable");
        SetWidgetSpace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWidgetSpace");
        SetWidgetSpace_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWidgetSpace_NativeFunction);
        SetWidgetSpace_NewSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWidgetSpace_NativeFunction, "NewSpace");
        SetWidget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWidget");
        SetWidget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWidget_NativeFunction);
        SetWidget_Widget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWidget_NativeFunction, "Widget");
        SetTwoSided_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTwoSided");
        SetTwoSided_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTwoSided_NativeFunction);
        SetTwoSided_bWantTwoSided_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTwoSided_NativeFunction, "bWantTwoSided");
        SetTintColorAndOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTintColorAndOpacity");
        SetTintColorAndOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTintColorAndOpacity_NativeFunction);
        SetTintColorAndOpacity_NewTintColorAndOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTintColorAndOpacity_NativeFunction, "NewTintColorAndOpacity");
        SetTickWhenOffscreen_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTickWhenOffscreen");
        SetTickWhenOffscreen_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTickWhenOffscreen_NativeFunction);
        SetTickWhenOffscreen_bWantTickWhenOffscreen_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTickWhenOffscreen_NativeFunction, "bWantTickWhenOffscreen");
        SetTickMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTickMode");
        SetTickMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTickMode_NativeFunction);
        SetTickMode_InTickMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTickMode_NativeFunction, "InTickMode");
        SetRedrawTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRedrawTime");
        SetRedrawTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRedrawTime_NativeFunction);
        SetRedrawTime_InRedrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRedrawTime_NativeFunction, "InRedrawTime");
        SetPivot_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPivot");
        SetPivot_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPivot_NativeFunction);
        SetPivot_InPivot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPivot_NativeFunction, "InPivot");
        SetOwnerPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOwnerPlayer");
        SetOwnerPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOwnerPlayer_NativeFunction);
        SetOwnerPlayer_LocalPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOwnerPlayer_NativeFunction, "LocalPlayer");
        SetManuallyRedraw_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetManuallyRedraw");
        SetManuallyRedraw_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetManuallyRedraw_NativeFunction);
        SetManuallyRedraw_bUseManualRedraw_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetManuallyRedraw_NativeFunction, "bUseManualRedraw");
        SetGeometryMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGeometryMode");
        SetGeometryMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGeometryMode_NativeFunction);
        SetGeometryMode_InGeometryMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGeometryMode_NativeFunction, "InGeometryMode");
        SetDrawSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDrawSize");
        SetDrawSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDrawSize_NativeFunction);
        SetDrawSize_Size_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDrawSize_NativeFunction, "Size");
        SetDrawAtDesiredSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDrawAtDesiredSize");
        SetDrawAtDesiredSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDrawAtDesiredSize_NativeFunction);
        SetDrawAtDesiredSize_bInDrawAtDesiredSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDrawAtDesiredSize_NativeFunction, "bInDrawAtDesiredSize");
        SetCylinderArcAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCylinderArcAngle");
        SetCylinderArcAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCylinderArcAngle_NativeFunction);
        SetCylinderArcAngle_InCylinderArcAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCylinderArcAngle_NativeFunction, "InCylinderArcAngle");
        SetBackgroundColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBackgroundColor");
        SetBackgroundColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBackgroundColor_NativeFunction);
        SetBackgroundColor_NewBackgroundColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBackgroundColor_NativeFunction, "NewBackgroundColor");
        RequestRenderUpdate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RequestRenderUpdate");
        RequestRedraw_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RequestRedraw");
        IsWidgetVisible_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsWidgetVisible");
        IsWidgetVisible_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsWidgetVisible_NativeFunction);
        IsWidgetVisible_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsWidgetVisible_NativeFunction, "ReturnValue");
        GetWindowVisiblility_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWindowVisiblility");
        GetWindowVisiblility_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWindowVisiblility_NativeFunction);
        GetWindowVisiblility_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWindowVisiblility_NativeFunction, "ReturnValue");
        GetWindowFocusable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWindowFocusable");
        GetWindowFocusable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWindowFocusable_NativeFunction);
        GetWindowFocusable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWindowFocusable_NativeFunction, "ReturnValue");
        GetWidgetSpace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWidgetSpace");
        GetWidgetSpace_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWidgetSpace_NativeFunction);
        GetWidgetSpace_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWidgetSpace_NativeFunction, "ReturnValue");
        GetWidget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWidget");
        GetWidget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWidget_NativeFunction);
        GetWidget_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWidget_NativeFunction, "ReturnValue");
        GetUserWidgetObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUserWidgetObject");
        GetUserWidgetObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUserWidgetObject_NativeFunction);
        GetUserWidgetObject_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUserWidgetObject_NativeFunction, "ReturnValue");
        GetTwoSided_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTwoSided");
        GetTwoSided_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTwoSided_NativeFunction);
        GetTwoSided_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTwoSided_NativeFunction, "ReturnValue");
        GetTickWhenOffscreen_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTickWhenOffscreen");
        GetTickWhenOffscreen_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTickWhenOffscreen_NativeFunction);
        GetTickWhenOffscreen_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTickWhenOffscreen_NativeFunction, "ReturnValue");
        GetRenderTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRenderTarget");
        GetRenderTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRenderTarget_NativeFunction);
        GetRenderTarget_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRenderTarget_NativeFunction, "ReturnValue");
        GetRedrawTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRedrawTime");
        GetRedrawTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRedrawTime_NativeFunction);
        GetRedrawTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRedrawTime_NativeFunction, "ReturnValue");
        GetPivot_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPivot");
        GetPivot_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPivot_NativeFunction);
        GetPivot_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPivot_NativeFunction, "ReturnValue");
        GetOwnerPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOwnerPlayer");
        GetOwnerPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOwnerPlayer_NativeFunction);
        GetOwnerPlayer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOwnerPlayer_NativeFunction, "ReturnValue");
        GetMaterialInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialInstance");
        GetMaterialInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialInstance_NativeFunction);
        GetMaterialInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstance_NativeFunction, "ReturnValue");
        GetManuallyRedraw_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetManuallyRedraw");
        GetManuallyRedraw_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetManuallyRedraw_NativeFunction);
        GetManuallyRedraw_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetManuallyRedraw_NativeFunction, "ReturnValue");
        GetGeometryMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGeometryMode");
        GetGeometryMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGeometryMode_NativeFunction);
        GetGeometryMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGeometryMode_NativeFunction, "ReturnValue");
        GetDrawSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDrawSize");
        GetDrawSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDrawSize_NativeFunction);
        GetDrawSize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDrawSize_NativeFunction, "ReturnValue");
        GetDrawAtDesiredSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDrawAtDesiredSize");
        GetDrawAtDesiredSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDrawAtDesiredSize_NativeFunction);
        GetDrawAtDesiredSize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDrawAtDesiredSize_NativeFunction, "ReturnValue");
        GetCylinderArcAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCylinderArcAngle");
        GetCylinderArcAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCylinderArcAngle_NativeFunction);
        GetCylinderArcAngle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCylinderArcAngle_NativeFunction, "ReturnValue");
        GetCurrentDrawSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentDrawSize");
        GetCurrentDrawSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentDrawSize_NativeFunction);
        GetCurrentDrawSize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentDrawSize_NativeFunction, "ReturnValue");
        
        
    }
    
    protected WidgetComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/UMG.WidgetComponent:SetWindowVisibility
    static readonly IntPtr SetWindowVisibility_NativeFunction;
    static readonly int SetWindowVisibility_ParamsSize;
    static readonly int SetWindowVisibility_InVisibility_Offset;
    
    public void SetWindowVisibility(UnrealSharp.UMG.EWindowVisibility inVisibility)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWindowVisibility_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.UMG.EWindowVisibility>.ToNative(IntPtr.Add(ParamsBuffer, SetWindowVisibility_InVisibility_Offset), 0, null, inVisibility);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWindowVisibility_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetWindowFocusable
    static readonly IntPtr SetWindowFocusable_NativeFunction;
    static readonly int SetWindowFocusable_ParamsSize;
    static readonly int SetWindowFocusable_bInWindowFocusable_Offset;
    
    public void SetWindowFocusable(bool bInWindowFocusable)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWindowFocusable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetWindowFocusable_bInWindowFocusable_Offset), 0, null, bInWindowFocusable);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWindowFocusable_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetWidgetSpace
    static readonly IntPtr SetWidgetSpace_NativeFunction;
    static readonly int SetWidgetSpace_ParamsSize;
    static readonly int SetWidgetSpace_NewSpace_Offset;
    
    public void SetWidgetSpace(UnrealSharp.UMG.EWidgetSpace newSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWidgetSpace_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.UMG.EWidgetSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetWidgetSpace_NewSpace_Offset), 0, null, newSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWidgetSpace_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetWidget
    static readonly IntPtr SetWidget_NativeFunction;
    static readonly int SetWidget_ParamsSize;
    static readonly int SetWidget_Widget_Offset;
    
    public void SetWidget(UnrealSharp.UMG.UserWidget widget)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWidget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.UMG.UserWidget>.ToNative(IntPtr.Add(ParamsBuffer, SetWidget_Widget_Offset), 0, null, widget);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWidget_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetTwoSided
    static readonly IntPtr SetTwoSided_NativeFunction;
    static readonly int SetTwoSided_ParamsSize;
    static readonly int SetTwoSided_bWantTwoSided_Offset;
    
    public void SetTwoSided(bool bWantTwoSided)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTwoSided_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetTwoSided_bWantTwoSided_Offset), 0, null, bWantTwoSided);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTwoSided_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetTintColorAndOpacity
    static readonly IntPtr SetTintColorAndOpacity_NativeFunction;
    static readonly int SetTintColorAndOpacity_ParamsSize;
    static readonly int SetTintColorAndOpacity_NewTintColorAndOpacity_Offset;
    
    public void SetTintColorAndOpacity(UnrealSharp.CoreUObject.LinearColor newTintColorAndOpacity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTintColorAndOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetTintColorAndOpacity_NewTintColorAndOpacity_Offset), 0, null, newTintColorAndOpacity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTintColorAndOpacity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetTickWhenOffscreen
    static readonly IntPtr SetTickWhenOffscreen_NativeFunction;
    static readonly int SetTickWhenOffscreen_ParamsSize;
    static readonly int SetTickWhenOffscreen_bWantTickWhenOffscreen_Offset;
    
    public void SetTickWhenOffscreen(bool bWantTickWhenOffscreen)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTickWhenOffscreen_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetTickWhenOffscreen_bWantTickWhenOffscreen_Offset), 0, null, bWantTickWhenOffscreen);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTickWhenOffscreen_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetTickMode
    static readonly IntPtr SetTickMode_NativeFunction;
    static readonly int SetTickMode_ParamsSize;
    static readonly int SetTickMode_InTickMode_Offset;
    
    public void SetTickMode(UnrealSharp.UMG.ETickMode inTickMode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTickMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.UMG.ETickMode>.ToNative(IntPtr.Add(ParamsBuffer, SetTickMode_InTickMode_Offset), 0, null, inTickMode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTickMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetRedrawTime
    static readonly IntPtr SetRedrawTime_NativeFunction;
    static readonly int SetRedrawTime_ParamsSize;
    static readonly int SetRedrawTime_InRedrawTime_Offset;
    
    public void SetRedrawTime(float inRedrawTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRedrawTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRedrawTime_InRedrawTime_Offset), 0, null, inRedrawTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRedrawTime_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetPivot
    static readonly IntPtr SetPivot_NativeFunction;
    static readonly int SetPivot_ParamsSize;
    static readonly int SetPivot_InPivot_Offset;
    
    public void SetPivot(System.DoubleNumerics.Vector2 inPivot)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPivot_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetPivot_InPivot_Offset), 0, null, inPivot);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPivot_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetOwnerPlayer
    static readonly IntPtr SetOwnerPlayer_NativeFunction;
    static readonly int SetOwnerPlayer_ParamsSize;
    static readonly int SetOwnerPlayer_LocalPlayer_Offset;
    
    public void SetOwnerPlayer(UnrealSharp.Engine.LocalPlayer localPlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOwnerPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.LocalPlayer>.ToNative(IntPtr.Add(ParamsBuffer, SetOwnerPlayer_LocalPlayer_Offset), 0, null, localPlayer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOwnerPlayer_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetManuallyRedraw
    static readonly IntPtr SetManuallyRedraw_NativeFunction;
    static readonly int SetManuallyRedraw_ParamsSize;
    static readonly int SetManuallyRedraw_bUseManualRedraw_Offset;
    
    public void SetManuallyRedraw(bool bUseManualRedraw)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetManuallyRedraw_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetManuallyRedraw_bUseManualRedraw_Offset), 0, null, bUseManualRedraw);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetManuallyRedraw_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetGeometryMode
    static readonly IntPtr SetGeometryMode_NativeFunction;
    static readonly int SetGeometryMode_ParamsSize;
    static readonly int SetGeometryMode_InGeometryMode_Offset;
    
    public void SetGeometryMode(UnrealSharp.UMG.EWidgetGeometryMode inGeometryMode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGeometryMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.UMG.EWidgetGeometryMode>.ToNative(IntPtr.Add(ParamsBuffer, SetGeometryMode_InGeometryMode_Offset), 0, null, inGeometryMode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGeometryMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetDrawSize
    static readonly IntPtr SetDrawSize_NativeFunction;
    static readonly int SetDrawSize_ParamsSize;
    static readonly int SetDrawSize_Size_Offset;
    
    public void SetDrawSize(System.DoubleNumerics.Vector2 size)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDrawSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetDrawSize_Size_Offset), 0, null, size);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDrawSize_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetDrawAtDesiredSize
    static readonly IntPtr SetDrawAtDesiredSize_NativeFunction;
    static readonly int SetDrawAtDesiredSize_ParamsSize;
    static readonly int SetDrawAtDesiredSize_bInDrawAtDesiredSize_Offset;
    
    public void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDrawAtDesiredSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetDrawAtDesiredSize_bInDrawAtDesiredSize_Offset), 0, null, bInDrawAtDesiredSize);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDrawAtDesiredSize_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetCylinderArcAngle
    static readonly IntPtr SetCylinderArcAngle_NativeFunction;
    static readonly int SetCylinderArcAngle_ParamsSize;
    static readonly int SetCylinderArcAngle_InCylinderArcAngle_Offset;
    
    public void SetCylinderArcAngle(float inCylinderArcAngle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCylinderArcAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCylinderArcAngle_InCylinderArcAngle_Offset), 0, null, inCylinderArcAngle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCylinderArcAngle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:SetBackgroundColor
    static readonly IntPtr SetBackgroundColor_NativeFunction;
    static readonly int SetBackgroundColor_ParamsSize;
    static readonly int SetBackgroundColor_NewBackgroundColor_Offset;
    
    public void SetBackgroundColor(UnrealSharp.CoreUObject.LinearColor newBackgroundColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBackgroundColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetBackgroundColor_NewBackgroundColor_Offset), 0, null, newBackgroundColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBackgroundColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/UMG.WidgetComponent:RequestRenderUpdate
    static readonly IntPtr RequestRenderUpdate_NativeFunction;
    
    public void RequestRenderUpdate()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RequestRenderUpdate_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.WidgetComponent:RequestRedraw
    static readonly IntPtr RequestRedraw_NativeFunction;
    
    [Obsolete("Use RequestRenderUpdate instead")]
    public void RequestRedraw()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RequestRedraw_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/UMG.WidgetComponent:IsWidgetVisible
    static readonly IntPtr IsWidgetVisible_NativeFunction;
    static readonly int IsWidgetVisible_ParamsSize;
    static readonly int IsWidgetVisible_ReturnValue_Offset;
    
    public bool IsWidgetVisible()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsWidgetVisible_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsWidgetVisible_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsWidgetVisible_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetWindowVisiblility
    static readonly IntPtr GetWindowVisiblility_NativeFunction;
    static readonly int GetWindowVisiblility_ParamsSize;
    static readonly int GetWindowVisiblility_ReturnValue_Offset;
    
    public UnrealSharp.UMG.EWindowVisibility GetWindowVisiblility()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWindowVisiblility_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWindowVisiblility_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EWindowVisibility returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.UMG.EWindowVisibility>.FromNative(IntPtr.Add(ParamsBuffer, GetWindowVisiblility_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetWindowFocusable
    static readonly IntPtr GetWindowFocusable_NativeFunction;
    static readonly int GetWindowFocusable_ParamsSize;
    static readonly int GetWindowFocusable_ReturnValue_Offset;
    
    public bool GetWindowFocusable()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWindowFocusable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWindowFocusable_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetWindowFocusable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetWidgetSpace
    static readonly IntPtr GetWidgetSpace_NativeFunction;
    static readonly int GetWidgetSpace_ParamsSize;
    static readonly int GetWidgetSpace_ReturnValue_Offset;
    
    public UnrealSharp.UMG.EWidgetSpace GetWidgetSpace()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWidgetSpace_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWidgetSpace_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EWidgetSpace returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.UMG.EWidgetSpace>.FromNative(IntPtr.Add(ParamsBuffer, GetWidgetSpace_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetWidget
    static readonly IntPtr GetWidget_NativeFunction;
    static readonly int GetWidget_ParamsSize;
    static readonly int GetWidget_ReturnValue_Offset;
    
    public UnrealSharp.UMG.UserWidget GetWidget()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWidget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWidget_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.UserWidget returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.UMG.UserWidget>.FromNative(IntPtr.Add(ParamsBuffer, GetWidget_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetUserWidgetObject
    static readonly IntPtr GetUserWidgetObject_NativeFunction;
    static readonly int GetUserWidgetObject_ParamsSize;
    static readonly int GetUserWidgetObject_ReturnValue_Offset;
    
    public UnrealSharp.UMG.UserWidget GetUserWidgetObject()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUserWidgetObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetUserWidgetObject_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.UserWidget returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.UMG.UserWidget>.FromNative(IntPtr.Add(ParamsBuffer, GetUserWidgetObject_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetTwoSided
    static readonly IntPtr GetTwoSided_NativeFunction;
    static readonly int GetTwoSided_ParamsSize;
    static readonly int GetTwoSided_ReturnValue_Offset;
    
    public bool GetTwoSided()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTwoSided_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTwoSided_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetTwoSided_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetTickWhenOffscreen
    static readonly IntPtr GetTickWhenOffscreen_NativeFunction;
    static readonly int GetTickWhenOffscreen_ParamsSize;
    static readonly int GetTickWhenOffscreen_ReturnValue_Offset;
    
    public bool GetTickWhenOffscreen()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTickWhenOffscreen_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTickWhenOffscreen_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetTickWhenOffscreen_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetRenderTarget
    static readonly IntPtr GetRenderTarget_NativeFunction;
    static readonly int GetRenderTarget_ParamsSize;
    static readonly int GetRenderTarget_ReturnValue_Offset;
    
    public UnrealSharp.Engine.TextureRenderTarget2D GetRenderTarget()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRenderTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRenderTarget_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.TextureRenderTarget2D returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.FromNative(IntPtr.Add(ParamsBuffer, GetRenderTarget_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetRedrawTime
    static readonly IntPtr GetRedrawTime_NativeFunction;
    static readonly int GetRedrawTime_ParamsSize;
    static readonly int GetRedrawTime_ReturnValue_Offset;
    
    public float GetRedrawTime()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRedrawTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRedrawTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetRedrawTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetPivot
    static readonly IntPtr GetPivot_NativeFunction;
    static readonly int GetPivot_ParamsSize;
    static readonly int GetPivot_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 GetPivot()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPivot_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPivot_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetPivot_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetOwnerPlayer
    static readonly IntPtr GetOwnerPlayer_NativeFunction;
    static readonly int GetOwnerPlayer_ParamsSize;
    static readonly int GetOwnerPlayer_ReturnValue_Offset;
    
    public UnrealSharp.Engine.LocalPlayer GetOwnerPlayer()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOwnerPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOwnerPlayer_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.LocalPlayer returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.LocalPlayer>.FromNative(IntPtr.Add(ParamsBuffer, GetOwnerPlayer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetMaterialInstance
    static readonly IntPtr GetMaterialInstance_NativeFunction;
    static readonly int GetMaterialInstance_ParamsSize;
    static readonly int GetMaterialInstance_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInstanceDynamic GetMaterialInstance()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMaterialInstance_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInstanceDynamic returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceDynamic>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetManuallyRedraw
    static readonly IntPtr GetManuallyRedraw_NativeFunction;
    static readonly int GetManuallyRedraw_ParamsSize;
    static readonly int GetManuallyRedraw_ReturnValue_Offset;
    
    public bool GetManuallyRedraw()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetManuallyRedraw_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetManuallyRedraw_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetManuallyRedraw_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetGeometryMode
    static readonly IntPtr GetGeometryMode_NativeFunction;
    static readonly int GetGeometryMode_ParamsSize;
    static readonly int GetGeometryMode_ReturnValue_Offset;
    
    public UnrealSharp.UMG.EWidgetGeometryMode GetGeometryMode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGeometryMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGeometryMode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.UMG.EWidgetGeometryMode returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.UMG.EWidgetGeometryMode>.FromNative(IntPtr.Add(ParamsBuffer, GetGeometryMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetDrawSize
    static readonly IntPtr GetDrawSize_NativeFunction;
    static readonly int GetDrawSize_ParamsSize;
    static readonly int GetDrawSize_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 GetDrawSize()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDrawSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDrawSize_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetDrawSize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetDrawAtDesiredSize
    static readonly IntPtr GetDrawAtDesiredSize_NativeFunction;
    static readonly int GetDrawAtDesiredSize_ParamsSize;
    static readonly int GetDrawAtDesiredSize_ReturnValue_Offset;
    
    public bool GetDrawAtDesiredSize()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDrawAtDesiredSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDrawAtDesiredSize_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetDrawAtDesiredSize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetCylinderArcAngle
    static readonly IntPtr GetCylinderArcAngle_NativeFunction;
    static readonly int GetCylinderArcAngle_ParamsSize;
    static readonly int GetCylinderArcAngle_ReturnValue_Offset;
    
    public float GetCylinderArcAngle()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCylinderArcAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCylinderArcAngle_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCylinderArcAngle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UMG.WidgetComponent:GetCurrentDrawSize
    static readonly IntPtr GetCurrentDrawSize_NativeFunction;
    static readonly int GetCurrentDrawSize_ParamsSize;
    static readonly int GetCurrentDrawSize_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 GetCurrentDrawSize()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentDrawSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentDrawSize_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentDrawSize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
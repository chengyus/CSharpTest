// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UnrealEd;

[UClass]
public partial class AnimSeqExportOption : UnrealSharp.CoreUObject.Object
{
    
    static AnimSeqExportOption()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimSeqExportOption");
        
        bExportTransforms_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportTransforms");
        bExportMorphTargets_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportMorphTargets");
        bExportAttributeCurves_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportAttributeCurves");
        bExportMaterialCurves_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportMaterialCurves");
        bRecordInWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRecordInWorldSpace");
        bEvaluateAllSkeletalMeshComponents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEvaluateAllSkeletalMeshComponents");
        Interpolation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Interpolation");
        CurveInterpolation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CurveInterpolation");
        WarmUpFrames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WarmUpFrames");
        DelayBeforeStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DelayBeforeStart");
        bTransactRecording_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bTransactRecording");
        
        
        
    }
    
    protected AnimSeqExportOption(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/UnrealEd.AnimSeqExportOption:bExportTransforms
    static readonly int bExportTransforms_Offset;
    
    public bool bExportTransforms
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportTransforms_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportTransforms_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.AnimSeqExportOption:bExportMorphTargets
    static readonly int bExportMorphTargets_Offset;
    
    public bool bExportMorphTargets
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportMorphTargets_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportMorphTargets_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.AnimSeqExportOption:bExportAttributeCurves
    static readonly int bExportAttributeCurves_Offset;
    
    public bool bExportAttributeCurves
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportAttributeCurves_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportAttributeCurves_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.AnimSeqExportOption:bExportMaterialCurves
    static readonly int bExportMaterialCurves_Offset;
    
    public bool bExportMaterialCurves
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportMaterialCurves_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportMaterialCurves_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.AnimSeqExportOption:bRecordInWorldSpace
    static readonly int bRecordInWorldSpace_Offset;
    
    public bool bRecordInWorldSpace
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bRecordInWorldSpace_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bRecordInWorldSpace_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.AnimSeqExportOption:bEvaluateAllSkeletalMeshComponents
    static readonly int bEvaluateAllSkeletalMeshComponents_Offset;
    
    public bool bEvaluateAllSkeletalMeshComponents
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEvaluateAllSkeletalMeshComponents_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bEvaluateAllSkeletalMeshComponents_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/UnrealEd.AnimSeqExportOption:Interpolation
    static readonly int Interpolation_Offset;
    
    public UnrealSharp.Engine.EAnimInterpolationType Interpolation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EAnimInterpolationType>.FromNative(IntPtr.Add(NativeObject, Interpolation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EAnimInterpolationType>.ToNative(IntPtr.Add(NativeObject, Interpolation_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/UnrealEd.AnimSeqExportOption:CurveInterpolation
    static readonly int CurveInterpolation_Offset;
    
    public UnrealSharp.Engine.ERichCurveInterpMode CurveInterpolation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ERichCurveInterpMode>.FromNative(IntPtr.Add(NativeObject, CurveInterpolation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ERichCurveInterpMode>.ToNative(IntPtr.Add(NativeObject, CurveInterpolation_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UnrealEd.AnimSeqExportOption:WarmUpFrames
    static readonly int WarmUpFrames_Offset;
    
    public UnrealSharp.CoreUObject.FrameNumber WarmUpFrames
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative(IntPtr.Add(NativeObject, WarmUpFrames_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(NativeObject, WarmUpFrames_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UnrealEd.AnimSeqExportOption:DelayBeforeStart
    static readonly int DelayBeforeStart_Offset;
    
    public UnrealSharp.CoreUObject.FrameNumber DelayBeforeStart
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative(IntPtr.Add(NativeObject, DelayBeforeStart_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(NativeObject, DelayBeforeStart_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.AnimSeqExportOption:bTransactRecording
    static readonly int bTransactRecording_Offset;
    
    public bool bTransactRecording
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bTransactRecording_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bTransactRecording_Offset), 0, this, value);
        }
    }
    
    
}
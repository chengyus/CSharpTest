// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UnrealEd;

[UClass]
public partial class AssetImportTask : UnrealSharp.CoreUObject.Object
{
    
    static AssetImportTask()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AssetImportTask");
        
        Filename_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Filename");
        Filename_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Filename");
        DestinationPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DestinationPath");
        DestinationPath_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "DestinationPath");
        DestinationName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DestinationName");
        DestinationName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "DestinationName");
        bReplaceExisting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReplaceExisting");
        bReplaceExistingSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReplaceExistingSettings");
        bAutomated_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutomated");
        bSave_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSave");
        bAsync_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAsync");
        Factory_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Factory");
        Options_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Options");
        Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Result");
        Result_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Result");
        
        IsAsyncImportComplete_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsAsyncImportComplete");
        IsAsyncImportComplete_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsAsyncImportComplete_NativeFunction);
        IsAsyncImportComplete_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAsyncImportComplete_NativeFunction, "ReturnValue");
        GetObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetObjects");
        GetObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetObjects_NativeFunction);
        GetObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjects_NativeFunction, "ReturnValue");
        GetObjects_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetObjects_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AssetImportTask(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StrProperty /Script/UnrealEd.AssetImportTask:Filename
    static readonly int Filename_Offset;
    static readonly IntPtr Filename_NativeProperty;
    
    public string Filename
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,Filename_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,Filename_Offset),0,this,value);
        }
    }
    
    // StrProperty /Script/UnrealEd.AssetImportTask:DestinationPath
    static readonly int DestinationPath_Offset;
    static readonly IntPtr DestinationPath_NativeProperty;
    
    public string DestinationPath
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,DestinationPath_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,DestinationPath_Offset),0,this,value);
        }
    }
    
    // StrProperty /Script/UnrealEd.AssetImportTask:DestinationName
    static readonly int DestinationName_Offset;
    static readonly IntPtr DestinationName_NativeProperty;
    
    public string DestinationName
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,DestinationName_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,DestinationName_Offset),0,this,value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.AssetImportTask:bReplaceExisting
    static readonly int bReplaceExisting_Offset;
    
    public bool bReplaceExisting
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bReplaceExisting_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bReplaceExisting_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.AssetImportTask:bReplaceExistingSettings
    static readonly int bReplaceExistingSettings_Offset;
    
    public bool bReplaceExistingSettings
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bReplaceExistingSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bReplaceExistingSettings_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.AssetImportTask:bAutomated
    static readonly int bAutomated_Offset;
    
    public bool bAutomated
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAutomated_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAutomated_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.AssetImportTask:bSave
    static readonly int bSave_Offset;
    
    public bool bSave
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSave_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bSave_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.AssetImportTask:bAsync
    static readonly int bAsync_Offset;
    
    public bool bAsync
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAsync_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAsync_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/UnrealEd.AssetImportTask:Factory
    static readonly int Factory_Offset;
    
    public UnrealSharp.UnrealEd.Factory Factory
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.UnrealEd.Factory>.FromNative(IntPtr.Add(NativeObject, Factory_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.UnrealEd.Factory>.ToNative(IntPtr.Add(NativeObject, Factory_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/UnrealEd.AssetImportTask:Options
    static readonly int Options_Offset;
    
    public UnrealSharp.CoreUObject.Object Options
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(NativeObject, Options_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(NativeObject, Options_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/UnrealEd.AssetImportTask:Result
    static readonly int Result_Offset;
    static readonly IntPtr Result_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.CoreUObject.Object> Result_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> Result
    {
        get
        {
            if(Result_Wrapper == null)
            {
                Result_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.CoreUObject.Object>(1, Result_NativeProperty, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative);
            }
            
            return Result_Wrapper.FromNative(IntPtr.Add(NativeObject,Result_Offset),0,this);
        }
    }
    
    // Function /Script/UnrealEd.AssetImportTask:IsAsyncImportComplete
    static readonly IntPtr IsAsyncImportComplete_NativeFunction;
    static readonly int IsAsyncImportComplete_ParamsSize;
    static readonly int IsAsyncImportComplete_ReturnValue_Offset;
    
    public bool IsAsyncImportComplete()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsAsyncImportComplete_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsAsyncImportComplete_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsAsyncImportComplete_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/UnrealEd.AssetImportTask:GetObjects
    static readonly IntPtr GetObjects_NativeFunction;
    static readonly int GetObjects_ParamsSize;
    static readonly int GetObjects_ReturnValue_Offset;
    static readonly int GetObjects_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> GetObjects()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetObjects_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetObjects_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> (1, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative, GetObjects_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    
}
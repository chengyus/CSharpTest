// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UnrealEd;

[UClass]
public partial class AutomatedAssetImportData : UnrealSharp.CoreUObject.Object
{
    
    static AutomatedAssetImportData()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AutomatedAssetImportData");
        
        GroupName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GroupName");
        GroupName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "GroupName");
        DestinationPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DestinationPath");
        DestinationPath_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "DestinationPath");
        FactoryName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FactoryName");
        FactoryName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "FactoryName");
        bReplaceExisting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReplaceExisting");
        bSkipReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSkipReadOnly");
        Factory_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Factory");
        LevelToLoad_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LevelToLoad");
        LevelToLoad_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "LevelToLoad");
        
        
        
    }
    
    protected AutomatedAssetImportData(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StrProperty /Script/UnrealEd.AutomatedAssetImportData:GroupName
    static readonly int GroupName_Offset;
    static readonly IntPtr GroupName_NativeProperty;
    
    public string GroupName
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,GroupName_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,GroupName_Offset),0,this,value);
        }
    }
    
    // StrProperty /Script/UnrealEd.AutomatedAssetImportData:DestinationPath
    static readonly int DestinationPath_Offset;
    static readonly IntPtr DestinationPath_NativeProperty;
    
    public string DestinationPath
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,DestinationPath_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,DestinationPath_Offset),0,this,value);
        }
    }
    
    // StrProperty /Script/UnrealEd.AutomatedAssetImportData:FactoryName
    static readonly int FactoryName_Offset;
    static readonly IntPtr FactoryName_NativeProperty;
    
    public string FactoryName
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,FactoryName_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,FactoryName_Offset),0,this,value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.AutomatedAssetImportData:bReplaceExisting
    static readonly int bReplaceExisting_Offset;
    
    public bool bReplaceExisting
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bReplaceExisting_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bReplaceExisting_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.AutomatedAssetImportData:bSkipReadOnly
    static readonly int bSkipReadOnly_Offset;
    
    public bool bSkipReadOnly
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSkipReadOnly_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bSkipReadOnly_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/UnrealEd.AutomatedAssetImportData:Factory
    static readonly int Factory_Offset;
    
    public UnrealSharp.UnrealEd.Factory Factory
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.UnrealEd.Factory>.FromNative(IntPtr.Add(NativeObject, Factory_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.UnrealEd.Factory>.ToNative(IntPtr.Add(NativeObject, Factory_Offset), 0, this, value);
        }
    }
    
    // StrProperty /Script/UnrealEd.AutomatedAssetImportData:LevelToLoad
    static readonly int LevelToLoad_Offset;
    static readonly IntPtr LevelToLoad_NativeProperty;
    
    public string LevelToLoad
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,LevelToLoad_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,LevelToLoad_Offset),0,this,value);
        }
    }
    
    
}
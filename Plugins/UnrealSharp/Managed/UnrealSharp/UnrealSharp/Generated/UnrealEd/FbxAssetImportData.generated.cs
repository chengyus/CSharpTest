// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UnrealEd;

[UClass]
abstract public partial class FbxAssetImportData : UnrealSharp.Engine.AssetImportData
{
    
    static FbxAssetImportData()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("FbxAssetImportData");
        
        ImportTranslation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ImportTranslation");
        ImportRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ImportRotation");
        ImportUniformScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ImportUniformScale");
        bConvertScene_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bConvertScene");
        bForceFrontXAxis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bForceFrontXAxis");
        bConvertSceneUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bConvertSceneUnit");
        
        
        
    }
    
    protected FbxAssetImportData(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/UnrealEd.FbxAssetImportData:ImportTranslation
    static readonly int ImportTranslation_Offset;
    
    public System.DoubleNumerics.Vector3 ImportTranslation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, ImportTranslation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, ImportTranslation_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UnrealEd.FbxAssetImportData:ImportRotation
    static readonly int ImportRotation_Offset;
    
    public UnrealSharp.Rotator ImportRotation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(NativeObject, ImportRotation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(NativeObject, ImportRotation_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UnrealEd.FbxAssetImportData:ImportUniformScale
    static readonly int ImportUniformScale_Offset;
    
    public float ImportUniformScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ImportUniformScale_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ImportUniformScale_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxAssetImportData:bConvertScene
    static readonly int bConvertScene_Offset;
    
    public bool bConvertScene
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bConvertScene_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bConvertScene_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxAssetImportData:bForceFrontXAxis
    static readonly int bForceFrontXAxis_Offset;
    
    public bool bForceFrontXAxis
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bForceFrontXAxis_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bForceFrontXAxis_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxAssetImportData:bConvertSceneUnit
    static readonly int bConvertSceneUnit_Offset;
    
    public bool bConvertSceneUnit
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bConvertSceneUnit_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bConvertSceneUnit_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UnrealEd;

[UClass]
public partial class FbxImportUI : UnrealSharp.CoreUObject.Object
{
    
    static FbxImportUI()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("FbxImportUI");
        
        bIsObjImport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsObjImport");
        OriginalImportType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OriginalImportType");
        MeshTypeToImport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MeshTypeToImport");
        bOverrideFullName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideFullName");
        bOverrideFullName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOverrideFullName");
        bImportAsSkeletal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportAsSkeletal");
        bImportMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportMesh");
        Skeleton_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Skeleton");
        bCreatePhysicsAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCreatePhysicsAsset");
        bCreatePhysicsAsset_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCreatePhysicsAsset");
        PhysicsAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PhysicsAsset");
        bAutoComputeLodDistances_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutoComputeLodDistances");
        bAutoComputeLodDistances_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAutoComputeLodDistances");
        LodDistance0_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LodDistance0");
        LodDistance1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LodDistance1");
        LodDistance2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LodDistance2");
        LodDistance3_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LodDistance3");
        LodDistance4_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LodDistance4");
        LodDistance5_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LodDistance5");
        LodDistance6_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LodDistance6");
        LodDistance7_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LodDistance7");
        MinimumLodNumber_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinimumLodNumber");
        LodNumber_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LodNumber");
        bImportAnimations_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportAnimations");
        bImportAnimations_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bImportAnimations");
        OverrideAnimationName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OverrideAnimationName");
        OverrideAnimationName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "OverrideAnimationName");
        bImportRigidMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportRigidMesh");
        bImportRigidMesh_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bImportRigidMesh");
        bImportMaterials_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportMaterials");
        bImportMaterials_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bImportMaterials");
        bImportTextures_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportTextures");
        bImportTextures_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bImportTextures");
        bResetToFbxOnMaterialConflict_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bResetToFbxOnMaterialConflict");
        bResetToFbxOnMaterialConflict_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bResetToFbxOnMaterialConflict");
        StaticMeshImportData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StaticMeshImportData");
        SkeletalMeshImportData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SkeletalMeshImportData");
        AnimSequenceImportData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AnimSequenceImportData");
        TextureImportData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextureImportData");
        bAutomatedImportShouldDetectType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutomatedImportShouldDetectType");
        
        ResetToDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetToDefault");
        
        
    }
    
    protected FbxImportUI(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/UnrealEd.FbxImportUI:bIsObjImport
    static readonly int bIsObjImport_Offset;
    
    public bool bIsObjImport
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bIsObjImport_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bIsObjImport_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/UnrealEd.FbxImportUI:OriginalImportType
    static readonly int OriginalImportType_Offset;
    
    public UnrealSharp.UnrealEd.EFBXImportType OriginalImportType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.UnrealEd.EFBXImportType>.FromNative(IntPtr.Add(NativeObject, OriginalImportType_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.UnrealEd.EFBXImportType>.ToNative(IntPtr.Add(NativeObject, OriginalImportType_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/UnrealEd.FbxImportUI:MeshTypeToImport
    static readonly int MeshTypeToImport_Offset;
    
    public UnrealSharp.UnrealEd.EFBXImportType MeshTypeToImport
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.UnrealEd.EFBXImportType>.FromNative(IntPtr.Add(NativeObject, MeshTypeToImport_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.UnrealEd.EFBXImportType>.ToNative(IntPtr.Add(NativeObject, MeshTypeToImport_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxImportUI:bOverrideFullName
    static readonly int bOverrideFullName_Offset;
    static readonly IntPtr bOverrideFullName_NativeProperty;
    
    public bool bOverrideFullName
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOverrideFullName_NativeProperty, bOverrideFullName_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bOverrideFullName_NativeProperty, bOverrideFullName_Offset, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxImportUI:bImportAsSkeletal
    static readonly int bImportAsSkeletal_Offset;
    
    public bool bImportAsSkeletal
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportAsSkeletal_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportAsSkeletal_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxImportUI:bImportMesh
    static readonly int bImportMesh_Offset;
    
    public bool bImportMesh
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportMesh_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportMesh_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/UnrealEd.FbxImportUI:Skeleton
    static readonly int Skeleton_Offset;
    
    public UnrealSharp.Engine.Skeleton Skeleton
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.Skeleton>.FromNative(IntPtr.Add(NativeObject, Skeleton_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.Skeleton>.ToNative(IntPtr.Add(NativeObject, Skeleton_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxImportUI:bCreatePhysicsAsset
    static readonly int bCreatePhysicsAsset_Offset;
    static readonly IntPtr bCreatePhysicsAsset_NativeProperty;
    
    public bool bCreatePhysicsAsset
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCreatePhysicsAsset_NativeProperty, bCreatePhysicsAsset_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bCreatePhysicsAsset_NativeProperty, bCreatePhysicsAsset_Offset, value);
        }
    }
    
    // ObjectProperty /Script/UnrealEd.FbxImportUI:PhysicsAsset
    static readonly int PhysicsAsset_Offset;
    
    public UnrealSharp.Engine.PhysicsAsset PhysicsAsset
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.PhysicsAsset>.FromNative(IntPtr.Add(NativeObject, PhysicsAsset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.PhysicsAsset>.ToNative(IntPtr.Add(NativeObject, PhysicsAsset_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxImportUI:bAutoComputeLodDistances
    static readonly int bAutoComputeLodDistances_Offset;
    static readonly IntPtr bAutoComputeLodDistances_NativeProperty;
    
    public bool bAutoComputeLodDistances
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAutoComputeLodDistances_NativeProperty, bAutoComputeLodDistances_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bAutoComputeLodDistances_NativeProperty, bAutoComputeLodDistances_Offset, value);
        }
    }
    
    // FloatProperty /Script/UnrealEd.FbxImportUI:LodDistance0
    static readonly int LodDistance0_Offset;
    
    public float LodDistance0
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LodDistance0_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, LodDistance0_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UnrealEd.FbxImportUI:LodDistance1
    static readonly int LodDistance1_Offset;
    
    public float LodDistance1
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LodDistance1_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, LodDistance1_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UnrealEd.FbxImportUI:LodDistance2
    static readonly int LodDistance2_Offset;
    
    public float LodDistance2
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LodDistance2_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, LodDistance2_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UnrealEd.FbxImportUI:LodDistance3
    static readonly int LodDistance3_Offset;
    
    public float LodDistance3
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LodDistance3_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, LodDistance3_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UnrealEd.FbxImportUI:LodDistance4
    static readonly int LodDistance4_Offset;
    
    public float LodDistance4
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LodDistance4_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, LodDistance4_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UnrealEd.FbxImportUI:LodDistance5
    static readonly int LodDistance5_Offset;
    
    public float LodDistance5
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LodDistance5_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, LodDistance5_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UnrealEd.FbxImportUI:LodDistance6
    static readonly int LodDistance6_Offset;
    
    public float LodDistance6
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LodDistance6_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, LodDistance6_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/UnrealEd.FbxImportUI:LodDistance7
    static readonly int LodDistance7_Offset;
    
    public float LodDistance7
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LodDistance7_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, LodDistance7_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/UnrealEd.FbxImportUI:MinimumLodNumber
    static readonly int MinimumLodNumber_Offset;
    
    public int MinimumLodNumber
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MinimumLodNumber_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MinimumLodNumber_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/UnrealEd.FbxImportUI:LodNumber
    static readonly int LodNumber_Offset;
    
    public int LodNumber
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, LodNumber_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, LodNumber_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxImportUI:bImportAnimations
    static readonly int bImportAnimations_Offset;
    static readonly IntPtr bImportAnimations_NativeProperty;
    
    public bool bImportAnimations
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bImportAnimations_NativeProperty, bImportAnimations_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bImportAnimations_NativeProperty, bImportAnimations_Offset, value);
        }
    }
    
    // StrProperty /Script/UnrealEd.FbxImportUI:OverrideAnimationName
    static readonly int OverrideAnimationName_Offset;
    static readonly IntPtr OverrideAnimationName_NativeProperty;
    
    public string OverrideAnimationName
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,OverrideAnimationName_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,OverrideAnimationName_Offset),0,this,value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxImportUI:bImportRigidMesh
    static readonly int bImportRigidMesh_Offset;
    static readonly IntPtr bImportRigidMesh_NativeProperty;
    
    public bool bImportRigidMesh
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bImportRigidMesh_NativeProperty, bImportRigidMesh_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bImportRigidMesh_NativeProperty, bImportRigidMesh_Offset, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxImportUI:bImportMaterials
    static readonly int bImportMaterials_Offset;
    static readonly IntPtr bImportMaterials_NativeProperty;
    
    public bool bImportMaterials
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bImportMaterials_NativeProperty, bImportMaterials_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bImportMaterials_NativeProperty, bImportMaterials_Offset, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxImportUI:bImportTextures
    static readonly int bImportTextures_Offset;
    static readonly IntPtr bImportTextures_NativeProperty;
    
    public bool bImportTextures
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bImportTextures_NativeProperty, bImportTextures_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bImportTextures_NativeProperty, bImportTextures_Offset, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxImportUI:bResetToFbxOnMaterialConflict
    static readonly int bResetToFbxOnMaterialConflict_Offset;
    static readonly IntPtr bResetToFbxOnMaterialConflict_NativeProperty;
    
    public bool bResetToFbxOnMaterialConflict
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bResetToFbxOnMaterialConflict_NativeProperty, bResetToFbxOnMaterialConflict_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bResetToFbxOnMaterialConflict_NativeProperty, bResetToFbxOnMaterialConflict_Offset, value);
        }
    }
    
    // ObjectProperty /Script/UnrealEd.FbxImportUI:StaticMeshImportData
    static readonly int StaticMeshImportData_Offset;
    
    public UnrealSharp.UnrealEd.FbxStaticMeshImportData StaticMeshImportData
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.UnrealEd.FbxStaticMeshImportData>.FromNative(IntPtr.Add(NativeObject, StaticMeshImportData_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.UnrealEd.FbxStaticMeshImportData>.ToNative(IntPtr.Add(NativeObject, StaticMeshImportData_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/UnrealEd.FbxImportUI:SkeletalMeshImportData
    static readonly int SkeletalMeshImportData_Offset;
    
    public UnrealSharp.UnrealEd.FbxSkeletalMeshImportData SkeletalMeshImportData
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.UnrealEd.FbxSkeletalMeshImportData>.FromNative(IntPtr.Add(NativeObject, SkeletalMeshImportData_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.UnrealEd.FbxSkeletalMeshImportData>.ToNative(IntPtr.Add(NativeObject, SkeletalMeshImportData_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/UnrealEd.FbxImportUI:AnimSequenceImportData
    static readonly int AnimSequenceImportData_Offset;
    
    public UnrealSharp.UnrealEd.FbxAnimSequenceImportData AnimSequenceImportData
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.UnrealEd.FbxAnimSequenceImportData>.FromNative(IntPtr.Add(NativeObject, AnimSequenceImportData_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.UnrealEd.FbxAnimSequenceImportData>.ToNative(IntPtr.Add(NativeObject, AnimSequenceImportData_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/UnrealEd.FbxImportUI:TextureImportData
    static readonly int TextureImportData_Offset;
    
    public UnrealSharp.UnrealEd.FbxTextureImportData TextureImportData
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.UnrealEd.FbxTextureImportData>.FromNative(IntPtr.Add(NativeObject, TextureImportData_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.UnrealEd.FbxTextureImportData>.ToNative(IntPtr.Add(NativeObject, TextureImportData_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxImportUI:bAutomatedImportShouldDetectType
    static readonly int bAutomatedImportShouldDetectType_Offset;
    
    public bool bAutomatedImportShouldDetectType
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAutomatedImportShouldDetectType_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAutomatedImportShouldDetectType_Offset), 0, this, value);
        }
    }
    
    // Function /Script/UnrealEd.FbxImportUI:ResetToDefault
    static readonly IntPtr ResetToDefault_NativeFunction;
    
    public void ResetToDefault()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetToDefault_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
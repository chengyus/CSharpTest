// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UnrealEd;

[UClass]
abstract public partial class FbxMeshImportData : UnrealSharp.UnrealEd.FbxAssetImportData
{
    
    static FbxMeshImportData()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("FbxMeshImportData");
        
        bTransformVertexToAbsolute_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bTransformVertexToAbsolute");
        bBakePivotInVertex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bBakePivotInVertex");
        bImportMeshLODs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportMeshLODs");
        bImportMeshLODs_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bImportMeshLODs");
        NormalImportMethod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NormalImportMethod");
        NormalGenerationMethod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NormalGenerationMethod");
        bComputeWeightedNormals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bComputeWeightedNormals");
        bComputeWeightedNormals_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bComputeWeightedNormals");
        bReorderMaterialToFbxOrder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReorderMaterialToFbxOrder");
        
        
        
    }
    
    protected FbxMeshImportData(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/UnrealEd.FbxMeshImportData:bTransformVertexToAbsolute
    static readonly int bTransformVertexToAbsolute_Offset;
    
    public bool bTransformVertexToAbsolute
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bTransformVertexToAbsolute_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bTransformVertexToAbsolute_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxMeshImportData:bBakePivotInVertex
    static readonly int bBakePivotInVertex_Offset;
    
    public bool bBakePivotInVertex
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bBakePivotInVertex_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bBakePivotInVertex_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxMeshImportData:bImportMeshLODs
    static readonly int bImportMeshLODs_Offset;
    static readonly IntPtr bImportMeshLODs_NativeProperty;
    
    public bool bImportMeshLODs
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bImportMeshLODs_NativeProperty, bImportMeshLODs_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bImportMeshLODs_NativeProperty, bImportMeshLODs_Offset, value);
        }
    }
    
    // ByteProperty /Script/UnrealEd.FbxMeshImportData:NormalImportMethod
    static readonly int NormalImportMethod_Offset;
    
    public UnrealSharp.UnrealEd.EFBXNormalImportMethod NormalImportMethod
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.UnrealEd.EFBXNormalImportMethod>.FromNative(IntPtr.Add(NativeObject, NormalImportMethod_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.UnrealEd.EFBXNormalImportMethod>.ToNative(IntPtr.Add(NativeObject, NormalImportMethod_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/UnrealEd.FbxMeshImportData:NormalGenerationMethod
    static readonly int NormalGenerationMethod_Offset;
    
    public UnrealSharp.UnrealEd.EFBXNormalGenerationMethod NormalGenerationMethod
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.UnrealEd.EFBXNormalGenerationMethod>.FromNative(IntPtr.Add(NativeObject, NormalGenerationMethod_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.UnrealEd.EFBXNormalGenerationMethod>.ToNative(IntPtr.Add(NativeObject, NormalGenerationMethod_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxMeshImportData:bComputeWeightedNormals
    static readonly int bComputeWeightedNormals_Offset;
    static readonly IntPtr bComputeWeightedNormals_NativeProperty;
    
    public bool bComputeWeightedNormals
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bComputeWeightedNormals_NativeProperty, bComputeWeightedNormals_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bComputeWeightedNormals_NativeProperty, bComputeWeightedNormals_Offset, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxMeshImportData:bReorderMaterialToFbxOrder
    static readonly int bReorderMaterialToFbxOrder_Offset;
    
    public bool bReorderMaterialToFbxOrder
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bReorderMaterialToFbxOrder_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bReorderMaterialToFbxOrder_Offset), 0, this, value);
        }
    }
    
    
}
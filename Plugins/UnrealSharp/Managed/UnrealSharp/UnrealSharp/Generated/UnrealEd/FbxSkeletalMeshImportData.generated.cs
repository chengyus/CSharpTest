// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UnrealEd;

[UClass]
public partial class FbxSkeletalMeshImportData : UnrealSharp.UnrealEd.FbxMeshImportData
{
    
    static FbxSkeletalMeshImportData()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("FbxSkeletalMeshImportData");
        
        VertexColorImportOption_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VertexColorImportOption");
        VertexOverrideColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VertexOverrideColor");
        
        
        
    }
    
    protected FbxSkeletalMeshImportData(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ByteProperty /Script/UnrealEd.FbxSkeletalMeshImportData:VertexColorImportOption
    static readonly int VertexColorImportOption_Offset;
    
    public UnrealSharp.UnrealEd.EVertexColorImportOption VertexColorImportOption
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.UnrealEd.EVertexColorImportOption>.FromNative(IntPtr.Add(NativeObject, VertexColorImportOption_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.UnrealEd.EVertexColorImportOption>.ToNative(IntPtr.Add(NativeObject, VertexColorImportOption_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UnrealEd.FbxSkeletalMeshImportData:VertexOverrideColor
    static readonly int VertexOverrideColor_Offset;
    
    public UnrealSharp.CoreUObject.Color VertexOverrideColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, VertexOverrideColor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(NativeObject, VertexOverrideColor_Offset), 0, this, value);
        }
    }
    
    
}
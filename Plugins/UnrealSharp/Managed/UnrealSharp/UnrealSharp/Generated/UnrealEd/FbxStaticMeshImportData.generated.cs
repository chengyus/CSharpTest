// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UnrealEd;

[UClass]
public partial class FbxStaticMeshImportData : UnrealSharp.UnrealEd.FbxMeshImportData
{
    
    static FbxStaticMeshImportData()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("FbxStaticMeshImportData");
        
        StaticMeshLODGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StaticMeshLODGroup");
        VertexColorImportOption_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VertexColorImportOption");
        VertexOverrideColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VertexOverrideColor");
        bRemoveDegenerates_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRemoveDegenerates");
        bRemoveDegenerates_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bRemoveDegenerates");
        bBuildReversedIndexBuffer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bBuildReversedIndexBuffer");
        bBuildReversedIndexBuffer_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bBuildReversedIndexBuffer");
        bBuildNanite_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bBuildNanite");
        bBuildNanite_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bBuildNanite");
        bGenerateLightmapUVs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bGenerateLightmapUVs");
        bGenerateLightmapUVs_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bGenerateLightmapUVs");
        bOneConvexHullPerUCX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOneConvexHullPerUCX");
        bOneConvexHullPerUCX_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOneConvexHullPerUCX");
        bAutoGenerateCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutoGenerateCollision");
        bAutoGenerateCollision_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAutoGenerateCollision");
        bCombineMeshes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCombineMeshes");
        bCombineMeshes_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCombineMeshes");
        DistanceFieldResolutionScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DistanceFieldResolutionScale");
        
        
        
    }
    
    protected FbxStaticMeshImportData(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // NameProperty /Script/UnrealEd.FbxStaticMeshImportData:StaticMeshLODGroup
    static readonly int StaticMeshLODGroup_Offset;
    
    public Name StaticMeshLODGroup
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, StaticMeshLODGroup_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, StaticMeshLODGroup_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/UnrealEd.FbxStaticMeshImportData:VertexColorImportOption
    static readonly int VertexColorImportOption_Offset;
    
    public UnrealSharp.UnrealEd.EVertexColorImportOption VertexColorImportOption
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.UnrealEd.EVertexColorImportOption>.FromNative(IntPtr.Add(NativeObject, VertexColorImportOption_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.UnrealEd.EVertexColorImportOption>.ToNative(IntPtr.Add(NativeObject, VertexColorImportOption_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/UnrealEd.FbxStaticMeshImportData:VertexOverrideColor
    static readonly int VertexOverrideColor_Offset;
    
    public UnrealSharp.CoreUObject.Color VertexOverrideColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, VertexOverrideColor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(NativeObject, VertexOverrideColor_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxStaticMeshImportData:bRemoveDegenerates
    static readonly int bRemoveDegenerates_Offset;
    static readonly IntPtr bRemoveDegenerates_NativeProperty;
    
    public bool bRemoveDegenerates
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bRemoveDegenerates_NativeProperty, bRemoveDegenerates_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bRemoveDegenerates_NativeProperty, bRemoveDegenerates_Offset, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxStaticMeshImportData:bBuildReversedIndexBuffer
    static readonly int bBuildReversedIndexBuffer_Offset;
    static readonly IntPtr bBuildReversedIndexBuffer_NativeProperty;
    
    public bool bBuildReversedIndexBuffer
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bBuildReversedIndexBuffer_NativeProperty, bBuildReversedIndexBuffer_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bBuildReversedIndexBuffer_NativeProperty, bBuildReversedIndexBuffer_Offset, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxStaticMeshImportData:bBuildNanite
    static readonly int bBuildNanite_Offset;
    static readonly IntPtr bBuildNanite_NativeProperty;
    
    public bool bBuildNanite
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bBuildNanite_NativeProperty, bBuildNanite_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bBuildNanite_NativeProperty, bBuildNanite_Offset, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxStaticMeshImportData:bGenerateLightmapUVs
    static readonly int bGenerateLightmapUVs_Offset;
    static readonly IntPtr bGenerateLightmapUVs_NativeProperty;
    
    public bool bGenerateLightmapUVs
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bGenerateLightmapUVs_NativeProperty, bGenerateLightmapUVs_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bGenerateLightmapUVs_NativeProperty, bGenerateLightmapUVs_Offset, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxStaticMeshImportData:bOneConvexHullPerUCX
    static readonly int bOneConvexHullPerUCX_Offset;
    static readonly IntPtr bOneConvexHullPerUCX_NativeProperty;
    
    public bool bOneConvexHullPerUCX
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOneConvexHullPerUCX_NativeProperty, bOneConvexHullPerUCX_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bOneConvexHullPerUCX_NativeProperty, bOneConvexHullPerUCX_Offset, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxStaticMeshImportData:bAutoGenerateCollision
    static readonly int bAutoGenerateCollision_Offset;
    static readonly IntPtr bAutoGenerateCollision_NativeProperty;
    
    public bool bAutoGenerateCollision
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAutoGenerateCollision_NativeProperty, bAutoGenerateCollision_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bAutoGenerateCollision_NativeProperty, bAutoGenerateCollision_Offset, value);
        }
    }
    
    // BoolProperty /Script/UnrealEd.FbxStaticMeshImportData:bCombineMeshes
    static readonly int bCombineMeshes_Offset;
    static readonly IntPtr bCombineMeshes_NativeProperty;
    
    public bool bCombineMeshes
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCombineMeshes_NativeProperty, bCombineMeshes_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bCombineMeshes_NativeProperty, bCombineMeshes_Offset, value);
        }
    }
    
    // FloatProperty /Script/UnrealEd.FbxStaticMeshImportData:DistanceFieldResolutionScale
    static readonly int DistanceFieldResolutionScale_Offset;
    
    public float DistanceFieldResolutionScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DistanceFieldResolutionScale_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, DistanceFieldResolutionScale_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.UnrealEd;

[UClass]
public partial class UDIMTextureFunctionLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static UDIMTextureFunctionLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("UDIMTextureFunctionLibrary");
        
        
        MakeUDIMVirtualTextureFromTexture2Ds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeUDIMVirtualTextureFromTexture2Ds");
        MakeUDIMVirtualTextureFromTexture2Ds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeUDIMVirtualTextureFromTexture2Ds_NativeFunction);
        MakeUDIMVirtualTextureFromTexture2Ds_OutputPathName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeUDIMVirtualTextureFromTexture2Ds_NativeFunction, "OutputPathName");
        MakeUDIMVirtualTextureFromTexture2Ds_SourceTextures_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeUDIMVirtualTextureFromTexture2Ds_NativeFunction, "SourceTextures");
        MakeUDIMVirtualTextureFromTexture2Ds_SourceTextures_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(MakeUDIMVirtualTextureFromTexture2Ds_NativeFunction, "SourceTextures");
        MakeUDIMVirtualTextureFromTexture2Ds_BlockCoords_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeUDIMVirtualTextureFromTexture2Ds_NativeFunction, "BlockCoords");
        MakeUDIMVirtualTextureFromTexture2Ds_BlockCoords_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(MakeUDIMVirtualTextureFromTexture2Ds_NativeFunction, "BlockCoords");
        MakeUDIMVirtualTextureFromTexture2Ds_bKeepExistingSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeUDIMVirtualTextureFromTexture2Ds_NativeFunction, "bKeepExistingSettings");
        MakeUDIMVirtualTextureFromTexture2Ds_bCheckOutAndSave_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeUDIMVirtualTextureFromTexture2Ds_NativeFunction, "bCheckOutAndSave");
        MakeUDIMVirtualTextureFromTexture2Ds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeUDIMVirtualTextureFromTexture2Ds_NativeFunction, "ReturnValue");
        
        
    }
    
    protected UDIMTextureFunctionLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/UnrealEd.UDIMTextureFunctionLibrary:MakeUDIMVirtualTextureFromTexture2Ds
    static readonly IntPtr MakeUDIMVirtualTextureFromTexture2Ds_NativeFunction;
    static readonly int MakeUDIMVirtualTextureFromTexture2Ds_ParamsSize;
    static readonly int MakeUDIMVirtualTextureFromTexture2Ds_OutputPathName_Offset;
    static readonly int MakeUDIMVirtualTextureFromTexture2Ds_SourceTextures_Offset;
    static readonly int MakeUDIMVirtualTextureFromTexture2Ds_SourceTextures_ElementSize;
    static readonly int MakeUDIMVirtualTextureFromTexture2Ds_BlockCoords_Offset;
    static readonly int MakeUDIMVirtualTextureFromTexture2Ds_BlockCoords_ElementSize;
    static readonly int MakeUDIMVirtualTextureFromTexture2Ds_bKeepExistingSettings_Offset;
    static readonly int MakeUDIMVirtualTextureFromTexture2Ds_bCheckOutAndSave_Offset;
    static readonly int MakeUDIMVirtualTextureFromTexture2Ds_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Texture2D MakeUDIMVirtualTextureFromTexture2Ds(string outputPathName, System.Collections.Generic.IList<UnrealSharp.Engine.Texture2D> sourceTextures, System.Collections.Generic.IList<UnrealSharp.CoreUObject.IntPoint> blockCoords, bool bKeepExistingSettings = false, bool bCheckOutAndSave = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeUDIMVirtualTextureFromTexture2Ds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr OutputPathName_NativePtr = IntPtr.Add(ParamsBuffer,MakeUDIMVirtualTextureFromTexture2Ds_OutputPathName_Offset);
            StringMarshaller.ToNative(OutputPathName_NativePtr,0,null,outputPathName);
            IntPtr SourceTextures_NativeBuffer = IntPtr.Add(ParamsBuffer, MakeUDIMVirtualTextureFromTexture2Ds_SourceTextures_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Texture2D> SourceTextures_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Texture2D>(1, ObjectMarshaller<UnrealSharp.Engine.Texture2D>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Texture2D>.FromNative, MakeUDIMVirtualTextureFromTexture2Ds_SourceTextures_ElementSize);
            SourceTextures_Marshaler.ToNative(SourceTextures_NativeBuffer, 0, null, sourceTextures);
            IntPtr BlockCoords_NativeBuffer = IntPtr.Add(ParamsBuffer, MakeUDIMVirtualTextureFromTexture2Ds_BlockCoords_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.IntPoint> BlockCoords_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.IntPoint>(1, BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative, MakeUDIMVirtualTextureFromTexture2Ds_BlockCoords_ElementSize);
            BlockCoords_Marshaler.ToNative(BlockCoords_NativeBuffer, 0, null, blockCoords);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MakeUDIMVirtualTextureFromTexture2Ds_bKeepExistingSettings_Offset), 0, null, bKeepExistingSettings);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MakeUDIMVirtualTextureFromTexture2Ds_bCheckOutAndSave_Offset), 0, null, bCheckOutAndSave);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeUDIMVirtualTextureFromTexture2Ds_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Texture2D returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Texture2D>.FromNative(IntPtr.Add(ParamsBuffer, MakeUDIMVirtualTextureFromTexture2Ds_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(OutputPathName_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.VREditor;

[UClass]
public partial class VREditorInteractor : UnrealSharp.ViewportInteraction.ViewportInteractor
{
    
    static VREditorInteractor()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("VREditorInteractor");
        
        HandMeshComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HandMeshComponent");
        
        TryOverrideControllerType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TryOverrideControllerType");
        TryOverrideControllerType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TryOverrideControllerType_NativeFunction);
        TryOverrideControllerType_InControllerType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TryOverrideControllerType_NativeFunction, "InControllerType");
        TryOverrideControllerType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TryOverrideControllerType_NativeFunction, "ReturnValue");
        SetForceShowLaser_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetForceShowLaser");
        SetForceShowLaser_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetForceShowLaser_NativeFunction);
        SetForceShowLaser_bInForceShow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForceShowLaser_NativeFunction, "bInForceShow");
        SetForceLaserColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetForceLaserColor");
        SetForceLaserColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetForceLaserColor_NativeFunction);
        SetForceLaserColor_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForceLaserColor_NativeFunction, "InColor");
        SetControllerType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControllerType");
        SetControllerType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControllerType_NativeFunction);
        SetControllerType_InControllerType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControllerType_NativeFunction, "InControllerType");
        SetControllerHandSide_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControllerHandSide");
        SetControllerHandSide_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControllerHandSide_NativeFunction);
        SetControllerHandSide_InControllerHandSide_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControllerHandSide_NativeFunction, "InControllerHandSide");
        ReplaceHandMeshComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReplaceHandMeshComponent");
        ReplaceHandMeshComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReplaceHandMeshComponent_NativeFunction);
        ReplaceHandMeshComponent_NewMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceHandMeshComponent_NativeFunction, "NewMesh");
        ReplaceHandMeshComponent_MeshScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceHandMeshComponent_NativeFunction, "MeshScale");
        IsTouchingTrackpad_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsTouchingTrackpad");
        IsTouchingTrackpad_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsTouchingTrackpad_NativeFunction);
        IsTouchingTrackpad_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsTouchingTrackpad_NativeFunction, "ReturnValue");
        IsHoveringOverUI_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsHoveringOverUI");
        IsHoveringOverUI_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsHoveringOverUI_NativeFunction);
        IsHoveringOverUI_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsHoveringOverUI_NativeFunction, "ReturnValue");
        IsClickingOnUI_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsClickingOnUI");
        IsClickingOnUI_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsClickingOnUI_NativeFunction);
        IsClickingOnUI_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsClickingOnUI_NativeFunction, "ReturnValue");
        GetTrackpadPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTrackpadPosition");
        GetTrackpadPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTrackpadPosition_NativeFunction);
        GetTrackpadPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTrackpadPosition_NativeFunction, "ReturnValue");
        GetTeleportActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTeleportActor");
        GetTeleportActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTeleportActor_NativeFunction);
        GetTeleportActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTeleportActor_NativeFunction, "ReturnValue");
        GetSelectAndMoveTriggerValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectAndMoveTriggerValue");
        GetSelectAndMoveTriggerValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectAndMoveTriggerValue_NativeFunction);
        GetSelectAndMoveTriggerValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectAndMoveTriggerValue_NativeFunction, "ReturnValue");
        GetMotionControllerComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMotionControllerComponent");
        GetMotionControllerComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMotionControllerComponent_NativeFunction);
        GetMotionControllerComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMotionControllerComponent_NativeFunction, "ReturnValue");
        GetLastTrackpadPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLastTrackpadPosition");
        GetLastTrackpadPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLastTrackpadPosition_NativeFunction);
        GetLastTrackpadPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLastTrackpadPosition_NativeFunction, "ReturnValue");
        GetLaserStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLaserStart");
        GetLaserStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLaserStart_NativeFunction);
        GetLaserStart_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLaserStart_NativeFunction, "ReturnValue");
        GetLaserEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLaserEnd");
        GetLaserEnd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLaserEnd_NativeFunction);
        GetLaserEnd_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLaserEnd_NativeFunction, "ReturnValue");
        GetHMDDeviceType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHMDDeviceType");
        GetHMDDeviceType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHMDDeviceType_NativeFunction);
        GetHMDDeviceType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHMDDeviceType_NativeFunction, "ReturnValue");
        GetControllerType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControllerType");
        GetControllerType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControllerType_NativeFunction);
        GetControllerType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerType_NativeFunction, "ReturnValue");
        GetControllerSide_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControllerSide");
        GetControllerSide_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControllerSide_NativeFunction);
        GetControllerSide_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerSide_NativeFunction, "ReturnValue");
        GetControllerHandSide_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControllerHandSide");
        GetControllerHandSide_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControllerHandSide_NativeFunction);
        GetControllerHandSide_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerHandSide_NativeFunction, "ReturnValue");
        
        IntPtr SetupComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetupComponent");
        SetupComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetupComponent_NativeFunction);
        SetupComponent_OwningActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetupComponent_NativeFunction, "OwningActor");
        
        IntPtr Init_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Init");
        Init_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Init_NativeFunction);
        Init_InVRMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Init_NativeFunction, "InVRMode");
        
        IntPtr GetSlideDelta_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSlideDelta");
        GetSlideDelta_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSlideDelta_NativeFunction);
        GetSlideDelta_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSlideDelta_NativeFunction, "ReturnValue");
        
        
    }
    
    protected VREditorInteractor(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/VREditor.VREditorInteractor:HandMeshComponent
    static readonly int HandMeshComponent_Offset;
    
    public UnrealSharp.Engine.StaticMeshComponent HandMeshComponent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.StaticMeshComponent>.FromNative(IntPtr.Add(NativeObject, HandMeshComponent_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.StaticMeshComponent>.ToNative(IntPtr.Add(NativeObject, HandMeshComponent_Offset), 0, this, value);
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:TryOverrideControllerType
    static readonly IntPtr TryOverrideControllerType_NativeFunction;
    static readonly int TryOverrideControllerType_ParamsSize;
    static readonly int TryOverrideControllerType_InControllerType_Offset;
    static readonly int TryOverrideControllerType_ReturnValue_Offset;
    
    public bool TryOverrideControllerType(UnrealSharp.VREditor.EControllerType inControllerType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TryOverrideControllerType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.VREditor.EControllerType>.ToNative(IntPtr.Add(ParamsBuffer, TryOverrideControllerType_InControllerType_Offset), 0, null, inControllerType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, TryOverrideControllerType_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, TryOverrideControllerType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:SetForceShowLaser
    static readonly IntPtr SetForceShowLaser_NativeFunction;
    static readonly int SetForceShowLaser_ParamsSize;
    static readonly int SetForceShowLaser_bInForceShow_Offset;
    
    public void SetForceShowLaser(bool bInForceShow)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetForceShowLaser_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetForceShowLaser_bInForceShow_Offset), 0, null, bInForceShow);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetForceShowLaser_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:SetForceLaserColor
    static readonly IntPtr SetForceLaserColor_NativeFunction;
    static readonly int SetForceLaserColor_ParamsSize;
    static readonly int SetForceLaserColor_InColor_Offset;
    
    public void SetForceLaserColor(UnrealSharp.CoreUObject.LinearColor inColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetForceLaserColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetForceLaserColor_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetForceLaserColor_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:SetControllerType
    static readonly IntPtr SetControllerType_NativeFunction;
    static readonly int SetControllerType_ParamsSize;
    static readonly int SetControllerType_InControllerType_Offset;
    
    public void SetControllerType(UnrealSharp.VREditor.EControllerType inControllerType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControllerType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.VREditor.EControllerType>.ToNative(IntPtr.Add(ParamsBuffer, SetControllerType_InControllerType_Offset), 0, null, inControllerType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControllerType_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:SetControllerHandSide
    static readonly IntPtr SetControllerHandSide_NativeFunction;
    static readonly int SetControllerHandSide_ParamsSize;
    static readonly int SetControllerHandSide_InControllerHandSide_Offset;
    
    public void SetControllerHandSide(Name inControllerHandSide)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControllerHandSide_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetControllerHandSide_InControllerHandSide_Offset), 0, null, inControllerHandSide);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControllerHandSide_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:ReplaceHandMeshComponent
    static readonly IntPtr ReplaceHandMeshComponent_NativeFunction;
    static readonly int ReplaceHandMeshComponent_ParamsSize;
    static readonly int ReplaceHandMeshComponent_NewMesh_Offset;
    static readonly int ReplaceHandMeshComponent_MeshScale_Offset;
    
    public void ReplaceHandMeshComponent(UnrealSharp.Engine.StaticMesh newMesh)
    {
        System.DoubleNumerics.Vector3 meshScale = new System.DoubleNumerics.Vector3
        {
            X=1.000000f,
            Y=1.000000f,
            Z=1.000000f,
        };
        ReplaceHandMeshComponent(newMesh, meshScale);
    }
    
    public void ReplaceHandMeshComponent(UnrealSharp.Engine.StaticMesh newMesh, System.DoubleNumerics.Vector3 meshScale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReplaceHandMeshComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.StaticMesh>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceHandMeshComponent_NewMesh_Offset), 0, null, newMesh);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceHandMeshComponent_MeshScale_Offset), 0, null, meshScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReplaceHandMeshComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:IsTouchingTrackpad
    static readonly IntPtr IsTouchingTrackpad_NativeFunction;
    static readonly int IsTouchingTrackpad_ParamsSize;
    static readonly int IsTouchingTrackpad_ReturnValue_Offset;
    
    public bool IsTouchingTrackpad()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsTouchingTrackpad_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsTouchingTrackpad_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsTouchingTrackpad_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:IsHoveringOverUI
    static readonly IntPtr IsHoveringOverUI_NativeFunction;
    static readonly int IsHoveringOverUI_ParamsSize;
    static readonly int IsHoveringOverUI_ReturnValue_Offset;
    
    public bool IsHoveringOverUI()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsHoveringOverUI_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsHoveringOverUI_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsHoveringOverUI_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:IsClickingOnUI
    static readonly IntPtr IsClickingOnUI_NativeFunction;
    static readonly int IsClickingOnUI_ParamsSize;
    static readonly int IsClickingOnUI_ReturnValue_Offset;
    
    public bool IsClickingOnUI()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsClickingOnUI_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsClickingOnUI_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsClickingOnUI_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:GetTrackpadPosition
    static readonly IntPtr GetTrackpadPosition_NativeFunction;
    static readonly int GetTrackpadPosition_ParamsSize;
    static readonly int GetTrackpadPosition_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 GetTrackpadPosition()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTrackpadPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTrackpadPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetTrackpadPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:GetTeleportActor
    static readonly IntPtr GetTeleportActor_NativeFunction;
    static readonly int GetTeleportActor_ParamsSize;
    static readonly int GetTeleportActor_ReturnValue_Offset;
    
    public UnrealSharp.VREditor.VREditorTeleporter GetTeleportActor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTeleportActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTeleportActor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.VREditor.VREditorTeleporter returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.VREditor.VREditorTeleporter>.FromNative(IntPtr.Add(ParamsBuffer, GetTeleportActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:GetSelectAndMoveTriggerValue
    static readonly IntPtr GetSelectAndMoveTriggerValue_NativeFunction;
    static readonly int GetSelectAndMoveTriggerValue_ParamsSize;
    static readonly int GetSelectAndMoveTriggerValue_ReturnValue_Offset;
    
    public float GetSelectAndMoveTriggerValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectAndMoveTriggerValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSelectAndMoveTriggerValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetSelectAndMoveTriggerValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:GetMotionControllerComponent
    static readonly IntPtr GetMotionControllerComponent_NativeFunction;
    static readonly int GetMotionControllerComponent_ParamsSize;
    static readonly int GetMotionControllerComponent_ReturnValue_Offset;
    
    public UnrealSharp.HeadMountedDisplay.MotionControllerComponent GetMotionControllerComponent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMotionControllerComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMotionControllerComponent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.HeadMountedDisplay.MotionControllerComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.HeadMountedDisplay.MotionControllerComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetMotionControllerComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:GetLastTrackpadPosition
    static readonly IntPtr GetLastTrackpadPosition_NativeFunction;
    static readonly int GetLastTrackpadPosition_ParamsSize;
    static readonly int GetLastTrackpadPosition_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 GetLastTrackpadPosition()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLastTrackpadPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLastTrackpadPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetLastTrackpadPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:GetLaserStart
    static readonly IntPtr GetLaserStart_NativeFunction;
    static readonly int GetLaserStart_ParamsSize;
    static readonly int GetLaserStart_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetLaserStart()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLaserStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLaserStart_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLaserStart_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:GetLaserEnd
    static readonly IntPtr GetLaserEnd_NativeFunction;
    static readonly int GetLaserEnd_ParamsSize;
    static readonly int GetLaserEnd_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetLaserEnd()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLaserEnd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLaserEnd_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLaserEnd_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:GetHMDDeviceType
    static readonly IntPtr GetHMDDeviceType_NativeFunction;
    static readonly int GetHMDDeviceType_ParamsSize;
    static readonly int GetHMDDeviceType_ReturnValue_Offset;
    
    public Name GetHMDDeviceType()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHMDDeviceType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHMDDeviceType_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetHMDDeviceType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:GetControllerType
    static readonly IntPtr GetControllerType_NativeFunction;
    static readonly int GetControllerType_ParamsSize;
    static readonly int GetControllerType_ReturnValue_Offset;
    
    public UnrealSharp.VREditor.EControllerType GetControllerType()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControllerType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControllerType_NativeFunction, ParamsBuffer);
            
            UnrealSharp.VREditor.EControllerType returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.VREditor.EControllerType>.FromNative(IntPtr.Add(ParamsBuffer, GetControllerType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:GetControllerSide
    static readonly IntPtr GetControllerSide_NativeFunction;
    static readonly int GetControllerSide_ParamsSize;
    static readonly int GetControllerSide_ReturnValue_Offset;
    
    public UnrealSharp.InputCore.EControllerHand GetControllerSide()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControllerSide_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControllerSide_NativeFunction, ParamsBuffer);
            
            UnrealSharp.InputCore.EControllerHand returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.InputCore.EControllerHand>.FromNative(IntPtr.Add(ParamsBuffer, GetControllerSide_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:GetControllerHandSide
    static readonly IntPtr GetControllerHandSide_NativeFunction;
    static readonly int GetControllerHandSide_ParamsSize;
    static readonly int GetControllerHandSide_ReturnValue_Offset;
    
    public Name GetControllerHandSide()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControllerHandSide_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControllerHandSide_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetControllerHandSide_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:UpdateHandMeshRelativeTransform
    IntPtr UpdateHandMeshRelativeTransform_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void UpdateHandMeshRelativeTransform()
    {
        unsafe
        {
            if (UpdateHandMeshRelativeTransform_NativeFunction == IntPtr.Zero)
            {
                UpdateHandMeshRelativeTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "UpdateHandMeshRelativeTransform");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UpdateHandMeshRelativeTransform_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void UpdateHandMeshRelativeTransform_Implementation()
    {
    }
    void Invoke_UpdateHandMeshRelativeTransform(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UpdateHandMeshRelativeTransform_Implementation();
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:SetupComponent
    IntPtr SetupComponent_NativeFunction;
    static readonly int SetupComponent_ParamsSize;
    static readonly int SetupComponent_OwningActor_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void SetupComponent(UnrealSharp.Engine.Actor owningActor)
    {
        unsafe
        {
            if (SetupComponent_NativeFunction == IntPtr.Zero)
            {
                SetupComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "SetupComponent");
            }
            byte* ParamsBufferAllocation = stackalloc byte[SetupComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, SetupComponent_OwningActor_Offset), 0, null, owningActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetupComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void SetupComponent_Implementation(UnrealSharp.Engine.Actor owningActor)
    {
    }
    void Invoke_SetupComponent(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor owningActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, SetupComponent_OwningActor_Offset), 0, null);
            SetupComponent_Implementation(owningActor);
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:Init
    IntPtr Init_NativeFunction;
    static readonly int Init_ParamsSize;
    static readonly int Init_InVRMode_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void Init(UnrealSharp.VREditor.VREditorMode inVRMode)
    {
        unsafe
        {
            if (Init_NativeFunction == IntPtr.Zero)
            {
                Init_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Init");
            }
            byte* ParamsBufferAllocation = stackalloc byte[Init_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VREditor.VREditorMode>.ToNative(IntPtr.Add(ParamsBuffer, Init_InVRMode_Offset), 0, null, inVRMode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Init_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void Init_Implementation(UnrealSharp.VREditor.VREditorMode inVRMode)
    {
    }
    void Invoke_Init(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.VREditor.VREditorMode inVRMode = ObjectMarshaller<UnrealSharp.VREditor.VREditorMode>.FromNative(IntPtr.Add(buffer, Init_InVRMode_Offset), 0, null);
            Init_Implementation(inVRMode);
        }
    }
    
    // Function /Script/VREditor.VREditorInteractor:GetSlideDelta
    IntPtr GetSlideDelta_NativeFunction;
    static readonly int GetSlideDelta_ParamsSize;
    static readonly int GetSlideDelta_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual float GetSlideDelta()
    {
        unsafe
        {
            if (GetSlideDelta_NativeFunction == IntPtr.Zero)
            {
                GetSlideDelta_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetSlideDelta");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetSlideDelta_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSlideDelta_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetSlideDelta_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual float GetSlideDelta_Implementation()
    {
        return default(float);
    }
    void Invoke_GetSlideDelta(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float returnValue = GetSlideDelta_Implementation();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    
}
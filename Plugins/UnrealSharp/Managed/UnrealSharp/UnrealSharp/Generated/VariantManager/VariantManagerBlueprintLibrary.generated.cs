// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.VariantManager;

[UClass]
public partial class VariantManagerLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static VariantManagerLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("VariantManagerBlueprintLibrary");
        
        
        SetValueVector4_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueVector4");
        SetValueVector4_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueVector4_NativeFunction);
        SetValueVector4_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueVector4_NativeFunction, "Property");
        SetValueVector4_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueVector4_NativeFunction, "InValue");
        SetValueVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueVector2D");
        SetValueVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueVector2D_NativeFunction);
        SetValueVector2D_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueVector2D_NativeFunction, "Property");
        SetValueVector2D_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueVector2D_NativeFunction, "InValue");
        SetValueVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueVector");
        SetValueVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueVector_NativeFunction);
        SetValueVector_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueVector_NativeFunction, "Property");
        SetValueVector_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueVector_NativeFunction, "InValue");
        SetValueString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueString");
        SetValueString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueString_NativeFunction);
        SetValueString_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueString_NativeFunction, "Property");
        SetValueString_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueString_NativeFunction, "InValue");
        SetValueRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueRotator");
        SetValueRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueRotator_NativeFunction);
        SetValueRotator_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueRotator_NativeFunction, "Property");
        SetValueRotator_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueRotator_NativeFunction, "InValue");
        SetValueQuat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueQuat");
        SetValueQuat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueQuat_NativeFunction);
        SetValueQuat_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueQuat_NativeFunction, "Property");
        SetValueQuat_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueQuat_NativeFunction, "InValue");
        SetValueObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueObject");
        SetValueObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueObject_NativeFunction);
        SetValueObject_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueObject_NativeFunction, "Property");
        SetValueObject_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueObject_NativeFunction, "InValue");
        SetValueLinearColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueLinearColor");
        SetValueLinearColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueLinearColor_NativeFunction);
        SetValueLinearColor_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueLinearColor_NativeFunction, "Property");
        SetValueLinearColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueLinearColor_NativeFunction, "InValue");
        SetValueIntPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueIntPoint");
        SetValueIntPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueIntPoint_NativeFunction);
        SetValueIntPoint_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueIntPoint_NativeFunction, "Property");
        SetValueIntPoint_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueIntPoint_NativeFunction, "InValue");
        SetValueInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueInt");
        SetValueInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueInt_NativeFunction);
        SetValueInt_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueInt_NativeFunction, "Property");
        SetValueInt_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueInt_NativeFunction, "InValue");
        SetValueFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueFloat");
        SetValueFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueFloat_NativeFunction);
        SetValueFloat_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueFloat_NativeFunction, "Property");
        SetValueFloat_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueFloat_NativeFunction, "InValue");
        SetValueColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueColor");
        SetValueColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueColor_NativeFunction);
        SetValueColor_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueColor_NativeFunction, "Property");
        SetValueColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueColor_NativeFunction, "InValue");
        SetValueBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueBool");
        SetValueBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueBool_NativeFunction);
        SetValueBool_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueBool_NativeFunction, "Property");
        SetValueBool_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueBool_NativeFunction, "InValue");
        SetDependency_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDependency");
        SetDependency_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDependency_NativeFunction);
        SetDependency_Variant_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDependency_NativeFunction, "Variant");
        SetDependency_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDependency_NativeFunction, "Index");
        SetDependency_Dependency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDependency_NativeFunction, "Dependency");
        RemoveVariantSetByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveVariantSetByName");
        RemoveVariantSetByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveVariantSetByName_NativeFunction);
        RemoveVariantSetByName_LevelVariantSets_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveVariantSetByName_NativeFunction, "LevelVariantSets");
        RemoveVariantSetByName_VariantSetName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveVariantSetByName_NativeFunction, "VariantSetName");
        RemoveVariantSet_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveVariantSet");
        RemoveVariantSet_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveVariantSet_NativeFunction);
        RemoveVariantSet_LevelVariantSets_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveVariantSet_NativeFunction, "LevelVariantSets");
        RemoveVariantSet_VariantSet_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveVariantSet_NativeFunction, "VariantSet");
        RemoveVariantByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveVariantByName");
        RemoveVariantByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveVariantByName_NativeFunction);
        RemoveVariantByName_VariantSet_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveVariantByName_NativeFunction, "VariantSet");
        RemoveVariantByName_VariantName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveVariantByName_NativeFunction, "VariantName");
        RemoveVariant_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveVariant");
        RemoveVariant_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveVariant_NativeFunction);
        RemoveVariant_VariantSet_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveVariant_NativeFunction, "VariantSet");
        RemoveVariant_Variant_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveVariant_NativeFunction, "Variant");
        RemoveCapturedPropertyByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveCapturedPropertyByName");
        RemoveCapturedPropertyByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveCapturedPropertyByName_NativeFunction);
        RemoveCapturedPropertyByName_Variant_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveCapturedPropertyByName_NativeFunction, "Variant");
        RemoveCapturedPropertyByName_Actor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveCapturedPropertyByName_NativeFunction, "Actor");
        RemoveCapturedPropertyByName_PropertyPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveCapturedPropertyByName_NativeFunction, "PropertyPath");
        RemoveCapturedProperty_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveCapturedProperty");
        RemoveCapturedProperty_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveCapturedProperty_NativeFunction);
        RemoveCapturedProperty_Variant_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveCapturedProperty_NativeFunction, "Variant");
        RemoveCapturedProperty_Actor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveCapturedProperty_NativeFunction, "Actor");
        RemoveCapturedProperty_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveCapturedProperty_NativeFunction, "Property");
        RemoveActorBindingByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveActorBindingByName");
        RemoveActorBindingByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveActorBindingByName_NativeFunction);
        RemoveActorBindingByName_Variant_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveActorBindingByName_NativeFunction, "Variant");
        RemoveActorBindingByName_ActorName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveActorBindingByName_NativeFunction, "ActorName");
        RemoveActorBinding_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveActorBinding");
        RemoveActorBinding_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveActorBinding_NativeFunction);
        RemoveActorBinding_Variant_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveActorBinding_NativeFunction, "Variant");
        RemoveActorBinding_Actor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveActorBinding_NativeFunction, "Actor");
        Record_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Record");
        Record_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Record_NativeFunction);
        Record_PropVal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Record_NativeFunction, "PropVal");
        GetValueVector4_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueVector4");
        GetValueVector4_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueVector4_NativeFunction);
        GetValueVector4_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueVector4_NativeFunction, "Property");
        GetValueVector4_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueVector4_NativeFunction, "ReturnValue");
        GetValueVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueVector2D");
        GetValueVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueVector2D_NativeFunction);
        GetValueVector2D_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueVector2D_NativeFunction, "Property");
        GetValueVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueVector2D_NativeFunction, "ReturnValue");
        GetValueVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueVector");
        GetValueVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueVector_NativeFunction);
        GetValueVector_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueVector_NativeFunction, "Property");
        GetValueVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueVector_NativeFunction, "ReturnValue");
        GetValueString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueString");
        GetValueString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueString_NativeFunction);
        GetValueString_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueString_NativeFunction, "Property");
        GetValueString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueString_NativeFunction, "ReturnValue");
        GetValueRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueRotator");
        GetValueRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueRotator_NativeFunction);
        GetValueRotator_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueRotator_NativeFunction, "Property");
        GetValueRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueRotator_NativeFunction, "ReturnValue");
        GetValueQuat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueQuat");
        GetValueQuat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueQuat_NativeFunction);
        GetValueQuat_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueQuat_NativeFunction, "Property");
        GetValueQuat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueQuat_NativeFunction, "ReturnValue");
        GetValueObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueObject");
        GetValueObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueObject_NativeFunction);
        GetValueObject_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueObject_NativeFunction, "Property");
        GetValueObject_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueObject_NativeFunction, "ReturnValue");
        GetValueLinearColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueLinearColor");
        GetValueLinearColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueLinearColor_NativeFunction);
        GetValueLinearColor_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueLinearColor_NativeFunction, "Property");
        GetValueLinearColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueLinearColor_NativeFunction, "ReturnValue");
        GetValueIntPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueIntPoint");
        GetValueIntPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueIntPoint_NativeFunction);
        GetValueIntPoint_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueIntPoint_NativeFunction, "Property");
        GetValueIntPoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueIntPoint_NativeFunction, "ReturnValue");
        GetValueInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueInt");
        GetValueInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueInt_NativeFunction);
        GetValueInt_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueInt_NativeFunction, "Property");
        GetValueInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueInt_NativeFunction, "ReturnValue");
        GetValueFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueFloat");
        GetValueFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueFloat_NativeFunction);
        GetValueFloat_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueFloat_NativeFunction, "Property");
        GetValueFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueFloat_NativeFunction, "ReturnValue");
        GetValueColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueColor");
        GetValueColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueColor_NativeFunction);
        GetValueColor_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueColor_NativeFunction, "Property");
        GetValueColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueColor_NativeFunction, "ReturnValue");
        GetValueBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueBool");
        GetValueBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueBool_NativeFunction);
        GetValueBool_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueBool_NativeFunction, "Property");
        GetValueBool_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueBool_NativeFunction, "ReturnValue");
        GetPropertyTypeString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPropertyTypeString");
        GetPropertyTypeString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPropertyTypeString_NativeFunction);
        GetPropertyTypeString_PropVal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPropertyTypeString_NativeFunction, "PropVal");
        GetPropertyTypeString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPropertyTypeString_NativeFunction, "ReturnValue");
        GetCapturedProperties_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCapturedProperties");
        GetCapturedProperties_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCapturedProperties_NativeFunction);
        GetCapturedProperties_Variant_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCapturedProperties_NativeFunction, "Variant");
        GetCapturedProperties_Actor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCapturedProperties_NativeFunction, "Actor");
        GetCapturedProperties_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCapturedProperties_NativeFunction, "ReturnValue");
        GetCapturedProperties_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetCapturedProperties_NativeFunction, "ReturnValue");
        DeleteDependency_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteDependency");
        DeleteDependency_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteDependency_NativeFunction);
        DeleteDependency_Variant_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteDependency_NativeFunction, "Variant");
        DeleteDependency_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteDependency_NativeFunction, "Index");
        CreateLevelVariantSetsAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateLevelVariantSetsAsset");
        CreateLevelVariantSetsAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateLevelVariantSetsAsset_NativeFunction);
        CreateLevelVariantSetsAsset_AssetName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateLevelVariantSetsAsset_NativeFunction, "AssetName");
        CreateLevelVariantSetsAsset_AssetPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateLevelVariantSetsAsset_NativeFunction, "AssetPath");
        CreateLevelVariantSetsAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateLevelVariantSetsAsset_NativeFunction, "ReturnValue");
        CreateLevelVariantSetsActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateLevelVariantSetsActor");
        CreateLevelVariantSetsActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateLevelVariantSetsActor_NativeFunction);
        CreateLevelVariantSetsActor_LevelVariantSetsAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateLevelVariantSetsActor_NativeFunction, "LevelVariantSetsAsset");
        CreateLevelVariantSetsActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateLevelVariantSetsActor_NativeFunction, "ReturnValue");
        CaptureProperty_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CaptureProperty");
        CaptureProperty_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CaptureProperty_NativeFunction);
        CaptureProperty_Variant_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CaptureProperty_NativeFunction, "Variant");
        CaptureProperty_Actor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CaptureProperty_NativeFunction, "Actor");
        CaptureProperty_PropertyPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CaptureProperty_NativeFunction, "PropertyPath");
        CaptureProperty_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CaptureProperty_NativeFunction, "ReturnValue");
        Apply_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Apply");
        Apply_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Apply_NativeFunction);
        Apply_PropVal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Apply_NativeFunction, "PropVal");
        AddVariantSet_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddVariantSet");
        AddVariantSet_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddVariantSet_NativeFunction);
        AddVariantSet_LevelVariantSets_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVariantSet_NativeFunction, "LevelVariantSets");
        AddVariantSet_VariantSet_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVariantSet_NativeFunction, "VariantSet");
        AddVariant_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddVariant");
        AddVariant_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddVariant_NativeFunction);
        AddVariant_VariantSet_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVariant_NativeFunction, "VariantSet");
        AddVariant_Variant_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVariant_NativeFunction, "Variant");
        AddDependency_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddDependency");
        AddDependency_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddDependency_NativeFunction);
        AddDependency_Variant_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddDependency_NativeFunction, "Variant");
        AddDependency_Dependency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddDependency_NativeFunction, "Dependency");
        AddDependency_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddDependency_NativeFunction, "ReturnValue");
        AddActorBinding_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddActorBinding");
        AddActorBinding_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddActorBinding_NativeFunction);
        AddActorBinding_Variant_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddActorBinding_NativeFunction, "Variant");
        AddActorBinding_Actor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddActorBinding_NativeFunction, "Actor");
        
        
    }
    
    protected VariantManagerLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:SetValueVector4
    static readonly IntPtr SetValueVector4_NativeFunction;
    static readonly int SetValueVector4_ParamsSize;
    static readonly int SetValueVector4_Property_Offset;
    static readonly int SetValueVector4_InValue_Offset;
    
    public static void SetValueVector4(UnrealSharp.VariantManagerContent.PropertyValue property, System.DoubleNumerics.Vector4 inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueVector4_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, SetValueVector4_Property_Offset), 0, null, property);
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(ParamsBuffer, SetValueVector4_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetValueVector4_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:SetValueVector2D
    static readonly IntPtr SetValueVector2D_NativeFunction;
    static readonly int SetValueVector2D_ParamsSize;
    static readonly int SetValueVector2D_Property_Offset;
    static readonly int SetValueVector2D_InValue_Offset;
    
    public static void SetValueVector2D(UnrealSharp.VariantManagerContent.PropertyValue property, System.DoubleNumerics.Vector2 inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, SetValueVector2D_Property_Offset), 0, null, property);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetValueVector2D_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetValueVector2D_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:SetValueVector
    static readonly IntPtr SetValueVector_NativeFunction;
    static readonly int SetValueVector_ParamsSize;
    static readonly int SetValueVector_Property_Offset;
    static readonly int SetValueVector_InValue_Offset;
    
    public static void SetValueVector(UnrealSharp.VariantManagerContent.PropertyValue property, System.DoubleNumerics.Vector3 inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, SetValueVector_Property_Offset), 0, null, property);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetValueVector_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetValueVector_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:SetValueString
    static readonly IntPtr SetValueString_NativeFunction;
    static readonly int SetValueString_ParamsSize;
    static readonly int SetValueString_Property_Offset;
    static readonly int SetValueString_InValue_Offset;
    
    public static void SetValueString(UnrealSharp.VariantManagerContent.PropertyValue property, string inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, SetValueString_Property_Offset), 0, null, property);
            IntPtr InValue_NativePtr = IntPtr.Add(ParamsBuffer,SetValueString_InValue_Offset);
            StringMarshaller.ToNative(InValue_NativePtr,0,null,inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetValueString_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(InValue_NativePtr, 0);
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:SetValueRotator
    static readonly IntPtr SetValueRotator_NativeFunction;
    static readonly int SetValueRotator_ParamsSize;
    static readonly int SetValueRotator_Property_Offset;
    static readonly int SetValueRotator_InValue_Offset;
    
    public static void SetValueRotator(UnrealSharp.VariantManagerContent.PropertyValue property, UnrealSharp.Rotator inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, SetValueRotator_Property_Offset), 0, null, property);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetValueRotator_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetValueRotator_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:SetValueQuat
    static readonly IntPtr SetValueQuat_NativeFunction;
    static readonly int SetValueQuat_ParamsSize;
    static readonly int SetValueQuat_Property_Offset;
    static readonly int SetValueQuat_InValue_Offset;
    
    public static void SetValueQuat(UnrealSharp.VariantManagerContent.PropertyValue property, System.DoubleNumerics.Quaternion inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueQuat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, SetValueQuat_Property_Offset), 0, null, property);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, SetValueQuat_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetValueQuat_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:SetValueObject
    static readonly IntPtr SetValueObject_NativeFunction;
    static readonly int SetValueObject_ParamsSize;
    static readonly int SetValueObject_Property_Offset;
    static readonly int SetValueObject_InValue_Offset;
    
    public static void SetValueObject(UnrealSharp.VariantManagerContent.PropertyValue property, UnrealSharp.CoreUObject.Object inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, SetValueObject_Property_Offset), 0, null, property);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetValueObject_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetValueObject_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:SetValueLinearColor
    static readonly IntPtr SetValueLinearColor_NativeFunction;
    static readonly int SetValueLinearColor_ParamsSize;
    static readonly int SetValueLinearColor_Property_Offset;
    static readonly int SetValueLinearColor_InValue_Offset;
    
    public static void SetValueLinearColor(UnrealSharp.VariantManagerContent.PropertyValue property, UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueLinearColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, SetValueLinearColor_Property_Offset), 0, null, property);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetValueLinearColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetValueLinearColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:SetValueIntPoint
    static readonly IntPtr SetValueIntPoint_NativeFunction;
    static readonly int SetValueIntPoint_ParamsSize;
    static readonly int SetValueIntPoint_Property_Offset;
    static readonly int SetValueIntPoint_InValue_Offset;
    
    public static void SetValueIntPoint(UnrealSharp.VariantManagerContent.PropertyValue property, UnrealSharp.CoreUObject.IntPoint inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueIntPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, SetValueIntPoint_Property_Offset), 0, null, property);
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, SetValueIntPoint_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetValueIntPoint_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:SetValueInt
    static readonly IntPtr SetValueInt_NativeFunction;
    static readonly int SetValueInt_ParamsSize;
    static readonly int SetValueInt_Property_Offset;
    static readonly int SetValueInt_InValue_Offset;
    
    public static void SetValueInt(UnrealSharp.VariantManagerContent.PropertyValue property, int inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, SetValueInt_Property_Offset), 0, null, property);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetValueInt_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetValueInt_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:SetValueFloat
    static readonly IntPtr SetValueFloat_NativeFunction;
    static readonly int SetValueFloat_ParamsSize;
    static readonly int SetValueFloat_Property_Offset;
    static readonly int SetValueFloat_InValue_Offset;
    
    public static void SetValueFloat(UnrealSharp.VariantManagerContent.PropertyValue property, float inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, SetValueFloat_Property_Offset), 0, null, property);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetValueFloat_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetValueFloat_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:SetValueColor
    static readonly IntPtr SetValueColor_NativeFunction;
    static readonly int SetValueColor_ParamsSize;
    static readonly int SetValueColor_Property_Offset;
    static readonly int SetValueColor_InValue_Offset;
    
    public static void SetValueColor(UnrealSharp.VariantManagerContent.PropertyValue property, UnrealSharp.CoreUObject.Color inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, SetValueColor_Property_Offset), 0, null, property);
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, SetValueColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetValueColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:SetValueBool
    static readonly IntPtr SetValueBool_NativeFunction;
    static readonly int SetValueBool_ParamsSize;
    static readonly int SetValueBool_Property_Offset;
    static readonly int SetValueBool_InValue_Offset;
    
    public static void SetValueBool(UnrealSharp.VariantManagerContent.PropertyValue property, bool inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, SetValueBool_Property_Offset), 0, null, property);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetValueBool_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetValueBool_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:SetDependency
    static readonly IntPtr SetDependency_NativeFunction;
    static readonly int SetDependency_ParamsSize;
    static readonly int SetDependency_Variant_Offset;
    static readonly int SetDependency_Index_Offset;
    static readonly int SetDependency_Dependency_Offset;
    
    public static void SetDependency(UnrealSharp.VariantManagerContent.Variant variant, int index, ref UnrealSharp.VariantManagerContent.VariantDependency dependency)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDependency_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.Variant>.ToNative(IntPtr.Add(ParamsBuffer, SetDependency_Variant_Offset), 0, null, variant);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetDependency_Index_Offset), 0, null, index);
            UnrealSharp.VariantManagerContent.VariantDependencyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetDependency_Dependency_Offset), 0, null, dependency);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetDependency_NativeFunction, ParamsBuffer);
            
            dependency = UnrealSharp.VariantManagerContent.VariantDependencyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetDependency_Dependency_Offset), 0, null);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:RemoveVariantSetByName
    static readonly IntPtr RemoveVariantSetByName_NativeFunction;
    static readonly int RemoveVariantSetByName_ParamsSize;
    static readonly int RemoveVariantSetByName_LevelVariantSets_Offset;
    static readonly int RemoveVariantSetByName_VariantSetName_Offset;
    
    public static void RemoveVariantSetByName(UnrealSharp.VariantManagerContent.LevelVariantSets levelVariantSets, string variantSetName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveVariantSetByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.LevelVariantSets>.ToNative(IntPtr.Add(ParamsBuffer, RemoveVariantSetByName_LevelVariantSets_Offset), 0, null, levelVariantSets);
            IntPtr VariantSetName_NativePtr = IntPtr.Add(ParamsBuffer,RemoveVariantSetByName_VariantSetName_Offset);
            StringMarshaller.ToNative(VariantSetName_NativePtr,0,null,variantSetName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveVariantSetByName_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(VariantSetName_NativePtr, 0);
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:RemoveVariantSet
    static readonly IntPtr RemoveVariantSet_NativeFunction;
    static readonly int RemoveVariantSet_ParamsSize;
    static readonly int RemoveVariantSet_LevelVariantSets_Offset;
    static readonly int RemoveVariantSet_VariantSet_Offset;
    
    public static void RemoveVariantSet(UnrealSharp.VariantManagerContent.LevelVariantSets levelVariantSets, UnrealSharp.VariantManagerContent.VariantSet variantSet)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveVariantSet_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.LevelVariantSets>.ToNative(IntPtr.Add(ParamsBuffer, RemoveVariantSet_LevelVariantSets_Offset), 0, null, levelVariantSets);
            ObjectMarshaller<UnrealSharp.VariantManagerContent.VariantSet>.ToNative(IntPtr.Add(ParamsBuffer, RemoveVariantSet_VariantSet_Offset), 0, null, variantSet);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveVariantSet_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:RemoveVariantByName
    static readonly IntPtr RemoveVariantByName_NativeFunction;
    static readonly int RemoveVariantByName_ParamsSize;
    static readonly int RemoveVariantByName_VariantSet_Offset;
    static readonly int RemoveVariantByName_VariantName_Offset;
    
    public static void RemoveVariantByName(UnrealSharp.VariantManagerContent.VariantSet variantSet, string variantName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveVariantByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.VariantSet>.ToNative(IntPtr.Add(ParamsBuffer, RemoveVariantByName_VariantSet_Offset), 0, null, variantSet);
            IntPtr VariantName_NativePtr = IntPtr.Add(ParamsBuffer,RemoveVariantByName_VariantName_Offset);
            StringMarshaller.ToNative(VariantName_NativePtr,0,null,variantName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveVariantByName_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(VariantName_NativePtr, 0);
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:RemoveVariant
    static readonly IntPtr RemoveVariant_NativeFunction;
    static readonly int RemoveVariant_ParamsSize;
    static readonly int RemoveVariant_VariantSet_Offset;
    static readonly int RemoveVariant_Variant_Offset;
    
    public static void RemoveVariant(UnrealSharp.VariantManagerContent.VariantSet variantSet, UnrealSharp.VariantManagerContent.Variant variant)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveVariant_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.VariantSet>.ToNative(IntPtr.Add(ParamsBuffer, RemoveVariant_VariantSet_Offset), 0, null, variantSet);
            ObjectMarshaller<UnrealSharp.VariantManagerContent.Variant>.ToNative(IntPtr.Add(ParamsBuffer, RemoveVariant_Variant_Offset), 0, null, variant);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveVariant_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:RemoveCapturedPropertyByName
    static readonly IntPtr RemoveCapturedPropertyByName_NativeFunction;
    static readonly int RemoveCapturedPropertyByName_ParamsSize;
    static readonly int RemoveCapturedPropertyByName_Variant_Offset;
    static readonly int RemoveCapturedPropertyByName_Actor_Offset;
    static readonly int RemoveCapturedPropertyByName_PropertyPath_Offset;
    
    public static void RemoveCapturedPropertyByName(UnrealSharp.VariantManagerContent.Variant variant, UnrealSharp.Engine.Actor actor, string propertyPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveCapturedPropertyByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.Variant>.ToNative(IntPtr.Add(ParamsBuffer, RemoveCapturedPropertyByName_Variant_Offset), 0, null, variant);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, RemoveCapturedPropertyByName_Actor_Offset), 0, null, actor);
            IntPtr PropertyPath_NativePtr = IntPtr.Add(ParamsBuffer,RemoveCapturedPropertyByName_PropertyPath_Offset);
            StringMarshaller.ToNative(PropertyPath_NativePtr,0,null,propertyPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveCapturedPropertyByName_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(PropertyPath_NativePtr, 0);
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:RemoveCapturedProperty
    static readonly IntPtr RemoveCapturedProperty_NativeFunction;
    static readonly int RemoveCapturedProperty_ParamsSize;
    static readonly int RemoveCapturedProperty_Variant_Offset;
    static readonly int RemoveCapturedProperty_Actor_Offset;
    static readonly int RemoveCapturedProperty_Property_Offset;
    
    public static void RemoveCapturedProperty(UnrealSharp.VariantManagerContent.Variant variant, UnrealSharp.Engine.Actor actor, UnrealSharp.VariantManagerContent.PropertyValue property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveCapturedProperty_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.Variant>.ToNative(IntPtr.Add(ParamsBuffer, RemoveCapturedProperty_Variant_Offset), 0, null, variant);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, RemoveCapturedProperty_Actor_Offset), 0, null, actor);
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, RemoveCapturedProperty_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveCapturedProperty_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:RemoveActorBindingByName
    static readonly IntPtr RemoveActorBindingByName_NativeFunction;
    static readonly int RemoveActorBindingByName_ParamsSize;
    static readonly int RemoveActorBindingByName_Variant_Offset;
    static readonly int RemoveActorBindingByName_ActorName_Offset;
    
    public static void RemoveActorBindingByName(UnrealSharp.VariantManagerContent.Variant variant, string actorName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveActorBindingByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.Variant>.ToNative(IntPtr.Add(ParamsBuffer, RemoveActorBindingByName_Variant_Offset), 0, null, variant);
            IntPtr ActorName_NativePtr = IntPtr.Add(ParamsBuffer,RemoveActorBindingByName_ActorName_Offset);
            StringMarshaller.ToNative(ActorName_NativePtr,0,null,actorName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveActorBindingByName_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(ActorName_NativePtr, 0);
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:RemoveActorBinding
    static readonly IntPtr RemoveActorBinding_NativeFunction;
    static readonly int RemoveActorBinding_ParamsSize;
    static readonly int RemoveActorBinding_Variant_Offset;
    static readonly int RemoveActorBinding_Actor_Offset;
    
    public static void RemoveActorBinding(UnrealSharp.VariantManagerContent.Variant variant, UnrealSharp.Engine.Actor actor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveActorBinding_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.Variant>.ToNative(IntPtr.Add(ParamsBuffer, RemoveActorBinding_Variant_Offset), 0, null, variant);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, RemoveActorBinding_Actor_Offset), 0, null, actor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveActorBinding_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:Record
    static readonly IntPtr Record_NativeFunction;
    static readonly int Record_ParamsSize;
    static readonly int Record_PropVal_Offset;
    
    public static void Record(UnrealSharp.VariantManagerContent.PropertyValue propVal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Record_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, Record_PropVal_Offset), 0, null, propVal);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Record_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetValueVector4
    static readonly IntPtr GetValueVector4_NativeFunction;
    static readonly int GetValueVector4_ParamsSize;
    static readonly int GetValueVector4_Property_Offset;
    static readonly int GetValueVector4_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector4 GetValueVector4(UnrealSharp.VariantManagerContent.PropertyValue property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueVector4_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, GetValueVector4_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetValueVector4_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector4>.FromNative(IntPtr.Add(ParamsBuffer, GetValueVector4_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetValueVector2D
    static readonly IntPtr GetValueVector2D_NativeFunction;
    static readonly int GetValueVector2D_ParamsSize;
    static readonly int GetValueVector2D_Property_Offset;
    static readonly int GetValueVector2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 GetValueVector2D(UnrealSharp.VariantManagerContent.PropertyValue property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, GetValueVector2D_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetValueVector2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetValueVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetValueVector
    static readonly IntPtr GetValueVector_NativeFunction;
    static readonly int GetValueVector_ParamsSize;
    static readonly int GetValueVector_Property_Offset;
    static readonly int GetValueVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetValueVector(UnrealSharp.VariantManagerContent.PropertyValue property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, GetValueVector_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetValueVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetValueVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetValueString
    static readonly IntPtr GetValueString_NativeFunction;
    static readonly int GetValueString_ParamsSize;
    static readonly int GetValueString_Property_Offset;
    static readonly int GetValueString_ReturnValue_Offset;
    
    public static string GetValueString(UnrealSharp.VariantManagerContent.PropertyValue property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, GetValueString_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetValueString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetValueString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetValueRotator
    static readonly IntPtr GetValueRotator_NativeFunction;
    static readonly int GetValueRotator_ParamsSize;
    static readonly int GetValueRotator_Property_Offset;
    static readonly int GetValueRotator_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator GetValueRotator(UnrealSharp.VariantManagerContent.PropertyValue property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, GetValueRotator_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetValueRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetValueRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetValueQuat
    static readonly IntPtr GetValueQuat_NativeFunction;
    static readonly int GetValueQuat_ParamsSize;
    static readonly int GetValueQuat_Property_Offset;
    static readonly int GetValueQuat_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion GetValueQuat(UnrealSharp.VariantManagerContent.PropertyValue property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueQuat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, GetValueQuat_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetValueQuat_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, GetValueQuat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetValueObject
    static readonly IntPtr GetValueObject_NativeFunction;
    static readonly int GetValueObject_ParamsSize;
    static readonly int GetValueObject_Property_Offset;
    static readonly int GetValueObject_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Object GetValueObject(UnrealSharp.VariantManagerContent.PropertyValue property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, GetValueObject_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetValueObject_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetValueObject_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetValueLinearColor
    static readonly IntPtr GetValueLinearColor_NativeFunction;
    static readonly int GetValueLinearColor_ParamsSize;
    static readonly int GetValueLinearColor_Property_Offset;
    static readonly int GetValueLinearColor_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor GetValueLinearColor(UnrealSharp.VariantManagerContent.PropertyValue property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueLinearColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, GetValueLinearColor_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetValueLinearColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, GetValueLinearColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetValueIntPoint
    static readonly IntPtr GetValueIntPoint_NativeFunction;
    static readonly int GetValueIntPoint_ParamsSize;
    static readonly int GetValueIntPoint_Property_Offset;
    static readonly int GetValueIntPoint_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint GetValueIntPoint(UnrealSharp.VariantManagerContent.PropertyValue property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueIntPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, GetValueIntPoint_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetValueIntPoint_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, GetValueIntPoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetValueInt
    static readonly IntPtr GetValueInt_NativeFunction;
    static readonly int GetValueInt_ParamsSize;
    static readonly int GetValueInt_Property_Offset;
    static readonly int GetValueInt_ReturnValue_Offset;
    
    public static int GetValueInt(UnrealSharp.VariantManagerContent.PropertyValue property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, GetValueInt_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetValueInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetValueInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetValueFloat
    static readonly IntPtr GetValueFloat_NativeFunction;
    static readonly int GetValueFloat_ParamsSize;
    static readonly int GetValueFloat_Property_Offset;
    static readonly int GetValueFloat_ReturnValue_Offset;
    
    public static float GetValueFloat(UnrealSharp.VariantManagerContent.PropertyValue property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, GetValueFloat_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetValueFloat_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetValueFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetValueColor
    static readonly IntPtr GetValueColor_NativeFunction;
    static readonly int GetValueColor_ParamsSize;
    static readonly int GetValueColor_Property_Offset;
    static readonly int GetValueColor_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Color GetValueColor(UnrealSharp.VariantManagerContent.PropertyValue property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, GetValueColor_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetValueColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Color returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(ParamsBuffer, GetValueColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetValueBool
    static readonly IntPtr GetValueBool_NativeFunction;
    static readonly int GetValueBool_ParamsSize;
    static readonly int GetValueBool_Property_Offset;
    static readonly int GetValueBool_ReturnValue_Offset;
    
    public static bool GetValueBool(UnrealSharp.VariantManagerContent.PropertyValue property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, GetValueBool_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetValueBool_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetValueBool_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetPropertyTypeString
    static readonly IntPtr GetPropertyTypeString_NativeFunction;
    static readonly int GetPropertyTypeString_ParamsSize;
    static readonly int GetPropertyTypeString_PropVal_Offset;
    static readonly int GetPropertyTypeString_ReturnValue_Offset;
    
    public static string GetPropertyTypeString(UnrealSharp.VariantManagerContent.PropertyValue propVal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPropertyTypeString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, GetPropertyTypeString_PropVal_Offset), 0, null, propVal);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPropertyTypeString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetPropertyTypeString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:GetCapturedProperties
    static readonly IntPtr GetCapturedProperties_NativeFunction;
    static readonly int GetCapturedProperties_ParamsSize;
    static readonly int GetCapturedProperties_Variant_Offset;
    static readonly int GetCapturedProperties_Actor_Offset;
    static readonly int GetCapturedProperties_ReturnValue_Offset;
    static readonly int GetCapturedProperties_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.VariantManagerContent.PropertyValue> GetCapturedProperties(UnrealSharp.VariantManagerContent.Variant variant, UnrealSharp.Engine.Actor actor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCapturedProperties_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.Variant>.ToNative(IntPtr.Add(ParamsBuffer, GetCapturedProperties_Variant_Offset), 0, null, variant);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetCapturedProperties_Actor_Offset), 0, null, actor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCapturedProperties_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.VariantManagerContent.PropertyValue> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetCapturedProperties_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.VariantManagerContent.PropertyValue> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.VariantManagerContent.PropertyValue> (1, ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative, ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.FromNative, GetCapturedProperties_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.VariantManagerContent.PropertyValue>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:DeleteDependency
    static readonly IntPtr DeleteDependency_NativeFunction;
    static readonly int DeleteDependency_ParamsSize;
    static readonly int DeleteDependency_Variant_Offset;
    static readonly int DeleteDependency_Index_Offset;
    
    public static void DeleteDependency(UnrealSharp.VariantManagerContent.Variant variant, int index)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteDependency_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.Variant>.ToNative(IntPtr.Add(ParamsBuffer, DeleteDependency_Variant_Offset), 0, null, variant);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, DeleteDependency_Index_Offset), 0, null, index);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteDependency_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:CreateLevelVariantSetsAsset
    static readonly IntPtr CreateLevelVariantSetsAsset_NativeFunction;
    static readonly int CreateLevelVariantSetsAsset_ParamsSize;
    static readonly int CreateLevelVariantSetsAsset_AssetName_Offset;
    static readonly int CreateLevelVariantSetsAsset_AssetPath_Offset;
    static readonly int CreateLevelVariantSetsAsset_ReturnValue_Offset;
    
    public static UnrealSharp.VariantManagerContent.LevelVariantSets CreateLevelVariantSetsAsset(string assetName, string assetPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateLevelVariantSetsAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetName_NativePtr = IntPtr.Add(ParamsBuffer,CreateLevelVariantSetsAsset_AssetName_Offset);
            StringMarshaller.ToNative(AssetName_NativePtr,0,null,assetName);
            IntPtr AssetPath_NativePtr = IntPtr.Add(ParamsBuffer,CreateLevelVariantSetsAsset_AssetPath_Offset);
            StringMarshaller.ToNative(AssetPath_NativePtr,0,null,assetPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateLevelVariantSetsAsset_NativeFunction, ParamsBuffer);
            
            UnrealSharp.VariantManagerContent.LevelVariantSets returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.VariantManagerContent.LevelVariantSets>.FromNative(IntPtr.Add(ParamsBuffer, CreateLevelVariantSetsAsset_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AssetName_NativePtr, 0);
            StringMarshaller.DestructInstance(AssetPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:CreateLevelVariantSetsActor
    static readonly IntPtr CreateLevelVariantSetsActor_NativeFunction;
    static readonly int CreateLevelVariantSetsActor_ParamsSize;
    static readonly int CreateLevelVariantSetsActor_LevelVariantSetsAsset_Offset;
    static readonly int CreateLevelVariantSetsActor_ReturnValue_Offset;
    
    public static UnrealSharp.VariantManagerContent.LevelVariantSetsActor CreateLevelVariantSetsActor(UnrealSharp.VariantManagerContent.LevelVariantSets levelVariantSetsAsset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateLevelVariantSetsActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.LevelVariantSets>.ToNative(IntPtr.Add(ParamsBuffer, CreateLevelVariantSetsActor_LevelVariantSetsAsset_Offset), 0, null, levelVariantSetsAsset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateLevelVariantSetsActor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.VariantManagerContent.LevelVariantSetsActor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.VariantManagerContent.LevelVariantSetsActor>.FromNative(IntPtr.Add(ParamsBuffer, CreateLevelVariantSetsActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:CaptureProperty
    static readonly IntPtr CaptureProperty_NativeFunction;
    static readonly int CaptureProperty_ParamsSize;
    static readonly int CaptureProperty_Variant_Offset;
    static readonly int CaptureProperty_Actor_Offset;
    static readonly int CaptureProperty_PropertyPath_Offset;
    static readonly int CaptureProperty_ReturnValue_Offset;
    
    public static UnrealSharp.VariantManagerContent.PropertyValue CaptureProperty(UnrealSharp.VariantManagerContent.Variant variant, UnrealSharp.Engine.Actor actor, string propertyPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CaptureProperty_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.Variant>.ToNative(IntPtr.Add(ParamsBuffer, CaptureProperty_Variant_Offset), 0, null, variant);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, CaptureProperty_Actor_Offset), 0, null, actor);
            IntPtr PropertyPath_NativePtr = IntPtr.Add(ParamsBuffer,CaptureProperty_PropertyPath_Offset);
            StringMarshaller.ToNative(PropertyPath_NativePtr,0,null,propertyPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CaptureProperty_NativeFunction, ParamsBuffer);
            
            UnrealSharp.VariantManagerContent.PropertyValue returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.FromNative(IntPtr.Add(ParamsBuffer, CaptureProperty_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(PropertyPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:Apply
    static readonly IntPtr Apply_NativeFunction;
    static readonly int Apply_ParamsSize;
    static readonly int Apply_PropVal_Offset;
    
    public static void Apply(UnrealSharp.VariantManagerContent.PropertyValue propVal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Apply_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.PropertyValue>.ToNative(IntPtr.Add(ParamsBuffer, Apply_PropVal_Offset), 0, null, propVal);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Apply_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:AddVariantSet
    static readonly IntPtr AddVariantSet_NativeFunction;
    static readonly int AddVariantSet_ParamsSize;
    static readonly int AddVariantSet_LevelVariantSets_Offset;
    static readonly int AddVariantSet_VariantSet_Offset;
    
    public static void AddVariantSet(UnrealSharp.VariantManagerContent.LevelVariantSets levelVariantSets, UnrealSharp.VariantManagerContent.VariantSet variantSet)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddVariantSet_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.LevelVariantSets>.ToNative(IntPtr.Add(ParamsBuffer, AddVariantSet_LevelVariantSets_Offset), 0, null, levelVariantSets);
            ObjectMarshaller<UnrealSharp.VariantManagerContent.VariantSet>.ToNative(IntPtr.Add(ParamsBuffer, AddVariantSet_VariantSet_Offset), 0, null, variantSet);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddVariantSet_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:AddVariant
    static readonly IntPtr AddVariant_NativeFunction;
    static readonly int AddVariant_ParamsSize;
    static readonly int AddVariant_VariantSet_Offset;
    static readonly int AddVariant_Variant_Offset;
    
    public static void AddVariant(UnrealSharp.VariantManagerContent.VariantSet variantSet, UnrealSharp.VariantManagerContent.Variant variant)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddVariant_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.VariantSet>.ToNative(IntPtr.Add(ParamsBuffer, AddVariant_VariantSet_Offset), 0, null, variantSet);
            ObjectMarshaller<UnrealSharp.VariantManagerContent.Variant>.ToNative(IntPtr.Add(ParamsBuffer, AddVariant_Variant_Offset), 0, null, variant);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddVariant_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:AddDependency
    static readonly IntPtr AddDependency_NativeFunction;
    static readonly int AddDependency_ParamsSize;
    static readonly int AddDependency_Variant_Offset;
    static readonly int AddDependency_Dependency_Offset;
    static readonly int AddDependency_ReturnValue_Offset;
    
    public static int AddDependency(UnrealSharp.VariantManagerContent.Variant variant, ref UnrealSharp.VariantManagerContent.VariantDependency dependency)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddDependency_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.Variant>.ToNative(IntPtr.Add(ParamsBuffer, AddDependency_Variant_Offset), 0, null, variant);
            UnrealSharp.VariantManagerContent.VariantDependencyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AddDependency_Dependency_Offset), 0, null, dependency);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddDependency_NativeFunction, ParamsBuffer);
            
            dependency = UnrealSharp.VariantManagerContent.VariantDependencyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, AddDependency_Dependency_Offset), 0, null);
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, AddDependency_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManager.VariantManagerBlueprintLibrary:AddActorBinding
    static readonly IntPtr AddActorBinding_NativeFunction;
    static readonly int AddActorBinding_ParamsSize;
    static readonly int AddActorBinding_Variant_Offset;
    static readonly int AddActorBinding_Actor_Offset;
    
    public static void AddActorBinding(UnrealSharp.VariantManagerContent.Variant variant, UnrealSharp.Engine.Actor actor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddActorBinding_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.Variant>.ToNative(IntPtr.Add(ParamsBuffer, AddActorBinding_Variant_Offset), 0, null, variant);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, AddActorBinding_Actor_Offset), 0, null, actor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddActorBinding_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
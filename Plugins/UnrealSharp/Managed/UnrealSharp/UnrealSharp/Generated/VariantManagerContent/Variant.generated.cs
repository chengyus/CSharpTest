// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.VariantManagerContent;

[UClass]
public partial class Variant : UnrealSharp.CoreUObject.Object
{
    
    static Variant()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Variant");
        
        
        SwitchOn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SwitchOn");
        SetThumbnailFromTexture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetThumbnailFromTexture");
        SetThumbnailFromTexture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetThumbnailFromTexture_NativeFunction);
        SetThumbnailFromTexture_NewThumbnail_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetThumbnailFromTexture_NativeFunction, "NewThumbnail");
        SetThumbnailFromFile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetThumbnailFromFile");
        SetThumbnailFromFile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetThumbnailFromFile_NativeFunction);
        SetThumbnailFromFile_FilePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetThumbnailFromFile_NativeFunction, "FilePath");
        SetThumbnailFromEditorViewport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetThumbnailFromEditorViewport");
        SetThumbnailFromCamera_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetThumbnailFromCamera");
        SetThumbnailFromCamera_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetThumbnailFromCamera_NativeFunction);
        SetThumbnailFromCamera_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetThumbnailFromCamera_NativeFunction, "WorldContextObject");
        SetThumbnailFromCamera_CameraTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetThumbnailFromCamera_NativeFunction, "CameraTransform");
        SetThumbnailFromCamera_FOVDegrees_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetThumbnailFromCamera_NativeFunction, "FOVDegrees");
        SetThumbnailFromCamera_MinZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetThumbnailFromCamera_NativeFunction, "MinZ");
        SetThumbnailFromCamera_Gamma_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetThumbnailFromCamera_NativeFunction, "Gamma");
        IsActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsActive");
        IsActive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsActive_NativeFunction);
        IsActive_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsActive_NativeFunction, "ReturnValue");
        GetThumbnail_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetThumbnail");
        GetThumbnail_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetThumbnail_NativeFunction);
        GetThumbnail_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetThumbnail_NativeFunction, "ReturnValue");
        GetParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParent");
        GetParent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParent_NativeFunction);
        GetParent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParent_NativeFunction, "ReturnValue");
        GetNumDependencies_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumDependencies");
        GetNumDependencies_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumDependencies_NativeFunction);
        GetNumDependencies_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumDependencies_NativeFunction, "ReturnValue");
        GetNumActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumActors");
        GetNumActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumActors_NativeFunction);
        GetNumActors_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumActors_NativeFunction, "ReturnValue");
        GetDependents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDependents");
        GetDependents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDependents_NativeFunction);
        GetDependents_LevelVariantSets_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDependents_NativeFunction, "LevelVariantSets");
        GetDependents_bOnlyEnabledDependencies_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDependents_NativeFunction, "bOnlyEnabledDependencies");
        GetDependents_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDependents_NativeFunction, "ReturnValue");
        GetDependents_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetDependents_NativeFunction, "ReturnValue");
        GetDependency_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDependency");
        GetDependency_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDependency_NativeFunction);
        GetDependency_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDependency_NativeFunction, "Index");
        GetDependency_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDependency_NativeFunction, "ReturnValue");
        GetActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActor");
        GetActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActor_NativeFunction);
        GetActor_ActorIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActor_NativeFunction, "ActorIndex");
        GetActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActor_NativeFunction, "ReturnValue");
        
        
    }
    
    protected Variant(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/VariantManagerContent.Variant:SwitchOn
    static readonly IntPtr SwitchOn_NativeFunction;
    
    public void SwitchOn()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SwitchOn_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/VariantManagerContent.Variant:SetThumbnailFromTexture
    static readonly IntPtr SetThumbnailFromTexture_NativeFunction;
    static readonly int SetThumbnailFromTexture_ParamsSize;
    static readonly int SetThumbnailFromTexture_NewThumbnail_Offset;
    
    public void SetThumbnailFromTexture(UnrealSharp.Engine.Texture2D newThumbnail)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetThumbnailFromTexture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Texture2D>.ToNative(IntPtr.Add(ParamsBuffer, SetThumbnailFromTexture_NewThumbnail_Offset), 0, null, newThumbnail);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetThumbnailFromTexture_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/VariantManagerContent.Variant:SetThumbnailFromFile
    static readonly IntPtr SetThumbnailFromFile_NativeFunction;
    static readonly int SetThumbnailFromFile_ParamsSize;
    static readonly int SetThumbnailFromFile_FilePath_Offset;
    
    public void SetThumbnailFromFile(string filePath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetThumbnailFromFile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr FilePath_NativePtr = IntPtr.Add(ParamsBuffer,SetThumbnailFromFile_FilePath_Offset);
            StringMarshaller.ToNative(FilePath_NativePtr,0,null,filePath);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetThumbnailFromFile_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(FilePath_NativePtr, 0);
        }
    }
    
    // Function /Script/VariantManagerContent.Variant:SetThumbnailFromEditorViewport
    static readonly IntPtr SetThumbnailFromEditorViewport_NativeFunction;
    
    public void SetThumbnailFromEditorViewport()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetThumbnailFromEditorViewport_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/VariantManagerContent.Variant:SetThumbnailFromCamera
    static readonly IntPtr SetThumbnailFromCamera_NativeFunction;
    static readonly int SetThumbnailFromCamera_ParamsSize;
    static readonly int SetThumbnailFromCamera_WorldContextObject_Offset;
    static readonly int SetThumbnailFromCamera_CameraTransform_Offset;
    static readonly int SetThumbnailFromCamera_FOVDegrees_Offset;
    static readonly int SetThumbnailFromCamera_MinZ_Offset;
    static readonly int SetThumbnailFromCamera_Gamma_Offset;
    
    public void SetThumbnailFromCamera(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Transform cameraTransform, float fOVDegrees = 50.000000f, float minZ = 50.000000f, float gamma = 2.200000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetThumbnailFromCamera_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetThumbnailFromCamera_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetThumbnailFromCamera_CameraTransform_Offset), 0, null, cameraTransform);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetThumbnailFromCamera_FOVDegrees_Offset), 0, null, fOVDegrees);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetThumbnailFromCamera_MinZ_Offset), 0, null, minZ);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetThumbnailFromCamera_Gamma_Offset), 0, null, gamma);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetThumbnailFromCamera_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/VariantManagerContent.Variant:IsActive
    static readonly IntPtr IsActive_NativeFunction;
    static readonly int IsActive_ParamsSize;
    static readonly int IsActive_ReturnValue_Offset;
    
    public bool IsActive()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsActive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsActive_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsActive_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManagerContent.Variant:GetThumbnail
    static readonly IntPtr GetThumbnail_NativeFunction;
    static readonly int GetThumbnail_ParamsSize;
    static readonly int GetThumbnail_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Texture2D GetThumbnail()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetThumbnail_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetThumbnail_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Texture2D returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Texture2D>.FromNative(IntPtr.Add(ParamsBuffer, GetThumbnail_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManagerContent.Variant:GetParent
    static readonly IntPtr GetParent_NativeFunction;
    static readonly int GetParent_ParamsSize;
    static readonly int GetParent_ReturnValue_Offset;
    
    public UnrealSharp.VariantManagerContent.VariantSet GetParent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.VariantManagerContent.VariantSet returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.VariantManagerContent.VariantSet>.FromNative(IntPtr.Add(ParamsBuffer, GetParent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManagerContent.Variant:GetNumDependencies
    static readonly IntPtr GetNumDependencies_NativeFunction;
    static readonly int GetNumDependencies_ParamsSize;
    static readonly int GetNumDependencies_ReturnValue_Offset;
    
    public int GetNumDependencies()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumDependencies_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumDependencies_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumDependencies_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManagerContent.Variant:GetNumActors
    static readonly IntPtr GetNumActors_NativeFunction;
    static readonly int GetNumActors_ParamsSize;
    static readonly int GetNumActors_ReturnValue_Offset;
    
    public int GetNumActors()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumActors_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumActors_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManagerContent.Variant:GetDependents
    static readonly IntPtr GetDependents_NativeFunction;
    static readonly int GetDependents_ParamsSize;
    static readonly int GetDependents_LevelVariantSets_Offset;
    static readonly int GetDependents_bOnlyEnabledDependencies_Offset;
    static readonly int GetDependents_ReturnValue_Offset;
    static readonly int GetDependents_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.VariantManagerContent.Variant> GetDependents(UnrealSharp.VariantManagerContent.LevelVariantSets levelVariantSets, bool bOnlyEnabledDependencies)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDependents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.VariantManagerContent.LevelVariantSets>.ToNative(IntPtr.Add(ParamsBuffer, GetDependents_LevelVariantSets_Offset), 0, null, levelVariantSets);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetDependents_bOnlyEnabledDependencies_Offset), 0, null, bOnlyEnabledDependencies);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDependents_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.VariantManagerContent.Variant> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetDependents_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.VariantManagerContent.Variant> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.VariantManagerContent.Variant> (1, ObjectMarshaller<UnrealSharp.VariantManagerContent.Variant>.ToNative, ObjectMarshaller<UnrealSharp.VariantManagerContent.Variant>.FromNative, GetDependents_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.VariantManagerContent.Variant>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManagerContent.Variant:GetDependency
    static readonly IntPtr GetDependency_NativeFunction;
    static readonly int GetDependency_ParamsSize;
    static readonly int GetDependency_Index_Offset;
    static readonly int GetDependency_ReturnValue_Offset;
    
    public UnrealSharp.VariantManagerContent.VariantDependency GetDependency(int index)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDependency_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetDependency_Index_Offset), 0, null, index);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDependency_NativeFunction, ParamsBuffer);
            
            UnrealSharp.VariantManagerContent.VariantDependency returnValue;
            returnValue = UnrealSharp.VariantManagerContent.VariantDependencyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetDependency_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/VariantManagerContent.Variant:GetActor
    static readonly IntPtr GetActor_NativeFunction;
    static readonly int GetActor_ParamsSize;
    static readonly int GetActor_ActorIndex_Offset;
    static readonly int GetActor_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Actor GetActor(int actorIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetActor_ActorIndex_Offset), 0, null, actorIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetActor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, GetActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
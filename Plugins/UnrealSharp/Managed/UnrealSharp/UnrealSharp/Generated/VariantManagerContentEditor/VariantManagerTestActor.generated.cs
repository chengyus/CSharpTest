// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.VariantManagerContentEditor;

[UClass]
public partial class VariantManagerTestActor : UnrealSharp.Engine.Actor
{
    
    static VariantManagerTestActor()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("VariantManagerTestActor");
        
        EnumWithNoDefault_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EnumWithNoDefault");
        EnumWithSecondDefault_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EnumWithSecondDefault");
        CapturedByteProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedByteProperty");
        CapturedIntProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedIntProperty");
        CapturedFloatProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedFloatProperty");
        bCapturedBoolProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCapturedBoolProperty");
        CapturedObjectProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedObjectProperty");
        CapturedNameProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedNameProperty");
        CapturedStrProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedStrProperty");
        CapturedStrProperty_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CapturedStrProperty");
        CapturedTextProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedTextProperty");
        CapturedTextProperty_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CapturedTextProperty");
        CapturedRotatorProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedRotatorProperty");
        CapturedColorProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedColorProperty");
        CapturedLinearColorProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedLinearColorProperty");
        CapturedVectorProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedVectorProperty");
        CapturedQuatProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedQuatProperty");
        CapturedVector4Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedVector4Property");
        CapturedVector2DProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedVector2DProperty");
        CapturedIntPointProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedIntPointProperty");
        CapturedUObjectArrayProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedUObjectArrayProperty");
        CapturedUObjectArrayProperty_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CapturedUObjectArrayProperty");
        CapturedVectorArrayProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapturedVectorArrayProperty");
        CapturedVectorArrayProperty_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CapturedVectorArrayProperty");
        
        
        
    }
    
    protected VariantManagerTestActor(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // EnumProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:EnumWithNoDefault
    static readonly int EnumWithNoDefault_Offset;
    
    public UnrealSharp.VariantManagerContentEditor.EVariantManagerTestEnum EnumWithNoDefault
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.VariantManagerContentEditor.EVariantManagerTestEnum>.FromNative(IntPtr.Add(NativeObject, EnumWithNoDefault_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.VariantManagerContentEditor.EVariantManagerTestEnum>.ToNative(IntPtr.Add(NativeObject, EnumWithNoDefault_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:EnumWithSecondDefault
    static readonly int EnumWithSecondDefault_Offset;
    
    public UnrealSharp.VariantManagerContentEditor.EVariantManagerTestEnum EnumWithSecondDefault
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.VariantManagerContentEditor.EVariantManagerTestEnum>.FromNative(IntPtr.Add(NativeObject, EnumWithSecondDefault_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.VariantManagerContentEditor.EVariantManagerTestEnum>.ToNative(IntPtr.Add(NativeObject, EnumWithSecondDefault_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedByteProperty
    static readonly int CapturedByteProperty_Offset;
    
    public byte CapturedByteProperty
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<byte>.FromNative(IntPtr.Add(NativeObject, CapturedByteProperty_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(NativeObject, CapturedByteProperty_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedIntProperty
    static readonly int CapturedIntProperty_Offset;
    
    public int CapturedIntProperty
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, CapturedIntProperty_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, CapturedIntProperty_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedFloatProperty
    static readonly int CapturedFloatProperty_Offset;
    
    public float CapturedFloatProperty
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CapturedFloatProperty_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CapturedFloatProperty_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:bCapturedBoolProperty
    static readonly int bCapturedBoolProperty_Offset;
    
    public bool bCapturedBoolProperty
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bCapturedBoolProperty_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bCapturedBoolProperty_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedObjectProperty
    static readonly int CapturedObjectProperty_Offset;
    
    public UnrealSharp.CoreUObject.Object CapturedObjectProperty
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(NativeObject, CapturedObjectProperty_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(NativeObject, CapturedObjectProperty_Offset), 0, this, value);
        }
    }
    
    // NameProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedNameProperty
    static readonly int CapturedNameProperty_Offset;
    
    public Name CapturedNameProperty
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, CapturedNameProperty_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, CapturedNameProperty_Offset), 0, this, value);
        }
    }
    
    // StrProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedStrProperty
    static readonly int CapturedStrProperty_Offset;
    static readonly IntPtr CapturedStrProperty_NativeProperty;
    
    public string CapturedStrProperty
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,CapturedStrProperty_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,CapturedStrProperty_Offset),0,this,value);
        }
    }
    
    // TextProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedTextProperty
    static readonly int CapturedTextProperty_Offset;
    static readonly IntPtr CapturedTextProperty_NativeProperty;
    TextMarshaller CapturedTextProperty_Wrapper;
    
    public Text CapturedTextProperty
    {
        get
        {
            if (CapturedTextProperty_Wrapper == null)
            {
                CapturedTextProperty_Wrapper  = new TextMarshaller(1);
            }
            return CapturedTextProperty_Wrapper.FromNative(this.NativeObject + CapturedTextProperty_Offset, 0, this);
        }
    }
    
    // StructProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedRotatorProperty
    static readonly int CapturedRotatorProperty_Offset;
    
    public UnrealSharp.Rotator CapturedRotatorProperty
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(NativeObject, CapturedRotatorProperty_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(NativeObject, CapturedRotatorProperty_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedColorProperty
    static readonly int CapturedColorProperty_Offset;
    
    public UnrealSharp.CoreUObject.Color CapturedColorProperty
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, CapturedColorProperty_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(NativeObject, CapturedColorProperty_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedLinearColorProperty
    static readonly int CapturedLinearColorProperty_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor CapturedLinearColorProperty
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, CapturedLinearColorProperty_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(NativeObject, CapturedLinearColorProperty_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedVectorProperty
    static readonly int CapturedVectorProperty_Offset;
    
    public System.DoubleNumerics.Vector3 CapturedVectorProperty
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, CapturedVectorProperty_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, CapturedVectorProperty_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedQuatProperty
    static readonly int CapturedQuatProperty_Offset;
    
    public System.DoubleNumerics.Quaternion CapturedQuatProperty
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(NativeObject, CapturedQuatProperty_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(NativeObject, CapturedQuatProperty_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedVector4Property
    static readonly int CapturedVector4Property_Offset;
    
    public System.DoubleNumerics.Vector4 CapturedVector4Property
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector4>.FromNative(IntPtr.Add(NativeObject, CapturedVector4Property_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(NativeObject, CapturedVector4Property_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedVector2DProperty
    static readonly int CapturedVector2DProperty_Offset;
    
    public System.DoubleNumerics.Vector2 CapturedVector2DProperty
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, CapturedVector2DProperty_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(NativeObject, CapturedVector2DProperty_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedIntPointProperty
    static readonly int CapturedIntPointProperty_Offset;
    
    public UnrealSharp.CoreUObject.IntPoint CapturedIntPointProperty
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(NativeObject, CapturedIntPointProperty_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(NativeObject, CapturedIntPointProperty_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedUObjectArrayProperty
    static readonly int CapturedUObjectArrayProperty_Offset;
    static readonly IntPtr CapturedUObjectArrayProperty_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.CoreUObject.Object> CapturedUObjectArrayProperty_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> CapturedUObjectArrayProperty
    {
        get
        {
            if(CapturedUObjectArrayProperty_Wrapper == null)
            {
                CapturedUObjectArrayProperty_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.CoreUObject.Object>(1, CapturedUObjectArrayProperty_NativeProperty, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative);
            }
            
            return CapturedUObjectArrayProperty_Wrapper.FromNative(IntPtr.Add(NativeObject,CapturedUObjectArrayProperty_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/VariantManagerContentEditor.VariantManagerTestActor:CapturedVectorArrayProperty
    static readonly int CapturedVectorArrayProperty_Offset;
    static readonly IntPtr CapturedVectorArrayProperty_NativeProperty;
    UnrealArrayReadWriteMarshaler<System.DoubleNumerics.Vector3> CapturedVectorArrayProperty_Wrapper = null;
    
    public System.Collections.Generic.IList<System.DoubleNumerics.Vector3> CapturedVectorArrayProperty
    {
        get
        {
            if(CapturedVectorArrayProperty_Wrapper == null)
            {
                CapturedVectorArrayProperty_Wrapper = new UnrealArrayReadWriteMarshaler<System.DoubleNumerics.Vector3>(1, CapturedVectorArrayProperty_NativeProperty, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative);
            }
            
            return CapturedVectorArrayProperty_Wrapper.FromNative(IntPtr.Add(NativeObject,CapturedVectorArrayProperty_Offset),0,this);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ViewportInteraction;

[UClass]
abstract public partial class ViewportInteractor : UnrealSharp.CoreUObject.Object
{
    
    static ViewportInteractor()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ViewportInteractor");
        
        
        SetHitResultGizmoFilterMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetHitResultGizmoFilterMode");
        SetHitResultGizmoFilterMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetHitResultGizmoFilterMode_NativeFunction);
        SetHitResultGizmoFilterMode_newFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHitResultGizmoFilterMode_NativeFunction, "newFilter");
        SetDraggingMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDraggingMode");
        SetDraggingMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDraggingMode_NativeFunction);
        SetDraggingMode_NewDraggingMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDraggingMode_NativeFunction, "NewDraggingMode");
        SetCanCarry_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCanCarry");
        SetCanCarry_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCanCarry_NativeFunction);
        SetCanCarry_bInCanCarry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCanCarry_NativeFunction, "bInCanCarry");
        IsHoveringOverGizmo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsHoveringOverGizmo");
        IsHoveringOverGizmo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsHoveringOverGizmo_NativeFunction);
        IsHoveringOverGizmo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsHoveringOverGizmo_NativeFunction, "ReturnValue");
        GetWorldInteraction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorldInteraction");
        GetWorldInteraction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorldInteraction_NativeFunction);
        GetWorldInteraction_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldInteraction_NativeFunction, "ReturnValue");
        GetTransformAndForwardVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTransformAndForwardVector");
        GetTransformAndForwardVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTransformAndForwardVector_NativeFunction);
        GetTransformAndForwardVector_OutHandTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAndForwardVector_NativeFunction, "OutHandTransform");
        GetTransformAndForwardVector_OutForwardVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAndForwardVector_NativeFunction, "OutForwardVector");
        GetTransformAndForwardVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAndForwardVector_NativeFunction, "ReturnValue");
        GetTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTransform");
        GetTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTransform_NativeFunction);
        GetTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransform_NativeFunction, "ReturnValue");
        GetRoomSpaceTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRoomSpaceTransform");
        GetRoomSpaceTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRoomSpaceTransform_NativeFunction);
        GetRoomSpaceTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRoomSpaceTransform_NativeFunction, "ReturnValue");
        GetOtherInteractor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOtherInteractor");
        GetOtherInteractor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOtherInteractor_NativeFunction);
        GetOtherInteractor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOtherInteractor_NativeFunction, "ReturnValue");
        GetLastTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLastTransform");
        GetLastTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLastTransform_NativeFunction);
        GetLastTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLastTransform_NativeFunction, "ReturnValue");
        GetLastRoomSpaceTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLastRoomSpaceTransform");
        GetLastRoomSpaceTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLastRoomSpaceTransform_NativeFunction);
        GetLastRoomSpaceTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLastRoomSpaceTransform_NativeFunction, "ReturnValue");
        GetLaserPointer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLaserPointer");
        GetLaserPointer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLaserPointer_NativeFunction);
        GetLaserPointer_LaserPointerStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLaserPointer_NativeFunction, "LaserPointerStart");
        GetLaserPointer_LaserPointerEnd_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLaserPointer_NativeFunction, "LaserPointerEnd");
        GetLaserPointer_bEvenIfBlocked_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLaserPointer_NativeFunction, "bEvenIfBlocked");
        GetLaserPointer_LaserLengthOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLaserPointer_NativeFunction, "LaserLengthOverride");
        GetLaserPointer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLaserPointer_NativeFunction, "ReturnValue");
        GetHoverLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHoverLocation");
        GetHoverLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHoverLocation_NativeFunction);
        GetHoverLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHoverLocation_NativeFunction, "ReturnValue");
        GetHitResultGizmoFilterMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHitResultGizmoFilterMode");
        GetHitResultGizmoFilterMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHitResultGizmoFilterMode_NativeFunction);
        GetHitResultGizmoFilterMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultGizmoFilterMode_NativeFunction, "ReturnValue");
        GetDraggingMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDraggingMode");
        GetDraggingMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDraggingMode_NativeFunction);
        GetDraggingMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDraggingMode_NativeFunction, "ReturnValue");
        CanCarry_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanCarry");
        CanCarry_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanCarry_NativeFunction);
        CanCarry_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanCarry_NativeFunction, "ReturnValue");
        
        IntPtr Tick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Tick");
        Tick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Tick_NativeFunction);
        Tick_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Tick_NativeFunction, "DeltaTime");
        
        IntPtr HandleInputKey_BP_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HandleInputKey_BP");
        HandleInputKey_BP_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HandleInputKey_BP_NativeFunction);
        HandleInputKey_BP_Action_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HandleInputKey_BP_NativeFunction, "Action");
        HandleInputKey_BP_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HandleInputKey_BP_NativeFunction, "Key");
        HandleInputKey_BP_Event_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HandleInputKey_BP_NativeFunction, "Event");
        HandleInputKey_BP_bOutWasHandled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HandleInputKey_BP_NativeFunction, "bOutWasHandled");
        
        IntPtr HandleInputAxis_BP_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HandleInputAxis_BP");
        HandleInputAxis_BP_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HandleInputAxis_BP_NativeFunction);
        HandleInputAxis_BP_Action_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HandleInputAxis_BP_NativeFunction, "Action");
        HandleInputAxis_BP_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HandleInputAxis_BP_NativeFunction, "Key");
        HandleInputAxis_BP_Delta_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HandleInputAxis_BP_NativeFunction, "Delta");
        HandleInputAxis_BP_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HandleInputAxis_BP_NativeFunction, "DeltaTime");
        HandleInputAxis_BP_bOutWasHandled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HandleInputAxis_BP_NativeFunction, "bOutWasHandled");
        
        
    }
    
    protected ViewportInteractor(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/ViewportInteraction.ViewportInteractor:SetHitResultGizmoFilterMode
    static readonly IntPtr SetHitResultGizmoFilterMode_NativeFunction;
    static readonly int SetHitResultGizmoFilterMode_ParamsSize;
    static readonly int SetHitResultGizmoFilterMode_newFilter_Offset;
    
    public void SetHitResultGizmoFilterMode(UnrealSharp.ViewportInteraction.EHitResultGizmoFilterMode newFilter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetHitResultGizmoFilterMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.ViewportInteraction.EHitResultGizmoFilterMode>.ToNative(IntPtr.Add(ParamsBuffer, SetHitResultGizmoFilterMode_newFilter_Offset), 0, null, newFilter);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetHitResultGizmoFilterMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:SetDraggingMode
    static readonly IntPtr SetDraggingMode_NativeFunction;
    static readonly int SetDraggingMode_ParamsSize;
    static readonly int SetDraggingMode_NewDraggingMode_Offset;
    
    public void SetDraggingMode(UnrealSharp.ViewportInteraction.EViewportInteractionDraggingMode newDraggingMode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDraggingMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.ViewportInteraction.EViewportInteractionDraggingMode>.ToNative(IntPtr.Add(ParamsBuffer, SetDraggingMode_NewDraggingMode_Offset), 0, null, newDraggingMode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDraggingMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:SetCanCarry
    static readonly IntPtr SetCanCarry_NativeFunction;
    static readonly int SetCanCarry_ParamsSize;
    static readonly int SetCanCarry_bInCanCarry_Offset;
    
    public void SetCanCarry(bool bInCanCarry)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCanCarry_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCanCarry_bInCanCarry_Offset), 0, null, bInCanCarry);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCanCarry_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:IsHoveringOverGizmo
    static readonly IntPtr IsHoveringOverGizmo_NativeFunction;
    static readonly int IsHoveringOverGizmo_ParamsSize;
    static readonly int IsHoveringOverGizmo_ReturnValue_Offset;
    
    public bool IsHoveringOverGizmo()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsHoveringOverGizmo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsHoveringOverGizmo_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsHoveringOverGizmo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:GetWorldInteraction
    static readonly IntPtr GetWorldInteraction_NativeFunction;
    static readonly int GetWorldInteraction_ParamsSize;
    static readonly int GetWorldInteraction_ReturnValue_Offset;
    
    public UnrealSharp.ViewportInteraction.ViewportWorldInteraction GetWorldInteraction()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorldInteraction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWorldInteraction_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ViewportInteraction.ViewportWorldInteraction returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.ViewportInteraction.ViewportWorldInteraction>.FromNative(IntPtr.Add(ParamsBuffer, GetWorldInteraction_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:GetTransformAndForwardVector
    static readonly IntPtr GetTransformAndForwardVector_NativeFunction;
    static readonly int GetTransformAndForwardVector_ParamsSize;
    static readonly int GetTransformAndForwardVector_OutHandTransform_Offset;
    static readonly int GetTransformAndForwardVector_OutForwardVector_Offset;
    static readonly int GetTransformAndForwardVector_ReturnValue_Offset;
    
    public bool GetTransformAndForwardVector(out UnrealSharp.Transform outHandTransform, out System.DoubleNumerics.Vector3 outForwardVector)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTransformAndForwardVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTransformAndForwardVector_NativeFunction, ParamsBuffer);
            
            outHandTransform = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetTransformAndForwardVector_OutHandTransform_Offset), 0, null);
            outForwardVector = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetTransformAndForwardVector_OutForwardVector_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetTransformAndForwardVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:GetTransform
    static readonly IntPtr GetTransform_NativeFunction;
    static readonly int GetTransform_ParamsSize;
    static readonly int GetTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetTransform()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:GetRoomSpaceTransform
    static readonly IntPtr GetRoomSpaceTransform_NativeFunction;
    static readonly int GetRoomSpaceTransform_ParamsSize;
    static readonly int GetRoomSpaceTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetRoomSpaceTransform()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRoomSpaceTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRoomSpaceTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetRoomSpaceTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:GetOtherInteractor
    static readonly IntPtr GetOtherInteractor_NativeFunction;
    static readonly int GetOtherInteractor_ParamsSize;
    static readonly int GetOtherInteractor_ReturnValue_Offset;
    
    public UnrealSharp.ViewportInteraction.ViewportInteractor GetOtherInteractor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOtherInteractor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOtherInteractor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ViewportInteraction.ViewportInteractor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.ViewportInteraction.ViewportInteractor>.FromNative(IntPtr.Add(ParamsBuffer, GetOtherInteractor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:GetLastTransform
    static readonly IntPtr GetLastTransform_NativeFunction;
    static readonly int GetLastTransform_ParamsSize;
    static readonly int GetLastTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetLastTransform()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLastTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLastTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetLastTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:GetLastRoomSpaceTransform
    static readonly IntPtr GetLastRoomSpaceTransform_NativeFunction;
    static readonly int GetLastRoomSpaceTransform_ParamsSize;
    static readonly int GetLastRoomSpaceTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetLastRoomSpaceTransform()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLastRoomSpaceTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLastRoomSpaceTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetLastRoomSpaceTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:GetLaserPointer
    static readonly IntPtr GetLaserPointer_NativeFunction;
    static readonly int GetLaserPointer_ParamsSize;
    static readonly int GetLaserPointer_LaserPointerStart_Offset;
    static readonly int GetLaserPointer_LaserPointerEnd_Offset;
    static readonly int GetLaserPointer_bEvenIfBlocked_Offset;
    static readonly int GetLaserPointer_LaserLengthOverride_Offset;
    static readonly int GetLaserPointer_ReturnValue_Offset;
    
    public bool GetLaserPointer(out System.DoubleNumerics.Vector3 laserPointerStart, out System.DoubleNumerics.Vector3 laserPointerEnd, bool bEvenIfBlocked = false, float laserLengthOverride = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLaserPointer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetLaserPointer_bEvenIfBlocked_Offset), 0, null, bEvenIfBlocked);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetLaserPointer_LaserLengthOverride_Offset), 0, null, laserLengthOverride);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLaserPointer_NativeFunction, ParamsBuffer);
            
            laserPointerStart = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLaserPointer_LaserPointerStart_Offset), 0, null);
            laserPointerEnd = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLaserPointer_LaserPointerEnd_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetLaserPointer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:GetHoverLocation
    static readonly IntPtr GetHoverLocation_NativeFunction;
    static readonly int GetHoverLocation_ParamsSize;
    static readonly int GetHoverLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetHoverLocation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHoverLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHoverLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetHoverLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:GetHitResultGizmoFilterMode
    static readonly IntPtr GetHitResultGizmoFilterMode_NativeFunction;
    static readonly int GetHitResultGizmoFilterMode_ParamsSize;
    static readonly int GetHitResultGizmoFilterMode_ReturnValue_Offset;
    
    public UnrealSharp.ViewportInteraction.EHitResultGizmoFilterMode GetHitResultGizmoFilterMode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHitResultGizmoFilterMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHitResultGizmoFilterMode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ViewportInteraction.EHitResultGizmoFilterMode returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.ViewportInteraction.EHitResultGizmoFilterMode>.FromNative(IntPtr.Add(ParamsBuffer, GetHitResultGizmoFilterMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:GetDraggingMode
    static readonly IntPtr GetDraggingMode_NativeFunction;
    static readonly int GetDraggingMode_ParamsSize;
    static readonly int GetDraggingMode_ReturnValue_Offset;
    
    public UnrealSharp.ViewportInteraction.EViewportInteractionDraggingMode GetDraggingMode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDraggingMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDraggingMode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ViewportInteraction.EViewportInteractionDraggingMode returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.ViewportInteraction.EViewportInteractionDraggingMode>.FromNative(IntPtr.Add(ParamsBuffer, GetDraggingMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:CanCarry
    static readonly IntPtr CanCarry_NativeFunction;
    static readonly int CanCarry_ParamsSize;
    static readonly int CanCarry_ReturnValue_Offset;
    
    public bool CanCarry()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanCarry_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanCarry_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanCarry_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:Tick
    IntPtr Tick_NativeFunction;
    static readonly int Tick_ParamsSize;
    static readonly int Tick_DeltaTime_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void Tick(float deltaTime)
    {
        unsafe
        {
            if (Tick_NativeFunction == IntPtr.Zero)
            {
                Tick_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Tick");
            }
            byte* ParamsBufferAllocation = stackalloc byte[Tick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Tick_DeltaTime_Offset), 0, null, deltaTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Tick_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void Tick_Implementation(float deltaTime)
    {
    }
    void Invoke_Tick(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float deltaTime = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, Tick_DeltaTime_Offset), 0, null);
            Tick_Implementation(deltaTime);
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:Shutdown
    IntPtr Shutdown_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void Shutdown()
    {
        unsafe
        {
            if (Shutdown_NativeFunction == IntPtr.Zero)
            {
                Shutdown_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Shutdown");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Shutdown_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void Shutdown_Implementation()
    {
    }
    void Invoke_Shutdown(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            Shutdown_Implementation();
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:HandleInputKey_BP
    IntPtr HandleInputKey_BP_NativeFunction;
    static readonly int HandleInputKey_BP_ParamsSize;
    static readonly int HandleInputKey_BP_Action_Offset;
    static readonly int HandleInputKey_BP_Key_Offset;
    static readonly int HandleInputKey_BP_Event_Offset;
    static readonly int HandleInputKey_BP_bOutWasHandled_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void HandleInputKey_BP(UnrealSharp.ViewportInteraction.ViewportActionKeyInput action, UnrealSharp.InputCore.Key key, UnrealSharp.Engine.EInputEvent @event, out bool bOutWasHandled)
    {
        unsafe
        {
            if (HandleInputKey_BP_NativeFunction == IntPtr.Zero)
            {
                HandleInputKey_BP_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "HandleInputKey_BP");
            }
            byte* ParamsBufferAllocation = stackalloc byte[HandleInputKey_BP_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ViewportInteraction.ViewportActionKeyInputMarshaler.ToNative(IntPtr.Add(ParamsBuffer, HandleInputKey_BP_Action_Offset), 0, null, action);
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, HandleInputKey_BP_Key_Offset), 0, null, key);
            BlittableMarshaller<UnrealSharp.Engine.EInputEvent>.ToNative(IntPtr.Add(ParamsBuffer, HandleInputKey_BP_Event_Offset), 0, null, @event);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HandleInputKey_BP_NativeFunction, ParamsBuffer);
            
            bOutWasHandled = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HandleInputKey_BP_bOutWasHandled_Offset), 0, null);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void HandleInputKey_BP_Implementation(UnrealSharp.ViewportInteraction.ViewportActionKeyInput action, UnrealSharp.InputCore.Key key, UnrealSharp.Engine.EInputEvent @event, out bool bOutWasHandled)
    {
        bOutWasHandled = default(bool);
    }
    void Invoke_HandleInputKey_BP(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ViewportInteraction.ViewportActionKeyInput action = UnrealSharp.ViewportInteraction.ViewportActionKeyInputMarshaler.FromNative(IntPtr.Add(buffer, HandleInputKey_BP_Action_Offset), 0, null);
            UnrealSharp.InputCore.Key key = UnrealSharp.InputCore.KeyMarshaler.FromNative(IntPtr.Add(buffer, HandleInputKey_BP_Key_Offset), 0, null);
            UnrealSharp.Engine.EInputEvent @event = BlittableMarshaller<UnrealSharp.Engine.EInputEvent>.FromNative(IntPtr.Add(buffer, HandleInputKey_BP_Event_Offset), 0, null);
            bool bOutWasHandled = default;
            HandleInputKey_BP_Implementation(action, key, @event, out bOutWasHandled);
            BoolMarshaller.ToNative(IntPtr.Add(buffer, HandleInputKey_BP_bOutWasHandled_Offset), 0, null, bOutWasHandled);
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportInteractor:HandleInputAxis_BP
    IntPtr HandleInputAxis_BP_NativeFunction;
    static readonly int HandleInputAxis_BP_ParamsSize;
    static readonly int HandleInputAxis_BP_Action_Offset;
    static readonly int HandleInputAxis_BP_Key_Offset;
    static readonly int HandleInputAxis_BP_Delta_Offset;
    static readonly int HandleInputAxis_BP_DeltaTime_Offset;
    static readonly int HandleInputAxis_BP_bOutWasHandled_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void HandleInputAxis_BP(UnrealSharp.ViewportInteraction.ViewportActionKeyInput action, UnrealSharp.InputCore.Key key, float delta, float deltaTime, out bool bOutWasHandled)
    {
        unsafe
        {
            if (HandleInputAxis_BP_NativeFunction == IntPtr.Zero)
            {
                HandleInputAxis_BP_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "HandleInputAxis_BP");
            }
            byte* ParamsBufferAllocation = stackalloc byte[HandleInputAxis_BP_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ViewportInteraction.ViewportActionKeyInputMarshaler.ToNative(IntPtr.Add(ParamsBuffer, HandleInputAxis_BP_Action_Offset), 0, null, action);
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, HandleInputAxis_BP_Key_Offset), 0, null, key);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, HandleInputAxis_BP_Delta_Offset), 0, null, delta);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, HandleInputAxis_BP_DeltaTime_Offset), 0, null, deltaTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HandleInputAxis_BP_NativeFunction, ParamsBuffer);
            
            bOutWasHandled = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HandleInputAxis_BP_bOutWasHandled_Offset), 0, null);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void HandleInputAxis_BP_Implementation(UnrealSharp.ViewportInteraction.ViewportActionKeyInput action, UnrealSharp.InputCore.Key key, float delta, float deltaTime, out bool bOutWasHandled)
    {
        bOutWasHandled = default(bool);
    }
    void Invoke_HandleInputAxis_BP(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ViewportInteraction.ViewportActionKeyInput action = UnrealSharp.ViewportInteraction.ViewportActionKeyInputMarshaler.FromNative(IntPtr.Add(buffer, HandleInputAxis_BP_Action_Offset), 0, null);
            UnrealSharp.InputCore.Key key = UnrealSharp.InputCore.KeyMarshaler.FromNative(IntPtr.Add(buffer, HandleInputAxis_BP_Key_Offset), 0, null);
            float delta = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, HandleInputAxis_BP_Delta_Offset), 0, null);
            float deltaTime = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, HandleInputAxis_BP_DeltaTime_Offset), 0, null);
            bool bOutWasHandled = default;
            HandleInputAxis_BP_Implementation(action, key, delta, deltaTime, out bOutWasHandled);
            BoolMarshaller.ToNative(IntPtr.Add(buffer, HandleInputAxis_BP_bOutWasHandled_Offset), 0, null, bOutWasHandled);
        }
    }
    
    
}
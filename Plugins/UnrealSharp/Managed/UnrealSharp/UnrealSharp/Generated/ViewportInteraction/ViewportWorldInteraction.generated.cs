// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ViewportInteraction;

[UClass]
public partial class ViewportWorldInteraction : UnrealSharp.UnrealEd.EditorWorldExtension
{
    
    static ViewportWorldInteraction()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ViewportWorldInteraction");
        
        
        SetWorldToMetersScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWorldToMetersScale");
        SetWorldToMetersScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWorldToMetersScale_NativeFunction);
        SetWorldToMetersScale_NewWorldToMetersScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWorldToMetersScale_NativeFunction, "NewWorldToMetersScale");
        SetWorldToMetersScale_bCompensateRoomWorldScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWorldToMetersScale_NativeFunction, "bCompensateRoomWorldScale");
        SetRoomTransformForNextFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRoomTransformForNextFrame");
        SetRoomTransformForNextFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRoomTransformForNextFrame_NativeFunction);
        SetRoomTransformForNextFrame_NewRoomTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRoomTransformForNextFrame_NativeFunction, "NewRoomTransform");
        SetHeadTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetHeadTransform");
        SetHeadTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetHeadTransform_NativeFunction);
        SetHeadTransform_NewHeadTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHeadTransform_NativeFunction, "NewHeadTransform");
        RemoveInteractor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveInteractor");
        RemoveInteractor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveInteractor_NativeFunction);
        RemoveInteractor_Interactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveInteractor_NativeFunction, "Interactor");
        GetWorldScaleFactor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorldScaleFactor");
        GetWorldScaleFactor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorldScaleFactor_NativeFunction);
        GetWorldScaleFactor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldScaleFactor_NativeFunction, "ReturnValue");
        GetTransformGizmoActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTransformGizmoActor");
        GetTransformGizmoActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTransformGizmoActor_NativeFunction);
        GetTransformGizmoActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformGizmoActor_NativeFunction, "ReturnValue");
        GetRoomTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRoomTransform");
        GetRoomTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRoomTransform_NativeFunction);
        GetRoomTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRoomTransform_NativeFunction, "ReturnValue");
        GetRoomSpaceHeadTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRoomSpaceHeadTransform");
        GetRoomSpaceHeadTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRoomSpaceHeadTransform_NativeFunction);
        GetRoomSpaceHeadTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRoomSpaceHeadTransform_NativeFunction, "ReturnValue");
        GetInteractors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInteractors");
        GetInteractors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInteractors_NativeFunction);
        GetInteractors_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInteractors_NativeFunction, "ReturnValue");
        GetInteractors_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetInteractors_NativeFunction, "ReturnValue");
        GetHeadTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHeadTransform");
        GetHeadTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHeadTransform_NativeFunction);
        GetHeadTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHeadTransform_NativeFunction, "ReturnValue");
        AddInteractor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddInteractor");
        AddInteractor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddInteractor_NativeFunction);
        AddInteractor_Interactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInteractor_NativeFunction, "Interactor");
        AddActorToExcludeFromHitTests_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddActorToExcludeFromHitTests");
        AddActorToExcludeFromHitTests_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddActorToExcludeFromHitTests_NativeFunction);
        AddActorToExcludeFromHitTests_ActorToExcludeFromHitTests_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddActorToExcludeFromHitTests_NativeFunction, "ActorToExcludeFromHitTests");
        
        
    }
    
    protected ViewportWorldInteraction(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/ViewportInteraction.ViewportWorldInteraction:SetWorldToMetersScale
    static readonly IntPtr SetWorldToMetersScale_NativeFunction;
    static readonly int SetWorldToMetersScale_ParamsSize;
    static readonly int SetWorldToMetersScale_NewWorldToMetersScale_Offset;
    static readonly int SetWorldToMetersScale_bCompensateRoomWorldScale_Offset;
    
    public void SetWorldToMetersScale(float newWorldToMetersScale, bool bCompensateRoomWorldScale = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWorldToMetersScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetWorldToMetersScale_NewWorldToMetersScale_Offset), 0, null, newWorldToMetersScale);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetWorldToMetersScale_bCompensateRoomWorldScale_Offset), 0, null, bCompensateRoomWorldScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWorldToMetersScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportWorldInteraction:SetRoomTransformForNextFrame
    static readonly IntPtr SetRoomTransformForNextFrame_NativeFunction;
    static readonly int SetRoomTransformForNextFrame_ParamsSize;
    static readonly int SetRoomTransformForNextFrame_NewRoomTransform_Offset;
    
    public void SetRoomTransformForNextFrame(UnrealSharp.Transform newRoomTransform)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRoomTransformForNextFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetRoomTransformForNextFrame_NewRoomTransform_Offset), 0, null, newRoomTransform);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRoomTransformForNextFrame_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportWorldInteraction:SetHeadTransform
    static readonly IntPtr SetHeadTransform_NativeFunction;
    static readonly int SetHeadTransform_ParamsSize;
    static readonly int SetHeadTransform_NewHeadTransform_Offset;
    
    public void SetHeadTransform(UnrealSharp.Transform newHeadTransform)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetHeadTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetHeadTransform_NewHeadTransform_Offset), 0, null, newHeadTransform);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetHeadTransform_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportWorldInteraction:RemoveInteractor
    static readonly IntPtr RemoveInteractor_NativeFunction;
    static readonly int RemoveInteractor_ParamsSize;
    static readonly int RemoveInteractor_Interactor_Offset;
    
    public void RemoveInteractor(UnrealSharp.ViewportInteraction.ViewportInteractor interactor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveInteractor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ViewportInteraction.ViewportInteractor>.ToNative(IntPtr.Add(ParamsBuffer, RemoveInteractor_Interactor_Offset), 0, null, interactor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveInteractor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportWorldInteraction:GetWorldScaleFactor
    static readonly IntPtr GetWorldScaleFactor_NativeFunction;
    static readonly int GetWorldScaleFactor_ParamsSize;
    static readonly int GetWorldScaleFactor_ReturnValue_Offset;
    
    public float GetWorldScaleFactor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorldScaleFactor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWorldScaleFactor_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetWorldScaleFactor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportWorldInteraction:GetTransformGizmoActor
    static readonly IntPtr GetTransformGizmoActor_NativeFunction;
    static readonly int GetTransformGizmoActor_ParamsSize;
    static readonly int GetTransformGizmoActor_ReturnValue_Offset;
    
    public UnrealSharp.ViewportInteraction.BaseTransformGizmo GetTransformGizmoActor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTransformGizmoActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTransformGizmoActor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ViewportInteraction.BaseTransformGizmo returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.ViewportInteraction.BaseTransformGizmo>.FromNative(IntPtr.Add(ParamsBuffer, GetTransformGizmoActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportWorldInteraction:GetRoomTransform
    static readonly IntPtr GetRoomTransform_NativeFunction;
    static readonly int GetRoomTransform_ParamsSize;
    static readonly int GetRoomTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetRoomTransform()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRoomTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRoomTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetRoomTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportWorldInteraction:GetRoomSpaceHeadTransform
    static readonly IntPtr GetRoomSpaceHeadTransform_NativeFunction;
    static readonly int GetRoomSpaceHeadTransform_ParamsSize;
    static readonly int GetRoomSpaceHeadTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetRoomSpaceHeadTransform()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRoomSpaceHeadTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRoomSpaceHeadTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetRoomSpaceHeadTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportWorldInteraction:GetInteractors
    static readonly IntPtr GetInteractors_NativeFunction;
    static readonly int GetInteractors_ParamsSize;
    static readonly int GetInteractors_ReturnValue_Offset;
    static readonly int GetInteractors_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ViewportInteraction.ViewportInteractor> GetInteractors()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInteractors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInteractors_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ViewportInteraction.ViewportInteractor> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetInteractors_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ViewportInteraction.ViewportInteractor> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ViewportInteraction.ViewportInteractor> (1, ObjectMarshaller<UnrealSharp.ViewportInteraction.ViewportInteractor>.ToNative, ObjectMarshaller<UnrealSharp.ViewportInteraction.ViewportInteractor>.FromNative, GetInteractors_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ViewportInteraction.ViewportInteractor>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportWorldInteraction:GetHeadTransform
    static readonly IntPtr GetHeadTransform_NativeFunction;
    static readonly int GetHeadTransform_ParamsSize;
    static readonly int GetHeadTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetHeadTransform()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHeadTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHeadTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetHeadTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportWorldInteraction:AddInteractor
    static readonly IntPtr AddInteractor_NativeFunction;
    static readonly int AddInteractor_ParamsSize;
    static readonly int AddInteractor_Interactor_Offset;
    
    public void AddInteractor(UnrealSharp.ViewportInteraction.ViewportInteractor interactor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddInteractor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ViewportInteraction.ViewportInteractor>.ToNative(IntPtr.Add(ParamsBuffer, AddInteractor_Interactor_Offset), 0, null, interactor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddInteractor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ViewportInteraction.ViewportWorldInteraction:AddActorToExcludeFromHitTests
    static readonly IntPtr AddActorToExcludeFromHitTests_NativeFunction;
    static readonly int AddActorToExcludeFromHitTests_ParamsSize;
    static readonly int AddActorToExcludeFromHitTests_ActorToExcludeFromHitTests_Offset;
    
    public void AddActorToExcludeFromHitTests(UnrealSharp.Engine.Actor actorToExcludeFromHitTests)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddActorToExcludeFromHitTests_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, AddActorToExcludeFromHitTests_ActorToExcludeFromHitTests_Offset), 0, null, actorToExcludeFromHitTests);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddActorToExcludeFromHitTests_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}